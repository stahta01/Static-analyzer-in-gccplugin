
;; Function update_tree_entry_internal (update_tree_entry_internal, funcdef_no=1, decl_uid=1976, cgraph_uid=1, symbol_order=2)



 local analysis of update_tree_entry_internal
   scanning: buf_12 = desc_11(D)->buffer;
    Indirect ref read is not const
  scanning: _1 = desc_11(D)->entry.oid;
    Indirect ref read is not const
  scanning: end_13 = &MEM[(void *)_1 + 20B];
  scanning: _3 = desc_11(D)->size;
    Indirect ref read is not const
  scanning: size_14 = (long unsigned int) _3;
  scanning: end.0_4 = (long int) end_13;
  scanning: buf.1_5 = (long int) buf_12;
  scanning: _6 = end.0_4 - buf.1_5;
  scanning: len_15 = (long unsigned int) _6;
  scanning: if (size_14 < len_15)
  scanning: printf ("too-short tree file%s", buf_12);
  scanning: exit (1);
  scanning: size_17 = size_14 - len_15;
  scanning: desc_11(D)->buffer = end_13;
    Indirect ref write is not const/pure
  scanning: _7 = (unsigned int) size_17;
  scanning: desc_11(D)->size = _7;
    Indirect ref write is not const/pure
  scanning: if (size_17 != 0)
  scanning: tmp_23 = decode_tree_entry (desc_11(D), end_13, size_17, err_21(D));
  scanning: return _8;
Function is locally looping.
Function can locally free.
update_tree_entry_internal (struct tree_desc * desc, struct strbuf * err)
{
  int tmp;
  long unsigned int len;
  long unsigned int size;
  const unsigned char * end;
  const void * buf;
  const struct object_id * _1;
  unsigned int _3;
  long int end.0_4;
  long int buf.1_5;
  long int _6;
  unsigned int _7;
  int _8;

  <bb 2> [100.00%]:
  buf_12 = desc_11(D)->buffer;
  _1 = desc_11(D)->entry.oid;
  end_13 = &MEM[(void *)_1 + 20B];
  _3 = desc_11(D)->size;
  size_14 = (long unsigned int) _3;
  end.0_4 = (long int) end_13;
  buf.1_5 = (long int) buf_12;
  _6 = end.0_4 - buf.1_5;
  len_15 = (long unsigned int) _6;
  if (size_14 < len_15)
    goto <bb 3>; [0.04%]
  else
    goto <bb 4>; [99.96%]

  <bb 3> [0.04%]:
  printf ("too-short tree file%s", buf_12);
  exit (1);

  <bb 4> [99.96%]:
  size_17 = size_14 - len_15;
  desc_11(D)->buffer = end_13;
  _7 = (unsigned int) size_17;
  desc_11(D)->size = _7;
  if (size_17 != 0)
    goto <bb 5>; [36.64%]
  else
    goto <bb 6>; [63.36%]

  <bb 5> [36.63%]:
  tmp_23 = decode_tree_entry (desc_11(D), end_13, size_17, err_21(D));

  <bb 6> [99.96%]:
  # _8 = PHI <tmp_23(5), 0(4)>
  return _8;

}



;; Function init_tree_desc_internal (init_tree_desc_internal, funcdef_no=6, decl_uid=2030, cgraph_uid=6, symbol_order=7)



 local analysis of init_tree_desc_internal
   scanning: desc_5(D)->buffer = buffer_6(D);
    Indirect ref write is not const/pure
  scanning: _1 = (unsigned int) size_8(D);
  scanning: desc_5(D)->size = _1;
    Indirect ref write is not const/pure
  scanning: if (size_8(D) != 0)
  scanning: tmp_13 = decode_tree_entry (desc_5(D), buffer_6(D), size_8(D), err_11(D));
  scanning: return _2;
Function is locally looping.
init_tree_desc_internal (struct tree_desc * desc, const void * buffer, long unsigned int size, struct strbuf * err)
{
  int tmp;
  unsigned int _1;
  int _2;

  <bb 2> [100.00%]:
  desc_5(D)->buffer = buffer_6(D);
  _1 = (unsigned int) size_8(D);
  desc_5(D)->size = _1;
  if (size_8(D) != 0)
    goto <bb 3>; [36.64%]
  else
    goto <bb 4>; [63.36%]

  <bb 3> [36.64%]:
  tmp_13 = decode_tree_entry (desc_5(D), buffer_6(D), size_8(D), err_11(D));

  <bb 4> [100.00%]:
  # _2 = PHI <tmp_13(3), 0(2)>
  return _2;

}



;; Function xrealloc (xrealloc, funcdef_no=0, decl_uid=1963, cgraph_uid=0, symbol_order=0)



 local analysis of xrealloc
   scanning: ret_11 = realloc (ptr_8(D), size_9(D));
  scanning: if (ret_11 == 0B)
  scanning: if (size_9(D) == 0)
  scanning: ret_13 = realloc (ptr_8(D), 1);
  scanning: if (ret_1 == 0B)
  scanning: ret_15 = realloc (ptr_8(D), size_9(D));
  scanning: if (ret_15 == 0B)
  scanning: if (size_9(D) == 0)
  scanning: ret_17 = realloc (ptr_8(D), 1);
  scanning: if (ret_2 == 0B)
  scanning: printf ("Out of memory, realloc failed%s", "");
  scanning: exit (1);
  scanning: _20 = ret_3;
  scanning: return ret_3;
Function is locally looping.
Function can locally free.
xrealloc (void * ptr, size_t size)
{
  void * ret;
  void * _20;

  <bb 2> [100.00%]:
  ret_11 = realloc (ptr_8(D), size_9(D));
  if (ret_11 == 0B)
    goto <bb 3>; [30.00%]
  else
    goto <bb 5>; [70.00%]

  <bb 3> [30.00%]:
  if (size_9(D) == 0)
    goto <bb 4>; [33.00%]
  else
    goto <bb 5>; [67.00%]

  <bb 4> [9.90%]:
  ret_13 = realloc (ptr_8(D), 1);

  <bb 5> [100.00%]:
  # ret_1 = PHI <ret_11(2), ret_11(3), ret_13(4)>
  if (ret_1 == 0B)
    goto <bb 6>; [19.86%]
  else
    goto <bb 11>; [80.14%]

  <bb 6> [19.86%]:
  ret_15 = realloc (ptr_8(D), size_9(D));
  if (ret_15 == 0B)
    goto <bb 7>; [30.00%]
  else
    goto <bb 9>; [70.00%]

  <bb 7> [5.96%]:
  if (size_9(D) == 0)
    goto <bb 8>; [33.00%]
  else
    goto <bb 9>; [67.00%]

  <bb 8> [1.97%]:
  ret_17 = realloc (ptr_8(D), 1);

  <bb 9> [19.86%]:
  # ret_2 = PHI <ret_15(6), ret_15(7), ret_17(8)>
  if (ret_2 == 0B)
    goto <bb 10>; [0.04%]
  else
    goto <bb 11>; [99.96%]

  <bb 10> [0.01%]:
  printf ("Out of memory, realloc failed%s", "");
  exit (1);

  <bb 11> [99.99%]:
  # ret_3 = PHI <ret_1(5), ret_2(9)>
  _20 = ret_3;
  return ret_3;

}



;; Function update_tree_entry (update_tree_entry, funcdef_no=2, decl_uid=1985, cgraph_uid=2, symbol_order=3)



 local analysis of update_tree_entry
   scanning: err.alloc = 0;
  scanning: err.len = 0;
  scanning: err.buf = &strbuf_slopbuf;
  scanning: tmp_8 = update_tree_entry_internal (desc_6(D), &err);
  scanning: if (tmp_8 != 0)
  scanning: _1 = err.buf;
  scanning: printf ("%s", _1);
  scanning: exit (1);
  scanning: strbuf_release (&err);
  scanning: err ={v} {CLOBBER};
  scanning: return;
Function is locally looping.
Function can locally free.
update_tree_entry (struct tree_desc * desc)
{
  int tmp;
  struct strbuf err;
  char * _1;

  <bb 2> [100.00%]:
  err.alloc = 0;
  err.len = 0;
  err.buf = &strbuf_slopbuf;
  tmp_8 = update_tree_entry_internal (desc_6(D), &err);
  if (tmp_8 != 0)
    goto <bb 3>; [0.04%]
  else
    goto <bb 4>; [99.96%]

  <bb 3> [0.04%]:
  _1 = err.buf;
  printf ("%s", _1);
  exit (1);

  <bb 4> [99.96%]:
  strbuf_release (&err);
  err ={v} {CLOBBER};
  return;

}



;; Function extended_entry_extract (extended_entry_extract, funcdef_no=3, decl_uid=1995, cgraph_uid=3, symbol_order=4)



 local analysis of extended_entry_extract
   scanning: _1 = t_12(D)->d.size;
    Indirect ref read is not const
  scanning: if (_1 == 0)
  scanning: entry_clear (a_13(D));
  scanning: _2 = &t_12(D)->d;
  scanning: entry_extract (_2, a_13(D));
  scanning: skip_15 = t_12(D)->skip;
    Indirect ref read is not const
  scanning: _3 = a_13(D)->path;
    Indirect ref read is not const
  scanning: _4 = (long unsigned int) _3;
  scanning: _5 = skip_8->ptr;
    Indirect ref read is not const
  scanning: _6 = (long unsigned int) _5;
  scanning: if (_4 == _6)
  scanning: skip_16 = skip_8->prev;
    Indirect ref read is not const
  scanning: if (skip_8 != 0B)
  scanning: if (skip_8 == 0B)
  scanning: _7 = &t_12(D)->d;
  scanning: update_tree_entry (_7);
  scanning: return;
Function is locally looping.
extended_entry_extract (struct tree_desc_x * t, struct name_entry * a, const char * first, int first_len)
{
  struct tree_desc_skip * skip;
  unsigned int _1;
  struct tree_desc * _2;
  const char * _3;
  long unsigned int _4;
  const void * _5;
  long unsigned int _6;
  struct tree_desc * _7;

  <bb 11> [2.25%]:

  <bb 2> [15.61%]:
  _1 = t_12(D)->d.size;
  if (_1 == 0)
    goto <bb 3>; [7.50%]
  else
    goto <bb 4>; [92.50%]

  <bb 3> [1.17%]:
  entry_clear (a_13(D));
  goto <bb 10>; [100.00%]

  <bb 4> [14.44%]:
  _2 = &t_12(D)->d;
  entry_extract (_2, a_13(D));
  skip_15 = t_12(D)->skip;
  goto <bb 7>; [100.00%]

  <bb 5> [92.50%]:
  _3 = a_13(D)->path;
  _4 = (long unsigned int) _3;
  _5 = skip_8->ptr;
  _6 = (long unsigned int) _5;
  if (_4 == _6)
    goto <bb 8>; [7.50%]
  else
    goto <bb 6>; [92.50%]

  <bb 6> [85.56%]:
  skip_16 = skip_8->prev;

  <bb 7> [100.00%]:
  # skip_8 = PHI <skip_15(4), skip_16(6)>
  if (skip_8 != 0B)
    goto <bb 5>; [92.50%]
  else
    goto <bb 8>; [7.50%]

  <bb 8> [14.44%]:
  if (skip_8 == 0B)
    goto <bb 10>; [7.50%]
  else
    goto <bb 9>; [92.50%]

  <bb 9> [13.35%]:
  _7 = &t_12(D)->d;
  update_tree_entry (_7);
  goto <bb 2>; [100.00%]

  <bb 10> [2.25%]:
  return;

}



;; Function traverse_trees (traverse_trees, funcdef_no=4, decl_uid=2006, cgraph_uid=4, symbol_order=5)



 local analysis of traverse_trees
   scanning: _1 = (long unsigned int) n___0_19(D);
  scanning: tmp_22 = calloc (_1, 48);
  scanning: tx_23 = tmp_22;
  scanning: _2 = (long unsigned int) n___0_19(D);
  scanning: _3 = _2 * 24;
  scanning: tmp___0_25 = malloc (_3);
  scanning: entry_26 = tmp___0_25;
  scanning: _4 = (long unsigned int) i_15;
  scanning: _5 = _4 * 40;
  scanning: _6 = t_35(D) + _5;
  scanning: _7 = (long unsigned int) i_15;
  scanning: _8 = _7 * 48;
  scanning: _9 = tmp_22 + _8;
  scanning: _9->d = *_6;
    Indirect ref write is not const/pure
    Indirect ref read is not const
  scanning: i_37 = i_15 + 1;
  scanning: if (i_15 < n___0_19(D))
  scanning: _10 = (long unsigned int) i_16;
  scanning: _11 = _10 * 24;
  scanning: e_32 = tmp___0_25 + _11;
  scanning: _12 = (long unsigned int) i_16;
  scanning: _13 = _12 * 48;
  scanning: _14 = tmp_22 + _13;
  scanning: extended_entry_extract (_14, e_32, 0B, 0);
  scanning: i_34 = i_16 + 1;
  scanning: if (i_16 < n___0_19(D))
  scanning: free (tx_23);
  scanning: return 1;
Function is locally looping.
Function can locally free.
traverse_trees (int n, struct tree_desc * t, struct traverse_info * info)
{
  struct name_entry * e;
  void * tmp___0;
  struct name_entry * entry;
  void * tmp;
  struct tree_desc_x * tx;
  int n___0;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  struct tree_desc * _6;
  long unsigned int _7;
  long unsigned int _8;
  struct tree_desc_x * _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  struct tree_desc_x * _14;

  <bb 2> [15.00%]:
  _1 = (long unsigned int) n___0_19(D);
  tmp_22 = calloc (_1, 48);
  tx_23 = tmp_22;
  _2 = (long unsigned int) n___0_19(D);
  _3 = _2 * 24;
  tmp___0_25 = malloc (_3);
  entry_26 = tmp___0_25;
  goto <bb 4>; [100.00%]

  <bb 3> [85.00%]:
  _4 = (long unsigned int) i_15;
  _5 = _4 * 40;
  _6 = t_35(D) + _5;
  _7 = (long unsigned int) i_15;
  _8 = _7 * 48;
  _9 = tmp_22 + _8;
  _9->d = *_6;
  i_37 = i_15 + 1;

  <bb 4> [100.00%]:
  # i_15 = PHI <0(2), i_37(3)>
  if (i_15 < n___0_19(D))
    goto <bb 3>; [85.00%]
  else
    goto <bb 8>; [15.00%]

  <bb 8> [15.00%]:
  goto <bb 6>; [100.00%]

  <bb 5> [85.00%]:
  _10 = (long unsigned int) i_16;
  _11 = _10 * 24;
  e_32 = tmp___0_25 + _11;
  _12 = (long unsigned int) i_16;
  _13 = _12 * 48;
  _14 = tmp_22 + _13;
  extended_entry_extract (_14, e_32, 0B, 0);
  i_34 = i_16 + 1;

  <bb 6> [100.00%]:
  # i_16 = PHI <0(8), i_34(5)>
  if (i_16 < n___0_19(D))
    goto <bb 5>; [85.00%]
  else
    goto <bb 7>; [15.00%]

  <bb 7> [15.00%]:
  free (tx_23);
  return 1;

}



;; Function unpack_trees (unpack_trees, funcdef_no=5, decl_uid=2024, cgraph_uid=5, symbol_order=6)



 local analysis of unpack_trees
   scanning: len.2_1 = (int) len_2(D);
  scanning: traverse_trees (len.2_1, t_4(D), 0B);
  scanning: return 0;
Function is locally looping.
unpack_trees (unsigned int len, struct tree_desc * t, struct unpack_trees_options * o)
{
  int len.2_1;

  <bb 2> [100.00%]:
  len.2_1 = (int) len_2(D);
  traverse_trees (len.2_1, t_4(D), 0B);
  return 0;

}



;; Function init_tree_desc (init_tree_desc, funcdef_no=7, decl_uid=2036, cgraph_uid=7, symbol_order=8)



 local analysis of init_tree_desc
   scanning: err.alloc = 0;
  scanning: err.len = 0;
  scanning: err.buf = &strbuf_slopbuf;
  scanning: tmp_10 = init_tree_desc_internal (desc_6(D), buffer_7(D), size_8(D), &err);
  scanning: if (tmp_10 != 0)
  scanning: _1 = err.buf;
  scanning: printf ("%s", _1);
  scanning: exit (1);
  scanning: strbuf_release (&err);
  scanning: err ={v} {CLOBBER};
  scanning: return;
Function is locally looping.
Function can locally free.
init_tree_desc (struct tree_desc * desc, const void * buffer, long unsigned int size)
{
  int tmp;
  struct strbuf err;
  char * _1;

  <bb 2> [100.00%]:
  err.alloc = 0;
  err.len = 0;
  err.buf = &strbuf_slopbuf;
  tmp_10 = init_tree_desc_internal (desc_6(D), buffer_7(D), size_8(D), &err);
  if (tmp_10 != 0)
    goto <bb 3>; [0.04%]
  else
    goto <bb 4>; [99.96%]

  <bb 3> [0.04%]:
  _1 = err.buf;
  printf ("%s", _1);
  exit (1);

  <bb 4> [99.96%]:
  strbuf_release (&err);
  err ={v} {CLOBBER};
  return;

}



;; Function fill_tree_descriptor (fill_tree_descriptor, funcdef_no=8, decl_uid=2043, cgraph_uid=8, symbol_order=9)



 local analysis of fill_tree_descriptor
   scanning: if (oid_5(D) != 0B)
  scanning: buf_8 = malloc (100);
  scanning: if (buf_8 == 0B)
  scanning: tmp_10 = oid_to_hex (oid_5(D));
  scanning: printf ("unable to read tree %s", tmp_10);
  scanning: exit (1);
  scanning: init_tree_desc (desc_13(D), buf_1, 0);
  scanning: return;
Function is locally looping.
Function can locally free.
fill_tree_descriptor (struct tree_desc * desc, const struct object_id * oid)
{
  int tmp;
  void * buf;
  long unsigned int size;

  <bb 2> [100.00%]:
  if (oid_5(D) != 0B)
    goto <bb 3>; [73.26%]
  else
    goto <bb 5>; [26.74%]

  <bb 3> [73.26%]:
  buf_8 = malloc (100);
  if (buf_8 == 0B)
    goto <bb 4>; [0.04%]
  else
    goto <bb 5>; [99.96%]

  <bb 4> [0.03%]:
  tmp_10 = oid_to_hex (oid_5(D));
  printf ("unable to read tree %s", tmp_10);
  exit (1);

  <bb 5> [99.97%]:
  # buf_1 = PHI <0B(2), buf_8(3)>
  init_tree_desc (desc_13(D), buf_1, 0);
  return;

}



;; Function reset_index (reset_index, funcdef_no=9, decl_uid=2058, cgraph_uid=9, symbol_order=10)



 local analysis of reset_index
   scanning: memset (&opts, 0, 640);
  scanning: opts.head_idx = 1;
  scanning: opts.src_index = &the_index;
  scanning: opts.dst_index = &the_index;
  scanning: opts.fn = oneway_merge;
  scanning: opts.merge = 1;
  scanning: if (quiet_27(D) == 0)
  scanning: opts.verbose_update = 1;
  scanning: switch (reset_type_29(D)) <default: <L5> [33.33%], case 2: <L4> [33.33%], case 3 ... 4: <L2> [33.33%]>
  scanning: <L2> [33.33%]:
  scanning: opts.update = 1;
  scanning: <L4> [33.33%]:
  scanning: opts.update = 1;
  scanning: <L5> [66.66%]:
  scanning: opts.reset = 1;
  scanning: read_cache_unmerged ();
  scanning: if (reset_type_29(D) == 4)
  scanning: tmp___1_35 = get_oid ("HEAD", &head_oid);
  scanning: if (tmp___1_35 != 0)
  scanning: tmp_40 = _ ("You do not have a valid HEAD.");
  scanning: tmp___0_42 = error (tmp_40);
  scanning: fill_tree_descriptor (&desc, &head_oid);
  scanning: opts.fn = twoway_merge;
  scanning: _4 = (long unsigned int) nr_11;
  scanning: _5 = _4 * 40;
  scanning: _6 = &desc + _5;
  scanning: fill_tree_descriptor (_6, oid_44(D));
  scanning: nr_46 = nr_11 + 1;
  scanning: _7 = desc[nr_46].buffer;
  scanning: printf ("%d\n", _7);
  scanning: nr.3_8 = (unsigned int) nr_46;
  scanning: tmp___2_49 = unpack_trees (nr.3_8, &desc, &opts);
  scanning: if (tmp___2_49 != 0)
  scanning: if (reset_type_29(D) == 0)
  scanning: tmp___3_55 = parse_tree_indirect (oid_44(D));
  scanning: _9 = (long int) tmp___3_55;
  scanning: tree_56 = (struct tree *) _9;
  scanning: prime_cache_tree (&the_index, tree_56);
  scanning: if (reset_type_29(D) == 2)
  scanning: tmp___3_51 = parse_tree_indirect (oid_44(D));
  scanning: _10 = (long int) tmp___3_51;
  scanning: tree_52 = (struct tree *) _10;
  scanning: prime_cache_tree (&the_index, tree_52);
  scanning: desc ={v} {CLOBBER};
  scanning: opts ={v} {CLOBBER};
  scanning: head_oid ={v} {CLOBBER};
  scanning: return _12;
Function is locally looping.
Function can locally free.
reset_index (const struct object_id * oid, int reset_type, int quiet)
{
  int tmp___3;
  int tmp___2;
  int tmp___1;
  int tmp___0;
  int tmp;
  struct object_id head_oid;
  struct unpack_trees_options opts;
  struct tree * tree;
  struct tree_desc desc[2];
  int nr;
  long unsigned int _4;
  long unsigned int _5;
  struct tree_desc * _6;
  const void * _7;
  unsigned int nr.3_8;
  long int _9;
  long int _10;
  int _12;

  <bb 2> [100.00%]:
  memset (&opts, 0, 640);
  opts.head_idx = 1;
  opts.src_index = &the_index;
  opts.dst_index = &the_index;
  opts.fn = oneway_merge;
  opts.merge = 1;
  if (quiet_27(D) == 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [50.00%]:
  opts.verbose_update = 1;

  <bb 4> [100.00%]:
  switch (reset_type_29(D)) <default: <L5> [33.33%], case 2: <L4> [33.33%], case 3 ... 4: <L2> [33.33%]>

<L2> [33.33%]:
  opts.update = 1;
  goto <bb 8>; [100.00%]

<L4> [33.33%]:
  opts.update = 1;

<L5> [66.66%]:
  opts.reset = 1;

  <bb 8> [99.99%]:
  read_cache_unmerged ();
  if (reset_type_29(D) == 4)
    goto <bb 9>; [34.00%]
  else
    goto <bb 12>; [66.00%]

  <bb 9> [34.00%]:
  tmp___1_35 = get_oid ("HEAD", &head_oid);
  if (tmp___1_35 != 0)
    goto <bb 10>; [46.00%]
  else
    goto <bb 11>; [54.00%]

  <bb 10> [15.64%]:
  tmp_40 = _ ("You do not have a valid HEAD.");
  tmp___0_42 = error (tmp_40);
  goto <bb 18>; [100.00%]

  <bb 11> [18.36%]:
  fill_tree_descriptor (&desc, &head_oid);
  opts.fn = twoway_merge;

  <bb 12> [84.35%]:
  # nr_11 = PHI <0(8), 1(11)>
  _4 = (long unsigned int) nr_11;
  _5 = _4 * 40;
  _6 = &desc + _5;
  fill_tree_descriptor (_6, oid_44(D));
  nr_46 = nr_11 + 1;
  _7 = desc[nr_46].buffer;
  printf ("%d\n", _7);
  nr.3_8 = (unsigned int) nr_46;
  tmp___2_49 = unpack_trees (nr.3_8, &desc, &opts);
  if (tmp___2_49 != 0)
    goto <bb 18>; [2.00%]
  else
    goto <bb 13>; [98.00%]

  <bb 13> [82.66%]:
  if (reset_type_29(D) == 0)
    goto <bb 14>; [29.56%]
  else
    goto <bb 15>; [70.44%]

  <bb 14> [24.44%]:
  tmp___3_55 = parse_tree_indirect (oid_44(D));
  _9 = (long int) tmp___3_55;
  tree_56 = (struct tree *) _9;
  prime_cache_tree (&the_index, tree_56);
  goto <bb 18>; [100.00%]

  <bb 15> [58.23%]:
  if (reset_type_29(D) == 2)
    goto <bb 16>; [22.95%]
  else
    goto <bb 18>; [77.05%]

  <bb 16> [13.36%]:
  tmp___3_51 = parse_tree_indirect (oid_44(D));
  _10 = (long int) tmp___3_51;
  tree_52 = (struct tree *) _10;
  prime_cache_tree (&the_index, tree_52);

  <bb 18> [99.99%]:
  # _12 = PHI <tmp___0_42(10), -1(12), 0(15), 0(14), 0(16)>
  desc ={v} {CLOBBER};
  opts ={v} {CLOBBER};
  head_oid ={v} {CLOBBER};
  return _12;

}



;; Function main (main, funcdef_no=10, decl_uid=2076, cgraph_uid=10, symbol_order=11) (executed once)



 local analysis of main
   scanning: reset_index (&oid, type_2(D), quiet_3(D));
  scanning: oid ={v} {CLOBBER};
  scanning: return 0;
Function is locally looping.
main ()
{
  int quiet;
  int type;
  struct object_id oid;

  <bb 2> [100.00%]:
  reset_index (&oid, type_2(D), quiet_3(D));
  oid ={v} {CLOBBER};
  return 0;

}


