
;; Function printf (printf, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)



 local analysis of printf
   scanning: _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  scanning: return _4;
Function is locally looping.
Function can locally free.
__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [100.00%]:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function do_my_cleanups (do_my_cleanups, funcdef_no=42, decl_uid=3111, cgraph_uid=42, symbol_order=47)



 local analysis of do_my_cleanups
   scanning: _1 = ptr_12->next;
    Indirect ref read is not const
  scanning: *pmy_chain_11(D) = _1;
    Indirect ref write is not const/pure
  scanning: _2 = ptr_12->function;
    Indirect ref read is not const
  scanning: _3 = ptr_12->arg;
    Indirect ref read is not const
  scanning: _2 (_3);
  scanning: _21 = __printf_chk (1, "cleanup!!!!! =========\n");
  scanning: _4 = ptr_12->arg;
    Indirect ref read is not const
  scanning: _20 = __printf_chk (1, "%x\n", _4);
  scanning: _5 = ptr_12->free_arg;
    Indirect ref read is not const
  scanning: if (_5 != 0B)
  scanning: _6 = ptr_12->free_arg;
    Indirect ref read is not const
  scanning: _7 = ptr_12->arg;
    Indirect ref read is not const
  scanning: _6 (_7);
  scanning: free (ptr_12);
  scanning: ptr_12 = *pmy_chain_11(D);
    Indirect ref read is not const
  scanning: if (ptr_12 != old_chain_13(D))
  scanning: return;
Function is locally looping.
Function can locally free.
do_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  int D.3559;
  int D.3557;
  struct cleanup * ptr;
  struct cleanup * _1;
  void (*<Ted>) (void *) _2;
  void * _3;
  void * _4;
  void (*<Ted>) (void *) _5;
  void (*<Ted>) (void *) _6;
  void * _7;
  int _20;
  int _21;

  <bb 2> [15.00%]:
  goto <bb 6>; [100.00%]

  <bb 3> [85.00%]:
  _1 = ptr_12->next;
  *pmy_chain_11(D) = _1;
  _2 = ptr_12->function;
  _3 = ptr_12->arg;
  _2 (_3);
  _21 = __printf_chk (1, "cleanup!!!!! =========\n");
  _4 = ptr_12->arg;
  _20 = __printf_chk (1, "%x\n", _4);
  _5 = ptr_12->free_arg;
  if (_5 != 0B)
    goto <bb 4>; [93.48%]
  else
    goto <bb 5>; [6.52%]

  <bb 4> [79.46%]:
  _6 = ptr_12->free_arg;
  _7 = ptr_12->arg;
  _6 (_7);

  <bb 5> [85.00%]:
  free (ptr_12);

  <bb 6> [100.00%]:
  ptr_12 = *pmy_chain_11(D);
  if (ptr_12 != old_chain_13(D))
    goto <bb 3>; [85.00%]
  else
    goto <bb 7>; [15.00%]

  <bb 7> [15.00%]:
  return;

}



;; Function make_my_cleanup2 (make_my_cleanup2, funcdef_no=44, decl_uid=3119, cgraph_uid=44, symbol_order=49)



 local analysis of make_my_cleanup2
   scanning: new_4 = malloc (32);
  scanning: old_chain_6 = *pmy_chain_5(D);
    Indirect ref read is not const
  scanning: _1 = *pmy_chain_5(D);
    Indirect ref read is not const
  scanning: new_4->next = _1;
    Indirect ref write is not const/pure
  scanning: new_4->function = function_8(D);
    Indirect ref write is not const/pure
  scanning: new_4->free_arg = free_arg_10(D);
    Indirect ref write is not const/pure
  scanning: new_4->arg = arg_12(D);
    Indirect ref write is not const/pure
  scanning: *pmy_chain_5(D) = new_4;
    Indirect ref write is not const/pure
  scanning: if (old_chain_6 == 0B)
  scanning: exit (1);
  scanning: return old_chain_6;
Function is locally looping.
make_my_cleanup2 (struct cleanup * * pmy_chain, void (*<T9e0>) (void *) function, void * arg, void (*<Ted>) (void *) free_arg)
{
  struct cleanup * old_chain;
  struct cleanup * new;
  struct cleanup * _1;

  <bb 2> [100.00%]:
  new_4 = malloc (32);
  old_chain_6 = *pmy_chain_5(D);
  _1 = *pmy_chain_5(D);
  new_4->next = _1;
  new_4->function = function_8(D);
  new_4->free_arg = free_arg_10(D);
  new_4->arg = arg_12(D);
  *pmy_chain_5(D) = new_4;
  if (old_chain_6 == 0B)
    goto <bb 3>; [0.04%]
  else
    goto <bb 4>; [99.96%]

  <bb 3> [0.04%]:
  exit (1);

  <bb 4> [99.96%]:
  return old_chain_6;

}



;; Function make_my_cleanup (make_my_cleanup, funcdef_no=45, decl_uid=3123, cgraph_uid=45, symbol_order=50)



 local analysis of make_my_cleanup
   scanning: _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
  scanning: return _6;
Function is locally looping.
make_my_cleanup (struct cleanup * * pmy_chain, void (*<T9e0>) (void *) function, void * arg)
{
  struct cleanup * _6;

  <bb 2> [100.00%]:
  _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
  return _6;

}



;; Function template_in_dir (template_in_dir, funcdef_no=48, decl_uid=3397, cgraph_uid=48, symbol_order=85)



 local analysis of template_in_dir
   scanning: slash_13 = strrchr (path_12(D), 47);
  scanning: if (slash_13 != 0B)
  scanning: slash.0_1 = (long int) slash_13;
  scanning: path.1_2 = (long int) path_12(D);
  scanning: _3 = slash.0_1 - path.1_2;
  scanning: len_17 = (size_t) _3;
  scanning: _4 = len_17 + 11;
  scanning: tmpname_19 = malloc (_4);
  scanning: memcpy (tmpname_19, path_12(D), len_17);
  scanning: len_21 = len_17 + 1;
  scanning: _6 = tmpname_19 + len_17;
  scanning: *_6 = 47;
    Indirect ref write is not const/pure
  scanning: tmpname_15 = malloc (9);
  scanning: _7 = tmpname_8 + len_9;
  scanning: memcpy (_7, "stXXXXXX", 9);
  scanning: _24 = tmpname_8;
  scanning: return tmpname_8;
Function is locally looping.
template_in_dir (const char * path)
{
  size_t len;
  char * tmpname;
  const char * slash;
  long int slash.0_1;
  long int path.1_2;
  long int _3;
  long unsigned int _4;
  char * _6;
  char * _7;
  char * _24;

  <bb 2> [100.00%]:
  slash_13 = strrchr (path_12(D), 47);
  if (slash_13 != 0B)
    goto <bb 3>; [66.53%]
  else
    goto <bb 4>; [33.47%]

  <bb 3> [66.53%]:
  slash.0_1 = (long int) slash_13;
  path.1_2 = (long int) path_12(D);
  _3 = slash.0_1 - path.1_2;
  len_17 = (size_t) _3;
  _4 = len_17 + 11;
  tmpname_19 = malloc (_4);
  memcpy (tmpname_19, path_12(D), len_17);
  len_21 = len_17 + 1;
  _6 = tmpname_19 + len_17;
  *_6 = 47;
  goto <bb 5>; [100.00%]

  <bb 4> [33.47%]:
  tmpname_15 = malloc (9);

  <bb 5> [100.00%]:
  # tmpname_8 = PHI <tmpname_19(3), tmpname_15(4)>
  # len_9 = PHI <len_21(3), 0(4)>
  _7 = tmpname_8 + len_9;
  memcpy (_7, "stXXXXXX", 9);
  _24 = tmpname_8;
  return tmpname_8;

}



;; Function copy_file (copy_file, funcdef_no=53, decl_uid=3441, cgraph_uid=53, symbol_order=90)



 local analysis of copy_file
   scanning: _1 = rand ();
  scanning: _2 = _1 % 2;
  scanning: _3 = _2 == 1;
  scanning: size_8 = (off_t) _3;
  scanning: if (_2 != 1)
  scanning: if (_2 != 1)
  scanning: _12 = __printf_chk (1, "error: the input file \'%s\' is empty", input_filename_9(D));
  scanning: status = 1;
    static/global memory write is not const/pure
  scanning: return;
Function is locally looping.
Function can locally free.
copy_file (const char * input_filename, const char * output_filename, const char * input_target, const char * output_target, const struct bfd_arch_info_type * input_arch)
{
  int D.3564;
  off_t size;
  int _1;
  int _2;
  _Bool _3;
  int _12;

  <bb 2> [100.00%]:
  _1 = rand ();
  _2 = _1 % 2;
  _3 = _2 == 1;
  size_8 = (off_t) _3;
  if (_2 != 1)
    goto <bb 3>; [69.50%]
  else
    goto <bb 6>; [30.50%]

  <bb 3> [69.50%]:
  if (_2 != 1)
    goto <bb 4>; [48.88%]
  else
    goto <bb 5>; [51.12%]

  <bb 4> [33.97%]:
  _12 = __printf_chk (1, "error: the input file \'%s\' is empty", input_filename_9(D));

  <bb 5> [69.50%]:
  status = 1;

  <bb 6> [100.00%]:
  return;

}



;; Function discard_my_cleanups (discard_my_cleanups, funcdef_no=41, decl_uid=3106, cgraph_uid=41, symbol_order=46)



 local analysis of discard_my_cleanups
   scanning: _1 = ptr_10->next;
    Indirect ref read is not const
  scanning: *pmy_chain_9(D) = _1;
    Indirect ref write is not const/pure
  scanning: _2 = ptr_10->free_arg;
    Indirect ref read is not const
  scanning: if (_2 != 0B)
  scanning: _3 = ptr_10->free_arg;
    Indirect ref read is not const
  scanning: _4 = ptr_10->arg;
    Indirect ref read is not const
  scanning: _3 (_4);
  scanning: free (ptr_10);
  scanning: ptr_10 = *pmy_chain_9(D);
    Indirect ref read is not const
  scanning: if (ptr_10 != old_chain_11(D))
  scanning: _5 = ptr_10->arg;
    Indirect ref read is not const
  scanning: _16 = __printf_chk (1, "freearg: %x\n", _5);
  scanning: return;
Function is locally looping.
Function can locally free.
discard_my_cleanups (struct cleanup * * pmy_chain, struct cleanup * old_chain)
{
  int D.3566;
  struct cleanup * ptr;
  struct cleanup * _1;
  void (*<Ted>) (void *) _2;
  void (*<Ted>) (void *) _3;
  void * _4;
  void * _5;
  int _16;

  <bb 2> [15.00%]:
  goto <bb 6>; [100.00%]

  <bb 3> [85.00%]:
  _1 = ptr_10->next;
  *pmy_chain_9(D) = _1;
  _2 = ptr_10->free_arg;
  if (_2 != 0B)
    goto <bb 4>; [93.48%]
  else
    goto <bb 5>; [6.52%]

  <bb 4> [79.46%]:
  _3 = ptr_10->free_arg;
  _4 = ptr_10->arg;
  _3 (_4);

  <bb 5> [85.00%]:
  free (ptr_10);

  <bb 6> [100.00%]:
  ptr_10 = *pmy_chain_9(D);
  if (ptr_10 != old_chain_11(D))
    goto <bb 3>; [85.00%]
  else
    goto <bb 7>; [15.00%]

  <bb 7> [15.00%]:
  _5 = ptr_10->arg;
  _16 = __printf_chk (1, "freearg: %x\n", _5);
  return;

}



;; Function discard_cleanups (discard_cleanups, funcdef_no=39, decl_uid=3103, cgraph_uid=39, symbol_order=44)



 local analysis of discard_cleanups
   scanning: discard_my_cleanups (&cleanup_chain, old_chain_2(D));
  scanning: return;
Function is locally looping.
discard_cleanups (struct cleanup * old_chain)
{
  <bb 2> [100.00%]:
  discard_my_cleanups (&cleanup_chain, old_chain_2(D));
  return;

}



;; Function discard_final_cleanups (discard_final_cleanups, funcdef_no=40, decl_uid=3108, cgraph_uid=40, symbol_order=45)



 local analysis of discard_final_cleanups
   scanning: discard_my_cleanups (&final_cleanup_chain, old_chain_2(D));
  scanning: return;
Function is locally looping.
discard_final_cleanups (struct cleanup * old_chain)
{
  <bb 2> [100.00%]:
  discard_my_cleanups (&final_cleanup_chain, old_chain_2(D));
  return;

}



;; Function do_cleanups (do_cleanups, funcdef_no=43, decl_uid=3113, cgraph_uid=43, symbol_order=48)



 local analysis of do_cleanups
   scanning: do_my_cleanups (&cleanup_chain, old_chain_2(D));
  scanning: return;
Function is locally looping.
do_cleanups (struct cleanup * old_chain)
{
  <bb 2> [100.00%]:
  do_my_cleanups (&cleanup_chain, old_chain_2(D));
  return;

}



;; Function make_cleanup (make_cleanup, funcdef_no=46, decl_uid=3126, cgraph_uid=46, symbol_order=51)



 local analysis of make_cleanup
   scanning: _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
  scanning: return _5;
Function is locally looping.
make_cleanup (void (*<T9e0>) (void *) function, void * arg)
{
  struct cleanup * _5;

  <bb 2> [100.00%]:
  _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
  return _5;

}



;; Function filename_cmp (filename_cmp, funcdef_no=47, decl_uid=3393, cgraph_uid=47, symbol_order=84)



 local analysis of filename_cmp
   scanning: _4 = strcmp (s1_2(D), s2_3(D));
  scanning: return _4;
Function is locally pure.
Function found to be pure: filename_cmp
Declaration updated to be pure: filename_cmp
filename_cmp (const char * s1, const char * s2)
{
  int _4;

  <bb 2> [100.00%]:
  _4 = strcmp (s1_2(D), s2_3(D));
  return _4;

}



;; Function make_tempname (make_tempname, funcdef_no=49, decl_uid=3406, cgraph_uid=49, symbol_order=86)



 local analysis of make_tempname
   scanning: tmpname_6 = template_in_dir (filename_4(D));
  scanning: fd_8 = mkstemp (tmpname_6);
  scanning: if (fd_8 == -1)
  scanning: free (tmpname_6);
  scanning: close (fd_8);
  scanning: return _1;
Function is locally looping.
Function can locally free.
make_tempname (char * filename)
{
  int fd;
  char * tmpname;
  char * _1;

  <bb 2> [100.00%]:
  tmpname_6 = template_in_dir (filename_4(D));
  fd_8 = mkstemp (tmpname_6);
  if (fd_8 == -1)
    goto <bb 3>; [4.85%]
  else
    goto <bb 4>; [95.15%]

  <bb 3> [4.85%]:
  free (tmpname_6);
  goto <bb 5>; [100.00%]

  <bb 4> [95.15%]:
  close (fd_8);

  <bb 5> [100.00%]:
  # _1 = PHI <0B(3), tmpname_6(4)>
  return _1;

}



;; Function set_times (set_times, funcdef_no=50, decl_uid=3414, cgraph_uid=50, symbol_order=87)



 local analysis of set_times
   scanning: _1 = statbuf_5(D)->st_atim.tv_sec;
    Indirect ref read is not const
  scanning: tb[0] = _1;
  scanning: _2 = statbuf_5(D)->st_mtim.tv_sec;
    Indirect ref read is not const
  scanning: tb[1] = _2;
  scanning: result_10 = utime (destination_8(D), &tb);
  scanning: tb ={v} {CLOBBER};
  scanning: if (result_10 != 0)
  scanning: _13 = __printf_chk (1, "%s: cannot set time:", destination_8(D));
  scanning: return;
Function is locally looping.
Function can locally free.
set_times (const char * destination, const struct stat * statbuf)
{
  int D.3568;
  long int tb[2];
  int result;
  long int _1;
  long int _2;
  int _13;

  <bb 2> [100.00%]:
  _1 = statbuf_5(D)->st_atim.tv_sec;
  tb[0] = _1;
  _2 = statbuf_5(D)->st_mtim.tv_sec;
  tb[1] = _2;
  result_10 = utime (destination_8(D), &tb);
  tb ={v} {CLOBBER};
  if (result_10 != 0)
    goto <bb 3>; [36.64%]
  else
    goto <bb 4>; [63.36%]

  <bb 3> [36.64%]:
  _13 = __printf_chk (1, "%s: cannot set time:", destination_8(D));

  <bb 4> [100.00%]:
  return;

}



;; Function smart_rename (smart_rename, funcdef_no=51, decl_uid=3423, cgraph_uid=51, symbol_order=88)



 local analysis of smart_rename
   scanning: _1 = lstat (to_19(D), &s);
  scanning: _2 = _1 == 0;
  scanning: exists_21 = (bfd_boolean) _2;
  scanning: if (_1 != 0)
  scanning: _3 = BIT_FIELD_REF <s, 32, 192>;
  scanning: _4 = _3 & 61568;
  scanning: if (_4 == 32896)
  scanning: _5 = s.st_nlink;
  scanning: if (_5 == 1)
  scanning: ret_28 = rename (from_25(D), to_19(D));
  scanning: if (ret_28 == 0)
  scanning: if (_1 == 0)
  scanning: _6 = s.st_mode;
  scanning: _7 = _6 & 511;
  scanning: chmod (to_19(D), _7);
  scanning: _8 = s.st_gid;
  scanning: _9 = s.st_uid;
  scanning: _10 = chown (to_19(D), _9, _8);
  scanning: if (_10 >= 0)
  scanning: _11 = s.st_mode;
  scanning: _12 = _11 & 4095;
  scanning: chmod (to_19(D), _12);
  scanning: _36 = __printf_chk (1, "unable to rename \'%s\';", to_19(D));
  scanning: unlink (from_25(D));
  scanning: if (preserve_dates_23(D) != 0)
  scanning: set_times (to_19(D), &s);
  scanning: unlink (from_25(D));
  scanning: s ={v} {CLOBBER};
  scanning: return ret_13;
Function is locally looping.
Function can locally free.
smart_rename (const char * from, const char * to, int preserve_dates)
{
  int D.3572;
  int D.3570;
  int ret;
  struct stat s;
  bfd_boolean exists;
  int _1;
  _Bool _2;
  unsigned int _3;
  unsigned int _4;
  long unsigned int _5;
  unsigned int _6;
  unsigned int _7;
  unsigned int _8;
  unsigned int _9;
  int _10;
  unsigned int _11;
  unsigned int _12;
  int _36;

  <bb 2> [100.00%]:
  _1 = lstat (to_19(D), &s);
  _2 = _1 == 0;
  exists_21 = (bfd_boolean) _2;
  if (_1 != 0)
    goto <bb 5>; [33.00%]
  else
    goto <bb 3>; [67.00%]

  <bb 3> [67.00%]:
  _3 = BIT_FIELD_REF <s, 32, 192>;
  _4 = _3 & 61568;
  if (_4 == 32896)
    goto <bb 4>; [34.00%]
  else
    goto <bb 10>; [66.00%]

  <bb 4> [22.78%]:
  _5 = s.st_nlink;
  if (_5 == 1)
    goto <bb 5>; [34.00%]
  else
    goto <bb 10>; [66.00%]

  <bb 5> [40.75%]:
  ret_28 = rename (from_25(D), to_19(D));
  if (ret_28 == 0)
    goto <bb 6>; [70.44%]
  else
    goto <bb 9>; [29.56%]

  <bb 6> [28.70%]:
  if (_1 == 0)
    goto <bb 7>; [36.64%]
  else
    goto <bb 13>; [63.36%]

  <bb 7> [10.52%]:
  _6 = s.st_mode;
  _7 = _6 & 511;
  chmod (to_19(D), _7);
  _8 = s.st_gid;
  _9 = s.st_uid;
  _10 = chown (to_19(D), _9, _8);
  if (_10 >= 0)
    goto <bb 8>; [46.68%]
  else
    goto <bb 13>; [53.32%]

  <bb 8> [4.91%]:
  _11 = s.st_mode;
  _12 = _11 & 4095;
  chmod (to_19(D), _12);
  goto <bb 13>; [100.00%]

  <bb 9> [12.04%]:
  _36 = __printf_chk (1, "unable to rename \'%s\';", to_19(D));
  unlink (from_25(D));
  goto <bb 13>; [100.00%]

  <bb 10> [59.25%]:
  if (preserve_dates_23(D) != 0)
    goto <bb 11>; [33.00%]
  else
    goto <bb 12>; [67.00%]

  <bb 11> [19.55%]:
  set_times (to_19(D), &s);

  <bb 12> [59.25%]:
  unlink (from_25(D));

  <bb 13> [100.00%]:
  # ret_13 = PHI <ret_28(9), 0(12), ret_28(7), ret_28(8), ret_28(6)>
  s ={v} {CLOBBER};
  return ret_13;

}



;; Function unlink_if_ordinary (unlink_if_ordinary, funcdef_no=52, decl_uid=3434, cgraph_uid=52, symbol_order=89)



 local analysis of unlink_if_ordinary
   scanning: _1 = MEM[(int *)name_3(D)];
    Indirect ref read is not const
  scanning: _5 = __printf_chk (1, "%d\n", _1);
  scanning: return;
Function is locally looping.
Function can locally free.
unlink_if_ordinary (const char * name)
{
  int D.3574;
  int _1;
  int _5;

  <bb 2> [100.00%]:
  _1 = MEM[(int *)name_3(D)];
  _5 = __printf_chk (1, "%d\n", _1);
  return;

}



;; Function copy_main (copy_main, funcdef_no=54, decl_uid=3449, cgraph_uid=54, symbol_order=91)



 local analysis of copy_main
   scanning: optind.3_1 = optind;
    global memory read is not const
  scanning: _2 = (long unsigned int) optind.3_1;
  scanning: _3 = _2 * 8;
  scanning: _4 = argv_32(D) + _3;
  scanning: input_filename_33 = *_4;
    Indirect ref read is not const
  scanning: optind.4_5 = optind;
    global memory read is not const
  scanning: _6 = optind.4_5 + 1;
  scanning: if (_6 < argc_34(D))
  scanning: optind.5_7 = optind;
    global memory read is not const
  scanning: _8 = (sizetype) optind.5_7;
  scanning: _9 = _8 + 1;
  scanning: _10 = _9 * 8;
  scanning: _11 = argv_32(D) + _10;
  scanning: output_filename_35 = *_11;
    Indirect ref read is not const
  scanning: if (output_filename_18 == 0B)
  scanning: tmpname_38 = make_tempname (input_filename_33);
  scanning: if (tmpname_19 == 0B)
  scanning: _48 = __printf_chk (1, "warning: could not create temporary file whilst copying \'%s\'", input_filename_33);
  scanning: exit (1);
  scanning: copy_file (input_filename_33, tmpname_19, 0B, 0B, 0B);
  scanning: status.6_12 = status;
    global memory read is not const
  scanning: if (status.6_12 == 0)
  scanning: preserve_dates.7_13 = preserve_dates;
    global memory read is not const
  scanning: if (preserve_dates.7_13 != 0)
  scanning: set_times (tmpname_19, &statbuf);
  scanning: if (output_filename_25 != tmpname_19)
  scanning: preserve_dates.8_14 = preserve_dates;
    global memory read is not const
  scanning: _15 = smart_rename (tmpname_19, input_filename_33, preserve_dates.8_14);
  scanning: _16 = _15 != 0;
  scanning: _17 = (int) _16;
  scanning: status = _17;
    static/global memory write is not const/pure
  scanning: unlink_if_ordinary (tmpname_19);
  scanning: statbuf ={v} {CLOBBER};
  scanning: return 0;
Function is locally looping.
Function can locally free.
copy_main (int argc, char * * argv)
{
  int D.3576;
  const struct bfd_arch_info_type * input_arch;
  int statbuf;
  bfd_boolean formats_info;
  bfd_boolean change_warn;
  bfd_boolean show_version;
  char * output_target;
  char * input_target;
  char * tmpname;
  char * output_filename;
  char * input_filename;
  int optind.3_1;
  long unsigned int _2;
  long unsigned int _3;
  char * * _4;
  int optind.4_5;
  int _6;
  int optind.5_7;
  sizetype _8;
  sizetype _9;
  sizetype _10;
  char * * _11;
  int status.6_12;
  int preserve_dates.7_13;
  int preserve_dates.8_14;
  int _15;
  _Bool _16;
  int _17;
  int _48;

  <bb 2> [100.00%]:
  optind.3_1 = optind;
  _2 = (long unsigned int) optind.3_1;
  _3 = _2 * 8;
  _4 = argv_32(D) + _3;
  input_filename_33 = *_4;
  optind.4_5 = optind;
  _6 = optind.4_5 + 1;
  if (_6 < argc_34(D))
    goto <bb 4>; [67.00%]
  else
    goto <bb 6>; [33.00%]

  <bb 4> [67.00%]:
  optind.5_7 = optind;
  _8 = (sizetype) optind.5_7;
  _9 = _8 + 1;
  _10 = _9 * 8;
  _11 = argv_32(D) + _10;
  output_filename_35 = *_11;

  <bb 5> [67.00%]:
  # output_filename_18 = PHI <output_filename_35(4)>
  if (output_filename_18 == 0B)
    goto <bb 6>; [30.00%]
  else
    goto <bb 7>; [70.00%]

  <bb 6> [53.10%]:
  # output_filename_24 = PHI <output_filename_18(5), 0B(2)>
  tmpname_38 = make_tempname (input_filename_33);

  <bb 7> [100.00%]:
  # tmpname_19 = PHI <tmpname_38(6), output_filename_18(5)>
  # output_filename_25 = PHI <output_filename_24(6), output_filename_18(5)>
  if (tmpname_19 == 0B)
    goto <bb 8>; [0.04%]
  else
    goto <bb 9>; [99.96%]

  <bb 8> [0.04%]:
  _48 = __printf_chk (1, "warning: could not create temporary file whilst copying \'%s\'", input_filename_33);
  exit (1);

  <bb 9> [99.96%]:
  copy_file (input_filename_33, tmpname_19, 0B, 0B, 0B);
  status.6_12 = status;
  if (status.6_12 == 0)
    goto <bb 10>; [67.00%]
  else
    goto <bb 14>; [33.00%]

  <bb 10> [66.97%]:
  preserve_dates.7_13 = preserve_dates;
  if (preserve_dates.7_13 != 0)
    goto <bb 11>; [33.00%]
  else
    goto <bb 12>; [67.00%]

  <bb 11> [22.10%]:
  set_times (tmpname_19, &statbuf);

  <bb 12> [66.97%]:
  if (output_filename_25 != tmpname_19)
    goto <bb 13>; [53.47%]
  else
    goto <bb 15>; [46.53%]

  <bb 13> [35.81%]:
  preserve_dates.8_14 = preserve_dates;
  _15 = smart_rename (tmpname_19, input_filename_33, preserve_dates.8_14);
  _16 = _15 != 0;
  _17 = (int) _16;
  status = _17;
  goto <bb 15>; [100.00%]

  <bb 14> [32.99%]:
  unlink_if_ordinary (tmpname_19);

  <bb 15> [99.96%]:
  statbuf ={v} {CLOBBER};
  return 0;

}



;; Function main (main, funcdef_no=55, decl_uid=3464, cgraph_uid=55, symbol_order=92) (executed once)



 local analysis of main
   scanning: _1 = *argv_3(D);
    Indirect ref read is not const
  scanning: program_name = _1;
    static/global memory write is not const/pure
  scanning: copy_main (argc_5(D), argv_3(D));
  scanning: _7 = status;
    global memory read is not const
  scanning: return _7;
Function is locally looping.
main (int argc, char * * argv)
{
  char * _1;
  int _7;

  <bb 2> [100.00%]:
  _1 = *argv_3(D);
  program_name = _1;
  copy_main (argc_5(D), argv_3(D));
  _7 = status;
  return _7;

}


