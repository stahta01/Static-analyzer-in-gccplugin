
;; Function SSL_SESSION_free (SSL_SESSION_free, funcdef_no=22, decl_uid=3542, cgraph_uid=23, symbol_order=22)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void SSL_SESSION_free (struct SSL_SESSION * ss)
{
  <bb 2> :
  free (ss);
  return;

}



;; Function SSL_CTX_set_psk_use_session_callback (SSL_CTX_set_psk_use_session_callback, funcdef_no=24, decl_uid=3592, cgraph_uid=25, symbol_order=29)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void SSL_CTX_set_psk_use_session_callback (struct SSL_CTX * ctx, int (*SSL_psk_use_session_cb_func) (struct SSL *, const struct EVP_MD *, const unsigned char * *, size_t *, struct SSL_SESSION * *) cb)
{
  <bb 2> :
  ctx->psk_use_session_cb = cb;
  return;

}



;; Function main (main, funcdef_no=25, decl_uid=3596, cgraph_uid=26, symbol_order=30)

Removing basic block 10
Merging blocks 8 and 9
Merging blocks 8 and 11
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;; 2 succs { 3 5 }
;; 3 succs { 4 5 }
;; 4 succs { 8 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 1 }
int main (int argc, char * * argv)
{
  struct SSL_SESSION * sess;
  struct SSL_CTX ctx;
  char * psksessf;
  int D.3609;

  <bb 2> :
  if (psksessf != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _1 = malloc (8);
  psksess = _1;
  psksess.0_2 = psksess;
  if (psksess.0_2 == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  // predicted unlikely by goto predictor.
  goto <bb 8>; [INV]

  <bb 5> :
  psksess.1_3 = psksess;
  if (psksess.1_3 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  SSL_CTX_set_psk_use_session_callback (&ctx, psk_use_session_cb);

  <bb 7> :
  _4 = ctx.psk_use_session_cb;
  _4 (0B, 0B, 0B, 0B, &sess);
  sess.2_5 = sess;
  printf ("%d\n", sess.2_5);

  <bb 8> :
end:
  D.3609 = 0;
  ctx = {CLOBBER};
  sess = {CLOBBER};
  return D.3609;

}



;; Function psk_use_session_cb (psk_use_session_cb, funcdef_no=23, decl_uid=3562, cgraph_uid=24, symbol_order=28)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
;; 2 succs { 3 4 }
;; 3 succs { 16 }
;; 4 succs { 5 6 }
;; 5 succs { 24 }
;; 6 succs { 7 8 }
;; 7 succs { 10 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 12 }
;; 11 succs { 24 }
;; 12 succs { 15 13 }
;; 13 succs { 15 14 }
;; 14 succs { 15 16 }
;; 15 succs { 23 }
;; 16 succs { 17 18 }
;; 17 succs { 23 }
;; 18 succs { 19 21 }
;; 19 succs { 20 21 }
;; 20 succs { 22 }
;; 21 succs { 22 }
;; 22 succs { 24 }
;; 23 succs { 24 }
;; 24 succs { 1 }
int psk_use_session_cb (struct SSL * s, const struct EVP_MD * md, const unsigned char * * id, size_t * idlen, struct SSL_SESSION * * sess)
{
  unsigned char * key;
  long int key_len;
  const struct SSL_CIPHER * cipher;
  struct SSL_SESSION * usesess;
  int D.3617;

  <bb 2> :
  usesess = 0B;
  cipher = 0B;
  psksess.3_1 = psksess;
  if (psksess.3_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  psksess.4_2 = psksess;
  SSL_SESSION_up_ref (psksess.4_2);
  usesess = psksess;
  goto <bb 16>; [INV]

  <bb 4> :
  psk_key.5_3 = psk_key;
  _4 = (long int) psk_key.5_3;
  _5 = (const char *) _4;
  key = strdup (_5);
  if (key == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  D.3617 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 24>; [INV]

  <bb 6> :
  _6 = EVP_sha256 ();
  _7 = EVP_MD_size (_6);
  _8 = (long int) _7;
  if (key_len == _8)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _9 = SSL_CIPHER_find (s, &tls13_aes128gcmsha256_id);
  _10 = (long int) _9;
  cipher = (const struct SSL_CIPHER *) _10;
  goto <bb 10>; [INV]

  <bb 8> :
  _11 = EVP_sha384 ();
  _12 = EVP_MD_size (_11);
  _13 = (long int) _12;
  if (key_len == _13)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _14 = SSL_CIPHER_find (s, &tls13_aes256gcmsha384_id);
  _15 = (long int) _14;
  cipher = (const struct SSL_CIPHER *) _15;

  <bb 10> :
  if (cipher == 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  free (key);
  *id = 0B;
  *idlen = 0;
  *sess = 0B;
  D.3617 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 24>; [INV]

  <bb 12> :
  usesess = malloc (8);
  if (usesess == 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _16 = SSL_SESSION_set1_master_key (usesess, key, key_len);
  if (_16 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  _17 = SSL_SESSION_set_cipher (usesess, cipher);
  if (_17 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  // predicted unlikely by goto predictor.
  goto <bb 23>; [INV]

  <bb 16> :
  _18 = SSL_SESSION_get0_cipher (usesess);
  _19 = (long int) _18;
  cipher = (const struct SSL_CIPHER *) _19;
  if (cipher == 0B)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  // predicted unlikely by goto predictor.
  goto <bb 23>; [INV]

  <bb 18> :
  if (md != 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _20 = SSL_CIPHER_get_handshake_digest (cipher);
  _21 = (long int) _20;
  _22 = (const struct EVP_MD *) _21;
  if (md != _22)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  *id = 0B;
  *idlen = 0;
  *sess = 0B;
  SSL_SESSION_free (usesess);
  goto <bb 22>; [INV]

  <bb 21> :
  *sess = usesess;
  psk_identity.6_23 = psk_identity;
  *id = psk_identity.6_23;
  psk_identity.7_24 = psk_identity;
  _25 = strlen (psk_identity.7_24);
  *idlen = _25;

  <bb 22> :
  D.3617 = 1;
  goto <bb 24>; [INV]

  <bb 23> :
err:
  SSL_SESSION_free (usesess);
  D.3617 = 0;

  <bb 24> :
  return D.3617;

}


