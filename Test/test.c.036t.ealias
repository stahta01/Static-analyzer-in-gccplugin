
;; Function foo3 (foo3, funcdef_no=51, decl_uid=4314, cgraph_uid=51, symbol_order=51)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
p = &NONLOCAL
_1 = *p
ESCAPED = &NONLOCAL
q_8 = &HEAP(12)
q_6 = *p + 64
q_2 = q_8
q_2 = q_6
ESCAPED = q_2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(12) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
p = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
malloc = { }
q_8 = { HEAP(12) }
HEAP(12) = { ESCAPED NONLOCAL }
q_6 = { ESCAPED NONLOCAL }
q_2 = { ESCAPED NONLOCAL HEAP(12) }


Alias information for foo3

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4355 } (escaped, escaped heap)

Flow-insensitive points-to information

q_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.4355 } (escaped, escaped heap)
p_5(D), points-to non-local, points-to NULL, points-to vars: { }
q_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
q_8, points-to NULL, points-to vars: { D.4355 } (escaped, escaped heap)

foo3 (struct st * p)
{
  int * q;
  int _1;

  <bb 2> [0.00%]:
  _1 = p_5(D)->flag;
  if (_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  q_8 = malloc (1);
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  q_6 = p_5(D)->f;

  <bb 5> [0.00%]:
  # q_2 = PHI <q_8(3), q_6(4)>
  return q_2;

}



;; Function foo (foo, funcdef_no=52, decl_uid=4307, cgraph_uid=52, symbol_order=52)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
z = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
z = { NONLOCAL }


Alias information for foo

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

z_2(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((noinline))
foo (int * z)
{
  <bb 2> [0.00%]:
  free (z_2(D));
  return;

}



;; Function main (main, funcdef_no=53, decl_uid=4320, cgraph_uid=53, symbol_order=53)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
p_19 = &HEAP(10)
_1 = i_9
_2 = _1
_2 = &NONLOCAL
_3 = p_19
ESCAPED = &NONLOCAL
_4 = &HEAP(16)
*_3 + 64 = _4
i_27 = i_9
i_27 = &NONLOCAL
i_9 = &NULL
i_9 = i_27
_5 = i_10
_6 = _5
_6 = &NONLOCAL
_7 = p_19
_8 = *_7 + 64
i_24 = i_10
i_24 = &NONLOCAL
i_10 = &NULL
i_10 = i_24
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
malloc = { }
p_19 = { HEAP(10) }
HEAP(10) = { HEAP(16) }
_1 = { NULL NONLOCAL }
i_9 = { NULL NONLOCAL } same as _1
_2 = { NULL NONLOCAL } same as _1
_3 = { HEAP(10) } same as p_19
_4 = { HEAP(16) }
HEAP(16) = { }
i_27 = { NULL NONLOCAL } same as _1
_5 = { NULL NONLOCAL } same as _1
i_10 = { NULL NONLOCAL } same as _1
_6 = { NULL NONLOCAL } same as _1
_7 = { HEAP(10) } same as p_19
_8 = { HEAP(16) }
i_24 = { NULL NONLOCAL } same as _1


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_3, points-to NULL, points-to vars: { D.4356 }
_4, points-to NULL, points-to vars: { D.4357 }
_7, points-to NULL, points-to vars: { D.4356 }
_8, points-to NULL, points-to vars: { D.4357 }
p_19, points-to NULL, points-to vars: { D.4356 }

main ()
{
  int i;
  int i;
  struct st * p;
  int d;
  int c;
  int b;
  int a;
  long unsigned int _1;
  long unsigned int _2;
  struct st * _3;
  void * _4;
  long unsigned int _5;
  long unsigned int _6;
  struct st * _7;
  int * _8;

  <bb 2> [0.00%]:
  p_19 = malloc (10);
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i_9;
  _2 = _1 * 16;
  _3 = p_19 + _2;
  _4 = malloc (1);
  _3->f = _4;
  i_27 = i_9 + 1;

  <bb 4> [0.00%]:
  # i_9 = PHI <0(2), i_27(3)>
  if (i_9 <= 9)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _5 = (long unsigned int) i_10;
  _6 = _5 * 16;
  _7 = p_19 + _6;
  _8 = _7->f;
  free (_8);
  i_24 = i_10 + 1;

  <bb 6> [0.00%]:
  # i_10 = PHI <0(4), i_24(5)>
  if (i_10 <= 9)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  return 0;

}


