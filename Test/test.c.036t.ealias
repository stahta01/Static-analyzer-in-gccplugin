
;; Function printf (printf, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fmt = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = __fmt
_4 = NONLOCAL
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__fmt = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__printf_chk = { }
_4 = { ESCAPED NONLOCAL }


Alias information for printf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.3682 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__fmt_2(D), points-to NULL, points-to vars: { D.3682 } (nonlocal, escaped, restrict)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [0.00%]:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function strlcat (strlcat, funcdef_no=39, decl_uid=3566, cgraph_uid=39, symbol_order=40)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
dst = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
src = &PARM_NOALIAS(11)
PARM_NOALIAS(11) = &NONLOCAL
maxlen = &NONLOCAL
CALLUSED(14) = CALLUSED(14) + UNKNOWN
CALLUSED(14) = *CALLUSED(14) + UNKNOWN
CALLUSED(14) = src
srclen_15 = CALLUSED(14)
srclen_15 = NONLOCAL
ESCAPED = dst
ESCAPED = maxlen
_1 = NONLOCAL
dstlen_19 = _1
_24 = srclen_15
_24 = maxlen
_2 = maxlen
_2 = dstlen_19
_3 = srclen_15
_3 = &NONLOCAL
_4 = dst
doubledereftmp(24) = *src
*_4 = doubledereftmp(24)
_5 = maxlen
_5 = &NONLOCAL
_6 = dst
doubledereftmp(27) = *src
*_6 = doubledereftmp(27)
_7 = maxlen
_7 = dstlen_19
_8 = _7
_8 = &NONLOCAL
_9 = dst
derefaddrtmp(31) = &NULL
*_9 = derefaddrtmp(31)
_23 = srclen_15
_23 = dstlen_19
_10 = _24
_10 = _23
ESCAPED = _10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) PARM_NOALIAS(11) }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
dst = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { NULL ESCAPED NONLOCAL }
src = { PARM_NOALIAS(11) }
PARM_NOALIAS(11) = { ESCAPED NONLOCAL }
maxlen = { NONLOCAL }
strlen = { }
CALLUSED(14) = { ESCAPED NONLOCAL PARM_NOALIAS(11) }
CALLCLOBBERED(15) = { }
srclen_15 = { ESCAPED NONLOCAL PARM_NOALIAS(11) }
strnlen = { }
_1 = { ESCAPED NONLOCAL }
dstlen_19 = { ESCAPED NONLOCAL } same as _1
_24 = { ESCAPED NONLOCAL PARM_NOALIAS(11) } same as srclen_15
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL PARM_NOALIAS(11) } same as srclen_15
_4 = { PARM_NOALIAS(9) } same as dst
doubledereftmp(24) = { ESCAPED NONLOCAL }
_5 = { NONLOCAL } same as maxlen
_6 = { PARM_NOALIAS(9) } same as dst
doubledereftmp(27) = { ESCAPED NONLOCAL } same as doubledereftmp(24)
_7 = { ESCAPED NONLOCAL } same as _1
_8 = { ESCAPED NONLOCAL } same as _1
_9 = { PARM_NOALIAS(9) } same as dst
derefaddrtmp(31) = { NULL }
_23 = { ESCAPED NONLOCAL PARM_NOALIAS(11) } same as srclen_15
_10 = { ESCAPED NONLOCAL PARM_NOALIAS(11) } same as srclen_15


Alias information for strlcat

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3683 D.3684 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

_4, points-to NULL, points-to vars: { D.3683 } (nonlocal, escaped, restrict)
_6, points-to NULL, points-to vars: { D.3683 } (nonlocal, escaped, restrict)
_9, points-to NULL, points-to vars: { D.3683 } (nonlocal, escaped, restrict)
src_14(D), points-to NULL, points-to vars: { D.3684 } (nonlocal, escaped, restrict)
dst_16(D), points-to NULL, points-to vars: { D.3683 } (nonlocal, escaped, restrict)

strlcat (char * restrict dst, const char * restrict src, size_t maxlen)
{
  const size_t dstlen;
  const size_t srclen;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  char * _4;
  long unsigned int _5;
  char * _6;
  long unsigned int _7;
  sizetype _8;
  char * _9;
  size_t _10;
  size_t _23;
  size_t _24;

  <bb 2> [0.00%]:
  srclen_15 = strlen (src_14(D));
  _1 = strnlen (dst_16(D), maxlen_17(D));
  dstlen_19 = (const size_t) _1;
  if (maxlen_17(D) == dstlen_19)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _24 = srclen_15 + maxlen_17(D);
  goto <bb 8>; [0.00%]

  <bb 4> [0.00%]:
  _2 = maxlen_17(D) - dstlen_19;
  if (_2 > srclen_15)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _3 = srclen_15 + 1;
  _4 = dst_16(D) + dstlen_19;
  memcpy (_4, src_14(D), _3);
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _5 = maxlen_17(D) + 18446744073709551615;
  _6 = dst_16(D) + dstlen_19;
  memcpy (_6, src_14(D), _5);
  _7 = maxlen_17(D) + dstlen_19;
  _8 = _7 + 18446744073709551615;
  _9 = dst_16(D) + _8;
  *_9 = 0;

  <bb 7> [0.00%]:
  _23 = srclen_15 + dstlen_19;

  <bb 8> [0.00%]:
  # _10 = PHI <_24(3), _23(7)>
  return _10;

}



;; Function tilde_expand_filename (tilde_expand_filename, funcdef_no=40, decl_uid=3577, cgraph_uid=40, symbol_order=41)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
filename = &NONLOCAL
uid = &NONLOCAL
_1 = *filename
_30 = &HEAP(12)
doubledereftmp(13) = *filename
*_30 = doubledereftmp(13)
filename_16 = filename
path_17 = filename_16
path_17 = &NULL
_4 = _2
_4 = _3
path.0_5 = path_17
filename.1_6 = filename_16
_7 = path.0_5
_7 = filename.1_6
slash_18 = _7
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &STRING
_33 = NONLOCAL
ESCAPED = &NONLOCAL
_36 = _7
_8 = _36
user = *filename_16
user = &NULL
filename_23 = path_17
filename_10 = filename_16
filename_10 = filename_23
ESCAPED = &ret
ESCAPED = filename_10
ESCAPED = &NONLOCAL
_9 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &STRING
_34 = NONLOCAL
ESCAPED = &NONLOCAL
_26 = &HEAP(36)
*_26 = ret
_11 = _30
_11 = _26
ESCAPED = _11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL HEAP(12) ret HEAP(36) }
NONLOCAL = { ESCAPED NONLOCAL } same as _33
STOREDANYTHING = { }
INTEGER = { ANYTHING }
filename = { NONLOCAL }
uid = { NONLOCAL } same as filename
_1 = { ESCAPED NONLOCAL }
_30 = { HEAP(12) }
HEAP(12) = { ESCAPED NONLOCAL }
doubledereftmp(13) = { ESCAPED NONLOCAL } same as _1
filename_16 = { NONLOCAL } same as filename
path_17 = { NULL NONLOCAL }
_2 = { }
_3 = { }
_4 = { }
path.0_5 = { NULL NONLOCAL } same as path_17
filename.1_6 = { NONLOCAL } same as filename
_7 = { NULL NONLOCAL } same as path_17
slash_18 = { NULL NONLOCAL } same as path_17
__printf_chk = { }
_33 = { ESCAPED NONLOCAL }
exit = { }
_36 = { NULL NONLOCAL } same as path_17
_8 = { NULL NONLOCAL } same as path_17
user = { NULL ESCAPED NONLOCAL }
filename_23 = { NULL NONLOCAL } same as path_17
filename_10 = { NULL NONLOCAL } same as path_17
strlcat = { }
ret = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as _33
_34 = { ESCAPED NONLOCAL } same as _33
_26 = { HEAP(36) }
HEAP(36) = { ESCAPED NONLOCAL }
_11 = { HEAP(12) HEAP(36) }


Alias information for tilde_expand_filename

Aliased symbols

ret, UID D.3581, char[64], is addressable
user, UID D.3580, char[128], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3581 D.3689 D.3690 } (escaped, escaped heap)

Flow-insensitive points-to information

filename_10, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to NULL, points-to vars: { D.3689 D.3690 } (escaped, escaped heap)
filename_15(D), points-to non-local, points-to NULL, points-to vars: { }
filename_16, points-to non-local, points-to NULL, points-to vars: { }
path_17, points-to non-local, points-to NULL, points-to vars: { }
filename_23, points-to non-local, points-to NULL, points-to vars: { }
_26, points-to NULL, points-to vars: { D.3690 } (escaped, escaped heap)
_30, points-to NULL, points-to vars: { D.3689 } (escaped, escaped heap)

tilde_expand_filename (const char * filename, uid_t uid)
{
  int D.3688;
  int D.3686;
  u_int slash;
  char ret[64];
  char user[128];
  const char * path;
  char _1;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  long int path.0_5;
  long int filename.1_6;
  long int _7;
  long unsigned int _8;
  long unsigned int _9;
  char * _11;
  char * _26;
  char * _30;
  int _33;
  int _34;
  long int _36;

  <bb 2> [0.00%]:
  _1 = *filename_15(D);
  if (_1 != 126)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _30 = strdup (filename_15(D));
  goto <bb 13>; [0.00%]

  <bb 4> [0.00%]:
  filename_16 = filename_15(D) + 1;
  path_17 = strchr (filename_16, 47);
  _2 = path_17 != 0B;
  _3 = filename_16 < path_17;
  _4 = _2 & _3;
  if (_4 != 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 5> [0.00%]:
  path.0_5 = (long int) path_17;
  filename.1_6 = (long int) filename_16;
  _7 = path.0_5 - filename.1_6;
  slash_18 = (u_int) _7;
  if (slash_18 > 127)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [100.00%]:
  _33 = __printf_chk (1, "tilde_expand_filename: ~username too long%s\n", "");
  exit (1);

  <bb 7> [0.00%]:
  _36 = _7 & 4294967295;
  _8 = (long unsigned int) _36;
  memcpy (&user, filename_16, _8);
  user[slash_18] = 0;

  <bb 8> [0.00%]:
  if (path_17 != 0B)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  filename_23 = path_17 + 1;

  <bb 10> [0.00%]:
  # filename_10 = PHI <filename_16(8), filename_23(9)>
  _9 = strlcat (&ret, filename_10, 64);
  if (_9 > 63)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [100.00%]:
  _34 = __printf_chk (1, "tilde_expand_filename: Path too long%s\n", "");
  exit (1);

  <bb 12> [0.00%]:
  _26 = strdup (&ret);

  <bb 13> [0.00%]:
  # _11 = PHI <_30(3), _26(12)>
  user ={v} {CLOBBER};
  ret ={v} {CLOBBER};
  return _11;

}



;; Function read_keyfile_line (read_keyfile_line, funcdef_no=41, decl_uid=3594, cgraph_uid=41, symbol_order=42)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
f = &NONLOCAL
filename = &NONLOCAL
buf = &NONLOCAL
bufsz = &NONLOCAL
lineno = &NONLOCAL
_1 = *lineno
_2 = _1
_2 = &NONLOCAL
*lineno = _2
_3 = *lineno
ESCAPED = &NONLOCAL
ESCAPED = &STRING
__func__.3596 = NONLOCAL
ESCAPED = &__func__.3596
ESCAPED = filename
ESCAPED = _3
_20 = NONLOCAL
_4 = NONLOCAL
_5 = _4
_5 = &NONLOCAL
_6 = NONLOCAL
_7 = _6
_7 = &NONLOCAL
_8 = &NULL
_8 = &NONLOCAL
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL __func__.3596 }
NONLOCAL = { ESCAPED NONLOCAL } same as _20
STOREDANYTHING = { }
INTEGER = { ANYTHING }
f = { NONLOCAL }
filename = { NONLOCAL } same as f
buf = { NONLOCAL } same as f
bufsz = { NONLOCAL } same as f
lineno = { NONLOCAL } same as f
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL } same as _1
__printf_chk = { }
__func__.3596 = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL }
rand = { }
_4 = { ESCAPED NONLOCAL } same as _20
_5 = { ESCAPED NONLOCAL } same as _20
_6 = { ESCAPED NONLOCAL } same as _20
_7 = { ESCAPED NONLOCAL } same as _20
_8 = { NULL NONLOCAL }


Alias information for read_keyfile_line

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3596 } (nonlocal, escaped)

Flow-insensitive points-to information

lineno_14(D), points-to non-local, points-to NULL, points-to vars: { }
filename_16(D), points-to non-local, points-to NULL, points-to vars: { }

read_keyfile_line (struct FILE * f, const char * filename, char * buf, size_t bufsz, u_long * lineno)
{
  int D.3692;
  static const char __func__[18] = "read_keyfile_line";
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  int _4;
  int _5;
  int _6;
  int _7;
  int _8;
  int _20;

  <bb 2> [0.00%]:
  goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _1 = *lineno_14(D);
  _2 = _1 + 1;
  *lineno_14(D) = _2;
  _3 = *lineno_14(D);
  _20 = __printf_chk (1, "%s: %s line %lu exceeds size limit\n", &__func__, filename_16(D), _3);
  _4 = rand ();
  _5 = _4 % 2;
  if (_5 == 1)
    goto <bb 5>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [0.00%]:
  _6 = rand ();
  _7 = _6 % 2;
  if (_7 == 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  # _8 = PHI <0(3), -1(4)>
  return _8;

}



;; Function update_krl_from_file (update_krl_from_file, funcdef_no=42, decl_uid=3602, cgraph_uid=42, symbol_order=43)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
pw = &NONLOCAL
file = &NONLOCAL
lnum = &NULL
_1 = *pw + 128
_2 = _1
ESCAPED = file
ESCAPED = _2
path_20 = NONLOCAL
CALLUSED(16) = CALLUSED(16) + UNKNOWN
CALLUSED(16) = *CALLUSED(16) + UNKNOWN
CALLUSED(16) = path_20
CALLUSED(16) = &STRING
_3 = CALLUSED(16)
_3 = NONLOCAL
stdin = NONLOCAL
krl_spec_25 = stdin
path_28 = &HEAP(22)
ESCAPED = path_20
ESCAPED = &STRING
krl_spec_22 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = path_20
_38 = NONLOCAL
ESCAPED = &NONLOCAL
path_9 = path_28
path_9 = path_20
krl_spec_10 = krl_spec_25
krl_spec_10 = krl_spec_22
quiet = NONLOCAL
quiet.2_4 = quiet
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = path_9
_39 = NONLOCAL
_5 = NONLOCAL
_6 = _5
_6 = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = path_9
_40 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = krl_spec_10
ESCAPED = path_9
ESCAPED = &line
ESCAPED = &NONLOCAL
ESCAPED = &lnum
_7 = NONLOCAL
CALLUSED(40) = CALLUSED(40) + UNKNOWN
CALLUSED(40) = *CALLUSED(40) + UNKNOWN
CALLUSED(40) = path_9
CALLUSED(40) = &STRING
_8 = CALLUSED(40)
_8 = NONLOCAL
ESCAPED = krl_spec_10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL lnum HEAP(22) line }
NONLOCAL = { ESCAPED NONLOCAL } same as path_20
STOREDANYTHING = { }
INTEGER = { ANYTHING }
pw = { NONLOCAL }
file = { NONLOCAL } same as pw
lnum = { NULL ESCAPED NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
tilde_expand_filename = { }
path_20 = { ESCAPED NONLOCAL }
strcmp = { }
CALLUSED(16) = { STRING ESCAPED NONLOCAL }
CALLCLOBBERED(17) = { }
_3 = { STRING ESCAPED NONLOCAL } same as CALLUSED(16)
krl_spec_25 = { ESCAPED NONLOCAL } same as path_20
stdin = { ESCAPED NONLOCAL } same as path_20
path_28 = { HEAP(22) }
HEAP(22) = { ESCAPED NONLOCAL }
fopen = { }
krl_spec_22 = { ESCAPED NONLOCAL } same as path_20
__printf_chk = { }
_38 = { ESCAPED NONLOCAL } same as path_20
exit = { }
path_9 = { ESCAPED NONLOCAL HEAP(22) }
krl_spec_10 = { ESCAPED NONLOCAL } same as path_20
quiet.2_4 = { ESCAPED NONLOCAL } same as path_20
quiet = { ESCAPED NONLOCAL } same as path_20
_39 = { ESCAPED NONLOCAL } same as path_20
rand = { }
_5 = { ESCAPED NONLOCAL } same as path_20
_6 = { ESCAPED NONLOCAL } same as path_20
_40 = { ESCAPED NONLOCAL } same as path_20
read_keyfile_line = { }
line = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as path_20
CALLUSED(40) = { STRING ESCAPED NONLOCAL HEAP(22) }
CALLCLOBBERED(41) = { }
_8 = { STRING ESCAPED NONLOCAL HEAP(22) } same as CALLUSED(40)
fclose = { }


Alias information for update_krl_from_file

Aliased symbols

line, UID D.3609, char[16384], is addressable
lnum, UID D.3605, u_long, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3605 D.3609 D.3699 } (escaped, escaped heap)

Flow-insensitive points-to information

path_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.3699 } (escaped, escaped heap)
krl_spec_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
pw_17(D), points-to non-local, points-to NULL, points-to vars: { }
file_18(D), points-to non-local, points-to NULL, points-to vars: { }
path_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
krl_spec_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
krl_spec_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
path_28, points-to NULL, points-to vars: { D.3699 } (escaped, escaped heap)

update_krl_from_file (struct passwd * pw, const char * file)
{
  int D.3698;
  int D.3696;
  int D.3694;
  struct FILE * krl_spec;
  char line[16384];
  char * path;
  u_long lnum;
  struct Key * key;
  int _1;
  unsigned int _2;
  int _3;
  int quiet.2_4;
  int _5;
  int _6;
  int _7;
  int _8;
  int _38;
  int _39;
  int _40;

  <bb 2> [0.00%]:
  lnum = 0;
  _1 = pw_17(D)->pw_uid;
  _2 = (unsigned int) _1;
  path_20 = tilde_expand_filename (file_18(D), _2);
  _3 = strcmp (path_20, "-");
  if (_3 == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  krl_spec_25 = stdin;
  free (path_20);
  path_28 = strdup ("(standard input)");
  goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  krl_spec_22 = fopen (path_20, "r");
  if (krl_spec_22 == 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [100.00%]:
  _38 = __printf_chk (1, "fopen %s: \n", path_20);
  exit (1);

  <bb 6> [0.00%]:
  # path_9 = PHI <path_28(3), path_20(4)>
  # krl_spec_10 = PHI <krl_spec_25(3), krl_spec_22(4)>
  quiet.2_4 = quiet;
  if (quiet.2_4 == 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 7> [100.00%]:
  _39 = __printf_chk (1, "Revoking from %s\n", path_9);
  goto <bb 10>; [100.00%]

  <bb 8> [0.00%]:
  _5 = rand ();
  _6 = _5 % 2;
  if (_6 == 1)
    goto <bb 9>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 9> [100.00%]:
  _40 = __printf_chk (1, "%s: invalid\n", path_9);
  exit (1);

  <bb 10> [0.00%]:

  <bb 11> [0.00%]:
  _7 = read_keyfile_line (krl_spec_10, path_9, &line, 16384, &lnum);
  if (_7 == 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [0.00%]:
  _8 = strcmp (path_9, "-");
  if (_8 != 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  fclose (krl_spec_10);

  <bb 14> [0.00%]:
  lnum ={v} {CLOBBER};
  line ={v} {CLOBBER};
  return;

}



;; Function main (main, funcdef_no=43, decl_uid=3625, cgraph_uid=43, symbol_order=44)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
argc = &NONLOCAL
argv = &NONLOCAL
ESCAPED = &NULL
_1 = NONLOCAL
_2 = _1
ESCAPED = _2
_3 = i_7
_4 = _3
_4 = &NONLOCAL
_5 = argv
_6 = *_5
ESCAPED = &pw
ESCAPED = _6
i_18 = i_7
i_18 = &NONLOCAL
i_7 = &NULL
i_7 = i_18
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL pw }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
argc = { NONLOCAL }
argv = { NONLOCAL } same as argc
time = { }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
srand = { }
_3 = { NULL NONLOCAL }
i_7 = { NULL NONLOCAL } same as _3
_4 = { NULL NONLOCAL } same as _3
_5 = { NONLOCAL } same as argc
_6 = { ESCAPED NONLOCAL }
update_krl_from_file = { }
pw = { ESCAPED NONLOCAL }
i_18 = { NULL NONLOCAL } same as _3


Alias information for main

Aliased symbols

pw, UID D.3627, struct passwd, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3627 } (escaped)

Flow-insensitive points-to information

_5, points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
argv_16(D), points-to non-local, points-to NULL, points-to vars: { }

main (int argc, char * * argv)
{
  int i;
  struct passwd pw;
  int _1;
  unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  char * * _5;
  char * _6;

  <bb 2> [0.00%]:
  _1 = time (0B);
  _2 = (unsigned int) _1;
  srand (_2);
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _3 = (long unsigned int) i_7;
  _4 = _3 * 8;
  _5 = argv_16(D) + _4;
  _6 = *_5;
  update_krl_from_file (&pw, _6);
  i_18 = i_7 + 1;

  <bb 4> [0.00%]:
  # i_7 = PHI <0(2), i_18(3)>
  if (i_7 < argc_13(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  pw ={v} {CLOBBER};
  return 0;

}


