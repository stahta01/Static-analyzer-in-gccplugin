
;; Function foo3 (foo3, funcdef_no=51, decl_uid=4314, cgraph_uid=51, symbol_order=51)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
p = &NONLOCAL
_1 = *p
ESCAPED = &NONLOCAL
q_8 = &HEAP(12)
q_6 = *p + 64
q_2 = q_8
q_2 = q_6
ESCAPED = q_2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(12) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
p = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
malloc = { }
q_8 = { HEAP(12) }
HEAP(12) = { ESCAPED NONLOCAL }
q_6 = { ESCAPED NONLOCAL }
q_2 = { ESCAPED NONLOCAL HEAP(12) }


Alias information for foo3

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4372 } (escaped, escaped heap)

Flow-insensitive points-to information

q_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.4372 } (escaped, escaped heap)
p_5(D), points-to non-local, points-to NULL, points-to vars: { }
q_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
q_8, points-to NULL, points-to vars: { D.4372 } (escaped, escaped heap)

foo3 (struct st * p)
{
  int * q;
  int _1;

  <bb 2> [0.00%]:
  _1 = p_5(D)->flag;
  if (_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  q_8 = malloc (1);
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  q_6 = p_5(D)->f;

  <bb 5> [0.00%]:
  # q_2 = PHI <q_8(3), q_6(4)>
  return q_2;

}



;; Function foo (foo, funcdef_no=52, decl_uid=4307, cgraph_uid=52, symbol_order=52)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
z = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
z = { NONLOCAL }


Alias information for foo

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

z_2(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((noinline))
foo (int * z)
{
  <bb 2> [0.00%]:
  free (z_2(D));
  return;

}



;; Function main (main, funcdef_no=53, decl_uid=4320, cgraph_uid=53, symbol_order=53)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
p_13 = &HEAP(10)
ESCAPED = p5_14
ESCAPED = p5_14
_1 = test5_17
_1 = &NONLOCAL
ESCAPED = p5_14
ESCAPED = p5_14
ESCAPED = p5_14
ESCAPED = p_13
ESCAPED = p_13
ESCAPED = p_13
ESCAPED = p_13
ESCAPED = p3_28
ESCAPED = p5_14
ESCAPED = p_13
ESCAPED = p_13
ESCAPED = p4_23
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL HEAP(10) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
malloc = { }
p_13 = { HEAP(10) }
HEAP(10) = { ESCAPED NONLOCAL }
foo = { }
p5_14 = { }
_1 = { NONLOCAL }
test5_17 = { }
p3_28 = { }
p4_23 = { }


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.4373 } (escaped, escaped heap)

Flow-insensitive points-to information

p_13, points-to NULL, points-to vars: { D.4373 } (escaped, escaped heap)
p5_14(D), points-to NULL, points-to vars: { }
p4_23(D), points-to NULL, points-to vars: { }
p3_28(D), points-to NULL, points-to vars: { }

main ()
{
  int * p;
  int d;
  int c;
  int b;
  int a;
  int test5;
  int test3;
  int test2;
  int test;
  int * p5;
  int * p4;
  int * p3;
  int _1;

  <bb 2> [0.00%]:
  p_13 = malloc (100);

label2 [0.00%]:
  foo (p5_14(D));

label3 [0.00%]:
  foo (p5_14(D));
  _1 = test5_17(D) / 10;
  switch (_1) <default: <L4> [0.00%], case 5: <L2> [0.00%], case 10: <L3> [0.00%]>

<L2> [0.00%]:
  foo (p5_14(D));
  goto <bb 8>; [0.00%]

<L3> [0.00%]:
  foo (p5_14(D));
  goto <bb 8>; [0.00%]

<L4> [0.00%]:
  foo (p5_14(D));

  <bb 8> [0.00%]:
  if (test_21(D) != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 9> [0.00%]:
  if (test_21(D) > test2_22(D))
    goto <bb 10>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 10> [0.00%]:
  foo (p_13);
  if (test_21(D) < test2_22(D))
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [0.00%]:
  foo (p_13);
  goto <bb 16>; [0.00%]

  <bb 12> [0.00%]:
  foo (p_13);
  goto <bb 16>; [0.00%]

  <bb 13> [0.00%]:
  foo (p_13);
  if (test_21(D) < test2_22(D))
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  foo (p3_28(D));
  goto <bb 4> (label3); [0.00%]

  <bb 15> [0.00%]:
  foo (p5_14(D));
  goto <bb 4> (label3); [0.00%]

  <bb 16> [0.00%]:
  if (test3_33(D) != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 17> [0.00%]:
  foo (p_13);
  goto <bb 3> (label2); [0.00%]

  <bb 18> [0.00%]:
  if (test_21(D) == test2_22(D))
    goto <bb 19>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 19> [0.00%]:
  foo (p_13);
  goto <bb 22>; [0.00%]

  <bb 20> [0.00%]:
  if (test_21(D) > test2_22(D))
    goto <bb 21>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 21> [0.00%]:
  foo (p4_23(D));

  <bb 22> [0.00%]:
  return 0;

}


