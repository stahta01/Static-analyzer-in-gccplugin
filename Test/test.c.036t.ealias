
;; Function printf (printf, funcdef_no=31, decl_uid=798, cgraph_uid=31, symbol_order=31)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fmt = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = __fmt
_4 = NONLOCAL
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__fmt = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__printf_chk = { }
_4 = { ESCAPED NONLOCAL }


Alias information for printf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4395 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__fmt_2(D), points-to NULL, points-to vars: { D.4395 } (nonlocal, escaped, restrict)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [0.00%]:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function foo3 (foo3, funcdef_no=51, decl_uid=4311, cgraph_uid=51, symbol_order=53)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
z = &NONLOCAL
ESCAPED = &NONLOCAL
_1 = &HEAP(11)
_2 = _1
_3 = _2
*z = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(11) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
z = { NONLOCAL }
malloc = { }
_1 = { HEAP(11) }
HEAP(11) = { ESCAPED NONLOCAL }
_2 = { HEAP(11) } same as _1
_3 = { HEAP(11) } same as _1


Alias information for foo3

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4396 } (escaped, escaped heap)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.4396 } (escaped, escaped heap)
z_6(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((noinline))
foo3 (int * z)
{
  void * _1;
  long int _2;
  int _3;

  <bb 2> [0.00%]:
  _1 = malloc (1);
  _2 = (long int) _1;
  _3 = (int) _2;
  *z_6(D) = _3;
  return;

}



;; Function foo2 (foo2, funcdef_no=52, decl_uid=4309, cgraph_uid=52, symbol_order=54)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
z = &NONLOCAL
_1 = z
ESCAPED = _1
a2_9 = &HEAP(12)
_2 = z
ESCAPED = _2
p3_11 = &HEAP(15)
_3 = z
ESCAPED = _3
p4_13 = &HEAP(18)
mLock = NONLOCAL
ESCAPED = &mLock
derefaddrtmp(21) = &NONLOCAL
*p3_11 = derefaddrtmp(21)
_19 = p3_11
derefaddrtmp(23) = &NONLOCAL
*p4_13 = derefaddrtmp(23)
_16 = p4_13
_4 = p3_11
_4 = p4_13
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(15) HEAP(18) mLock }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
z = { NONLOCAL }
_1 = { NONLOCAL } same as z
malloc = { }
a2_9 = { HEAP(12) }
HEAP(12) = { }
_2 = { NONLOCAL } same as z
p3_11 = { HEAP(15) }
HEAP(15) = { ESCAPED NONLOCAL }
_3 = { NONLOCAL } same as z
p4_13 = { HEAP(18) }
HEAP(18) = { ESCAPED NONLOCAL }
pthread_mutex_unlock = { }
mLock = { ESCAPED NONLOCAL }
derefaddrtmp(21) = { NONLOCAL } same as z
_19 = { HEAP(15) } same as p3_11
derefaddrtmp(23) = { NONLOCAL } same as z
_16 = { HEAP(18) } same as p4_13
_4 = { HEAP(15) HEAP(18) }


Alias information for foo2

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4304 D.4398 D.4399 } (nonlocal, escaped, escaped heap, interposable)

Flow-insensitive points-to information

_4, points-to NULL, points-to vars: { D.4398 D.4399 } (escaped, escaped heap)
a2_9, points-to NULL, points-to vars: { D.4397 }
p3_11, points-to NULL, points-to vars: { D.4398 } (escaped, escaped heap)
p4_13, points-to NULL, points-to vars: { D.4399 } (escaped, escaped heap)
_16, points-to NULL, points-to vars: { D.4399 } (escaped, escaped heap)
_19, points-to NULL, points-to vars: { D.4398 } (escaped, escaped heap)

__attribute__((noinline))
foo2 (int z)
{
  int tmp;
  int * p4;
  int * p3;
  int * a2;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  int * _4;
  int * _16;
  int * _19;

  <bb 2> [0.00%]:
  _1 = (long unsigned int) z_6(D);
  a2_9 = malloc (_1);
  _2 = (long unsigned int) z_6(D);
  p3_11 = malloc (_2);
  _3 = (long unsigned int) z_6(D);
  p4_13 = malloc (_3);
  if (tmp_14(D) > 10)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  pthread_mutex_unlock (&mLock);
  *p3_11 = 10;
  _19 = p3_11;
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  *p4_13 = 10;
  _16 = p4_13;

  <bb 5> [0.00%]:
  # _4 = PHI <p3_11(3), p4_13(4)>
  return _4;

}



;; Function foo4 (foo4, funcdef_no=53, decl_uid=4319, cgraph_uid=53, symbol_order=55)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
z = &NONLOCAL
ESCAPED = &NONLOCAL
_1 = &HEAP(11)
b = _1
ESCAPED = &NONLOCAL
p2_7 = &HEAP(14)
b.0_2 = b
derefaddrtmp(16) = &NONLOCAL
*b.0_2 = derefaddrtmp(16)
derefaddrtmp(17) = &NONLOCAL
*p2_7 = derefaddrtmp(17)
ESCAPED = &b

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(11) b }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
z = { NONLOCAL }
malloc = { }
_1 = { HEAP(11) }
HEAP(11) = { ESCAPED NONLOCAL }
b = { ESCAPED NONLOCAL HEAP(11) } same as b.0_2
p2_7 = { HEAP(14) }
HEAP(14) = { NONLOCAL }
b.0_2 = { ESCAPED NONLOCAL HEAP(11) }
derefaddrtmp(16) = { NONLOCAL } same as z
derefaddrtmp(17) = { NONLOCAL } same as z


Alias information for foo4

Aliased symbols

b, UID D.4333, int *, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4333 D.4400 } (escaped, escaped heap)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.4400 } (escaped, escaped heap)
b.0_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.4400 } (escaped, escaped heap)
p2_7, points-to NULL, points-to vars: { D.4401 }

foo4 (int z)
{
  int * p2;
  int * b;
  void * _1;
  int * b.0_2;

  <bb 2> [0.00%]:
  _1 = malloc (1);
  b = _1;
  p2_7 = malloc (1);
  b.0_2 = b;
  *b.0_2 = 2;
  *p2_7 = 1;
  free (&b);
  b ={v} {CLOBBER};
  return &b;

}



;; Function foo (foo, funcdef_no=54, decl_uid=4307, cgraph_uid=54, symbol_order=56)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
z = &NONLOCAL
ESCAPED = &NONLOCAL
p2_3 = &HEAP(11)
_4 = p2_3
ESCAPED = p2_3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(11) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
z = { NONLOCAL }
malloc = { }
p2_3 = { HEAP(11) }
HEAP(11) = { ESCAPED NONLOCAL }
_4 = { HEAP(11) } same as p2_3


Alias information for foo

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4402 } (escaped, escaped heap)

Flow-insensitive points-to information

p2_3, points-to NULL, points-to vars: { D.4402 } (escaped, escaped heap)
_4, points-to NULL, points-to vars: { D.4402 } (escaped, escaped heap)

__attribute__((noinline))
foo (int z)
{
  int * p2;
  int * _4;

  <bb 2> [0.00%]:
  p2_3 = malloc (1);
  _4 = p2_3;
  return p2_3;

}



;; Function child (child, funcdef_no=55, decl_uid=4340, cgraph_uid=55, symbol_order=57)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
data = &NONLOCAL
mLock = NONLOCAL
ESCAPED = &mLock
ESCAPED = &NONLOCAL
ppData_12 = &HEAP(13)
ESCAPED = &NONLOCAL
_1 = &HEAP(15)
pData = _1
ESCAPED = &NONLOCAL
a_16 = NONLOCAL
data2 = &NULL
pData = &data2
_2 = pData
derefaddrtmp(21) = &NONLOCAL
*_2 = derefaddrtmp(21)
_4 = pData
derefaddrtmp(23) = &NONLOCAL
*_4 = derefaddrtmp(23)
_6 = pData
derefaddrtmp(25) = &NONLOCAL
*_6 = derefaddrtmp(25)
_7 = pData
derefaddrtmp(27) = &NONLOCAL
*_7 = derefaddrtmp(27)
pData.1_8 = pData
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL mLock }
NONLOCAL = { ESCAPED NONLOCAL } same as a_16
STOREDANYTHING = { }
INTEGER = { ANYTHING }
data = { NONLOCAL }
pthread_mutex_lock = { }
mLock = { ESCAPED NONLOCAL }
malloc = { }
ppData_12 = { HEAP(13) }
HEAP(13) = { }
_1 = { HEAP(15) }
HEAP(15) = { NONLOCAL }
pData = { HEAP(15) data2 }
foo = { }
a_16 = { ESCAPED NONLOCAL }
data2 = { NULL NONLOCAL }
_2 = { HEAP(15) data2 } same as pData
derefaddrtmp(21) = { NONLOCAL } same as data
_4 = { HEAP(15) data2 } same as pData
derefaddrtmp(23) = { NONLOCAL } same as data
_6 = { HEAP(15) data2 } same as pData
derefaddrtmp(25) = { NONLOCAL } same as data
_7 = { HEAP(15) data2 } same as pData
derefaddrtmp(27) = { NONLOCAL } same as data
pData.1_8 = { HEAP(15) data2 } same as pData
pthread_exit = { }


Alias information for child

Aliased symbols

data2, UID D.4345, int, is addressable
pData, UID D.4343, int *, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.4304 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.4404 }
_2, points-to NULL, points-to vars: { D.4345 D.4404 }
_4, points-to NULL, points-to vars: { D.4345 D.4404 }
_6, points-to NULL, points-to vars: { D.4345 D.4404 }
_7, points-to NULL, points-to vars: { D.4345 D.4404 }
pData.1_8, points-to NULL, points-to vars: { D.4345 D.4404 }
ppData_12, points-to NULL, points-to vars: { D.4403 }
a_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

child (void * data)
{
  int data2;
  int * a;
  int * pData;
  int * * ppData;
  void * _1;
  int * _2;
  int * _4;
  int * _6;
  int * _7;
  int * pData.1_8;

  <bb 2> [0.00%]:
  pthread_mutex_lock (&mLock);
  ppData_12 = malloc (10);
  _1 = malloc (20);
  pData = _1;
  a_16 = foo (1);
  data2 = 0;
  pData = &data2;
  _2 = pData;
  *_2 = 10;
  _4 = MEM[(int * *)&pData + 8B];
  *_4 = 10;
  _6 = MEM[(int * *)&pData + 16B];
  *_6 = 10;
  _7 = pData;
  *_7 = 12;
  pData.1_8 = pData;
  free (pData.1_8);
  free (&pData);
  pthread_exit (0B);

}



;; Function boo (boo, funcdef_no=56, decl_uid=4350, cgraph_uid=56, symbol_order=58)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
b = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_5 = NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
b = { NONLOCAL }
__printf_chk = { }
_5 = { ESCAPED NONLOCAL }


Alias information for boo

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

b_2(D), points-to non-local, points-to NULL, points-to vars: { }

boo (int * b)
{
  int D.4406;
  int _5;

  <bb 2> [100.00%]:
  free (b_2(D));
  _5 = __printf_chk (1, "asdda\n");
  return;

}



;; Function test44 (test44, funcdef_no=57, decl_uid=4317, cgraph_uid=57, symbol_order=59)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
k = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
k = { NONLOCAL }


Alias information for test44

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

k_2(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((noinline))
test44 (int * k)
{
  <bb 2> [0.00%]:
  free (k_2(D));
  return;

}



;; Function test33 (test33, funcdef_no=58, decl_uid=4315, cgraph_uid=58, symbol_order=60)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
k = &NONLOCAL
ESCAPED = k

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
k = { NONLOCAL }
test44 = { }


Alias information for test33

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

k_2(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((noinline))
test33 (int * k)
{
  <bb 2> [0.00%]:
  test44 (k_2(D));
  return;

}



;; Function test22 (test22, funcdef_no=59, decl_uid=4313, cgraph_uid=59, symbol_order=61)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
k = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
k = { NONLOCAL }


Alias information for test22

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

k_2(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((noinline))
test22 (int * k)
{
  <bb 2> [0.00%]:
  free (k_2(D));
  return;

}



;; Function main (main, funcdef_no=60, decl_uid=4361, cgraph_uid=60, symbol_order=62)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
q_4 = &HEAP(10)
mLock = NONLOCAL
ESCAPED = &mLock
ESCAPED = &t
ESCAPED = &NULL
ESCAPED = &child
ESCAPED = &buff
t.2_1 = t
ESCAPED = t.2_1
ESCAPED = &NULL
ESCAPED = &mLock
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL mLock t child buff }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
malloc = { }
q_4 = { HEAP(10) }
HEAP(10) = { }
pthread_mutex_destroy = { }
mLock = { ESCAPED NONLOCAL }
pthread_create = { }
t = { ESCAPED NONLOCAL } same as t.2_1
child = { ESCAPED NONLOCAL }
buff = { ESCAPED NONLOCAL }
t.2_1 = { ESCAPED NONLOCAL }
pthread_join = { }


Alias information for main

Aliased symbols

t, UID D.4368, pthread_t, is addressable
buff, UID D.4365, char[50], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.4304 D.4365 D.4368 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

q_4, points-to NULL, points-to vars: { D.4407 }

main ()
{
  pthread_t t;
  int * q;
  char buff[50];
  long unsigned int t.2_1;

  <bb 2> [0.00%]:
  q_4 = malloc (5);
  pthread_mutex_destroy (&mLock);
  pthread_create (&t, 0B, child, &buff);
  t.2_1 = t;
  pthread_join (t.2_1, 0B);
  pthread_mutex_destroy (&mLock);
  buff ={v} {CLOBBER};
  t ={v} {CLOBBER};
  return 0;

}


