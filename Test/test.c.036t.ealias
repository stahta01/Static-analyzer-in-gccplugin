
;; Function printf (printf, funcdef_no=31, decl_uid=798, cgraph_uid=31, symbol_order=31)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fmt = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = __fmt
_4 = NONLOCAL
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__fmt = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__printf_chk = { }
_4 = { ESCAPED NONLOCAL }


Alias information for printf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4363 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__fmt_2(D), points-to NULL, points-to vars: { D.4363 } (nonlocal, escaped, restrict)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [0.00%]:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function foo2 (foo2, funcdef_no=51, decl_uid=4308, cgraph_uid=51, symbol_order=52)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
z = &NONLOCAL
_1 = z
ESCAPED = _1
a2_11 = &HEAP(12)
_2 = z
ESCAPED = _2
p3_13 = &HEAP(15)
_3 = z
ESCAPED = _3
p4_15 = &HEAP(18)
pData_38 = &NULL
data = &NULL
data = &NONLOCAL
a = &NONLOCAL
a = &NONLOCAL
derefaddrtmp(22) = &NONLOCAL
*p3_13 = derefaddrtmp(22)
derefaddrtmp(23) = &NONLOCAL
*a2_11 = derefaddrtmp(23)
derefaddrtmp(24) = &NONLOCAL
*a2_11 = derefaddrtmp(24)
_33 = p3_13
derefaddrtmp(26) = &NONLOCAL
*p4_15 = derefaddrtmp(26)
_29 = p4_15
_6 = p3_13
_6 = p4_15
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(15) HEAP(18) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
z = { NONLOCAL }
_1 = { NONLOCAL } same as z
malloc = { }
a2_11 = { HEAP(12) }
HEAP(12) = { NONLOCAL }
_2 = { NONLOCAL } same as z
p3_13 = { HEAP(15) }
HEAP(15) = { ESCAPED NONLOCAL }
_3 = { NONLOCAL } same as z
p4_15 = { HEAP(18) }
HEAP(18) = { ESCAPED NONLOCAL }
pData_38 = { NULL }
data = { NULL NONLOCAL }
a = { NONLOCAL } same as z
derefaddrtmp(22) = { NONLOCAL } same as z
derefaddrtmp(23) = { NONLOCAL } same as z
derefaddrtmp(24) = { NONLOCAL } same as z
_33 = { HEAP(15) } same as p3_13
derefaddrtmp(26) = { NONLOCAL } same as z
_29 = { HEAP(18) } same as p4_15
_6 = { HEAP(15) HEAP(18) }


Alias information for foo2

Aliased symbols

a, UID D.4320, int, is addressable
data, UID D.4319, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4365 D.4366 } (escaped, escaped heap)

Flow-insensitive points-to information

_6, points-to NULL, points-to vars: { D.4365 D.4366 } (escaped, escaped heap)
a2_11, points-to NULL, points-to vars: { D.4364 }
p3_13, points-to NULL, points-to vars: { D.4365 } (escaped, escaped heap)
p4_15, points-to NULL, points-to vars: { D.4366 } (escaped, escaped heap)
_29, points-to NULL, points-to vars: { D.4366 } (escaped, escaped heap)
_33, points-to NULL, points-to vars: { D.4365 } (escaped, escaped heap)
pData_38, points-to NULL, points-to vars: { }

__attribute__((noinline))
foo2 (int z)
{
  int tmp;
  int * * ptr2;
  int * ptr;
  int a;
  int data;
  int * pData;
  int * * ppData;
  int * p4;
  int * p3;
  int * a2;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  int * _6;
  int * _29;
  int * _33;

  <bb 2> [0.00%]:
  _1 = (long unsigned int) z_8(D);
  a2_11 = malloc (_1);
  _2 = (long unsigned int) z_8(D);
  p3_13 = malloc (_2);
  _3 = (long unsigned int) z_8(D);
  p4_15 = malloc (_3);
  pData_38 = 0B;
  data = 0;
  data = 10;
  a = 10;
  a = 20;
  if (tmp_26(D) > 10)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  *p3_13 = 10;
  *a2_11 = 9;
  *a2_11 = 1;
  _33 = p3_13;
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  free (a2_11);
  *p4_15 = 12;
  _29 = p4_15;

  <bb 5> [0.00%]:
  # _6 = PHI <p3_13(3), p4_15(4)>
  data ={v} {CLOBBER};
  a ={v} {CLOBBER};
  return _6;

}



;; Function foo (foo, funcdef_no=52, decl_uid=4306, cgraph_uid=52, symbol_order=53)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
z = &NONLOCAL
ESCAPED = &NONLOCAL
p2_3 = NONLOCAL
ESCAPED = p2_3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as p2_3
STOREDANYTHING = { }
INTEGER = { ANYTHING }
z = { NONLOCAL }
foo2 = { }
p2_3 = { ESCAPED NONLOCAL }


Alias information for foo

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

p2_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

__attribute__((noinline))
foo (int z)
{
  int * p2;

  <bb 2> [0.00%]:
  p2_3 = foo2 (2);
  return p2_3;

}



;; Function child (child, funcdef_no=53, decl_uid=4310, cgraph_uid=53, symbol_order=54)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
data = &NONLOCAL
mLock = NONLOCAL
ESCAPED = &mLock
ESCAPED = &NONLOCAL
_1 = &HEAP(13)
b = _1
ESCAPED = &NONLOCAL
p22_7 = NONLOCAL
ESCAPED = &mLock
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL mLock }
NONLOCAL = { ESCAPED NONLOCAL } same as p22_7
STOREDANYTHING = { }
INTEGER = { ANYTHING }
data = { NONLOCAL }
pthread_mutex_lock = { }
mLock = { ESCAPED NONLOCAL }
malloc = { }
_1 = { HEAP(13) }
HEAP(13) = { }
b = { HEAP(13) } same as _1
foo = { }
p22_7 = { ESCAPED NONLOCAL }
pthread_mutex_unlock = { }
pthread_exit = { }


Alias information for child

Aliased symbols

b, UID D.4332, int *, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.4304 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_1, points-to NULL, points-to vars: { D.4367 }
p22_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

__attribute__((noinline))
child (void * data)
{
  int * b;
  int * p22;
  void * _1;

  <bb 2> [0.00%]:
  pthread_mutex_lock (&mLock);
  _1 = malloc (454);
  b = _1;
  p22_7 = foo (2);
  free (&b);
  pthread_mutex_unlock (&mLock);
  pthread_exit (0B);

}



;; Function boo (boo, funcdef_no=54, decl_uid=4337, cgraph_uid=54, symbol_order=55)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
b = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
_5 = NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
b = { NONLOCAL }
__printf_chk = { }
_5 = { ESCAPED NONLOCAL }


Alias information for boo

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

b_2(D), points-to non-local, points-to NULL, points-to vars: { }

boo (int * b)
{
  int D.4369;
  int _5;

  <bb 2> [100.00%]:
  free (b_2(D));
  _5 = __printf_chk (1, "asdda\n");
  return;

}



;; Function main (main, funcdef_no=55, decl_uid=4339, cgraph_uid=55, symbol_order=56)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
mLock = NONLOCAL
ESCAPED = &mLock
ESCAPED = &t
ESCAPED = &NULL
ESCAPED = &child
ESCAPED = &buff
t.0_1 = t
ESCAPED = t.0_1
ESCAPED = &NULL
ESCAPED = &mLock
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL mLock t child buff }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
pthread_mutex_destroy = { }
mLock = { ESCAPED NONLOCAL }
pthread_create = { }
t = { ESCAPED NONLOCAL } same as t.0_1
child = { ESCAPED NONLOCAL }
buff = { ESCAPED NONLOCAL }
t.0_1 = { ESCAPED NONLOCAL }
pthread_join = { }


Alias information for main

Aliased symbols

t, UID D.4343, pthread_t, is addressable
buff, UID D.4342, char[50], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.4304 D.4342 D.4343 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information


main ()
{
  pthread_t t;
  char buff[50];
  long unsigned int t.0_1;

  <bb 2> [0.00%]:
  pthread_mutex_destroy (&mLock);
  pthread_create (&t, 0B, child, &buff);
  t.0_1 = t;
  pthread_join (t.0_1, 0B);
  pthread_mutex_destroy (&mLock);
  buff ={v} {CLOBBER};
  t ={v} {CLOBBER};
  return 0;

}


