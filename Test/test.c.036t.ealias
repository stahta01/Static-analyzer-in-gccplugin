
;; Function foo3 (foo3, funcdef_no=51, decl_uid=4314, cgraph_uid=51, symbol_order=51)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
p = &NONLOCAL
_1 = *p
ESCAPED = &NONLOCAL
q_8 = &HEAP(12)
q_6 = *p + 64
q_2 = q_8
q_2 = q_6
ESCAPED = q_2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(12) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
p = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
malloc = { }
q_8 = { HEAP(12) }
HEAP(12) = { ESCAPED NONLOCAL }
q_6 = { ESCAPED NONLOCAL }
q_2 = { ESCAPED NONLOCAL HEAP(12) }


Alias information for foo3

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4357 } (escaped, escaped heap)

Flow-insensitive points-to information

q_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.4357 } (escaped, escaped heap)
p_5(D), points-to non-local, points-to NULL, points-to vars: { }
q_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
q_8, points-to NULL, points-to vars: { D.4357 } (escaped, escaped heap)

foo3 (struct st * p)
{
  int * q;
  int _1;

  <bb 2> [0.00%]:
  _1 = p_5(D)->flag;
  if (_1 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  q_8 = malloc (1);
  goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  q_6 = p_5(D)->f;

  <bb 5> [0.00%]:
  # q_2 = PHI <q_8(3), q_6(4)>
  return q_2;

}



;; Function foo (foo, funcdef_no=52, decl_uid=4307, cgraph_uid=52, symbol_order=52)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
z = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
z = { NONLOCAL }


Alias information for foo

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

z_2(D), points-to non-local, points-to NULL, points-to vars: { }

__attribute__((noinline))
foo (int * z)
{
  <bb 2> [0.00%]:
  free (z_2(D));
  return;

}



;; Function main (main, funcdef_no=53, decl_uid=4320, cgraph_uid=53, symbol_order=53)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NULL
p_25 = &HEAP(10)
ESCAPED = &NONLOCAL
_2 = &HEAP(12)
*p_25 + 64 = _2
_3 = i_13
_4 = _3
_4 = &NONLOCAL
_5 = p_25
ESCAPED = &NONLOCAL
_6 = &HEAP(18)
*_5 + 64 = _6
i_39 = i_13
i_39 = &NONLOCAL
i_13 = &NULL
i_13 = i_39
ESCAPED = &NONLOCAL
_8 = &HEAP(21)
*p_25 + 64 = _8
_9 = i_14
_10 = _9
_10 = &NONLOCAL
_11 = p_25
_12 = *_11 + 64
i_35 = i_14
i_35 = &NONLOCAL
i_14 = &NULL
i_14 = i_35
_15 = &NONLOCAL
_15 = &NULL
ESCAPED = _15

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
malloc = { }
p_25 = { HEAP(10) }
HEAP(10) = { HEAP(12) HEAP(18) HEAP(21) }
_2 = { HEAP(12) }
HEAP(12) = { }
_3 = { NULL NONLOCAL }
i_13 = { NULL NONLOCAL } same as _3
_4 = { NULL NONLOCAL } same as _3
_5 = { HEAP(10) } same as p_25
_6 = { HEAP(18) }
HEAP(18) = { }
i_39 = { NULL NONLOCAL } same as _3
_8 = { HEAP(21) }
HEAP(21) = { }
_9 = { NULL NONLOCAL } same as _3
i_14 = { NULL NONLOCAL } same as _3
_10 = { NULL NONLOCAL } same as _3
_11 = { HEAP(10) } same as p_25
_12 = { HEAP(12) HEAP(18) HEAP(21) }
i_35 = { NULL NONLOCAL } same as _3
_15 = { NULL NONLOCAL } same as _3


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_2, points-to NULL, points-to vars: { D.4359 }
_5, points-to NULL, points-to vars: { D.4358 }
_6, points-to NULL, points-to vars: { D.4360 }
_8, points-to NULL, points-to vars: { D.4361 }
_11, points-to NULL, points-to vars: { D.4358 }
_12, points-to NULL, points-to vars: { D.4359 D.4360 D.4361 }
p_25, points-to NULL, points-to vars: { D.4358 }

main ()
{
  int i;
  int i;
  struct st * p;
  int d;
  int c;
  int b;
  int a;
  int test;
  void * _2;
  long unsigned int _3;
  long unsigned int _4;
  struct st * _5;
  void * _6;
  void * _8;
  long unsigned int _9;
  long unsigned int _10;
  struct st * _11;
  int * _12;
  int _15;

  <bb 2> [0.00%]:
  p_25 = malloc (0);
  _2 = malloc (1);
  MEM[(struct st *)p_25 + 48B].f = _2;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _3 = (long unsigned int) i_13;
  _4 = _3 * 16;
  _5 = p_25 + _4;
  _6 = malloc (1);
  _5->f = _6;
  i_39 = i_13 + 1;

  <bb 4> [0.00%]:
  # i_13 = PHI <0(2), i_39(3)>
  if (i_13 <= 9)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  _8 = malloc (1);
  MEM[(struct st *)p_25 + 32B].f = _8;
  if (test_31(D) != 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _9 = (long unsigned int) i_14;
  _10 = _9 * 16;
  _11 = p_25 + _10;
  _12 = _11->f;
  free (_12);
  i_35 = i_14 + 1;

  <bb 7> [0.00%]:
  # i_14 = PHI <0(5), i_35(6)>
  if (i_14 <= 9)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  # _15 = PHI <200(5), 0(7)>
  return _15;

}


