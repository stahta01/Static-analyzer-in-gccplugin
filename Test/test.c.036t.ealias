
;; Function printf (printf, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fmt = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = __fmt
_4 = NONLOCAL
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__fmt = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__printf_chk = { }
_4 = { ESCAPED NONLOCAL }


Alias information for printf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.3509 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__fmt_2(D), points-to NULL, points-to vars: { D.3509 } (nonlocal, escaped, restrict)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [0.00%]:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function copy_array (copy_array, funcdef_no=39, decl_uid=3056, cgraph_uid=39, symbol_order=40)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
dst = &NONLOCAL
src = &NONLOCAL
n = &NONLOCAL
size = &NONLOCAL
ESCAPED = size
ESCAPED = n
_1 = NONLOCAL
_2 = _1
doubledereftmp(15) = *src
*dst = doubledereftmp(15)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
dst = { NONLOCAL }
src = { NONLOCAL } same as dst
n = { NONLOCAL } same as dst
size = { NONLOCAL } same as dst
st_mult = { }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
doubledereftmp(15) = { ESCAPED NONLOCAL }


Alias information for copy_array

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

dst_8(D), points-to non-local, points-to NULL, points-to vars: { }
src_9(D), points-to non-local, points-to NULL, points-to vars: { }

copy_array (void * dst, const void * src, size_t n, size_t size)
{
  int _1;
  long unsigned int _2;

  <bb 2> [0.00%]:
  if (n_4(D) != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = st_mult (size_6(D), n_4(D));
  _2 = (long unsigned int) _1;
  memcpy (dst_8(D), src_9(D), _2);

  <bb 4> [0.00%]:
  return;

}



;; Function remove_redundant (remove_redundant, funcdef_no=45, decl_uid=3289, cgraph_uid=45, symbol_order=46)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
array = &NONLOCAL
cnt = &NONLOCAL
_1 = cnt
ESCAPED = _1
ESCAPED = &NONLOCAL
work_117 = &HEAP(13)
_2 = cnt
ESCAPED = _2
ESCAPED = &NONLOCAL
redundant_119 = &HEAP(16)
_3 = cnt
_3 = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = _3
_4 = NONLOCAL
_5 = _4
ESCAPED = _5
filled_index_122 = &HEAP(23)
_6 = i_88
_7 = _6
_7 = &NONLOCAL
_8 = array
_9 = *_8
ESCAPED = _9
i_160 = i_88
i_160 = &NONLOCAL
i_88 = &NULL
i_88 = i_160
_10 = i_89
_11 = redundant_119
_12 = *_11
_13 = j_92
_14 = redundant_119
_15 = *_14
_16 = filled_98
_17 = _16
_17 = &NONLOCAL
_18 = filled_index_122
*_18 = j_92
_19 = j_92
_20 = _19
_20 = &NONLOCAL
_21 = array
filled.1_22 = filled_98
filled_155 = filled_98
filled_155 = &NONLOCAL
_23 = filled_98
_24 = _23
_24 = &NONLOCAL
_25 = work_117
_26 = *_21
*_25 = _26
filled_97 = filled_98
filled_97 = filled_155
j_157 = j_92
j_157 = &NONLOCAL
j_92 = &NULL
j_92 = j_157
filled_98 = &NULL
filled_98 = filled_97
_27 = i_89
_28 = _27
_28 = &NONLOCAL
_29 = array
_30 = *_29
ESCAPED = _30
ESCAPED = filled_98
ESCAPED = work_117
_31 = NONLOCAL
_32 = _31
common_144 = _32
_33 = i_89
_34 = _33
_34 = &NONLOCAL
_35 = array
_36 = *_35
_37 = *_36 + 4
_38 = _37
_123 = _37
_39 = _123
_40 = i_89
_41 = redundant_119
derefaddrtmp(72) = &NONLOCAL
*_41 = derefaddrtmp(72)
_42 = j_93
_43 = _42
_43 = &NONLOCAL
_44 = work_117
_45 = *_44
_46 = *_45 + 4
_47 = _46
_124 = _46
_48 = _124
_49 = j_93
_50 = _49
_50 = &NONLOCAL
_51 = filled_index_122
_52 = *_51
_53 = _52
_54 = redundant_119
derefaddrtmp(88) = &NONLOCAL
*_54 = derefaddrtmp(88)
j_153 = j_93
j_153 = &NONLOCAL
j_93 = &NULL
j_93 = j_153
_56 = i_89
_57 = _56
_57 = &NONLOCAL
_58 = array
_59 = *_58
ESCAPED = _59
ESCAPED = &NONLOCAL
_61 = j_94
_62 = _61
_62 = &NONLOCAL
_63 = work_117
_64 = *_63
ESCAPED = _64
ESCAPED = &NONLOCAL
j_151 = j_94
j_151 = &NONLOCAL
j_94 = &NULL
j_94 = j_151
ESCAPED = common_144
i_158 = i_89
i_158 = &NONLOCAL
i_89 = &NULL
i_89 = i_158
_65 = cnt
ESCAPED = work_117
ESCAPED = array
ESCAPED = _65
ESCAPED = &NONLOCAL
_66 = i_90
_67 = redundant_119
_68 = *_67
_69 = i_90
_70 = _69
_70 = &NONLOCAL
_71 = work_117
filled.4_72 = filled_100
filled_138 = filled_100
filled_138 = &NONLOCAL
_73 = filled_100
_74 = _73
_74 = &NONLOCAL
_75 = array
_76 = *_71
*_75 = _76
filled_99 = filled_100
filled_99 = filled_138
i_140 = i_90
i_140 = &NONLOCAL
i_90 = &NULL
i_90 = i_140
filled_100 = &NULL
filled_100 = filled_99
j_129 = filled_100
_77 = i_91
_78 = redundant_119
_79 = *_78
_80 = i_91
_81 = _80
_81 = &NONLOCAL
_82 = work_117
j.5_83 = j_96
j_135 = j_96
j_135 = &NONLOCAL
_84 = j_96
_85 = _84
_85 = &NONLOCAL
_86 = array
_87 = *_82
*_86 = _87
j_95 = j_96
j_95 = j_135
i_137 = i_91
i_137 = &NONLOCAL
i_91 = &NULL
i_91 = i_137
j_96 = filled_100
j_96 = j_95
_134 = filled_100
ESCAPED = filled_100

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL HEAP(13) }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
array = { NONLOCAL }
cnt = { NONLOCAL } same as array
_1 = { NONLOCAL } same as array
calloc = { }
work_117 = { HEAP(13) }
HEAP(13) = { ESCAPED NONLOCAL } same as _26
_2 = { NONLOCAL } same as array
redundant_119 = { HEAP(16) }
HEAP(16) = { NONLOCAL }
_3 = { NONLOCAL } same as array
st_mult = { }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4
malloc = { }
filled_index_122 = { HEAP(23) }
HEAP(23) = { NULL NONLOCAL }
_6 = { NULL NONLOCAL }
i_88 = { NULL NONLOCAL } same as _6
_7 = { NULL NONLOCAL } same as _6
_8 = { NONLOCAL } same as array
_9 = { ESCAPED NONLOCAL }
parse_commit = { }
i_160 = { NULL NONLOCAL } same as _6
_10 = { NULL NONLOCAL } same as _6
i_89 = { NULL NONLOCAL } same as _6
_11 = { HEAP(16) } same as redundant_119
_12 = { NONLOCAL }
_13 = { NULL NONLOCAL } same as _6
j_92 = { NULL NONLOCAL } same as _6
_14 = { HEAP(16) } same as redundant_119
_15 = { NONLOCAL }
_16 = { NULL NONLOCAL } same as _6
filled_98 = { NULL NONLOCAL } same as _6
_17 = { NULL NONLOCAL } same as _6
_18 = { HEAP(23) } same as filled_index_122
_19 = { NULL NONLOCAL } same as _6
_20 = { NULL NONLOCAL } same as _6
_21 = { NONLOCAL } same as array
filled.1_22 = { NULL NONLOCAL } same as _6
filled_155 = { NULL NONLOCAL } same as _6
_23 = { NULL NONLOCAL } same as _6
_24 = { NULL NONLOCAL } same as _6
_25 = { HEAP(13) } same as work_117
_26 = { ESCAPED NONLOCAL }
filled_97 = { NULL NONLOCAL } same as _6
j_157 = { NULL NONLOCAL } same as _6
_27 = { NULL NONLOCAL } same as _6
_28 = { NULL NONLOCAL } same as _6
_29 = { NONLOCAL } same as array
_30 = { ESCAPED NONLOCAL }
paint_down_to_common = { }
_31 = { ESCAPED NONLOCAL } same as _4
_32 = { ESCAPED NONLOCAL } same as _4
common_144 = { ESCAPED NONLOCAL } same as _4
_33 = { NULL NONLOCAL } same as _6
_34 = { NULL NONLOCAL } same as _6
_35 = { NONLOCAL } same as array
_36 = { ESCAPED NONLOCAL }
_37 = { ESCAPED NONLOCAL }
_38 = { ESCAPED NONLOCAL } same as _37
_123 = { ESCAPED NONLOCAL } same as _37
_39 = { ESCAPED NONLOCAL } same as _37
_40 = { NULL NONLOCAL } same as _6
_41 = { HEAP(16) } same as redundant_119
derefaddrtmp(72) = { NONLOCAL } same as array
_42 = { NULL NONLOCAL } same as _6
j_93 = { NULL NONLOCAL } same as _6
_43 = { NULL NONLOCAL } same as _6
_44 = { HEAP(13) } same as work_117
_45 = { ESCAPED NONLOCAL }
_46 = { ESCAPED NONLOCAL }
_47 = { ESCAPED NONLOCAL } same as _46
_124 = { ESCAPED NONLOCAL } same as _46
_48 = { ESCAPED NONLOCAL } same as _46
_49 = { NULL NONLOCAL } same as _6
_50 = { NULL NONLOCAL } same as _6
_51 = { HEAP(23) } same as filled_index_122
_52 = { NULL NONLOCAL }
_53 = { NULL NONLOCAL } same as _52
_54 = { HEAP(16) } same as redundant_119
derefaddrtmp(88) = { NONLOCAL } same as array
j_153 = { NULL NONLOCAL } same as _6
_56 = { NULL NONLOCAL } same as _6
_57 = { NULL NONLOCAL } same as _6
_58 = { NONLOCAL } same as array
_59 = { ESCAPED NONLOCAL }
clear_commit_marks = { }
_61 = { NULL NONLOCAL } same as _6
j_94 = { NULL NONLOCAL } same as _6
_62 = { NULL NONLOCAL } same as _6
_63 = { HEAP(13) } same as work_117
_64 = { ESCAPED NONLOCAL }
j_151 = { NULL NONLOCAL } same as _6
free_commit_list = { }
i_158 = { NULL NONLOCAL } same as _6
_65 = { NONLOCAL } same as array
copy_array = { }
_66 = { NULL NONLOCAL } same as _6
i_90 = { NULL NONLOCAL } same as _6
_67 = { HEAP(16) } same as redundant_119
_68 = { NONLOCAL }
_69 = { NULL NONLOCAL } same as _6
_70 = { NULL NONLOCAL } same as _6
_71 = { HEAP(13) } same as work_117
filled.4_72 = { NULL NONLOCAL } same as _6
filled_100 = { NULL NONLOCAL } same as _6
filled_138 = { NULL NONLOCAL } same as _6
_73 = { NULL NONLOCAL } same as _6
_74 = { NULL NONLOCAL } same as _6
_75 = { NONLOCAL } same as array
_76 = { ESCAPED NONLOCAL } same as _26
filled_99 = { NULL NONLOCAL } same as _6
i_140 = { NULL NONLOCAL } same as _6
j_129 = { NULL NONLOCAL } same as _6
_77 = { NULL NONLOCAL } same as _6
i_91 = { NULL NONLOCAL } same as _6
_78 = { HEAP(16) } same as redundant_119
_79 = { NONLOCAL }
_80 = { NULL NONLOCAL } same as _6
_81 = { NULL NONLOCAL } same as _6
_82 = { HEAP(13) } same as work_117
j.5_83 = { NULL NONLOCAL } same as _6
j_96 = { NULL NONLOCAL } same as _6
j_135 = { NULL NONLOCAL } same as _6
_84 = { NULL NONLOCAL } same as _6
_85 = { NULL NONLOCAL } same as _6
_86 = { NONLOCAL } same as array
_87 = { ESCAPED NONLOCAL } same as _26
j_95 = { NULL NONLOCAL } same as _6
i_137 = { NULL NONLOCAL } same as _6
_134 = { NULL NONLOCAL } same as _6


Alias information for remove_redundant

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3510 } (escaped, escaped heap)

Flow-insensitive points-to information

_8, points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_11, points-to NULL, points-to vars: { D.3511 }
_14, points-to NULL, points-to vars: { D.3511 }
_18, points-to NULL, points-to vars: { D.3512 }
_21, points-to non-local, points-to NULL, points-to vars: { }
_25, points-to NULL, points-to vars: { D.3510 } (escaped, escaped heap)
_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to NULL, points-to vars: { }
_30, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to NULL, points-to vars: { }
_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_41, points-to NULL, points-to vars: { D.3511 }
_44, points-to NULL, points-to vars: { D.3510 } (escaped, escaped heap)
_45, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_51, points-to NULL, points-to vars: { D.3512 }
_54, points-to NULL, points-to vars: { D.3511 }
_58, points-to non-local, points-to NULL, points-to vars: { }
_59, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_63, points-to NULL, points-to vars: { D.3510 } (escaped, escaped heap)
_64, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_67, points-to NULL, points-to vars: { D.3511 }
_71, points-to NULL, points-to vars: { D.3510 } (escaped, escaped heap)
_75, points-to non-local, points-to NULL, points-to vars: { }
_76, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_78, points-to NULL, points-to vars: { D.3511 }
_82, points-to NULL, points-to vars: { D.3510 } (escaped, escaped heap)
_86, points-to non-local, points-to NULL, points-to vars: { }
_87, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
work_117, points-to NULL, points-to vars: { D.3510 } (escaped, escaped heap)
redundant_119, points-to NULL, points-to vars: { D.3511 }
filled_index_122, points-to NULL, points-to vars: { D.3512 }
array_125(D), points-to non-local, points-to NULL, points-to vars: { }
common_144, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

remove_redundant (struct commit * * array, int cnt)
{
  struct commit_list * common;
  int filled;
  int j;
  int i;
  int * filled_index;
  unsigned char * redundant;
  struct commit * * work;
  long unsigned int _1;
  long unsigned int _2;
  int _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  struct commit * * _8;
  struct commit * _9;
  sizetype _10;
  unsigned char * _11;
  unsigned char _12;
  sizetype _13;
  unsigned char * _14;
  unsigned char _15;
  long unsigned int _16;
  long unsigned int _17;
  int * _18;
  long unsigned int _19;
  long unsigned int _20;
  struct commit * * _21;
  int filled.1_22;
  long unsigned int _23;
  long unsigned int _24;
  struct commit * * _25;
  struct commit * _26;
  long unsigned int _27;
  long unsigned int _28;
  struct commit * * _29;
  struct commit * _30;
  int _31;
  long int _32;
  long unsigned int _33;
  long unsigned int _34;
  struct commit * * _35;
  struct commit * _36;
  <unnamed-unsigned:27> _37;
  unsigned int _38;
  unsigned int _39;
  sizetype _40;
  unsigned char * _41;
  long unsigned int _42;
  long unsigned int _43;
  struct commit * * _44;
  struct commit * _45;
  <unnamed-unsigned:27> _46;
  unsigned int _47;
  unsigned int _48;
  long unsigned int _49;
  long unsigned int _50;
  int * _51;
  int _52;
  sizetype _53;
  unsigned char * _54;
  long unsigned int _56;
  long unsigned int _57;
  struct commit * * _58;
  struct commit * _59;
  long unsigned int _61;
  long unsigned int _62;
  struct commit * * _63;
  struct commit * _64;
  long unsigned int _65;
  sizetype _66;
  unsigned char * _67;
  unsigned char _68;
  long unsigned int _69;
  long unsigned int _70;
  struct commit * * _71;
  int filled.4_72;
  long unsigned int _73;
  long unsigned int _74;
  struct commit * * _75;
  struct commit * _76;
  sizetype _77;
  unsigned char * _78;
  unsigned char _79;
  long unsigned int _80;
  long unsigned int _81;
  struct commit * * _82;
  int j.5_83;
  long unsigned int _84;
  long unsigned int _85;
  struct commit * * _86;
  struct commit * _87;
  <unnamed-unsigned:27> _123;
  <unnamed-unsigned:27> _124;
  int _134;

  <bb 2> [0.00%]:
  _1 = (long unsigned int) cnt_114(D);
  work_117 = calloc (_1, 8);
  _2 = (long unsigned int) cnt_114(D);
  redundant_119 = calloc (_2, 1);
  _3 = cnt_114(D) + -1;
  _4 = st_mult (4, _3);
  _5 = (long unsigned int) _4;
  filled_index_122 = malloc (_5);
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _6 = (long unsigned int) i_88;
  _7 = _6 * 8;
  _8 = array_125(D) + _7;
  _9 = *_8;
  parse_commit (_9);
  i_160 = i_88 + 1;

  <bb 4> [0.00%]:
  # i_88 = PHI <0(2), i_160(3)>
  if (i_88 < cnt_114(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 25>; [0.00%]

  <bb 5> [0.00%]:
  _10 = (sizetype) i_89;
  _11 = redundant_119 + _10;
  _12 = *_11;
  if (_12 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 6> [0.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 24>; [0.00%]

  <bb 7> [0.00%]:
  if (i_89 == j_92)
    goto <bb 9>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  _13 = (sizetype) j_92;
  _14 = redundant_119 + _13;
  _15 = *_14;
  if (_15 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  _16 = (long unsigned int) filled_98;
  _17 = _16 * 4;
  _18 = filled_index_122 + _17;
  *_18 = j_92;
  _19 = (long unsigned int) j_92;
  _20 = _19 * 8;
  _21 = array_125(D) + _20;
  filled.1_22 = filled_98;
  filled_155 = filled_98 + 1;
  _23 = (long unsigned int) filled_98;
  _24 = _23 * 8;
  _25 = work_117 + _24;
  _26 = *_21;
  *_25 = _26;

  <bb 11> [0.00%]:
  # filled_97 = PHI <filled_98(9), filled_155(10)>
  j_157 = j_92 + 1;

  <bb 12> [0.00%]:
  # j_92 = PHI <0(5), j_157(11)>
  # filled_98 = PHI <0(5), filled_97(11)>
  if (j_92 < cnt_114(D))
    goto <bb 7>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  _27 = (long unsigned int) i_89;
  _28 = _27 * 8;
  _29 = array_125(D) + _28;
  _30 = *_29;
  _31 = paint_down_to_common (_30, filled_98, work_117);
  _32 = (long int) _31;
  common_144 = (struct commit_list *) _32;
  _33 = (long unsigned int) i_89;
  _34 = _33 * 8;
  _35 = array_125(D) + _34;
  _36 = *_35;
  _37 = _36->object.flags;
  _38 = (unsigned int) _37;
  _123 = _37 & 131072;
  _39 = (unsigned int) _123;
  if (_123 != 0)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  _40 = (sizetype) i_89;
  _41 = redundant_119 + _40;
  *_41 = 1;

  <bb 15> [0.00%]:
  goto <bb 19>; [0.00%]

  <bb 16> [0.00%]:
  _42 = (long unsigned int) j_93;
  _43 = _42 * 8;
  _44 = work_117 + _43;
  _45 = *_44;
  _46 = _45->object.flags;
  _47 = (unsigned int) _46;
  _124 = _46 & 65536;
  _48 = (unsigned int) _124;
  if (_124 != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  _49 = (long unsigned int) j_93;
  _50 = _49 * 4;
  _51 = filled_index_122 + _50;
  _52 = *_51;
  _53 = (sizetype) _52;
  _54 = redundant_119 + _53;
  *_54 = 1;

  <bb 18> [0.00%]:
  j_153 = j_93 + 1;

  <bb 19> [0.00%]:
  # j_93 = PHI <0(15), j_153(18)>
  if (j_93 < filled_98)
    goto <bb 16>; [0.00%]
  else
    goto <bb 20>; [0.00%]

  <bb 20> [0.00%]:
  _56 = (long unsigned int) i_89;
  _57 = _56 * 8;
  _58 = array_125(D) + _57;
  _59 = *_58;
  clear_commit_marks (_59, 983040);
  goto <bb 22>; [0.00%]

  <bb 21> [0.00%]:
  _61 = (long unsigned int) j_94;
  _62 = _61 * 8;
  _63 = work_117 + _62;
  _64 = *_63;
  clear_commit_marks (_64, 983040);
  j_151 = j_94 + 1;

  <bb 22> [0.00%]:
  # j_94 = PHI <0(20), j_151(21)>
  if (j_94 < filled_98)
    goto <bb 21>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 23> [0.00%]:
  free_commit_list (common_144);

  <bb 24> [0.00%]:
  i_158 = i_89 + 1;

  <bb 25> [0.00%]:
  # i_89 = PHI <0(4), i_158(24)>
  if (i_89 < cnt_114(D))
    goto <bb 5>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 26> [0.00%]:
  _65 = (long unsigned int) cnt_114(D);
  copy_array (work_117, array_125(D), _65, 8);
  goto <bb 30>; [0.00%]

  <bb 27> [0.00%]:
  _66 = (sizetype) i_90;
  _67 = redundant_119 + _66;
  _68 = *_67;
  if (_68 == 0)
    goto <bb 28>; [0.00%]
  else
    goto <bb 29>; [0.00%]

  <bb 28> [0.00%]:
  _69 = (long unsigned int) i_90;
  _70 = _69 * 8;
  _71 = work_117 + _70;
  filled.4_72 = filled_100;
  filled_138 = filled_100 + 1;
  _73 = (long unsigned int) filled_100;
  _74 = _73 * 8;
  _75 = array_125(D) + _74;
  _76 = *_71;
  *_75 = _76;

  <bb 29> [0.00%]:
  # filled_99 = PHI <filled_100(27), filled_138(28)>
  i_140 = i_90 + 1;

  <bb 30> [0.00%]:
  # i_90 = PHI <0(26), i_140(29)>
  # filled_100 = PHI <0(26), filled_99(29)>
  if (i_90 < cnt_114(D))
    goto <bb 27>; [0.00%]
  else
    goto <bb 31>; [0.00%]

  <bb 31> [0.00%]:
  j_129 = filled_100;
  goto <bb 35>; [0.00%]

  <bb 32> [0.00%]:
  _77 = (sizetype) i_91;
  _78 = redundant_119 + _77;
  _79 = *_78;
  if (_79 != 0)
    goto <bb 33>; [0.00%]
  else
    goto <bb 34>; [0.00%]

  <bb 33> [0.00%]:
  _80 = (long unsigned int) i_91;
  _81 = _80 * 8;
  _82 = work_117 + _81;
  j.5_83 = j_96;
  j_135 = j_96 + 1;
  _84 = (long unsigned int) j_96;
  _85 = _84 * 8;
  _86 = array_125(D) + _85;
  _87 = *_82;
  *_86 = _87;

  <bb 34> [0.00%]:
  # j_95 = PHI <j_96(32), j_135(33)>
  i_137 = i_91 + 1;

  <bb 35> [0.00%]:
  # i_91 = PHI <0(31), i_137(34)>
  # j_96 = PHI <filled_100(31), j_95(34)>
  if (i_91 < cnt_114(D))
    goto <bb 32>; [0.00%]
  else
    goto <bb 36>; [0.00%]

  <bb 36> [0.00%]:
  free (work_117);
  free (redundant_119);
  free (filled_index_122);
  _134 = filled_100;
  return filled_100;

}



;; Function xrealloc (xrealloc, funcdef_no=43, decl_uid=3279, cgraph_uid=43, symbol_order=44)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ptr = &NONLOCAL
size = &NONLOCAL
ret_17 = &HEAP(11)
doubledereftmp(12) = *ptr
*ret_17 = doubledereftmp(12)
ret_17 = ptr
_3 = _1
_3 = _2
ret_19 = &HEAP(17)
doubledereftmp(18) = *ptr
*ret_19 = doubledereftmp(18)
ret_19 = ptr
ret_7 = ret_17
ret_7 = ret_19
ret_21 = &HEAP(21)
doubledereftmp(22) = *ptr
*ret_21 = doubledereftmp(22)
ret_21 = ptr
_6 = _4
_6 = _5
ret_23 = &HEAP(27)
doubledereftmp(28) = *ptr
*ret_23 = doubledereftmp(28)
ret_23 = ptr
ret_8 = ret_21
ret_8 = ret_23
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &STRING
_27 = NONLOCAL
ESCAPED = &NONLOCAL
ret_9 = ret_7
ret_9 = ret_8
_26 = ret_9
ESCAPED = ret_9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL HEAP(11) HEAP(17) HEAP(21) HEAP(27) }
NONLOCAL = { ESCAPED NONLOCAL } same as _27
STOREDANYTHING = { }
INTEGER = { ANYTHING }
ptr = { NONLOCAL }
size = { NONLOCAL } same as ptr
ret_17 = { NONLOCAL HEAP(11) }
HEAP(11) = { ESCAPED NONLOCAL }
doubledereftmp(12) = { ESCAPED NONLOCAL }
_1 = { }
_2 = { }
_3 = { }
ret_19 = { NONLOCAL HEAP(17) }
HEAP(17) = { ESCAPED NONLOCAL }
doubledereftmp(18) = { ESCAPED NONLOCAL } same as doubledereftmp(12)
ret_7 = { NONLOCAL HEAP(11) HEAP(17) }
ret_21 = { NONLOCAL HEAP(21) }
HEAP(21) = { ESCAPED NONLOCAL }
doubledereftmp(22) = { ESCAPED NONLOCAL } same as doubledereftmp(12)
_4 = { }
_5 = { }
_6 = { }
ret_23 = { NONLOCAL HEAP(27) }
HEAP(27) = { ESCAPED NONLOCAL }
doubledereftmp(28) = { ESCAPED NONLOCAL } same as doubledereftmp(12)
ret_8 = { NONLOCAL HEAP(21) HEAP(27) }
__printf_chk = { }
_27 = { ESCAPED NONLOCAL }
exit = { }
ret_9 = { NONLOCAL HEAP(11) HEAP(17) HEAP(21) HEAP(27) }
_26 = { NONLOCAL HEAP(11) HEAP(17) HEAP(21) HEAP(27) } same as ret_9


Alias information for xrealloc

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.3515 D.3516 D.3517 D.3518 } (escaped, escaped heap)

Flow-insensitive points-to information

ret_7, points-to non-local, points-to NULL, points-to vars: { D.3515 D.3516 } (escaped, escaped heap)
ret_8, points-to non-local, points-to NULL, points-to vars: { D.3517 D.3518 } (escaped, escaped heap)
ret_9, points-to non-local, points-to NULL, points-to vars: { D.3515 D.3516 D.3517 D.3518 } (escaped, escaped heap)
ptr_14(D), points-to non-local, points-to NULL, points-to vars: { }
ret_17, points-to non-local, points-to NULL, points-to vars: { D.3515 } (escaped, escaped heap)
ret_19, points-to non-local, points-to NULL, points-to vars: { D.3516 } (escaped, escaped heap)
ret_21, points-to non-local, points-to NULL, points-to vars: { D.3517 } (escaped, escaped heap)
ret_23, points-to non-local, points-to NULL, points-to vars: { D.3518 } (escaped, escaped heap)
_26, points-to non-local, points-to NULL, points-to vars: { D.3515 D.3516 D.3517 D.3518 } (escaped, escaped heap)

xrealloc (void * ptr, size_t size)
{
  int D.3514;
  void * ret;
  _Bool _1;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  void * _26;
  int _27;

  <bb 2> [0.00%]:
  ret_17 = realloc (ptr_14(D), size_15(D));
  _1 = ret_17 == 0B;
  _2 = size_15(D) == 0;
  _3 = _1 & _2;
  if (_3 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  ret_19 = realloc (ptr_14(D), 1);

  <bb 4> [0.00%]:
  # ret_7 = PHI <ret_17(2), ret_19(3)>
  if (ret_7 == 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 5> [0.00%]:
  ret_21 = realloc (ptr_14(D), size_15(D));
  _4 = ret_21 == 0B;
  _5 = size_15(D) == 0;
  _6 = _4 & _5;
  if (_6 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  ret_23 = realloc (ptr_14(D), 1);

  <bb 7> [0.00%]:
  # ret_8 = PHI <ret_21(5), ret_23(6)>
  if (ret_8 == 0B)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [100.00%]:
  _27 = __printf_chk (1, "Out of memory, realloc failed%s", "");
  exit (1);

  <bb 9> [0.00%]:
  # ret_9 = PHI <ret_7(4), ret_8(7)>
  _26 = ret_9;
  return ret_9;

}



;; Function commit_list_insert (commit_list_insert, funcdef_no=44, decl_uid=3284, cgraph_uid=44, symbol_order=45)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
item = &NONLOCAL
list_p = &NONLOCAL
ESCAPED = &NONLOCAL
new_list_4 = &HEAP(12)
*new_list_4 = item
_1 = *list_p
*new_list_4 + 64 = _1
*list_p = new_list_4
_10 = new_list_4
ESCAPED = new_list_4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(12) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
item = { NONLOCAL }
list_p = { NONLOCAL } same as item
malloc = { }
new_list_4 = { HEAP(12) }
HEAP(12) = { ESCAPED NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_10 = { HEAP(12) } same as new_list_4


Alias information for commit_list_insert

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.3519 } (escaped, escaped heap)

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
new_list_4, points-to NULL, points-to vars: { D.3519 } (escaped, escaped heap)
item_5(D), points-to non-local, points-to NULL, points-to vars: { }
list_p_7(D), points-to non-local, points-to NULL, points-to vars: { }
_10, points-to NULL, points-to vars: { D.3519 } (escaped, escaped heap)

commit_list_insert (struct commit * item, struct commit_list * * list_p)
{
  struct commit_list * new_list;
  struct commit_list * _1;
  struct commit_list * _10;

  <bb 2> [0.00%]:
  new_list_4 = malloc (16);
  new_list_4->item = item_5(D);
  _1 = *list_p_7(D);
  new_list_4->next = _1;
  *list_p_7(D) = new_list_4;
  _10 = new_list_4;
  return new_list_4;

}



;; Function reduce_heads (reduce_heads, funcdef_no=46, decl_uid=3331, cgraph_uid=46, symbol_order=47)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
heads = &NONLOCAL
result = &NULL
_1 = *p_32
_2 = *_1 + 4
_3 = *p_32
_4 = _2
*_3 + 4 = _4
p_76 = *p_32 + 64
p_32 = heads
p_32 = p_76
_5 = *p_33
_6 = *_5 + 4
_7 = _6
_53 = _6
_8 = _53
_9 = *p_33
_10 = *_9 + 4
_11 = *p_33
_12 = _10
_12 = &NONLOCAL
*_11 + 4 = _12
num_head_73 = num_head_37
num_head_73 = &NONLOCAL
num_head_36 = num_head_37
num_head_36 = num_head_73
p_74 = *p_33 + 64
p_33 = heads
p_33 = p_74
num_head_37 = &NULL
num_head_37 = num_head_36
_13 = num_head_37
ESCAPED = _13
ESCAPED = &NONLOCAL
array_57 = &HEAP(33)
_14 = *p_34
_15 = *_14 + 4
_16 = _15
_51 = _15
_17 = _51
i.0_18 = i_39
i_68 = i_39
i_68 = &NONLOCAL
_19 = i_39
_20 = _19
_20 = &NONLOCAL
_21 = array_57
_22 = *p_34
*_21 = _22
_23 = *p_34
_24 = *_23 + 4
_25 = *p_34
_26 = _24
*_25 + 4 = _26
i_38 = i_39
i_38 = i_68
p_71 = *p_34 + 64
p_34 = heads
p_34 = p_71
i_39 = &NULL
i_39 = i_38
ESCAPED = array_57
ESCAPED = num_head_37
num_head_61 = NONLOCAL
_27 = i_40
_28 = _27
_28 = &NONLOCAL
_29 = array_57
_30 = *_29
ESCAPED = _30
ESCAPED = tail_35
_31 = NONLOCAL
tail_66 = _31 + 64
i_67 = i_40
i_67 = &NONLOCAL
tail_35 = &result
tail_35 = tail_66
i_40 = &NULL
i_40 = i_67
_64 = result
_41 = &NULL
_41 = _64
ESCAPED = _41

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL result HEAP(33) }
NONLOCAL = { ESCAPED NONLOCAL } same as num_head_61
STOREDANYTHING = { }
INTEGER = { ANYTHING }
heads = { NONLOCAL }
result = { NULL ESCAPED NONLOCAL } same as _64
_1 = { ESCAPED NONLOCAL }
p_32 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _1
_4 = { ESCAPED NONLOCAL } same as _2
p_76 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }
p_33 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _6
_53 = { ESCAPED NONLOCAL } same as _6
_8 = { ESCAPED NONLOCAL } same as _6
_9 = { ESCAPED NONLOCAL } same as _5
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _5
_12 = { ESCAPED NONLOCAL }
num_head_73 = { NULL NONLOCAL }
num_head_37 = { NULL NONLOCAL } same as num_head_73
num_head_36 = { NULL NONLOCAL } same as num_head_73
p_74 = { ESCAPED NONLOCAL }
_13 = { NULL NONLOCAL } same as num_head_73
calloc = { }
array_57 = { HEAP(33) }
HEAP(33) = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL }
p_34 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL } same as _15
_51 = { ESCAPED NONLOCAL } same as _15
_17 = { ESCAPED NONLOCAL } same as _15
i.0_18 = { NULL NONLOCAL } same as num_head_73
i_39 = { NULL NONLOCAL } same as num_head_73
i_68 = { NULL NONLOCAL } same as num_head_73
_19 = { NULL NONLOCAL } same as num_head_73
_20 = { NULL NONLOCAL } same as num_head_73
_21 = { HEAP(33) } same as array_57
_22 = { ESCAPED NONLOCAL } same as _14
_23 = { ESCAPED NONLOCAL } same as _14
_24 = { ESCAPED NONLOCAL }
_25 = { ESCAPED NONLOCAL } same as _14
_26 = { ESCAPED NONLOCAL } same as _24
i_38 = { NULL NONLOCAL } same as num_head_73
p_71 = { ESCAPED NONLOCAL }
remove_redundant = { }
num_head_61 = { ESCAPED NONLOCAL }
_27 = { NULL NONLOCAL } same as num_head_73
i_40 = { NULL NONLOCAL } same as num_head_73
_28 = { NULL NONLOCAL } same as num_head_73
_29 = { HEAP(33) } same as array_57
_30 = { ESCAPED NONLOCAL }
commit_list_insert = { }
tail_35 = { ESCAPED NONLOCAL result }
_31 = { ESCAPED NONLOCAL } same as num_head_61
tail_66 = { ESCAPED NONLOCAL }
i_67 = { NULL NONLOCAL } same as num_head_73
_64 = { NULL ESCAPED NONLOCAL }
_41 = { NULL ESCAPED NONLOCAL } same as _64


Alias information for reduce_heads

Aliased symbols

result, UID D.3334, struct commit_list *, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3334 D.3520 } (escaped, escaped heap)

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_21, points-to NULL, points-to vars: { D.3520 } (escaped, escaped heap)
_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_23, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_29, points-to NULL, points-to vars: { D.3520 } (escaped, escaped heap)
_30, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_31, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
p_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
p_33, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
p_34, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
tail_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.3334 } (escaped)
_41, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
heads_52(D), points-to non-local, points-to NULL, points-to vars: { }
array_57, points-to NULL, points-to vars: { D.3520 } (escaped, escaped heap)
_64, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
tail_66, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
p_71, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
p_74, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
p_76, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

reduce_heads (struct commit_list * heads)
{
  int i;
  int num_head;
  struct commit * * array;
  struct commit_list * * tail;
  struct commit_list * result;
  struct commit_list * p;
  struct commit * _1;
  <unnamed-unsigned:27> _2;
  struct commit * _3;
  <unnamed-unsigned:27> _4;
  struct commit * _5;
  <unnamed-unsigned:27> _6;
  unsigned int _7;
  unsigned int _8;
  struct commit * _9;
  <unnamed-unsigned:27> _10;
  struct commit * _11;
  <unnamed-unsigned:27> _12;
  long unsigned int _13;
  struct commit * _14;
  <unnamed-unsigned:27> _15;
  unsigned int _16;
  unsigned int _17;
  int i.0_18;
  long unsigned int _19;
  long unsigned int _20;
  struct commit * * _21;
  struct commit * _22;
  struct commit * _23;
  <unnamed-unsigned:27> _24;
  struct commit * _25;
  <unnamed-unsigned:27> _26;
  long unsigned int _27;
  long unsigned int _28;
  struct commit * * _29;
  struct commit * _30;
  struct commit_list * _31;
  struct commit_list * _41;
  <unnamed-unsigned:27> _51;
  <unnamed-unsigned:27> _53;
  struct commit_list * _64;

  <bb 2> [0.00%]:
  result = 0B;
  if (heads_52(D) == 0B)
    goto <bb 19>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = p_32->item;
  _2 = _1->object.flags;
  _3 = p_32->item;
  _4 = _2 & 133955583;
  _3->object.flags = _4;
  p_76 = p_32->next;

  <bb 4> [0.00%]:
  # p_32 = PHI <heads_52(D)(2), p_76(3)>
  if (p_32 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 5> [0.00%]:
  _5 = p_33->item;
  _6 = _5->object.flags;
  _7 = (unsigned int) _6;
  _53 = _6 & 262144;
  _8 = (unsigned int) _53;
  if (_53 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 8>; [0.00%]

  <bb 7> [0.00%]:
  _9 = p_33->item;
  _10 = _9->object.flags;
  _11 = p_33->item;
  _12 = _10 | 262144;
  _11->object.flags = _12;
  num_head_73 = num_head_37 + 1;

  <bb 8> [0.00%]:
  # num_head_36 = PHI <num_head_37(6), num_head_73(7)>
  p_74 = p_33->next;

  <bb 9> [0.00%]:
  # p_33 = PHI <heads_52(D)(4), p_74(8)>
  # num_head_37 = PHI <0(4), num_head_36(8)>
  if (p_33 != 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  _13 = (long unsigned int) num_head_37;
  array_57 = calloc (_13, 8);
  goto <bb 14>; [0.00%]

  <bb 11> [0.00%]:
  _14 = p_34->item;
  _15 = _14->object.flags;
  _16 = (unsigned int) _15;
  _51 = _15 & 262144;
  _17 = (unsigned int) _51;
  if (_51 != 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  i.0_18 = i_39;
  i_68 = i_39 + 1;
  _19 = (long unsigned int) i_39;
  _20 = _19 * 8;
  _21 = array_57 + _20;
  _22 = p_34->item;
  *_21 = _22;
  _23 = p_34->item;
  _24 = _23->object.flags;
  _25 = p_34->item;
  _26 = _24 & 133955583;
  _25->object.flags = _26;

  <bb 13> [0.00%]:
  # i_38 = PHI <i_39(11), i_68(12)>
  p_71 = p_34->next;

  <bb 14> [0.00%]:
  # p_34 = PHI <heads_52(D)(10), p_71(13)>
  # i_39 = PHI <0(10), i_38(13)>
  if (p_34 != 0B)
    goto <bb 11>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 15> [0.00%]:
  num_head_61 = remove_redundant (array_57, num_head_37);
  goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  _27 = (long unsigned int) i_40;
  _28 = _27 * 8;
  _29 = array_57 + _28;
  _30 = *_29;
  _31 = commit_list_insert (_30, tail_35);
  tail_66 = &_31->next;
  i_67 = i_40 + 1;

  <bb 17> [0.00%]:
  # tail_35 = PHI <&result(15), tail_66(16)>
  # i_40 = PHI <0(15), i_67(16)>
  if (i_40 < num_head_61)
    goto <bb 16>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 18> [0.00%]:
  free (array_57);
  _64 = result;

  <bb 19> [0.00%]:
  # _41 = PHI <0B(2), _64(18)>
  result ={v} {CLOBBER};
  return _41;

}



;; Function mark_redundant_parents (mark_redundant_parents, funcdef_no=48, decl_uid=3399, cgraph_uid=48, symbol_order=49)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
revs = &NONLOCAL
commit = &NONLOCAL
_1 = *commit + 384
ESCAPED = _1
h_22 = NONLOCAL
_2 = *commit + 384
ESCAPED = _2
orig_cnt_26 = NONLOCAL
ESCAPED = h_22
cnt_28 = NONLOCAL
po_29 = *commit + 384
_3 = *po_14
_4 = *pn_16
pn_35 = *pn_16 + 64
i_36 = i_11
i_36 = &NONLOCAL
_5 = *po_14
_6 = *_5 + 4
_7 = *po_14
_8 = _6
_8 = &NONLOCAL
*_7 + 4 = _8
marked_38 = marked_13
marked_38 = &NONLOCAL
i_10 = i_36
i_10 = i_11
marked_12 = marked_13
marked_12 = marked_38
pn_15 = pn_35
pn_15 = pn_16
po_39 = *po_14 + 64
i_11 = &NULL
i_11 = i_10
marked_13 = &NULL
marked_13 = marked_12
po_14 = po_29
po_14 = po_39
pn_16 = h_22
pn_16 = pn_15
_9 = marked_13
_9 = cnt_28
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = orig_cnt_26
_40 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = h_22
_32 = marked_13
ESCAPED = marked_13

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as h_22
STOREDANYTHING = { }
INTEGER = { ANYTHING }
revs = { NONLOCAL }
commit = { NONLOCAL } same as revs
_1 = { ESCAPED NONLOCAL }
reduce_heads = { }
h_22 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
commit_list_count = { }
orig_cnt_26 = { ESCAPED NONLOCAL } same as h_22
cnt_28 = { ESCAPED NONLOCAL } same as h_22
po_29 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
po_14 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
pn_16 = { ESCAPED NONLOCAL }
pn_35 = { ESCAPED NONLOCAL }
i_36 = { NULL NONLOCAL }
i_11 = { NULL NONLOCAL } same as i_36
_5 = { ESCAPED NONLOCAL } same as _3
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL } same as _3
_8 = { ESCAPED NONLOCAL }
marked_38 = { NULL NONLOCAL } same as i_36
marked_13 = { NULL NONLOCAL } same as i_36
i_10 = { NULL NONLOCAL } same as i_36
marked_12 = { NULL NONLOCAL } same as i_36
pn_15 = { ESCAPED NONLOCAL } same as pn_16
po_39 = { ESCAPED NONLOCAL }
_9 = { NULL ESCAPED NONLOCAL }
__printf_chk = { }
_40 = { ESCAPED NONLOCAL } same as h_22
exit = { }
free_commit_list = { }
_32 = { NULL NONLOCAL } same as i_36


Alias information for mark_redundant_parents

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
po_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
pn_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
pn_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
commit_20(D), points-to non-local, points-to NULL, points-to vars: { }
h_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
po_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
pn_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
po_39, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

mark_redundant_parents (struct rev_info * revs, struct commit * commit)
{
  int D.3522;
  int cnt;
  int orig_cnt;
  struct commit_list * pn;
  struct commit_list * po;
  int marked;
  int i;
  struct commit_list * h;
  struct commit_list * _1;
  struct commit_list * _2;
  struct commit * _3;
  struct commit * _4;
  struct commit * _5;
  <unnamed-unsigned:27> _6;
  struct commit * _7;
  <unnamed-unsigned:27> _8;
  int _9;
  int _32;
  int _40;

  <bb 2> [0.00%]:
  _1 = commit_20(D)->parents;
  h_22 = reduce_heads (_1);
  _2 = commit_20(D)->parents;
  orig_cnt_26 = commit_list_count (_2);
  cnt_28 = commit_list_count (h_22);
  po_29 = commit_20(D)->parents;
  goto <bb 8>; [0.00%]

  <bb 3> [0.00%]:
  if (pn_16 != 0B)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  _3 = po_14->item;
  _4 = pn_16->item;
  if (_3 == _4)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  pn_35 = pn_16->next;
  i_36 = i_11 + 1;
  goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _5 = po_14->item;
  _6 = _5->object.flags;
  _7 = po_14->item;
  _8 = _6 | 16;
  _7->object.flags = _8;
  marked_38 = marked_13 + 1;

  <bb 7> [0.00%]:
  # i_10 = PHI <i_36(5), i_11(6)>
  # marked_12 = PHI <marked_13(5), marked_38(6)>
  # pn_15 = PHI <pn_35(5), pn_16(6)>
  po_39 = po_14->next;

  <bb 8> [0.00%]:
  # i_11 = PHI <0(2), i_10(7)>
  # marked_13 = PHI <0(2), marked_12(7)>
  # po_14 = PHI <po_29(2), po_39(7)>
  # pn_16 = PHI <h_22(2), pn_15(7)>
  if (po_14 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  if (i_11 != cnt_28)
    goto <bb 11>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  _9 = marked_13 + cnt_28;
  if (_9 != orig_cnt_26)
    goto <bb 11>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 11> [100.00%]:
  _40 = __printf_chk (1, "mark_redundant_parents %d", orig_cnt_26);
  exit (1);

  <bb 12> [0.00%]:
  free_commit_list (h_22);
  _32 = marked_13;
  return marked_13;

}



;; Function find_merge_parents (find_merge_parents, funcdef_no=47, decl_uid=3355, cgraph_uid=47, symbol_order=48)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
result = &NONLOCAL
in = &NONLOCAL
head = &NONLOCAL
parents = &NULL
_1 = *in + 128
_2 = pos_56
p_96 = _1
newline_97 = p_96
newline_97 = &NULL
newline.9_3 = newline_97
p.10_4 = p_96
_5 = newline.9_3
_5 = p.10_4
iftmp.8_99 = _5
CALLUSED(22) = CALLUSED(22) + UNKNOWN
CALLUSED(22) = *CALLUSED(22) + UNKNOWN
CALLUSED(22) = p_96
_6 = CALLUSED(22)
_6 = NONLOCAL
iftmp.8_98 = _6
iftmp.8_61 = iftmp.8_99
iftmp.8_61 = iftmp.8_98
_8 = _7
_9 = _8
_9 = iftmp.8_61
pos_101 = _9
pos_101 = pos_56
ESCAPED = p_96
ESCAPED = &oid
_10 = NONLOCAL
_12 = *p_96
_14 = *p_96
ESCAPED = &oid
_15 = NONLOCAL
_16 = _15
obj_104 = _16
ESCAPED = &NULL
ESCAPED = &NULL
ESCAPED = obj_104
ESCAPED = &NONLOCAL
_17 = NONLOCAL
_18 = _17
parent_106 = _18
ESCAPED = parent_106
ESCAPED = &parents
_19 = parent_106 + UNKNOWN
_20 = obj_104 + UNKNOWN
ESCAPED = result
ESCAPED = _20
ESCAPED = _19
pos_56 = &NULL
pos_56 = pos_101
pos_56 = pos_101
_21 = pos_56
_22 = *in + 64
ESCAPED = head
_23 = NONLOCAL
_24 = _23
head_commit_78 = _24
ESCAPED = head_commit_78
ESCAPED = &parents
parents.11_25 = parents
ESCAPED = parents.11_25
_26 = NONLOCAL
parents = _26
ESCAPED = &parents
_27 = NONLOCAL
_28 = _27
cmit_91 = _28
_29 = cmit_91 + UNKNOWN
_30 = *result + 64
_31 = i_57
_32 = _31
_32 = &NONLOCAL
_33 = _30
_34 = _33 + UNKNOWN
ESCAPED = _34
ESCAPED = _29
_35 = NONLOCAL
_36 = *result + 64
_37 = i_57
_38 = _37
_38 = &NONLOCAL
_39 = _36
derefaddrtmp(74) = &NONLOCAL
*_39 + 320 = derefaddrtmp(74)
i_95 = i_57
i_95 = &NONLOCAL
i_57 = &NULL
i_57 = i_95
_40 = *result + 32
parents.12_41 = parents
_42 = *result + 64
_43 = i_58
_44 = _43
_44 = &NONLOCAL
_45 = _42
_46 = *_45 + 320
_47 = *result + 64
_48 = i_58
_49 = _48
_49 = &NONLOCAL
_50 = _47
_51 = *result + 64
_52 = j_60
_53 = _52
_53 = &NONLOCAL
_54 = _51
doubledereftmp(93) = *_50 + UNKNOWN
*_54 + UNKNOWN = doubledereftmp(93)
j_88 = j_60
j_88 = &NONLOCAL
j_59 = j_60
j_59 = j_88
i_89 = i_58
i_89 = &NONLOCAL
i_58 = &NULL
i_58 = i_89
j_60 = &NULL
j_60 = j_59
_55 = *result + 32
*result + 32 = j_60

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL parents oid }
NONLOCAL = { ESCAPED NONLOCAL } same as _10
STOREDANYTHING = { }
INTEGER = { ANYTHING }
result = { NONLOCAL }
in = { NONLOCAL } same as result
head = { NONLOCAL } same as result
parents = { NULL ESCAPED NONLOCAL } same as parents.11_25
_1 = { ESCAPED NONLOCAL }
_2 = { NULL ESCAPED NONLOCAL }
pos_56 = { NULL ESCAPED NONLOCAL } same as _2
p_96 = { ESCAPED NONLOCAL } same as _1
newline_97 = { NULL ESCAPED NONLOCAL }
newline.9_3 = { NULL ESCAPED NONLOCAL } same as newline_97
p.10_4 = { ESCAPED NONLOCAL } same as _1
_5 = { NULL ESCAPED NONLOCAL } same as newline_97
iftmp.8_99 = { NULL ESCAPED NONLOCAL } same as newline_97
strlen = { }
CALLUSED(22) = { ESCAPED NONLOCAL }
CALLCLOBBERED(23) = { }
_6 = { ESCAPED NONLOCAL }
iftmp.8_98 = { ESCAPED NONLOCAL } same as _6
iftmp.8_61 = { NULL ESCAPED NONLOCAL } same as _2
_7 = { }
_8 = { }
_9 = { NULL ESCAPED NONLOCAL } same as _2
pos_101 = { NULL ESCAPED NONLOCAL } same as _2
get_oid_hex = { }
oid = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL } same as _12
parse_object = { }
_15 = { ESCAPED NONLOCAL } same as _10
_16 = { ESCAPED NONLOCAL } same as _10
obj_104 = { ESCAPED NONLOCAL } same as _10
peel_to_type = { }
_17 = { ESCAPED NONLOCAL } same as _10
_18 = { ESCAPED NONLOCAL } same as _10
parent_106 = { ESCAPED NONLOCAL } same as _10
commit_list_insert = { }
_19 = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL }
add_merge_parent = { }
_21 = { NULL ESCAPED NONLOCAL } same as _2
_22 = { ESCAPED NONLOCAL }
lookup_commit = { }
_23 = { ESCAPED NONLOCAL } same as _10
_24 = { ESCAPED NONLOCAL } same as _10
head_commit_78 = { ESCAPED NONLOCAL } same as _10
parents.11_25 = { NULL ESCAPED NONLOCAL }
reduce_heads = { }
_26 = { ESCAPED NONLOCAL } same as _10
pop_commit = { }
_27 = { ESCAPED NONLOCAL } same as _10
_28 = { ESCAPED NONLOCAL } same as _10
cmit_91 = { ESCAPED NONLOCAL } same as _10
_29 = { ESCAPED NONLOCAL }
_30 = { ESCAPED NONLOCAL }
_31 = { NULL NONLOCAL }
i_57 = { NULL NONLOCAL } same as _31
_32 = { NULL NONLOCAL } same as _31
_33 = { ESCAPED NONLOCAL } same as _30
_34 = { ESCAPED NONLOCAL }
oidcmp = { }
_35 = { ESCAPED NONLOCAL } same as _10
_36 = { ESCAPED NONLOCAL }
_37 = { NULL NONLOCAL } same as _31
_38 = { NULL NONLOCAL } same as _31
_39 = { ESCAPED NONLOCAL } same as _36
derefaddrtmp(74) = { NONLOCAL } same as result
i_95 = { NULL NONLOCAL } same as _31
_40 = { ESCAPED NONLOCAL }
parents.12_41 = { NULL ESCAPED NONLOCAL } same as parents.11_25
_42 = { ESCAPED NONLOCAL }
_43 = { NULL NONLOCAL } same as _31
i_58 = { NULL NONLOCAL } same as _31
_44 = { NULL NONLOCAL } same as _31
_45 = { ESCAPED NONLOCAL } same as _42
_46 = { ESCAPED NONLOCAL }
_47 = { ESCAPED NONLOCAL }
_48 = { NULL NONLOCAL } same as _31
_49 = { NULL NONLOCAL } same as _31
_50 = { ESCAPED NONLOCAL } same as _47
_51 = { ESCAPED NONLOCAL }
_52 = { NULL NONLOCAL } same as _31
j_60 = { NULL NONLOCAL } same as _31
_53 = { NULL NONLOCAL } same as _31
_54 = { ESCAPED NONLOCAL } same as _51
doubledereftmp(93) = { ESCAPED NONLOCAL }
j_88 = { NULL NONLOCAL } same as _31
j_59 = { NULL NONLOCAL } same as _31
i_89 = { NULL NONLOCAL } same as _31
_55 = { ESCAPED NONLOCAL }


Alias information for find_merge_parents

Aliased symbols

oid, UID D.3365, struct object_id, is addressable
parents, UID D.3357, struct commit_list *, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3357 D.3365 } (escaped)

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
parents.11_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_30, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_33, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_34, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_39, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
parents.12_41, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_42, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_45, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_47, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_50, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_51, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_54, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
in_75(D), points-to non-local, points-to NULL, points-to vars: { }
head_76(D), points-to non-local, points-to NULL, points-to vars: { }
head_commit_78, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
result_84(D), points-to non-local, points-to NULL, points-to vars: { }
cmit_91, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
p_96, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
newline_97, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
obj_104, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
parent_106, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

find_merge_parents (struct merge_parents * result, struct strbuf * in, struct object_id * head)
{
  struct commit * cmit;
  struct object * obj;
  struct commit * parent;
  struct object_id oid;
  char * newline;
  char * p;
  int len;
  int j;
  int i;
  int pos;
  struct commit * head_commit;
  struct commit_list * parents;
  char * _1;
  sizetype _2;
  long int newline.9_3;
  long int p.10_4;
  long int _5;
  long unsigned int _6;
  _Bool _7;
  int _8;
  int _9;
  int _10;
  char _12;
  char _14;
  int _15;
  long int _16;
  int _17;
  long int _18;
  struct object_id * _19;
  struct object_id * _20;
  long unsigned int _21;
  long unsigned int _22;
  int _23;
  long int _24;
  struct commit_list * parents.11_25;
  struct commit_list * _26;
  int _27;
  long int _28;
  struct object_id * _29;
  struct merge_parent * _30;
  long unsigned int _31;
  long unsigned int _32;
  struct merge_parent * _33;
  struct object_id * _34;
  int _35;
  struct merge_parent * _36;
  long unsigned int _37;
  long unsigned int _38;
  struct merge_parent * _39;
  int _40;
  struct commit_list * parents.12_41;
  struct merge_parent * _42;
  long unsigned int _43;
  long unsigned int _44;
  struct merge_parent * _45;
  unsigned char _46;
  struct merge_parent * _47;
  long unsigned int _48;
  long unsigned int _49;
  struct merge_parent * _50;
  struct merge_parent * _51;
  long unsigned int _52;
  long unsigned int _53;
  struct merge_parent * _54;
  int _55;
  int iftmp.8_61;
  int iftmp.8_98;
  int iftmp.8_99;

  <bb 2> [0.00%]:
  parents = 0B;
  goto <bb 15>; [0.00%]

  <bb 3> [0.00%]:
  _1 = in_75(D)->buf;
  _2 = (sizetype) pos_56;
  p_96 = _1 + _2;
  newline_97 = strchr (p_96, 10);
  if (newline_97 != 0B)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  newline.9_3 = (long int) newline_97;
  p.10_4 = (long int) p_96;
  _5 = newline.9_3 - p.10_4;
  iftmp.8_99 = (int) _5;
  goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _6 = strlen (p_96);
  iftmp.8_98 = (int) _6;

  <bb 6> [0.00%]:
  # iftmp.8_61 = PHI <iftmp.8_99(4), iftmp.8_98(5)>
  _7 = newline_97 != 0B;
  _8 = (int) _7;
  _9 = _8 + iftmp.8_61;
  pos_101 = _9 + pos_56;
  if (iftmp.8_61 <= 42)
    goto <bb 10>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [0.00%]:
  _10 = get_oid_hex (p_96, &oid);
  if (_10 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  _12 = MEM[(char *)p_96 + 40B];
  if (_12 != 9)
    goto <bb 10>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  _14 = MEM[(char *)p_96 + 41B];
  if (_14 != 9)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 14>; [0.00%]

  <bb 11> [0.00%]:
  _15 = parse_object (&oid);
  _16 = (long int) _15;
  obj_104 = (struct object *) _16;
  _17 = peel_to_type (0B, 0, obj_104, 1);
  _18 = (long int) _17;
  parent_106 = (struct commit *) _18;
  if (_17 == 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 12> [0.00%]:
  // predicted unlikely by continue predictor.
  goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  commit_list_insert (parent_106, &parents);
  _19 = &parent_106->object.oid;
  _20 = &obj_104->oid;
  add_merge_parent (result_84(D), _20, _19);
  oid ={v} {CLOBBER};
  goto <bb 15>; [0.00%]

  <bb 14> [0.00%]:
  oid ={v} {CLOBBER};

  <bb 15> [0.00%]:
  # pos_56 = PHI <0(2), pos_101(13), pos_101(14)>
  _21 = (long unsigned int) pos_56;
  _22 = in_75(D)->len;
  if (_21 < _22)
    goto <bb 3>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 16> [0.00%]:
  _23 = lookup_commit (head_76(D));
  _24 = (long int) _23;
  head_commit_78 = (struct commit *) _24;
  if (_23 != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  commit_list_insert (head_commit_78, &parents);

  <bb 18> [0.00%]:
  parents.11_25 = parents;
  _26 = reduce_heads (parents.11_25);
  parents = _26;
  goto <bb 24>; [0.00%]

  <bb 19> [0.00%]:
  _27 = pop_commit (&parents);
  _28 = (long int) _27;
  cmit_91 = (struct commit *) _28;
  goto <bb 23>; [0.00%]

  <bb 20> [0.00%]:
  _29 = &cmit_91->object.oid;
  _30 = result_84(D)->item;
  _31 = (long unsigned int) i_57;
  _32 = _31 * 41;
  _33 = _30 + _32;
  _34 = &_33->commit;
  _35 = oidcmp (_34, _29);
  if (_35 == 0)
    goto <bb 21>; [0.00%]
  else
    goto <bb 22>; [0.00%]

  <bb 21> [0.00%]:
  _36 = result_84(D)->item;
  _37 = (long unsigned int) i_57;
  _38 = _37 * 41;
  _39 = _36 + _38;
  _39->used = 1;

  <bb 22> [0.00%]:
  i_95 = i_57 + 1;

  <bb 23> [0.00%]:
  # i_57 = PHI <0(19), i_95(22)>
  _40 = result_84(D)->nr;
  if (_40 > i_57)
    goto <bb 20>; [0.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 24> [0.00%]:
  parents.12_41 = parents;
  if (parents.12_41 != 0B)
    goto <bb 19>; [0.00%]
  else
    goto <bb 30>; [0.00%]

  <bb 25> [0.00%]:
  _42 = result_84(D)->item;
  _43 = (long unsigned int) i_58;
  _44 = _43 * 41;
  _45 = _42 + _44;
  _46 = _45->used;
  if (_46 != 0)
    goto <bb 26>; [0.00%]
  else
    goto <bb 29>; [0.00%]

  <bb 26> [0.00%]:
  if (i_58 != j_60)
    goto <bb 27>; [0.00%]
  else
    goto <bb 28>; [0.00%]

  <bb 27> [0.00%]:
  _47 = result_84(D)->item;
  _48 = (long unsigned int) i_58;
  _49 = _48 * 41;
  _50 = _47 + _49;
  _51 = result_84(D)->item;
  _52 = (long unsigned int) j_60;
  _53 = _52 * 41;
  _54 = _51 + _53;
  *_54 = *_50;

  <bb 28> [0.00%]:
  j_88 = j_60 + 1;

  <bb 29> [0.00%]:
  # j_59 = PHI <j_60(25), j_88(28)>
  i_89 = i_58 + 1;

  <bb 30> [0.00%]:
  # i_58 = PHI <0(24), i_89(29)>
  # j_60 = PHI <0(24), j_59(29)>
  _55 = result_84(D)->nr;
  if (_55 > i_58)
    goto <bb 25>; [0.00%]
  else
    goto <bb 31>; [0.00%]

  <bb 31> [0.00%]:
  result_84(D)->nr = j_60;
  parents ={v} {CLOBBER};
  return;

}



;; Function main (main, funcdef_no=49, decl_uid=3414, cgraph_uid=49, symbol_order=50)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NULL
ESCAPED = &list
i_18 = i_4
i_18 = &NONLOCAL
i_4 = &NULL
i_4 = i_18
list.6_1 = list
_2 = *list.6_1
ESCAPED = &revs
ESCAPED = _2
list.7_3 = list
ESCAPED = list.7_3
ESCAPED = &result
ESCAPED = &in
ESCAPED = &head
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL list revs result in head }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
commit_list_insert = { }
list = { ESCAPED NONLOCAL } same as list.6_1
i_18 = { NULL NONLOCAL }
i_4 = { NULL NONLOCAL } same as i_18
list.6_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
mark_redundant_parents = { }
revs = { ESCAPED NONLOCAL }
list.7_3 = { ESCAPED NONLOCAL } same as list.6_1
free_commit_list = { }
find_merge_parents = { }
result = { ESCAPED NONLOCAL }
in = { ESCAPED NONLOCAL }
head = { ESCAPED NONLOCAL }


Alias information for main

Aliased symbols

list, UID D.3420, struct commit_list *, is addressable
revs, UID D.3419, struct rev_info, is addressable
head, UID D.3418, struct object_id, is addressable
in, UID D.3417, struct strbuf, is addressable
result, UID D.3416, struct merge_parents, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3416 D.3417 D.3418 D.3419 D.3420 } (escaped)

Flow-insensitive points-to information

list.6_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
list.7_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

main ()
{
  int i;
  struct commit_list * list;
  struct rev_info revs;
  struct object_id head;
  struct strbuf in;
  struct merge_parents result;
  struct commit_list * list.6_1;
  struct commit * _2;
  struct commit_list * list.7_3;

  <bb 2> [0.00%]:
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  commit_list_insert (0B, &list);
  i_18 = i_4 + 1;

  <bb 4> [0.00%]:
  # i_4 = PHI <0(2), i_18(3)>
  if (i_4 <= 9)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  list.6_1 = list;
  _2 = list.6_1->item;
  mark_redundant_parents (&revs, _2);
  list.7_3 = list;
  free_commit_list (list.7_3);
  find_merge_parents (&result, &in, &head);
  result ={v} {CLOBBER};
  in ={v} {CLOBBER};
  head ={v} {CLOBBER};
  revs ={v} {CLOBBER};
  list ={v} {CLOBBER};
  return 0;

}


