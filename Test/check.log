../Compiler/newplugin.so 11.2.0 
test.c: In function ‘foo’:
test.c:5:19: warning: implicit declaration of function ‘malloc’ [-Wimplicit-function-declaration]
    5 |     ptr1 = (int *)malloc(20);
      |                   ^~~~~~
test.c:1:1: note: include ‘<stdlib.h>’ or provide a declaration of ‘malloc’
  +++ |+#include <stdlib.h>
    1 | int *foo(void)
test.c:5:19: warning: incompatible implicit declaration of built-in function ‘malloc’ [-Wbuiltin-declaration-mismatch]
    5 |     ptr1 = (int *)malloc(20);
      |                   ^~~~~~
test.c:5:19: note: include ‘<stdlib.h>’ or provide a declaration of ‘malloc’
test.c: In function ‘changePtr’:
test.c:12:21: warning: incompatible implicit declaration of built-in function ‘malloc’ [-Wbuiltin-declaration-mismatch]
   12 |     int *a = (int *)malloc(40);
      |                     ^~~~~~
test.c:12:21: note: include ‘<stdlib.h>’ or provide a declaration of ‘malloc’
test.c:17:13: warning: assignment to ‘int **’ from incompatible pointer type ‘int *’ [-Wincompatible-pointer-types]
   17 |         ptr = a;           //改變指標變數的值，即改變localPtr存放的值
      |             ^
test.c:18:9: warning: implicit declaration of function ‘printf’ [-Wimplicit-function-declaration]
   18 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^~~~~~
test.c:1:1: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
  +++ |+#include <stdio.h>
    1 | int *foo(void)
test.c:18:9: warning: incompatible implicit declaration of built-in function ‘printf’ [-Wbuiltin-declaration-mismatch]
   18 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^~~~~~
test.c:18:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
test.c:21:14: warning: implicit declaration of function ‘free’ [-Wimplicit-function-declaration]
   21 |              free(a);
      |              ^~~~
test.c:21:14: note: include ‘<stdlib.h>’ or provide a declaration of ‘free’
test.c:21:14: warning: incompatible implicit declaration of built-in function ‘free’ [-Wbuiltin-declaration-mismatch]
test.c:21:14: note: include ‘<stdlib.h>’ or provide a declaration of ‘free’
test.c:22:14: warning: implicit declaration of function ‘exit’ [-Wimplicit-function-declaration]
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^~~~
test.c:22:14: note: include ‘<stdlib.h>’ or provide a declaration of ‘exit’
test.c:22:14: warning: incompatible implicit declaration of built-in function ‘exit’ [-Wbuiltin-declaration-mismatch]
test.c:22:14: note: include ‘<stdlib.h>’ or provide a declaration of ‘exit’
test.c:22:19: warning: passing argument 1 of ‘exit’ makes integer from pointer without a cast [-Wint-conversion]
   22 |              exit(a);//branch possiable have return2 or exit
      |                   ^
      |                   |
      |                   int *
test.c:22:19: note: expected ‘int’ but argument is of type ‘int *’
test.c:32:9: warning: incompatible implicit declaration of built-in function ‘printf’ [-Wbuiltin-declaration-mismatch]
   32 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^~~~~~
test.c:32:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
test.c:33:9: warning: incompatible implicit declaration of built-in function ‘free’ [-Wbuiltin-declaration-mismatch]
   33 |         free(a);
      |         ^~~~
test.c:33:9: note: include ‘<stdlib.h>’ or provide a declaration of ‘free’

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)  1298k ( 86%)
 phase parsing                      :   0.01 (100%)   0.00 (  0%)   0.00 (  0%)   152k ( 10%)
 parser function body               :   0.01 (100%)   0.00 (  0%)   0.00 (  0%)    16k (  1%)
 TOTAL                              :   0.01          0.00          0.01         1505k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.01 (100%)   0.00 (  0%)   0.01 (100%)  2157k ( 99%)
 TOTAL                              :   0.01          0.00          0.01         2186k
../Compiler/newplugin.so 11.2.0 
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
=======node_fun:changePtr=========
node:= 2 
 	next_branch :=3
	next_branch :=5
node:= 3 
 	next_branch :=4
	next_branch :=6
node:= 4 
 node:= 5 
 	next_branch :=6
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 6 
===============The second stage : Mapping stmt=================
# .MEM_4 = VDEF <.MEM_3>
changePtr (&localPtr);
# .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
# .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
===============The second stage : Program slicing=================
------------------VAR_DECL : LHS2------------------
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
changePtr (&localPtr);
=============== program slcing stmt count:1=================
test.c:84:5: warning: use location
   84 |     changePtr(&localPtr);
      |     ^
========================================================
=============== *this point analyzable =================
a_7 = malloc (40);
=============== program slcing stmt count:2=================
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
========================================================
 <ssa_name 0x7fbe6b0707e0
    type <integer_type 0x7fbe6b07d5e8 int public SI
        size <integer_cst 0x7fbe6b068df8 constant 32>
        unit-size <integer_cst 0x7fbe6b068e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
        pointer_to_this <pointer_type 0x7fbe6b0849d8>>
   
    def_stmt _2 = (int) _1;
    version:2>
=============== *this point analyzable =================
exit (_2);
=============== program slcing stmt count:0=================
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
========================================================
=============== *this point analyzable =================
a_10 = malloc (40);
=============== program slcing stmt count:0=================
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
========================================================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================
[40;44m =======print_function_path main  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:changePtr========= [0m
[40;44m =======print_function_path changePtr  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;42m =======pre_check_funciton:changePtr========= [0m
[40;42m =======start_check_funciton:changePtr========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fbe6b070870
    type <pointer_type 0x7fbe6b0849d8
        type <integer_type 0x7fbe6b07d5e8 int public SI
            size <integer_cst 0x7fbe6b068df8 constant 32>
            unit-size <integer_cst 0x7fbe6b068e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
            pointer_to_this <pointer_type 0x7fbe6b0849d8>>
        unsigned DI
        size <integer_cst 0x7fbe6b068bb8 constant 64>
        unit-size <integer_cst 0x7fbe6b068bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fbe6ab7b9d8>>
    var <var_decl 0x7fbe6b910e10 a>
    def_stmt a_7 = malloc (40);
    version:7
    ptr-info 0x7fbe6ab89138>
 <ssa_name 0x7fbe6b070870
    type <pointer_type 0x7fbe6b0849d8
        type <integer_type 0x7fbe6b07d5e8 int public SI
            size <integer_cst 0x7fbe6b068df8 constant 32>
            unit-size <integer_cst 0x7fbe6b068e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
            pointer_to_this <pointer_type 0x7fbe6b0849d8>>
        unsigned DI
        size <integer_cst 0x7fbe6b068bb8 constant 64>
        unit-size <integer_cst 0x7fbe6b068bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fbe6ab7b9d8>>
    var <var_decl 0x7fbe6b910e10 a>
    def_stmt a_7 = malloc (40);
    version:7
    ptr-info 0x7fbe6ab89138>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry changePtr
dot graph target entry end

_1 = (long int) a_7;
In function ‘main’:
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc en1

dot graph target line desc form basic block 4: _1 = (long int) a_7;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start _1 = (long int) a_7;
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start _1 = (long int) a_7;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph stmt end

dot graph entry changePtr
dot graph target entry end

_2 = (int) _1;
test.c:22:14: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc en1

dot graph target line desc form basic block 4: _2 = (int) _1;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start _2 = (int) _1;
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start _2 = (int) _1;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph stmt end

dot graph entry changePtr
dot graph target entry end

exit (_2);
test.c:22:14: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc en1

dot graph target line desc form basic block 4: exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start exit (_2);
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph stmt end

this stmt call this function :exit
trace fucntion name:exit 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry changePtr
dot graph target entry end

exit (_2);
test.c:22:14: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc en1

dot graph target line desc form basic block 4: exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start exit (_2);
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph stmt end

this stmt call this function :exit
trace fucntion name:exit 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry changePtr
dot graph target entry end

free (a_7);
test.c:21:14: warning: use location
   21 |              free(a);
      |              ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc en1

dot graph target line desc form basic block 4: free (a_7);
test.c:21:14: warning: use location
   21 |              free(a);
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start free (a_7);
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start free (a_7);
test.c:21:14: warning: use location
   21 |              free(a);
      |              ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (a_7);
test.c:21:14: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_19 = VDEF <.MEM_14>
printf ("%d\n", a_7);
In function ‘changePtr’:
test.c:18:9: warning: use location
   18 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_19 = VDEF <.MEM_14>
printf ("%d\n", a_7);
bb index := 3
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
dot graph entry changePtr
dot graph target entry end

printf ("%d\n", a_7);
In function ‘main’:
test.c:18:9: warning: use location
   18 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc en1

dot graph target line desc form basic block 3: printf ("%d\n", a_7);
test.c:18:9: warning: use location
   18 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 3dot graph target basicblock en1

dot graph stmt start printf ("%d\n", a_7);
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start printf ("%d\n", a_7);
test.c:18:9: warning: use location
   18 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
dot graph stmt end

this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
bb index := 2
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
In function ‘changePtr’:
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
# .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
dot graph entry changePtr
dot graph target entry end

a_7 = malloc (40);
In function ‘main’:
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: a_7 = malloc (40);
test.c:12:21: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
dot graph target loc end

dot graph target basicblock start from changePtr basic block 2dot graph target basicblock en1

dot graph stmt start a_7 = malloc (40);
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start a_7 = malloc (40);
test.c:12:21: warning: use location
dot graph stmt end

this stmt call this function :malloc
dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_1841564185 dot graph subgraph  _1 = (long int) a_7;
a_7 = malloc (40);
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_412071711 dot graph subgraph  _2 = (int) _1;
_1 = (long int) a_7;
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_1281439748 dot graph subgraph  exit (_2);
_2 = (int) _1;
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_198574511 dot graph subgraph  exit (_2);
_2 = (int) _1;
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_1529167009 dot graph subgraph  free (a_7);
a_7 = malloc (40);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: use location
   21 |              free(a);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location

===== possiable asias =====
_1 = (long int) a_7;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
_1 = (long int) a_7;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
_2 = (int) _1;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
_2 = (int) _1;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fbe6b0707e0
    type <integer_type 0x7fbe6b07d5e8 int public SI
        size <integer_cst 0x7fbe6b068df8 constant 32>
        unit-size <integer_cst 0x7fbe6b068e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
        pointer_to_this <pointer_type 0x7fbe6b0849d8>>
   
    def_stmt _2 = (int) _1;
    version:2>
 <ssa_name 0x7fbe6b0707e0
    type <integer_type 0x7fbe6b07d5e8 int public SI
        size <integer_cst 0x7fbe6b068df8 constant 32>
        unit-size <integer_cst 0x7fbe6b068e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
        pointer_to_this <pointer_type 0x7fbe6b0849d8>>
   
    def_stmt _2 = (int) _1;
    version:2>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fbe6b0707e0
    type <integer_type 0x7fbe6b07d5e8 int public SI
        size <integer_cst 0x7fbe6b068df8 constant 32>
        unit-size <integer_cst 0x7fbe6b068e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
        pointer_to_this <pointer_type 0x7fbe6b0849d8>>
   
    def_stmt _2 = (int) _1;
    version:2>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
dot graph entry changePtr
dot graph target entry end

exit (_2);
test.c:22:14: warning: use location
dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 4: exit (_2);
test.c:22:14: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start exit (_2);
exit (_2);
dot graph stmt end

dot graph stmt start exit (_2);
test.c:22:14: warning: use location
dot graph stmt end

this stmt call this function :exit
trace fucntion name:exit 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
dot graph entry changePtr
dot graph target entry end

exit (_2);
test.c:22:14: warning: use location
dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 4: exit (_2);
test.c:22:14: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start exit (_2);
exit (_2);
dot graph stmt end

dot graph stmt start exit (_2);
test.c:22:14: warning: use location
dot graph stmt end

this stmt call this function :exit
trace fucntion name:exit 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_338327682 dot graph subgraph  exit (_2);
_2 = (int) _1;
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_1276978248 dot graph subgraph  exit (_2);
_2 = (int) _1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: use location
   21 |              free(a);
      |              ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_18 = VDEF <.MEM_17>
free (a_10);
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:0 [0m
[40;31m  	possible double free [Looserules]:2 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fbe6b070900
    type <pointer_type 0x7fbe6b0849d8
        type <integer_type 0x7fbe6b07d5e8 int public SI
            size <integer_cst 0x7fbe6b068df8 constant 32>
            unit-size <integer_cst 0x7fbe6b068e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
            pointer_to_this <pointer_type 0x7fbe6b0849d8>>
        unsigned DI
        size <integer_cst 0x7fbe6b068bb8 constant 64>
        unit-size <integer_cst 0x7fbe6b068bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fbe6ab7b9d8>>
    var <var_decl 0x7fbe6b910e10 a>
    def_stmt a_10 = malloc (40);
    version:10
    ptr-info 0x7fbe6ab89150>
 <ssa_name 0x7fbe6b070900
    type <pointer_type 0x7fbe6b0849d8
        type <integer_type 0x7fbe6b07d5e8 int public SI
            size <integer_cst 0x7fbe6b068df8 constant 32>
            unit-size <integer_cst 0x7fbe6b068e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
            pointer_to_this <pointer_type 0x7fbe6b0849d8>>
        unsigned DI
        size <integer_cst 0x7fbe6b068bb8 constant 64>
        unit-size <integer_cst 0x7fbe6b068bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fbe6ab7b9d8>>
    var <var_decl 0x7fbe6b910e10 a>
    def_stmt a_10 = malloc (40);
    version:10
    ptr-info 0x7fbe6ab89150>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_18 = VDEF <.MEM_17>
free (a_10);
In function ‘changePtr’:
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^
[40;31m    branch possiable have return in bb:5 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
free (a_10);
bb index := 5
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
dot graph entry changePtr
dot graph target entry end

free (a_10);
In function ‘main’:
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: free (a_10);
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph stmt start free (a_10);
a_10 = malloc (40);
dot graph stmt end

dot graph stmt start free (a_10);
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (a_10);
test.c:33:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_17 = VDEF <.MEM_16>
printf ("%d\n", a_10);
In function ‘changePtr’:
test.c:32:9: warning: use location
   32 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
[40;31m    branch possiable have return in bb:5 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
printf ("%d\n", a_10);
bb index := 5
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
dot graph entry changePtr
dot graph target entry end

printf ("%d\n", a_10);
In function ‘main’:
test.c:32:9: warning: use location
   32 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: printf ("%d\n", a_10);
test.c:32:9: warning: use location
   32 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph stmt start printf ("%d\n", a_10);
a_10 = malloc (40);
dot graph stmt end

dot graph stmt start printf ("%d\n", a_10);
test.c:32:9: warning: use location
   32 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
dot graph stmt end

this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*ptr_11(D) = a_10;
In function ‘changePtr’:
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
[40;31m    branch possiable have return in bb:5 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*ptr_11(D) = a_10;
bb index := 5
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
dot graph entry changePtr
dot graph target entry end

*ptr_11(D) = a_10;
In function ‘main’:
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: *ptr_11(D) = a_10;
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph stmt start *ptr_11(D) = a_10;
a_10 = malloc (40);
dot graph stmt end

dot graph stmt start *ptr_11(D) = a_10;
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*ptr_11(D) = a_10;
In function ‘changePtr’:
test.c:31:14: warning: use location
[40;31m    branch possiable have return in bb:5 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*ptr_11(D) = a_10;
bb index := 5
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
dot graph entry changePtr
dot graph target entry end

*ptr_11(D) = a_10;
In function ‘main’:
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: *ptr_11(D) = a_10;
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph stmt start *ptr_11(D) = a_10;
a_10 = malloc (40);
dot graph stmt end

dot graph stmt start *ptr_11(D) = a_10;
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
In function ‘changePtr’:
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
[40;31m    branch possiable have return in bb:5 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
bb index := 5
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
# .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
dot graph entry changePtr
dot graph target entry end

a_10 = malloc (40);
In function ‘main’:
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: a_10 = malloc (40);
test.c:30:20: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
dot graph target loc end

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph stmt start a_10 = malloc (40);
a_10 = malloc (40);
dot graph stmt end

dot graph stmt start a_10 = malloc (40);
test.c:30:20: warning: use location
dot graph stmt end

this stmt call this function :malloc
dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_1916310124 dot graph subgraph  free (a_10);
a_10 = malloc (40);
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_1228108433 dot graph subgraph  printf ("%d\n", a_10);
a_10 = malloc (40);
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_1281483133 dot graph subgraph  *ptr_11(D) = a_10;
a_10 = malloc (40);
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_681949890 dot graph subgraph  *ptr_11(D) = a_10;
a_10 = malloc (40);
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_1718323178 dot graph subgraph  a_10 = malloc (40);
a_10 = malloc (40);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_18 = VDEF <.MEM_17>
free (a_10);
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================
[40;31m   malloc def-leak warring [0m
a_7
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
[40;31m   memory leak and alloc new memory [0m
a_10
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <var_decl 0x7fbe6b910b40 localPtr
    type <pointer_type 0x7fbe6b0849d8
        type <integer_type 0x7fbe6b07d5e8 int public SI
            size <integer_cst 0x7fbe6b068df8 constant 32>
            unit-size <integer_cst 0x7fbe6b068e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
            pointer_to_this <pointer_type 0x7fbe6b0849d8>>
        unsigned DI
        size <integer_cst 0x7fbe6b068bb8 constant 64>
        unit-size <integer_cst 0x7fbe6b068bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fbe6ab7b9d8>>
    addressable unsigned DI test.c:83:10 size <integer_cst 0x7fbe6b068bb8 64> unit-size <integer_cst 0x7fbe6b068bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fbe6ab7cb00 main>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7fbe6b910b40 localPtr
    type <pointer_type 0x7fbe6b0849d8
        type <integer_type 0x7fbe6b07d5e8 int public SI
            size <integer_cst 0x7fbe6b068df8 constant 32>
            unit-size <integer_cst 0x7fbe6b068e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
            pointer_to_this <pointer_type 0x7fbe6b0849d8>>
        unsigned DI
        size <integer_cst 0x7fbe6b068bb8 constant 64>
        unit-size <integer_cst 0x7fbe6b068bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fbe6ab7b9d8>>
    addressable unsigned DI test.c:83:10 size <integer_cst 0x7fbe6b068bb8 64> unit-size <integer_cst 0x7fbe6b068bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fbe6ab7cb00 main>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_4 = VDEF <.MEM_3>
changePtr (&localPtr);
dot graph entry main
dot graph target entry end

changePtr (&localPtr);
test.c:84:5: warning: use location
   84 |     changePtr(&localPtr);
      |     ^
dot graph target loc start # .MEM_4 = VDEF <.MEM_3>
changePtr (&localPtr);
test.c:84:5: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: changePtr (&localPtr);
test.c:84:5: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_4 = VDEF <.MEM_3>
changePtr (&localPtr);
test.c:84:5: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start changePtr (&localPtr);
changePtr (&localPtr);
dot graph stmt end

dot graph stmt start changePtr (&localPtr);
test.c:84:5: warning: use location
dot graph stmt end

this stmt call this function :changePtr
trace fucntion name:changePtr 
[40;44m =======trace_function_path changePtr  function_call count: 4 level :0========  [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
[40;31m  find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: use location
   21 |              free(a);
      |              ^
dot graph start relate form ID : 818074975
from changePtr basic block 4dot graph end relate end

dot graph relate stmt start ID : 2046806840 stmt(free) :free (a_7);
test.c:21:14: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2046806840 stmt(free) :free (a_7);
test.c:21:14: warning: use location
dot graph relate end

# .MEM_18 = VDEF <.MEM_17>
free (a_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_18 = VDEF <.MEM_17>
free (a_10);
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^
dot graph start relate form ID : 818074975
from changePtr basic block 5dot graph end relate end

dot graph relate stmt start ID : 284157489 stmt(free) :free (a_10);
test.c:33:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 284157489 stmt(free) :free (a_10);
test.c:33:9: warning: use location
dot graph relate end

 <var_decl 0x7fbe6b910b40 localPtr
    type <pointer_type 0x7fbe6b0849d8
        type <integer_type 0x7fbe6b07d5e8 int public SI
            size <integer_cst 0x7fbe6b068df8 constant 32>
            unit-size <integer_cst 0x7fbe6b068e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
            pointer_to_this <pointer_type 0x7fbe6b0849d8>>
        unsigned DI
        size <integer_cst 0x7fbe6b068bb8 constant 64>
        unit-size <integer_cst 0x7fbe6b068bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fbe6ab7b9d8>>
    addressable unsigned DI test.c:83:10 size <integer_cst 0x7fbe6b068bb8 64> unit-size <integer_cst 0x7fbe6b068bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fbe6ab7cb00 main>>
[40;36m ======= node_fun:changePtr========= [0m
[40;36m ======= find relate stmt with localPtr ========= [0m
dot graph arrowdot graph start relate for1ID : 818074975
from changePtr basic block 2dot graph end relate end

dot graph relate stmt start ID : 112449917 stmt(call) :a_7 = malloc (40);
In function ‘changePtr’:
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
40
dot graph relate end

dot graph arrowdot graph start relate for1ID : 818074975
from changePtr basic block 5dot graph end relate end

dot graph relate stmt start ID : 1212960181 stmt(call) :a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
40
dot graph relate end

[40;36m ======= relate node_fun argument:localPtr========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 818074975
from changePtr basic block 5dot graph end relate end

test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
*ptr_11(D) = a_10;
dot graph relate stmt start ID : 1985554864 stmt(LHS) :test.c:31:14: warning: use location
*ptr_11(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:2 
# .MEM_4 = VDEF <.MEM_3>
changePtr (&localPtr);
dot graph entry main
dot graph target entry end

changePtr (&localPtr);
In function ‘main’:
test.c:84:5: warning: use location
   84 |     changePtr(&localPtr);
      |     ^
dot graph target loc start # .MEM_4 = VDEF <.MEM_3>
changePtr (&localPtr);
test.c:84:5: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: changePtr (&localPtr);
test.c:84:5: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_4 = VDEF <.MEM_3>
changePtr (&localPtr);
test.c:84:5: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start changePtr (&localPtr);
changePtr (&localPtr);
dot graph stmt end

dot graph stmt start changePtr (&localPtr);
test.c:84:5: warning: use location
dot graph stmt end

this stmt call this function :changePtr
trace fucntion name:changePtr 
[40;44m =======trace_function_path changePtr  function_call count: 4 level :0========  [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
[40;31m  find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: use location
   21 |              free(a);
      |              ^
dot graph start relate form ID : 257694715
from changePtr basic block 4dot graph end relate end

dot graph relate stmt start ID : 1828483024 stmt(free) :free (a_7);
test.c:21:14: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1828483024 stmt(free) :free (a_7);
test.c:21:14: warning: use location
dot graph relate end

# .MEM_18 = VDEF <.MEM_17>
free (a_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_18 = VDEF <.MEM_17>
free (a_10);
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^
dot graph start relate form ID : 257694715
from changePtr basic block 5dot graph end relate end

dot graph relate stmt start ID : 2050540869 stmt(free) :free (a_10);
test.c:33:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2050540869 stmt(free) :free (a_10);
test.c:33:9: warning: use location
dot graph relate end

 <var_decl 0x7fbe6b910b40 localPtr
    type <pointer_type 0x7fbe6b0849d8
        type <integer_type 0x7fbe6b07d5e8 int public SI
            size <integer_cst 0x7fbe6b068df8 constant 32>
            unit-size <integer_cst 0x7fbe6b068e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
            pointer_to_this <pointer_type 0x7fbe6b0849d8>>
        unsigned DI
        size <integer_cst 0x7fbe6b068bb8 constant 64>
        unit-size <integer_cst 0x7fbe6b068bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fbe6ab7b9d8>>
    addressable unsigned DI test.c:83:10 size <integer_cst 0x7fbe6b068bb8 64> unit-size <integer_cst 0x7fbe6b068bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fbe6ab7cb00 main>>
[40;36m ======= node_fun:changePtr========= [0m
[40;36m ======= find relate stmt with localPtr ========= [0m
dot graph arrowdot graph start relate for1ID : 257694715
from changePtr basic block 2dot graph end relate end

dot graph relate stmt start ID : 2115659416 stmt(call) :a_7 = malloc (40);
In function ‘changePtr’:
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
40
dot graph relate end

dot graph arrowdot graph start relate for1ID : 257694715
from changePtr basic block 5dot graph end relate end

dot graph relate stmt start ID : 1719838517 stmt(call) :a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
40
dot graph relate end

[40;36m ======= relate node_fun argument:localPtr========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
dot graph arrowdot graph start relate for1ID : 257694715
from changePtr basic block 5dot graph end relate end

test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
*ptr_11(D) = a_10;
dot graph relate stmt start ID : 613443206 stmt(LHS) :test.c:31:14: warning: use location
*ptr_11(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_798471252 dot graph subgraph  changePtr (&localPtr);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2100819071 dot graph subgraph  changePtr (&localPtr);
dot graph subgrapend

dot graph start relate for1ID : 818074975
from changePtr basic block 5dot graph end relate end

subgraph cluster_510700903 dot graph subgraph  start ID : 1985554864 stmt(relate) ， Tree ID : 818074975 : *ptr_11(D) = a_10;
In function ‘main’:
test.c:31:14: warning: use location
dot graph subgrapend

dot graph start relate for1ID : 257694715
from changePtr basic block 5dot graph end relate end

subgraph cluster_711838935 dot graph subgraph  start ID : 613443206 stmt(relate) ， Tree ID : 257694715 : *ptr_11(D) = a_10;
test.c:31:14: warning: use location
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;44m =======print_function_path changePtr  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;42m =======pre_check_funciton:changePtr========= [0m
[40;42m =======start_check_funciton:changePtr========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fbe6b070870
    type <pointer_type 0x7fbe6b0849d8
        type <integer_type 0x7fbe6b07d5e8 int public SI
            size <integer_cst 0x7fbe6b068df8 constant 32>
            unit-size <integer_cst 0x7fbe6b068e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
            pointer_to_this <pointer_type 0x7fbe6b0849d8>>
        unsigned DI
        size <integer_cst 0x7fbe6b068bb8 constant 64>
        unit-size <integer_cst 0x7fbe6b068bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fbe6ab7b9d8>>
    var <var_decl 0x7fbe6b910e10 a>
    def_stmt a_7 = malloc (40);
    version:7
    ptr-info 0x7fbe6ab89138>
 <ssa_name 0x7fbe6b070870
    type <pointer_type 0x7fbe6b0849d8
        type <integer_type 0x7fbe6b07d5e8 int public SI
            size <integer_cst 0x7fbe6b068df8 constant 32>
            unit-size <integer_cst 0x7fbe6b068e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
            pointer_to_this <pointer_type 0x7fbe6b0849d8>>
        unsigned DI
        size <integer_cst 0x7fbe6b068bb8 constant 64>
        unit-size <integer_cst 0x7fbe6b068bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fbe6ab7b9d8>>
    var <var_decl 0x7fbe6b910e10 a>
    def_stmt a_7 = malloc (40);
    version:7
    ptr-info 0x7fbe6ab89138>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry changePtr
dot graph target entry end

_1 = (long int) a_7;
In function ‘changePtr’:
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc en1

dot graph target line desc form basic block 4: _1 = (long int) a_7;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start _1 = (long int) a_7;
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start _1 = (long int) a_7;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph stmt end

dot graph entry changePtr
dot graph target entry end

_2 = (int) _1;
test.c:22:14: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc en1

dot graph target line desc form basic block 4: _2 = (int) _1;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start _2 = (int) _1;
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start _2 = (int) _1;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph stmt end

dot graph entry changePtr
dot graph target entry end

exit (_2);
test.c:22:14: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc en1

dot graph target line desc form basic block 4: exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start exit (_2);
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph stmt end

this stmt call this function :exit
trace fucntion name:exit 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry changePtr
dot graph target entry end

exit (_2);
test.c:22:14: warning: use location
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc en1

dot graph target line desc form basic block 4: exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start exit (_2);
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
dot graph stmt end

this stmt call this function :exit
trace fucntion name:exit 

 ================== trace ================== 
trace fucntion free:0 
dot graph entry changePtr
dot graph target entry end

free (a_7);
test.c:21:14: warning: use location
   21 |              free(a);
      |              ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc en1

dot graph target line desc form basic block 4: free (a_7);
test.c:21:14: warning: use location
   21 |              free(a);
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start free (a_7);
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start free (a_7);
test.c:21:14: warning: use location
   21 |              free(a);
      |              ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (a_7);
test.c:21:14: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_19 = VDEF <.MEM_14>
printf ("%d\n", a_7);
test.c:18:9: warning: use location
   18 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
[40;31m    branch possiable have return in bb:3 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_19 = VDEF <.MEM_14>
printf ("%d\n", a_7);
bb index := 3
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
dot graph entry changePtr
dot graph target entry end

printf ("%d\n", a_7);
test.c:18:9: warning: use location
   18 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc en1

dot graph target line desc form basic block 3: printf ("%d\n", a_7);
test.c:18:9: warning: use location
   18 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 3dot graph target basicblock en1

dot graph stmt start printf ("%d\n", a_7);
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start printf ("%d\n", a_7);
test.c:18:9: warning: use location
   18 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
dot graph stmt end

this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
bb index := 2
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
# .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
dot graph entry changePtr
dot graph target entry end

a_7 = malloc (40);
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: a_7 = malloc (40);
test.c:12:21: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_14 = VDEF <.MEM_13(D)>
a_7 = malloc (40);
test.c:12:21: warning: use location
dot graph target loc end

dot graph target basicblock start from changePtr basic block 2dot graph target basicblock en1

dot graph stmt start a_7 = malloc (40);
a_7 = malloc (40);
dot graph stmt end

dot graph stmt start a_7 = malloc (40);
test.c:12:21: warning: use location
dot graph stmt end

this stmt call this function :malloc
dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_890780424 dot graph subgraph  _1 = (long int) a_7;
a_7 = malloc (40);
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_1661980982 dot graph subgraph  _2 = (int) _1;
_1 = (long int) a_7;
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_1051355345 dot graph subgraph  exit (_2);
_2 = (int) _1;
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_584860961 dot graph subgraph  exit (_2);
_2 = (int) _1;
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_2074052693 dot graph subgraph  free (a_7);
a_7 = malloc (40);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: use location
   21 |              free(a);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location

===== possiable asias =====
_1 = (long int) a_7;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
_1 = (long int) a_7;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
_2 = (int) _1;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
_2 = (int) _1;
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fbe6b0707e0
    type <integer_type 0x7fbe6b07d5e8 int public SI
        size <integer_cst 0x7fbe6b068df8 constant 32>
        unit-size <integer_cst 0x7fbe6b068e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
        pointer_to_this <pointer_type 0x7fbe6b0849d8>>
   
    def_stmt _2 = (int) _1;
    version:2>
 <ssa_name 0x7fbe6b0707e0
    type <integer_type 0x7fbe6b07d5e8 int public SI
        size <integer_cst 0x7fbe6b068df8 constant 32>
        unit-size <integer_cst 0x7fbe6b068e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
        pointer_to_this <pointer_type 0x7fbe6b0849d8>>
   
    def_stmt _2 = (int) _1;
    version:2>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fbe6b0707e0
    type <integer_type 0x7fbe6b07d5e8 int public SI
        size <integer_cst 0x7fbe6b068df8 constant 32>
        unit-size <integer_cst 0x7fbe6b068e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
        pointer_to_this <pointer_type 0x7fbe6b0849d8>>
   
    def_stmt _2 = (int) _1;
    version:2>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
dot graph entry changePtr
dot graph target entry end

exit (_2);
test.c:22:14: warning: use location
dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 4: exit (_2);
test.c:22:14: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start exit (_2);
exit (_2);
dot graph stmt end

dot graph stmt start exit (_2);
test.c:22:14: warning: use location
dot graph stmt end

this stmt call this function :exit
trace fucntion name:exit 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
dot graph entry changePtr
dot graph target entry end

exit (_2);
test.c:22:14: warning: use location
dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 4: exit (_2);
test.c:22:14: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
dot graph target loc end

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph stmt start exit (_2);
exit (_2);
dot graph stmt end

dot graph stmt start exit (_2);
test.c:22:14: warning: use location
dot graph stmt end

this stmt call this function :exit
trace fucntion name:exit 

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_185311446 dot graph subgraph  exit (_2);
_2 = (int) _1;
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_783435472 dot graph subgraph  exit (_2);
_2 = (int) _1;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: use location
   21 |              free(a);
      |              ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_18 = VDEF <.MEM_17>
free (a_10);
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_20 = VDEF <.MEM_19>
free (a_7);
test.c:21:14: warning: free in this location
   21 |              free(a);
      |              ^

===== possiable asias =====
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:0 [0m
[40;31m  	possible double free [Looserules]:2 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fbe6b070900
    type <pointer_type 0x7fbe6b0849d8
        type <integer_type 0x7fbe6b07d5e8 int public SI
            size <integer_cst 0x7fbe6b068df8 constant 32>
            unit-size <integer_cst 0x7fbe6b068e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
            pointer_to_this <pointer_type 0x7fbe6b0849d8>>
        unsigned DI
        size <integer_cst 0x7fbe6b068bb8 constant 64>
        unit-size <integer_cst 0x7fbe6b068bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fbe6ab7b9d8>>
    var <var_decl 0x7fbe6b910e10 a>
    def_stmt a_10 = malloc (40);
    version:10
    ptr-info 0x7fbe6ab89150>
 <ssa_name 0x7fbe6b070900
    type <pointer_type 0x7fbe6b0849d8
        type <integer_type 0x7fbe6b07d5e8 int public SI
            size <integer_cst 0x7fbe6b068df8 constant 32>
            unit-size <integer_cst 0x7fbe6b068e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fbe6b07d5e8 precision:32 min <integer_cst 0x7fbe6b068db0 -2147483648> max <integer_cst 0x7fbe6b068dc8 2147483647>
            pointer_to_this <pointer_type 0x7fbe6b0849d8>>
        unsigned DI
        size <integer_cst 0x7fbe6b068bb8 constant 64>
        unit-size <integer_cst 0x7fbe6b068bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fbe6ab7b9d8>>
    var <var_decl 0x7fbe6b910e10 a>
    def_stmt a_10 = malloc (40);
    version:10
    ptr-info 0x7fbe6ab89150>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_18 = VDEF <.MEM_17>
free (a_10);
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^
[40;31m    branch possiable have return in bb:5 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
free (a_10);
bb index := 5
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
dot graph entry changePtr
dot graph target entry end

free (a_10);
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: free (a_10);
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph stmt start free (a_10);
a_10 = malloc (40);
dot graph stmt end

dot graph stmt start free (a_10);
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (a_10);
test.c:33:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_17 = VDEF <.MEM_16>
printf ("%d\n", a_10);
test.c:32:9: warning: use location
   32 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
[40;31m    branch possiable have return in bb:5 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
printf ("%d\n", a_10);
bb index := 5
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
dot graph entry changePtr
dot graph target entry end

printf ("%d\n", a_10);
test.c:32:9: warning: use location
   32 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: printf ("%d\n", a_10);
test.c:32:9: warning: use location
   32 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph stmt start printf ("%d\n", a_10);
a_10 = malloc (40);
dot graph stmt end

dot graph stmt start printf ("%d\n", a_10);
test.c:32:9: warning: use location
   32 |         printf("%d\n", a); //經過changPtr函式，localPtr指標變數改指向
      |         ^
dot graph stmt end

this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    fucntion exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*ptr_11(D) = a_10;
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
[40;31m    branch possiable have return in bb:5 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*ptr_11(D) = a_10;
bb index := 5
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
dot graph entry changePtr
dot graph target entry end

*ptr_11(D) = a_10;
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: *ptr_11(D) = a_10;
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph stmt start *ptr_11(D) = a_10;
a_10 = malloc (40);
dot graph stmt end

dot graph stmt start *ptr_11(D) = a_10;
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*ptr_11(D) = a_10;
test.c:31:14: warning: use location
[40;31m    branch possiable have return in bb:5 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*ptr_11(D) = a_10;
bb index := 5
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
dot graph entry changePtr
dot graph target entry end

*ptr_11(D) = a_10;
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc en1

dot graph target line desc form basic block 5: *ptr_11(D) = a_10;
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc end

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph stmt start *ptr_11(D) = a_10;
a_10 = malloc (40);
dot graph stmt end

dot graph stmt start *ptr_11(D) = a_10;
test.c:31:14: warning: use location
   31 |         *ptr = a;
      |              ^
dot graph stmt end


======================================================================
[40;31m    fucntion exit  [0m
# .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
[40;31m    branch possiable have return in bb:5 [0m
beacuse in succ := 6 have return 

======================================================================

======================================================================
[40;31m    branch possiable have return2 or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
bb index := 5
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
   22 |              exit(a);//branch possiable have return2 or exit
      |              ^
beacuse in succ := 4 have return or exit
# .MEM_21 = VDEF <.MEM_20>
exit (_2);
test.c:22:14: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
# .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
dot graph entry changePtr
dot graph target entry end

a_10 = malloc (40);
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: a_10 = malloc (40);
test.c:30:20: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_15 = VDEF <.MEM_14>
a_10 = malloc (40);
test.c:30:20: warning: use location
dot graph target loc end

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph stmt start a_10 = malloc (40);
a_10 = malloc (40);
dot graph stmt end

dot graph stmt start a_10 = malloc (40);
test.c:30:20: warning: use location
dot graph stmt end

this stmt call this function :malloc
dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_1455736054 dot graph subgraph  free (a_10);
a_10 = malloc (40);
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_523639128 dot graph subgraph  printf ("%d\n", a_10);
a_10 = malloc (40);
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_2060413720 dot graph subgraph  *ptr_11(D) = a_10;
a_10 = malloc (40);
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_1224562531 dot graph subgraph  *ptr_11(D) = a_10;
a_10 = malloc (40);
dot graph subgrapend

dot graph target basicblock start from changePtr basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_1751747561 dot graph subgraph  a_10 = malloc (40);
a_10 = malloc (40);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_18 = VDEF <.MEM_17>
free (a_10);
test.c:33:9: warning: use location
   33 |         free(a);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================
[40;31m   malloc def-leak warring [0m
a_7
test.c:12:21: warning: use location
   12 |     int *a = (int *)malloc(40);
      |                     ^
[40;31m   memory leak and alloc new memory [0m
a_10
test.c:30:20: warning: use location
   30 |         a = (int *)malloc(40);
      |                    ^
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
localValue = 1;
localPtr = &localValue;
changePtr (&localPtr);
localValue ={v} {CLOBBER};
localPtr ={v} {CLOBBER};
return 0;

=======Mapping node_fun:changePtr=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
a_7 = malloc (40);
if (test_8(D) != 0)
  goto <bb 3>; [50.00%]
else
  goto <bb 5>; [50.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 536870913]:
printf ("%d\n", a_7);
if (test_8(D) != 0)
  goto <bb 4>; [0.04%]
else
  goto <bb 6>; [99.96%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 214748]:
free (a_7);
_1 = (long int) a_7;
_2 = (int) _1;
exit (_2);

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 536870913]:
a_10 = malloc (40);
*ptr_11(D) = a_10;
printf ("%d\n", a_10);
free (a_10);

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 1073527077]:
# _3 = PHI <20(3), 0(5)>
return _3;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 2 [0m
[40;34m    gimple free   count : 2 [0m
[40;34m    all ptable point : 7 [0m
[40;34m    analyzable ptable point : 4 [0m
[40;34m    analyzable ptable all point stmt : 3 [0m
[40;34m    used_stmt array stack totalsize of : 0.000192 mb[0m
[40;34m    collect time: : 0.001141 s [0m
[40;34m    algorithm time: 0.019893 s [0m
[40;34m    gimple stmt count : : 19 [0m
[40;34m    this report analysis in Tue Feb 22 08:14:53 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  2157k ( 93%)
 phase opt and generate             :   0.03 (100%)   0.02 (100%)   0.05 (100%)   138k (  6%)
 callgraph functions expansion      :   0.02 ( 67%)   0.00 (  0%)   0.03 ( 60%)   104k (  5%)
 ipa lto gimple in                  :   0.01 ( 33%)   0.00 (  0%)   0.00 (  0%)    28k (  1%)
 df live regs                       :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)     0  (  0%)
 tree CCP                           :   0.01 ( 33%)   0.00 (  0%)   0.00 (  0%)  2240  (  0%)
 loop init                          :   0.01 ( 33%)   0.00 (  0%)   0.00 (  0%)  5440  (  0%)
 integrated RA                      :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)    48k (  2%)
 plugin execution                   :   0.00 (  0%)   0.02 (100%)   0.02 ( 40%)   240  (  0%)
 initialize rtl                     :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)    12k (  1%)
 TOTAL                              :   0.03          0.02          0.05         2321k
