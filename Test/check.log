In file included from test.c:6:0:
common.h: In function ‘discard_my_cleanups’:
common.h:94:21: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 2 has type ‘void *’ [-Wformat=]
   printf("freearg: %x\n", ptr->arg);
                    ~^     ~~~~~~~~
                    %p
common.h: In function ‘do_my_cleanups’:
common.h:108:13: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 2 has type ‘void *’ [-Wformat=]
    printf("%x\n", ptr->arg);
            ~^     ~~~~~~~~
            %p
test.c: In function ‘add_symbol_file_command’:
test.c:108:15: warning: implicit declaration of function ‘strcmp’ [-Wimplicit-function-declaration]
      else if (strcmp (arg, "-s") == 0)
               ^~~~~~
test.c: In function ‘main’:
test.c:149:26: warning: passing argument 1 of ‘add_symbol_file_command’ from incompatible pointer type [-Wincompatible-pointer-types]
  add_symbol_file_command(args);
                          ^~~~
test.c:49:1: note: expected ‘char **’ but argument is of type ‘const char **’
 add_symbol_file_command (char **args)
 ^~~~~~~~~~~~~~~~~~~~~~~
=======ipa_pta=========
 <ssa_name 0x7f34f9d308b8
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f989c5a0 new>
    def_stmt new_69 = malloc (32);
    version 69
    ptr-info 0x7f34f98ac0d8>
====================POINTER_TYPE============================
 <ssa_name 0x7f34f988f360
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_11 = malloc (64);
    version 11
    ptr-info 0x7f34f9872f00>
====================POINTER_TYPE============================
 <ssa_name 0x7f34f9d30900
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cbd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f34f98ac120>
====================POINTER_TYPE============================
 <ssa_name 0x7f34f9895f30
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cf30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f34f98ac150>
====================POINTER_TYPE============================
 <ssa_name 0x7f34f988fdc8
    type <pointer_type 0x7f34f98792a0
        type <record_type 0x7f34f98791f8 section_addr_info BLK
            size <integer_cst 0x7f34f9d440a8 constant 192>
            unit size <integer_cst 0x7f34f9d44078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f98791f8 fields <field_decl 0x7f34f9871a18 num_sections> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f98792a0> chain <type_decl 0x7f34f9871ab0 D.4018>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f9890240 section_addrs>
    def_stmt section_addrs_48 = malloc (24);
    version 48
    ptr-info 0x7f34f98ac018>
====================POINTER_TYPE============================
 <ssa_name 0x7f34f98a4090
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f98a37e0 new>
    def_stmt new_80 = malloc (32);
    version 80
    ptr-info 0x7f34f98ac1b0>
====================POINTER_TYPE============================
 <ssa_name 0x7f34f9d30798
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f98a7120 ptr>
    def_stmt ptr_83 = cleanup_chain;
    version 83
    ptr-info 0x7f34f98ac1f8>
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
--------------------xxxxxxxxxxxxxxxxxxxxxxx------------------
# .MEM_103 = VDEF <.MEM_102>
cleanup_chain = new_69;
 <var_decl 0x7f34faabdab0 cleanup_chain
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
    align 64 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <error_mark 0x7f34f9d28bd0>>
------------------------------
_104 = old_chain_70;
 <ssa_name 0x7f34f9895b88
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f989c630 old_chain>
    def_stmt old_chain_70 = cleanup_chain;
    version 70
    ptr-info 0x7f34f98ac0f0>
------------------------------
_68 = _104;
 <ssa_name 0x7f34f98a4e10
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f989c6c0 D.4087>
    def_stmt _104 = old_chain_70;
    version 104
    ptr-info 0x7f34f98ac2b8>
------------------------------
_105 = _68;
 <ssa_name 0x7f34f9d30870
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
   
    def_stmt _68 = _104;
    version 68
    ptr-info 0x7f34f98ac0c0>
------------------------------
_67 = _105;
 <ssa_name 0x7f34f98a4e58
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f989c000 D.4072>
    def_stmt _105 = _68;
    version 105
    ptr-info 0x7f34f98ac2d0>
------------------------------
_106 = _67;
 <ssa_name 0x7f34f9d30828
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
   
    def_stmt _67 = _105;
    version 67
    ptr-info 0x7f34f98ac0a8>
------------------------------
my_cleanups_10 = _106;
 <ssa_name 0x7f34f98a4ea0
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f9890d80 D.4063>
    def_stmt _106 = _67;
    version 106
    ptr-info 0x7f34f98ac2e8>
------------------------------
# VUSE <.MEM_107>
arg_12 = MEM[(char * *)&args];
 <mem_ref 0x7f34f988b910
    type <pointer_type 0x7f34f986f930
        type <integer_type 0x7f34f986f888 char public string-flag QI
            size <integer_cst 0x7f34f9d28cd8 constant 8>
            unit size <integer_cst 0x7f34f9d28cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f34f9d3c3f0 precision 8 min <integer_cst 0x7f34f9872198 -128> max <integer_cst 0x7f34f9872180 127>
            pointer_to_this <pointer_type 0x7f34f986f930>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f34f9d33168 test.c>
        pointer_to_this <pointer_type 0x7f34f986f9d8>>
   
    arg 0 <addr_expr 0x7f34f9863f00
        type <pointer_type 0x7f34f9878dc8 type <array_type 0x7f34f9878498>
            unsigned DI size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
            align 64 symtab 0 alias set -1 structural equality>
       
        arg 0 <var_decl 0x7f34faabdd80 args type <array_type 0x7f34f9878498>
            addressable BLK file test.c line 148 col 14
            size <integer_cst 0x7f34f9de1c30 constant 384>
            unit size <integer_cst 0x7f34f9872228 constant 48>
            align 128 context <function_decl 0x7f34f9870b00 main>>
        test.c:149:26 start: test.c:149:26 finish: test.c:149:26>
    arg 1 <integer_cst 0x7f34f9872cd8 type <pointer_type 0x7f34f986f9d8> constant 0>>
------------------------------
_15 = (long unsigned int) section_index_14;
 <ssa_name 0x7f34f988f438
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9889d80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
------------------------------
_16 = _15 * 16;
 <ssa_name 0x7f34f988f480
    type <integer_type 0x7f34f9d3c7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f34f9d489d8>>
   
    def_stmt _15 = (long unsigned int) section_index_14;
    version 15>
------------------------------
_18 = sect_opts_17 + _16;
 <ssa_name 0x7f34f988f510
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f34f9872f30>
------------------------------
_19 = (long unsigned int) section_index_14;
 <ssa_name 0x7f34f988f438
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9889d80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
------------------------------
_20 = _19 * 16;
 <ssa_name 0x7f34f988f5a0
    type <integer_type 0x7f34f9d3c7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f34f9d489d8>>
   
    def_stmt _19 = (long unsigned int) section_index_14;
    version 19>
------------------------------
_21 = sect_opts_17 + _20;
 <ssa_name 0x7f34f988f510
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f34f9872f30>
------------------------------
section_index_23 = section_index_14 + 1;
 <ssa_name 0x7f34f988f438
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9889d80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
------------------------------
_24 = (long unsigned int) section_index_23;
 <ssa_name 0x7f34f988f6c0
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9889d80 section_index>
    def_stmt section_index_23 = section_index_14 + 1;
    version 23>
------------------------------
num_sect_opts_26 = num_sect_opts_25 * 2;
 <ssa_name 0x7f34f988f750
    type <integer_type 0x7f34f986f498 size_t public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615> context <translation_unit_decl 0x7f34f9d33168 test.c>>
    var <var_decl 0x7f34f9890360 num_sect_opts>
    def_stmt num_sect_opts_25 = PHI <4(4), num_sect_opts_66(25)>
    version 25>
------------------------------
_27 = num_sect_opts_26 * 16;
 <ssa_name 0x7f34f988f798
    type <integer_type 0x7f34f986f498 size_t public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615> context <translation_unit_decl 0x7f34f9d33168 test.c>>
    var <var_decl 0x7f34f9890360 num_sect_opts>
    def_stmt num_sect_opts_26 = num_sect_opts_25 * 2;
    version 26>
------------------------------
_74 = newmem_73;
 <ssa_name 0x7f34f9d30900
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cbd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f34f98ac120>
------------------------------
_137 = newmem_73;
 <ssa_name 0x7f34f9d30900
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cbd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f34f98ac120>
------------------------------
sect_opts_28 = _137;
 <ssa_name 0x7f34f98aa798
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cc60 D.4096>
    def_stmt _137 = newmem_73;
    version 137
    ptr-info 0x7f34f98ac360>
------------------------------
_30 = (long unsigned int) section_index_14;
 <ssa_name 0x7f34f988f438
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9889d80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
------------------------------
_31 = _30 * 16;
 <ssa_name 0x7f34f988f8b8
    type <integer_type 0x7f34f9d3c7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f34f9d489d8>>
   
    def_stmt _30 = (long unsigned int) section_index_14;
    version 30>
------------------------------
_32 = sect_opts_17 + _31;
 <ssa_name 0x7f34f988f510
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f34f9872f30>
------------------------------
_34 = (long unsigned int) section_index_14;
 <ssa_name 0x7f34f988f438
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9889d80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
------------------------------
_35 = _34 * 16;
 <ssa_name 0x7f34f988f9d8
    type <integer_type 0x7f34f9d3c7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f34f9d489d8>>
   
    def_stmt _34 = (long unsigned int) section_index_14;
    version 34>
------------------------------
_36 = sect_opts_17 + _35;
 <ssa_name 0x7f34f988f510
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f34f9872f30>
------------------------------
section_index_37 = section_index_14 + 1;
 <ssa_name 0x7f34f988f438
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9889d80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
------------------------------
_38 = (long unsigned int) section_index_37;
 <ssa_name 0x7f34f988fab0
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9889d80 section_index>
    def_stmt section_index_37 = section_index_14 + 1;
    version 37>
------------------------------
num_sect_opts_39 = num_sect_opts_25 * 2;
 <ssa_name 0x7f34f988f750
    type <integer_type 0x7f34f986f498 size_t public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615> context <translation_unit_decl 0x7f34f9d33168 test.c>>
    var <var_decl 0x7f34f9890360 num_sect_opts>
    def_stmt num_sect_opts_25 = PHI <4(4), num_sect_opts_66(25)>
    version 25>
------------------------------
_40 = num_sect_opts_39 * 16;
 <ssa_name 0x7f34f988fb40
    type <integer_type 0x7f34f986f498 size_t public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615> context <translation_unit_decl 0x7f34f9d33168 test.c>>
    var <var_decl 0x7f34f9890360 num_sect_opts>
    def_stmt num_sect_opts_39 = num_sect_opts_25 * 2;
    version 39>
------------------------------
_77 = newmem_76;
 <ssa_name 0x7f34f9895f30
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cf30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f34f98ac150>
------------------------------
_131 = newmem_76;
 <ssa_name 0x7f34f9895f30
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cf30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f34f98ac150>
------------------------------
sect_opts_41 = _131;
 <ssa_name 0x7f34f98aa5e8
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f98a3000 D.4100>
    def_stmt _131 = newmem_76;
    version 131
    ptr-info 0x7f34f98ac348>
------------------------------
argcnt_43 = argcnt_13 + 1;
 <ssa_name 0x7f34f988f3f0
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9890090 argcnt>
    def_stmt argcnt_13 = PHI <0(4), argcnt_43(25)>
    version 13>
------------------------------
_44 = (long unsigned int) argcnt_43;
 <ssa_name 0x7f34f988fc60
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9890090 argcnt>
    def_stmt argcnt_43 = argcnt_13 + 1;
    version 43>
------------------------------
_45 = _44 * 8;
 <ssa_name 0x7f34f988fca8
    type <integer_type 0x7f34f9d3c7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f34f9d489d8>>
   
    def_stmt _44 = (long unsigned int) argcnt_43;
    version 44>
------------------------------
_46 = &args + _45;
 <addr_expr 0x7f34f98940a0
    type <pointer_type 0x7f34f9878dc8
        type <array_type 0x7f34f9878498 type <pointer_type 0x7f34f98780a8>
            BLK
            size <integer_cst 0x7f34f9de1c30 constant 384>
            unit size <integer_cst 0x7f34f9872228 constant 48>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f34f98783f0>
            pointer_to_this <pointer_type 0x7f34f9878dc8>>
        unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f34faabdd80 args type <array_type 0x7f34f9878498>
        addressable BLK file test.c line 148 col 14 size <integer_cst 0x7f34f9de1c30 384> unit size <integer_cst 0x7f34f9872228 48>
        align 128 context <function_decl 0x7f34f9870b00 main>>
    test.c:149:26 start: test.c:149:26 finish: test.c:149:26>
------------------------------
# VUSE <.MEM_93>
arg_47 = *_46;
 <mem_ref 0x7f34f988bac8
    type <pointer_type 0x7f34f986f930
        type <integer_type 0x7f34f986f888 char public string-flag QI
            size <integer_cst 0x7f34f9d28cd8 constant 8>
            unit size <integer_cst 0x7f34f9d28cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f34f9d3c3f0 precision 8 min <integer_cst 0x7f34f9872198 -128> max <integer_cst 0x7f34f9872180 127>
            pointer_to_this <pointer_type 0x7f34f986f930>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f34f9d33168 test.c>
        pointer_to_this <pointer_type 0x7f34f986f9d8>>
   
    arg 0 <ssa_name 0x7f34f988fd38
        type <pointer_type 0x7f34f986f9d8 type <pointer_type 0x7f34f986f930>
            public unsigned DI size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
            align 64 symtab 0 alias set -1 structural equality>
       
        def_stmt _46 = &args + _45;
        version 46
        ptr-info 0x7f34f9872dc8>
    arg 1 <integer_cst 0x7f34f9872cd8 type <pointer_type 0x7f34f986f9d8> constant 0>>
--------------------xxxxxxxxxxxxxxxxxxxxxxx------------------
# .MEM_114 = VDEF <.MEM_113>
cleanup_chain = new_80;
 <var_decl 0x7f34faabdab0 cleanup_chain
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
    align 64 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <error_mark 0x7f34f9d28bd0>>
------------------------------
_115 = old_chain_81;
 <ssa_name 0x7f34f98a40d8
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f98a3870 old_chain>
    def_stmt old_chain_81 = cleanup_chain;
    version 81
    ptr-info 0x7f34f98ac1c8>
------------------------------
_79 = _115;
 <ssa_name 0x7f34f98aa168
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f98a3900 D.4114>
    def_stmt _115 = old_chain_81;
    version 115
    ptr-info 0x7f34f98ac300>
------------------------------
_116 = _79;
 <ssa_name 0x7f34f98a4048
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
   
    def_stmt _79 = _115;
    version 79
    ptr-info 0x7f34f98ac198>
------------------------------
_78 = _116;
 <ssa_name 0x7f34f98aa1b0
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f98a3510 D.4107>
    def_stmt _116 = _79;
    version 116
    ptr-info 0x7f34f98ac318>
------------------------------
_117 = _78;
 <ssa_name 0x7f34f98a4000
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
   
    def_stmt _78 = _116;
    version 78
    ptr-info 0x7f34f98ac180>
------------------------------
_50 = (long unsigned int) i_49;
 <ssa_name 0x7f34f988fe10
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9890120 i>
    def_stmt i_49 = PHI <0(31), i_60(32)>
    version 49>
------------------------------
_51 = _50 * 16;
 <ssa_name 0x7f34f988fe58
    type <integer_type 0x7f34f9d3c7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f34f9d489d8>>
   
    def_stmt _50 = (long unsigned int) i_49;
    version 50>
------------------------------
_52 = sect_opts_17 + _51;
 <ssa_name 0x7f34f988f510
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f34f9872f30>
------------------------------
# VUSE <.MEM_95>
val_53 = _52->value;
 <component_ref 0x7f34f9d279c0
    type <pointer_type 0x7f34f98780a8
        type <integer_type 0x7f34f9878000 char readonly string-flag QI
            size <integer_cst 0x7f34f9d28cd8 constant 8>
            unit size <integer_cst 0x7f34f9d28cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f34f9d3c3f0 precision 8 min <integer_cst 0x7f34f9872198 -128> max <integer_cst 0x7f34f9872180 127>
            pointer_to_this <pointer_type 0x7f34f98780a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f34f988bb18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
       
        arg 0 <ssa_name 0x7f34f988fee8 type <pointer_type 0x7f34f9878f18>
           
            def_stmt _52 = sect_opts_17 + _51;
            version 52
            ptr-info 0x7f34f98ac030>
        arg 1 <integer_cst 0x7f34f9872d08 constant 0>>
    arg 1 <field_decl 0x7f34f98715f0 value type <pointer_type 0x7f34f98780a8>
        unsigned DI file test.c line 24 col 14 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f34f9d28c18 constant 0> bit offset <integer_cst 0x7f34f9d28be8 64> context <record_type 0x7f34f9878e70 sect_opt>>
    test.c:126:35 start: test.c:126:35 finish: test.c:126:35>
------------------------------
_54 = (long unsigned int) i_49;
 <ssa_name 0x7f34f988fe10
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9890120 i>
    def_stmt i_49 = PHI <0(31), i_60(32)>
    version 49>
------------------------------
_55 = _54 * 16;
 <ssa_name 0x7f34f988ff78
    type <integer_type 0x7f34f9d3c7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f34f9d489d8>>
   
    def_stmt _54 = (long unsigned int) i_49;
    version 54>
------------------------------
_56 = sect_opts_17 + _55;
 <ssa_name 0x7f34f988f510
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f34f9872f30>
------------------------------
# VUSE <.MEM_95>
sec_57 = _56->name;
 <component_ref 0x7f34f9d27a20
    type <pointer_type 0x7f34f98780a8
        type <integer_type 0x7f34f9878000 char readonly string-flag QI
            size <integer_cst 0x7f34f9d28cd8 constant 8>
            unit size <integer_cst 0x7f34f9d28cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f34f9d3c3f0 precision 8 min <integer_cst 0x7f34f9872198 -128> max <integer_cst 0x7f34f9872180 127>
            pointer_to_this <pointer_type 0x7f34f98780a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f34f988bb68
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
       
        arg 0 <ssa_name 0x7f34f9895048 type <pointer_type 0x7f34f9878f18>
           
            def_stmt _56 = sect_opts_17 + _55;
            version 56
            ptr-info 0x7f34f98ac060>
        arg 1 <integer_cst 0x7f34f9872d08 constant 0>>
    arg 1 <field_decl 0x7f34f9871688 name type <pointer_type 0x7f34f98780a8>
        unsigned DI file test.c line 23 col 14 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f34f9d28c18 constant 0>
        bit offset <integer_cst 0x7f34f9d28c60 constant 0> context <record_type 0x7f34f9878e70 sect_opt>
        chain <field_decl 0x7f34f98715f0 value type <pointer_type 0x7f34f98780a8>
            unsigned DI file test.c line 24 col 14 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f34f9d28c18 0> bit offset <integer_cst 0x7f34f9d28be8 64> context <record_type 0x7f34f9878e70 sect_opt>>>
    test.c:127:35 start: test.c:127:35 finish: test.c:127:35>
------------------------------
sec_num_59 = sec_num_58 + 1;
 <ssa_name 0x7f34f98950d8
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9889e10 sec_num>
    def_stmt sec_num_58 = PHI <0(31), sec_num_59(32)>
    version 58>
------------------------------
i_60 = i_49 + 1;
 <ssa_name 0x7f34f988fe10
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9890120 i>
    def_stmt i_49 = PHI <0(31), i_60(32)>
    version 49>
------------------------------
_61 = (long unsigned int) sec_num_58;
 <ssa_name 0x7f34f98950d8
    type <integer_type 0x7f34f9d3c5e8 int public SI
        size <integer_cst 0x7f34f9d28e28 constant 32>
        unit size <integer_cst 0x7f34f9d28e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
        pointer_to_this <pointer_type 0x7f34f9d43a80>>
    var <var_decl 0x7f34f9889e10 sec_num>
    def_stmt sec_num_58 = PHI <0(31), sec_num_59(32)>
    version 58>
------------------------------
# VUSE <.MEM_97>
_84 = ptr_83->next;
 <component_ref 0x7f34f98a5270
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
   
    arg 0 <mem_ref 0x7f34f989f028 type <record_type 0x7f34f986fd20 cleanup>
       
        arg 0 <ssa_name 0x7f34f9d30798 type <pointer_type 0x7f34f986fc78>
            var <var_decl 0x7f34f98a7120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f34f98ac1f8>
        arg 1 <integer_cst 0x7f34f9872e88 constant 0>>
    arg 1 <field_decl 0x7f34f9871390 next type <pointer_type 0x7f34f986fc78>
        unsigned DI file common.h line 38 col 19 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f34f9d28c18 constant 0>
        bit offset <integer_cst 0x7f34f9d28c60 constant 0> context <record_type 0x7f34f986fd20 cleanup>
        chain <field_decl 0x7f34f98712f8 function type <pointer_type 0x7f34f986fbd0>
            unsigned DI file common.h line 39 col 10 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f34f9d28c18 0> bit offset <integer_cst 0x7f34f9d28be8 64> context <record_type 0x7f34f986fd20 cleanup> chain <field_decl 0x7f34f9871260 free_arg>>>
    common.h:105:23 start: common.h:105:23 finish: common.h:105:23>
 <var_decl 0x7f34faabdab0 cleanup_chain
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
    align 64 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <error_mark 0x7f34f9d28bd0>>
# VUSE <.MEM_97>
ptr_83 = cleanup_chain;
--------------------xxxxxxxxxxxxxxxxxxxxxxx------------------
# .MEM_119 = VDEF <.MEM_97>
cleanup_chain = _84;
 <var_decl 0x7f34faabdab0 cleanup_chain
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
    align 64 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <error_mark 0x7f34f9d28bd0>>
------------------------------
# VUSE <.MEM_119>
_85 = ptr_83->function;
 <component_ref 0x7f34f98a52d0
    type <pointer_type 0x7f34f986fbd0
        type <function_type 0x7f34f986fb28 type <void_type 0x7f34f9d3cf18 void>
            QI
            size <integer_cst 0x7f34f9d28cd8 constant 8>
            unit size <integer_cst 0x7f34f9d28cf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f34f986ea00 value <pointer_type 0x7f34f9d430a8>
                chain <tree_list 0x7f34f9d3bac8 value <void_type 0x7f34f9d3cf18 void>>> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fbd0>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f34f98776e0
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
       
        arg 0 <ssa_name 0x7f34f9d30798 type <pointer_type 0x7f34f986fc78>
            var <var_decl 0x7f34f98a7120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f34f98ac1f8>
        arg 1 <integer_cst 0x7f34f9872e88 constant 0>>
    arg 1 <field_decl 0x7f34f98712f8 function type <pointer_type 0x7f34f986fbd0>
        unsigned DI file common.h line 39 col 10 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f34f9d28c18 constant 0> bit offset <integer_cst 0x7f34f9d28be8 64> context <record_type 0x7f34f986fd20 cleanup>
        chain <field_decl 0x7f34f9871260 free_arg type <pointer_type 0x7f34f986fbd0>
            unsigned DI file common.h line 40 col 10 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
            align 64 offset_align 128
            offset <integer_cst 0x7f34f9d28c48 constant 16>
            bit offset <integer_cst 0x7f34f9d28c60 constant 0> context <record_type 0x7f34f986fd20 cleanup> chain <field_decl 0x7f34f98711c8 arg>>>
    common.h:106:8 start: common.h:106:8 finish: common.h:106:8>
 <var_decl 0x7f34faabdab0 cleanup_chain
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
    align 64 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <error_mark 0x7f34f9d28bd0>>
# VUSE <.MEM_97>
ptr_83 = cleanup_chain;
------------------------------
# VUSE <.MEM_119>
_86 = ptr_83->arg;
 <component_ref 0x7f34f98a5330
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
   
    arg 0 <mem_ref 0x7f34f9877780
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
       
        arg 0 <ssa_name 0x7f34f9d30798 type <pointer_type 0x7f34f986fc78>
            var <var_decl 0x7f34f98a7120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f34f98ac1f8>
        arg 1 <integer_cst 0x7f34f9872e88 constant 0>>
    arg 1 <field_decl 0x7f34f98711c8 arg type <pointer_type 0x7f34f9d430a8>
        unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f34f9d28c48 constant 16> bit offset <integer_cst 0x7f34f9d28be8 64> context <record_type 0x7f34f986fd20 cleanup>>
    common.h:106:8 start: common.h:106:8 finish: common.h:106:8>
 <var_decl 0x7f34faabdab0 cleanup_chain
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
    align 64 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <error_mark 0x7f34f9d28bd0>>
# VUSE <.MEM_97>
ptr_83 = cleanup_chain;
------------------------------
# VUSE <.MEM_121>
_88 = ptr_83->arg;
 <component_ref 0x7f34f98a5390
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
   
    arg 0 <mem_ref 0x7f34f98a9028
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
       
        arg 0 <ssa_name 0x7f34f9d30798 type <pointer_type 0x7f34f986fc78>
            var <var_decl 0x7f34f98a7120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f34f98ac1f8>
        arg 1 <integer_cst 0x7f34f9872e88 constant 0>>
    arg 1 <field_decl 0x7f34f98711c8 arg type <pointer_type 0x7f34f9d430a8>
        unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f34f9d28c48 constant 16> bit offset <integer_cst 0x7f34f9d28be8 64> context <record_type 0x7f34f986fd20 cleanup>>
    common.h:108:4 start: common.h:108:4 finish: common.h:108:4>
 <var_decl 0x7f34faabdab0 cleanup_chain
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
    align 64 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <error_mark 0x7f34f9d28bd0>>
# VUSE <.MEM_97>
ptr_83 = cleanup_chain;
------------------------------
# VUSE <.MEM_122>
_90 = ptr_83->free_arg;
 <component_ref 0x7f34f98a53f0
    type <pointer_type 0x7f34f986fbd0
        type <function_type 0x7f34f986fb28 type <void_type 0x7f34f9d3cf18 void>
            QI
            size <integer_cst 0x7f34f9d28cd8 constant 8>
            unit size <integer_cst 0x7f34f9d28cf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f34f986ea00 value <pointer_type 0x7f34f9d430a8>
                chain <tree_list 0x7f34f9d3bac8 value <void_type 0x7f34f9d3cf18 void>>> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fbd0>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f34f98a9078
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
       
        arg 0 <ssa_name 0x7f34f9d30798 type <pointer_type 0x7f34f986fc78>
            var <var_decl 0x7f34f98a7120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f34f98ac1f8>
        arg 1 <integer_cst 0x7f34f9872e88 constant 0>>
    arg 1 <field_decl 0x7f34f9871260 free_arg type <pointer_type 0x7f34f986fbd0>
        unsigned DI file common.h line 40 col 10 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f34f9d28c48 constant 16>
        bit offset <integer_cst 0x7f34f9d28c60 constant 0> context <record_type 0x7f34f986fd20 cleanup>
        chain <field_decl 0x7f34f98711c8 arg type <pointer_type 0x7f34f9d430a8>
            unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f34f9d28c48 16> bit offset <integer_cst 0x7f34f9d28be8 64> context <record_type 0x7f34f986fd20 cleanup>>>
    common.h:109:14 start: common.h:109:14 finish: common.h:109:14>
 <var_decl 0x7f34faabdab0 cleanup_chain
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
    align 64 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <error_mark 0x7f34f9d28bd0>>
# VUSE <.MEM_97>
ptr_83 = cleanup_chain;
------------------------------
# VUSE <.MEM_122>
_91 = ptr_83->free_arg;
 <component_ref 0x7f34f98a5450
    type <pointer_type 0x7f34f986fbd0
        type <function_type 0x7f34f986fb28 type <void_type 0x7f34f9d3cf18 void>
            QI
            size <integer_cst 0x7f34f9d28cd8 constant 8>
            unit size <integer_cst 0x7f34f9d28cf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f34f986ea00 value <pointer_type 0x7f34f9d430a8>
                chain <tree_list 0x7f34f9d3bac8 value <void_type 0x7f34f9d3cf18 void>>> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fbd0>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f34f98a90c8
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
       
        arg 0 <ssa_name 0x7f34f9d30798 type <pointer_type 0x7f34f986fc78>
            var <var_decl 0x7f34f98a7120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f34f98ac1f8>
        arg 1 <integer_cst 0x7f34f9872e88 constant 0>>
    arg 1 <field_decl 0x7f34f9871260 free_arg type <pointer_type 0x7f34f986fbd0>
        unsigned DI file common.h line 40 col 10 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f34f9d28c48 constant 16>
        bit offset <integer_cst 0x7f34f9d28c60 constant 0> context <record_type 0x7f34f986fd20 cleanup>
        chain <field_decl 0x7f34f98711c8 arg type <pointer_type 0x7f34f9d430a8>
            unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f34f9d28c48 16> bit offset <integer_cst 0x7f34f9d28be8 64> context <record_type 0x7f34f986fd20 cleanup>>>
    common.h:110:6 start: common.h:110:6 finish: common.h:110:6>
 <var_decl 0x7f34faabdab0 cleanup_chain
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
    align 64 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <error_mark 0x7f34f9d28bd0>>
# VUSE <.MEM_97>
ptr_83 = cleanup_chain;
------------------------------
# VUSE <.MEM_122>
_92 = ptr_83->arg;
 <component_ref 0x7f34f98a54b0
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
   
    arg 0 <mem_ref 0x7f34f98a9118
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
       
        arg 0 <ssa_name 0x7f34f9d30798 type <pointer_type 0x7f34f986fc78>
            var <var_decl 0x7f34f98a7120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f34f98ac1f8>
        arg 1 <integer_cst 0x7f34f9872e88 constant 0>>
    arg 1 <field_decl 0x7f34f98711c8 arg type <pointer_type 0x7f34f9d430a8>
        unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f34f9d28c48 constant 16> bit offset <integer_cst 0x7f34f9d28be8 64> context <record_type 0x7f34f986fd20 cleanup>>
    common.h:110:6 start: common.h:110:6 finish: common.h:110:6>
 <var_decl 0x7f34faabdab0 cleanup_chain
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
    align 64 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <error_mark 0x7f34f9d28bd0>>
# VUSE <.MEM_97>
ptr_83 = cleanup_chain;
 <var_decl 0x7f34faabdab0 cleanup_chain
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f34f9d28be8 64> unit size <integer_cst 0x7f34f9d28c00 8>
    align 64 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <error_mark 0x7f34f9d28bd0>>
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
 <ssa_name 0x7f34f9d308b8
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f989c5a0 new>
    def_stmt new_69 = malloc (32);
    version 69
    ptr-info 0x7f34f98ac0d8>
qwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqw-1dqwdqwdqwdqwd
-------always in therealways in therealways in there--------------------------
GIMPLE ASSIGN
GIMPLE ASSIGN
_68 = _104;
if (old_chain_70 == 0B)
# .MEM_99 = VDEF <.MEM_98>
new_69->next = _71;
GIMPLE ASSIGN
_79 = _115;
if (old_chain_81 == 0B)
# .MEM_110 = VDEF <.MEM_109>
new_80->next = _82;
GIMPLE ASSIGN
# .MEM_119 = VDEF <.MEM_97>
cleanup_chain = _84;
# .MEM_120 = VDEF <.MEM_119>
_85 (_86);
# .MEM_120 = VDEF <.MEM_119>
_85 (_86);
# .MEM_122 = VDEF <.MEM_121>
_89 = __printf_chk (1, "%x\n", _88);
if (_90 != 0B)
# .MEM_123 = VDEF <.MEM_122>
_91 (_92);
# .MEM_123 = VDEF <.MEM_122>
_91 (_92);
GIMPLE ASSIGN
GIMPLE ASSIGN
GIMPLE ASSIGN
# .MEM_118 = VDEF <.MEM_95>
section_addrs_48->num_sections = _61;
GIMPLE ASSIGN
# .MEM_125 = VDEF <.MEM_95>
section_addrs_48->other[sec_num_58].name = sec_57;
GIMPLE ASSIGN
GIMPLE ASSIGN
GIMPLE ASSIGN
GIMPLE ASSIGN
GIMPLE ASSIGN
GIMPLE ASSIGN
GIMPLE ASSIGN
 <ssa_name 0x7f34f988f360
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_11 = malloc (64);
    version 11
    ptr-info 0x7f34f9872f00>
qwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqw-1dqwdqwdqwdqwd
-------always in therealways in therealways in there--------------------------
sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
 <ssa_name 0x7f34f9d30900
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cbd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f34f98ac120>
qwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqw-1dqwdqwdqwdqwd
-------always in therealways in therealways in there--------------------------
 <ssa_name 0x7f34f988f510
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f34f9872f30>
 <ssa_name 0x7f34f9895ee8
    type <integer_type 0x7f34f986f498 size_t public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615> context <translation_unit_decl 0x7f34f9d33168 test.c>>
    var <var_decl 0x7f34f989cea0 size>
    def_stmt size_75 = PHI <_40(18), 1(19)>
    version 75>
-------always in therealways in th222erealways in there------0--------------------
# .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
 <ssa_name 0x7f34f988f510
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f34f9872f30>
 <ssa_name 0x7f34f9d30948
    type <integer_type 0x7f34f986f498 size_t public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615> context <translation_unit_decl 0x7f34f9d33168 test.c>>
    var <var_decl 0x7f34f989cb40 size>
    def_stmt size_72 = PHI <_27(9), 1(10)>
    version 72>
-------always in therealways in th222erealways in there------0--------------------
# .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
tewtw
sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
GIMPLE ASSIGN
# VUSE <.MEM_95>
sec_57 = _56->name;
GIMPLE ASSIGN
# VUSE <.MEM_95>
val_53 = _52->value;
GIMPLE ASSIGN
# .MEM_129 = VDEF <.MEM_94>
_36->value = arg_22;
GIMPLE ASSIGN
# .MEM_133 = VDEF <.MEM_94>
_32->value = arg_22;
GIMPLE ASSIGN
# .MEM_135 = VDEF <.MEM_134>
_21->value = arg_22;
GIMPLE ASSIGN
# .MEM_134 = VDEF <.MEM_94>
_18->name = ".text";
# .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
GIMPLE ASSIGN
sect_opts_28 = _137;
GIMPLE ASSIGN
if (newmem_73 == 0B)
 <ssa_name 0x7f34f9895f30
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cf30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f34f98ac150>
qwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqw-1dqwdqwdqwdqwd
-------always in therealways in therealways in there--------------------------
 <ssa_name 0x7f34f988f510
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f34f9872f30>
 <ssa_name 0x7f34f9895ee8
    type <integer_type 0x7f34f986f498 size_t public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615> context <translation_unit_decl 0x7f34f9d33168 test.c>>
    var <var_decl 0x7f34f989cea0 size>
    def_stmt size_75 = PHI <_40(18), 1(19)>
    version 75>
-------always in therealways in th222erealways in there------0--------------------
# .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
 <ssa_name 0x7f34f988f510
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f34f9872f30>
 <ssa_name 0x7f34f9d30948
    type <integer_type 0x7f34f986f498 size_t public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f34f9d3c738 precision 64 min <integer_cst 0x7f34f9d28eb8 0> max <integer_cst 0x7f34f9d2a500 18446744073709551615> context <translation_unit_decl 0x7f34f9d33168 test.c>>
    var <var_decl 0x7f34f989cb40 size>
    def_stmt size_72 = PHI <_27(9), 1(10)>
    version 72>
-------always in therealways in th222erealways in there------0--------------------
# .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
tewtw
sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
GIMPLE ASSIGN
# VUSE <.MEM_95>
sec_57 = _56->name;
GIMPLE ASSIGN
# VUSE <.MEM_95>
val_53 = _52->value;
GIMPLE ASSIGN
# .MEM_129 = VDEF <.MEM_94>
_36->value = arg_22;
GIMPLE ASSIGN
# .MEM_133 = VDEF <.MEM_94>
_32->value = arg_22;
GIMPLE ASSIGN
# .MEM_135 = VDEF <.MEM_134>
_21->value = arg_22;
GIMPLE ASSIGN
# .MEM_134 = VDEF <.MEM_94>
_18->name = ".text";
# .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
GIMPLE ASSIGN
sect_opts_41 = _131;
GIMPLE ASSIGN
if (newmem_76 == 0B)
 <ssa_name 0x7f34f988fdc8
    type <pointer_type 0x7f34f98792a0
        type <record_type 0x7f34f98791f8 section_addr_info BLK
            size <integer_cst 0x7f34f9d440a8 constant 192>
            unit size <integer_cst 0x7f34f9d44078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f98791f8 fields <field_decl 0x7f34f9871a18 num_sections> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f98792a0> chain <type_decl 0x7f34f9871ab0 D.4018>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f9890240 section_addrs>
    def_stmt section_addrs_48 = malloc (24);
    version 48
    ptr-info 0x7f34f98ac018>
qwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqw-1dqwdqwdqwdqwd
-------always in therealways in therealways in there--------------------------
GIMPLE ASSIGN
GIMPLE ASSIGN
# .MEM_118 = VDEF <.MEM_95>
section_addrs_48->num_sections = _61;
GIMPLE ASSIGN
# .MEM_125 = VDEF <.MEM_95>
section_addrs_48->other[sec_num_58].name = sec_57;
 <ssa_name 0x7f34f98a4090
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f98a37e0 new>
    def_stmt new_80 = malloc (32);
    version 80
    ptr-info 0x7f34f98ac1b0>
qwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqw-1dqwdqwdqwdqwd
-------always in therealways in therealways in there--------------------------
GIMPLE ASSIGN
GIMPLE ASSIGN
_68 = _104;
if (old_chain_70 == 0B)
# .MEM_99 = VDEF <.MEM_98>
new_69->next = _71;
GIMPLE ASSIGN
GIMPLE ASSIGN
_79 = _115;
if (old_chain_81 == 0B)
# .MEM_110 = VDEF <.MEM_109>
new_80->next = _82;
[40;41m =======recursive_stmt========= [0m
# .MEM_119 = VDEF <.MEM_97>
cleanup_chain = _84;
# .MEM_120 = VDEF <.MEM_119>
_85 (_86);
# .MEM_120 = VDEF <.MEM_119>
_85 (_86);
# .MEM_122 = VDEF <.MEM_121>
_89 = __printf_chk (1, "%x\n", _88);
if (_90 != 0B)
# .MEM_123 = VDEF <.MEM_122>
_91 (_92);
# .MEM_123 = VDEF <.MEM_122>
_91 (_92);
GIMPLE ASSIGN
GIMPLE ASSIGN
GIMPLE ASSIGN
GIMPLE ASSIGN
GIMPLE ASSIGN
GIMPLE ASSIGN
GIMPLE ASSIGN
# .MEM_118 = VDEF <.MEM_95>
section_addrs_48->num_sections = _61;
GIMPLE ASSIGN
# .MEM_125 = VDEF <.MEM_95>
section_addrs_48->other[sec_num_58].name = sec_57;
GIMPLE ASSIGN
GIMPLE ASSIGN
GIMPLE ASSIGN
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
=======================================================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 6 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;33m =======POP node_fun stack:strcmp========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m
 <function_decl 0x7f34f9870b00 main
    type <function_type 0x7f34f986f7e0
        type <integer_type 0x7f34f9d3c5e8 int public SI
            size <integer_cst 0x7f34f9d28e28 constant 32>
            unit size <integer_cst 0x7f34f9d28e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
            pointer_to_this <pointer_type 0x7f34f9d43a80>>
        QI
        size <integer_cst 0x7f34f9d28cd8 constant 8>
        unit size <integer_cst 0x7f34f9d28cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <block 0x7f34f9882060>
    result <result_decl 0x7f34f9d33258 D.4023 type <integer_type 0x7f34f9d3c5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f34f9d28e28 32> unit size <integer_cst 0x7f34f9d28e40 4>
        align 32 context <function_decl 0x7f34f9870b00 main>>
    struct-function 0x7f34f98830b0>
 <ssa_name 0x7f34f9d308b8
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f989c5a0 new>
    def_stmt new_69 = malloc (32);
    version 69
    ptr-info 0x7f34f98ac0d8>

dot graph START

======================================================================
 <ssa_name 0x7f34f9d308b8
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f989c5a0 new>
    def_stmt new_69 = malloc (32);
    version 69
    ptr-info 0x7f34f98ac0d8>

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

cleanup_chain = new_69;
In function ‘main’:
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: cleanup_chain = new_69;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start cleanup_chain = new_69;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start cleanup_chain = new_69;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start old_chain_70 = cleanup_chain;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_104 = old_chain_70;
lto1: warning: use location
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: _104 = old_chain_70;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _104 = old_chain_70;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _104 = old_chain_70;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (old_chain_70 == 0B)
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph stmt end

if (old_chain_70 == 0B)

 ================== find cond branch ================= 
if (old_chain_70 == 0B)
Cond in fucntion main basic block 2
 ================== possiable direct basic block ================= 
from main basic block 3
 ================== possiable direct basic block ================= 
from main basic block 4
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: _71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _71 = cleanup_chain;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start old_chain_81 = cleanup_chain;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_115 = old_chain_81;
lto1: warning: use location
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 31: _115 = old_chain_81;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _115 = old_chain_81;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _115 = old_chain_81;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: _82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start _82 = cleanup_chain;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

cleanup_chain = new_80;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: cleanup_chain = new_80;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start cleanup_chain = new_80;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start cleanup_chain = new_80;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 35: _84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _84 = ptr_83->next;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 35: _85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _85 = ptr_83->function;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_86 = ptr_83->arg;
common.h:106:8: warning: use location
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 35: _86 = ptr_83->arg;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _86 = ptr_83->arg;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _86 = ptr_83->arg;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_88 = ptr_83->arg;
common.h:108:4: warning: use location
    printf("%x\n", ptr->arg);
    ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 35: _88 = ptr_83->arg;
common.h:108:4: warning: use location
    printf("%x\n", ptr->arg);
    ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _88 = ptr_83->arg;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _88 = ptr_83->arg;
common.h:108:4: warning: use location
    printf("%x\n", ptr->arg);
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_90 = ptr_83->free_arg;
common.h:109:14: warning: use location
       if (ptr->free_arg)
              ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 35: _90 = ptr_83->free_arg;
common.h:109:14: warning: use location
       if (ptr->free_arg)
              ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _90 = ptr_83->free_arg;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _90 = ptr_83->free_arg;
common.h:109:14: warning: use location
       if (ptr->free_arg)
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_91 = ptr_83->free_arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 36: _91 = ptr_83->free_arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

dot graph stmt start _91 = ptr_83->free_arg;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _91 = ptr_83->free_arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_92 = ptr_83->arg;
common.h:110:6: warning: use location
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 36: _92 = ptr_83->arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

dot graph stmt start _92 = ptr_83->arg;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _92 = ptr_83->arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free (ptr_83);
common.h:112:4: warning: use location
    free (ptr);
    ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 37: free (ptr_83);
common.h:112:4: warning: use location
    free (ptr);
    ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 37dot graph target basicblock en1

dot graph stmt start free (ptr_83);
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start free (ptr_83);
common.h:112:4: warning: use location
    free (ptr);
    ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (ptr_83);
common.h:112:4: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start new_80->arg = section_addrs_48;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 34: section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 34dot graph target basicblock en1

dot graph stmt start section_addrs_48->num_sections = _61;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 32: section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start section_addrs_48->other[sec_num_58].name = sec_57;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph stmt end

dot graph target basicblock start from main basic block 37dot graph target basicblock en1

dot graph arrowsubgraph cluster_1033786418 dot graph subgraph  free (ptr_83);
new_80 = malloc (32);
dot graph subgrapend

 <ssa_name 0x7f34f9d308b8
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f989c5a0 new>
    def_stmt new_69 = malloc (32);
    version 69
    ptr-info 0x7f34f98ac0d8>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

 <function_decl 0x7f34f9870b00 main
    type <function_type 0x7f34f986f7e0
        type <integer_type 0x7f34f9d3c5e8 int public SI
            size <integer_cst 0x7f34f9d28e28 constant 32>
            unit size <integer_cst 0x7f34f9d28e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
            pointer_to_this <pointer_type 0x7f34f9d43a80>>
        QI
        size <integer_cst 0x7f34f9d28cd8 constant 8>
        unit size <integer_cst 0x7f34f9d28cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <block 0x7f34f9882060>
    result <result_decl 0x7f34f9d33258 D.4023 type <integer_type 0x7f34f9d3c5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f34f9d28e28 32> unit size <integer_cst 0x7f34f9d28e40 4>
        align 32 context <function_decl 0x7f34f9870b00 main>>
    struct-function 0x7f34f98830b0>
 <ssa_name 0x7f34f988f360
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_11 = malloc (64);
    version 11
    ptr-info 0x7f34f9872f00>

dot graph START

======================================================================
 <ssa_name 0x7f34f988f360
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_11 = malloc (64);
    version 11
    ptr-info 0x7f34f9872f00>

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
 <ssa_name 0x7f34f988f360
    type <pointer_type 0x7f34f9878f18
        type <record_type 0x7f34f9878e70 sect_opt TI
            size <integer_cst 0x7f34f9d28c30 constant 128>
            unit size <integer_cst 0x7f34f9d28c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f9878e70 fields <field_decl 0x7f34f9871688 name> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f9878f18> chain <type_decl 0x7f34f9871720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f98902d0 sect_opts>
    def_stmt sect_opts_11 = malloc (64);
    version 11
    ptr-info 0x7f34f9872f00>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
 <function_decl 0x7f34f9870b00 main
    type <function_type 0x7f34f986f7e0
        type <integer_type 0x7f34f9d3c5e8 int public SI
            size <integer_cst 0x7f34f9d28e28 constant 32>
            unit size <integer_cst 0x7f34f9d28e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
            pointer_to_this <pointer_type 0x7f34f9d43a80>>
        QI
        size <integer_cst 0x7f34f9d28cd8 constant 8>
        unit size <integer_cst 0x7f34f9d28cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <block 0x7f34f9882060>
    result <result_decl 0x7f34f9d33258 D.4023 type <integer_type 0x7f34f9d3c5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f34f9d28e28 32> unit size <integer_cst 0x7f34f9d28e40 4>
        align 32 context <function_decl 0x7f34f9870b00 main>>
    struct-function 0x7f34f98830b0>
 <ssa_name 0x7f34f9d30900
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cbd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f34f98ac120>

dot graph START

======================================================================
 <ssa_name 0x7f34f9d30900
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cbd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f34f98ac120>

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 20: newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start newmem_76 = realloc (sect_opts_17, size_75);
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph stmt end

this stmt is child function---realloc-----

 ================== trace ================== 
 <ssa_name 0x7f34f9d30900
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cbd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f34f98ac120>
trace fucntion name:realloc 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 11: newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start newmem_73 = realloc (sect_opts_17, size_72);
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
dot graph stmt end

this stmt is child function---realloc-----

 ================== trace ================== 
 <ssa_name 0x7f34f9d30900
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cbd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f34f98ac120>
trace fucntion name:realloc 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
lto1: warning: use location
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 25: sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph stmt start sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---realloc-----
dot graph entry main
dot graph target entry end

_56 = sect_opts_17 + _55;
test.c:127:32: warning: use location
     const char *sec = sect_opts[i].name;
                                ^
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 32: _56 = sect_opts_17 + _55;
test.c:127:32: warning: use location
     const char *sec = sect_opts[i].name;
                                ^
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start _56 = sect_opts_17 + _55;
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start _56 = sect_opts_17 + _55;
test.c:127:32: warning: use location
     const char *sec = sect_opts[i].name;
                                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_52 = sect_opts_17 + _51;
test.c:126:32: warning: use location
     const char *val = sect_opts[i].value;
                                ^
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 32: _52 = sect_opts_17 + _51;
test.c:126:32: warning: use location
     const char *val = sect_opts[i].value;
                                ^
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start _52 = sect_opts_17 + _51;
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start _52 = sect_opts_17 + _51;
test.c:126:32: warning: use location
     const char *val = sect_opts[i].value;
                                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_36 = sect_opts_17 + _35;
test.c:97:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 17: _36 = sect_opts_17 + _35;
test.c:97:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _36 = sect_opts_17 + _35;
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start _36 = sect_opts_17 + _35;
test.c:97:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_32 = sect_opts_17 + _31;
test.c:92:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 15: _32 = sect_opts_17 + _31;
test.c:92:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start _32 = sect_opts_17 + _31;
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start _32 = sect_opts_17 + _31;
test.c:92:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_21 = sect_opts_17 + _20;
test.c:79:15: warning: use location
      sect_opts[section_index].value = arg;
               ^
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 8: _21 = sect_opts_17 + _20;
test.c:79:15: warning: use location
      sect_opts[section_index].value = arg;
               ^
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start _21 = sect_opts_17 + _20;
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start _21 = sect_opts_17 + _20;
test.c:79:15: warning: use location
      sect_opts[section_index].value = arg;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_18 = sect_opts_17 + _16;
test.c:78:15: warning: use location
      sect_opts[section_index].name = ".text";
               ^
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 8: _18 = sect_opts_17 + _16;
test.c:78:15: warning: use location
      sect_opts[section_index].name = ".text";
               ^
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start _18 = sect_opts_17 + _16;
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start _18 = sect_opts_17 + _16;
test.c:78:15: warning: use location
      sect_opts[section_index].name = ".text";
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_137 = newmem_73;
lto1: warning: use location
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 13: _137 = newmem_73;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 13dot graph target basicblock en1

dot graph stmt start _137 = newmem_73;
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start _137 = newmem_73;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_74 = newmem_73;
test.c:45:10: warning: use location
   return (newmem);
          ^
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 13: _74 = newmem_73;
test.c:45:10: warning: use location
   return (newmem);
          ^
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 13dot graph target basicblock en1

dot graph stmt start _74 = newmem_73;
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start _74 = newmem_73;
test.c:45:10: warning: use location
   return (newmem);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (newmem_73 == 0B)
test.c:42:6: warning: use location
   if (!newmem)
      ^
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 11: if (newmem_73 == 0B)
test.c:42:6: warning: use location
   if (!newmem)
      ^
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start if (newmem_73 == 0B)
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start if (newmem_73 == 0B)
test.c:42:6: warning: use location
   if (!newmem)
      ^
dot graph stmt end

if (newmem_73 == 0B)

 ================== find cond branch ================= 
if (newmem_73 == 0B)
Cond in fucntion main basic block 11
 ================== possiable direct basic block ================= 
from main basic block 12
 ================== possiable direct basic block ================= 
from main basic block 13
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph arrowsubgraph cluster_582485955 dot graph subgraph  _56 = sect_opts_17 + _55;
sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
dot graph subgrapend

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph arrowsubgraph cluster_834571634 dot graph subgraph  _52 = sect_opts_17 + _51;
sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
dot graph subgrapend

 <ssa_name 0x7f34f9d30900
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cbd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f34f98ac120>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f34f9870b00 main
    type <function_type 0x7f34f986f7e0
        type <integer_type 0x7f34f9d3c5e8 int public SI
            size <integer_cst 0x7f34f9d28e28 constant 32>
            unit size <integer_cst 0x7f34f9d28e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
            pointer_to_this <pointer_type 0x7f34f9d43a80>>
        QI
        size <integer_cst 0x7f34f9d28cd8 constant 8>
        unit size <integer_cst 0x7f34f9d28cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <block 0x7f34f9882060>
    result <result_decl 0x7f34f9d33258 D.4023 type <integer_type 0x7f34f9d3c5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f34f9d28e28 32> unit size <integer_cst 0x7f34f9d28e40 4>
        align 32 context <function_decl 0x7f34f9870b00 main>>
    struct-function 0x7f34f98830b0>
 <ssa_name 0x7f34f9895f30
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cf30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f34f98ac150>

dot graph START

======================================================================
 <ssa_name 0x7f34f9895f30
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cf30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f34f98ac150>

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 20: newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start newmem_76 = realloc (sect_opts_17, size_75);
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
dot graph stmt end

this stmt is child function---realloc-----

 ================== trace ================== 
 <ssa_name 0x7f34f9895f30
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cf30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f34f98ac150>
trace fucntion name:realloc 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 11: newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start newmem_73 = realloc (sect_opts_17, size_72);
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph stmt end

this stmt is child function---realloc-----

 ================== trace ================== 
 <ssa_name 0x7f34f9895f30
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cf30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f34f98ac150>
trace fucntion name:realloc 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
lto1: warning: use location
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 25: sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph stmt start sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---realloc-----
dot graph entry main
dot graph target entry end

_56 = sect_opts_17 + _55;
test.c:127:32: warning: use location
     const char *sec = sect_opts[i].name;
                                ^
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 32: _56 = sect_opts_17 + _55;
test.c:127:32: warning: use location
     const char *sec = sect_opts[i].name;
                                ^
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start _56 = sect_opts_17 + _55;
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start _56 = sect_opts_17 + _55;
test.c:127:32: warning: use location
     const char *sec = sect_opts[i].name;
                                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_52 = sect_opts_17 + _51;
test.c:126:32: warning: use location
     const char *val = sect_opts[i].value;
                                ^
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 32: _52 = sect_opts_17 + _51;
test.c:126:32: warning: use location
     const char *val = sect_opts[i].value;
                                ^
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start _52 = sect_opts_17 + _51;
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start _52 = sect_opts_17 + _51;
test.c:126:32: warning: use location
     const char *val = sect_opts[i].value;
                                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_36 = sect_opts_17 + _35;
test.c:97:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 17: _36 = sect_opts_17 + _35;
test.c:97:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _36 = sect_opts_17 + _35;
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start _36 = sect_opts_17 + _35;
test.c:97:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_32 = sect_opts_17 + _31;
test.c:92:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 15: _32 = sect_opts_17 + _31;
test.c:92:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start _32 = sect_opts_17 + _31;
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start _32 = sect_opts_17 + _31;
test.c:92:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_21 = sect_opts_17 + _20;
test.c:79:15: warning: use location
      sect_opts[section_index].value = arg;
               ^
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 8: _21 = sect_opts_17 + _20;
test.c:79:15: warning: use location
      sect_opts[section_index].value = arg;
               ^
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start _21 = sect_opts_17 + _20;
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start _21 = sect_opts_17 + _20;
test.c:79:15: warning: use location
      sect_opts[section_index].value = arg;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_18 = sect_opts_17 + _16;
test.c:78:15: warning: use location
      sect_opts[section_index].name = ".text";
               ^
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 8: _18 = sect_opts_17 + _16;
test.c:78:15: warning: use location
      sect_opts[section_index].name = ".text";
               ^
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start _18 = sect_opts_17 + _16;
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start _18 = sect_opts_17 + _16;
test.c:78:15: warning: use location
      sect_opts[section_index].name = ".text";
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_131 = newmem_76;
lto1: warning: use location
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 22: _131 = newmem_76;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

dot graph stmt start _131 = newmem_76;
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start _131 = newmem_76;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_77 = newmem_76;
test.c:45:10: warning: use location
   return (newmem);
          ^
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 22: _77 = newmem_76;
test.c:45:10: warning: use location
   return (newmem);
          ^
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

dot graph stmt start _77 = newmem_76;
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start _77 = newmem_76;
test.c:45:10: warning: use location
   return (newmem);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (newmem_76 == 0B)
test.c:42:6: warning: use location
   if (!newmem)
      ^
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 20: if (newmem_76 == 0B)
test.c:42:6: warning: use location
   if (!newmem)
      ^
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start if (newmem_76 == 0B)
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start if (newmem_76 == 0B)
test.c:42:6: warning: use location
   if (!newmem)
      ^
dot graph stmt end

if (newmem_76 == 0B)

 ================== find cond branch ================= 
if (newmem_76 == 0B)
Cond in fucntion main basic block 20
 ================== possiable direct basic block ================= 
from main basic block 21
 ================== possiable direct basic block ================= 
from main basic block 22
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph arrowsubgraph cluster_1401780708 dot graph subgraph  _56 = sect_opts_17 + _55;
sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
dot graph subgrapend

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph arrowsubgraph cluster_1289962386 dot graph subgraph  _52 = sect_opts_17 + _51;
sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
dot graph subgrapend

 <ssa_name 0x7f34f9895f30
    type <pointer_type 0x7f34f9d430a8
        type <void_type 0x7f34f9d3cf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f34f9d430a8>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f9d48bd0>>
    var <var_decl 0x7f34f989cf30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f34f98ac150>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f34f9870b00 main
    type <function_type 0x7f34f986f7e0
        type <integer_type 0x7f34f9d3c5e8 int public SI
            size <integer_cst 0x7f34f9d28e28 constant 32>
            unit size <integer_cst 0x7f34f9d28e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
            pointer_to_this <pointer_type 0x7f34f9d43a80>>
        QI
        size <integer_cst 0x7f34f9d28cd8 constant 8>
        unit size <integer_cst 0x7f34f9d28cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <block 0x7f34f9882060>
    result <result_decl 0x7f34f9d33258 D.4023 type <integer_type 0x7f34f9d3c5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f34f9d28e28 32> unit size <integer_cst 0x7f34f9d28e40 4>
        align 32 context <function_decl 0x7f34f9870b00 main>>
    struct-function 0x7f34f98830b0>
 <ssa_name 0x7f34f988fdc8
    type <pointer_type 0x7f34f98792a0
        type <record_type 0x7f34f98791f8 section_addr_info BLK
            size <integer_cst 0x7f34f9d440a8 constant 192>
            unit size <integer_cst 0x7f34f9d44078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f98791f8 fields <field_decl 0x7f34f9871a18 num_sections> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f98792a0> chain <type_decl 0x7f34f9871ab0 D.4018>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f9890240 section_addrs>
    def_stmt section_addrs_48 = malloc (24);
    version 48
    ptr-info 0x7f34f98ac018>

dot graph START

======================================================================
 <ssa_name 0x7f34f988fdc8
    type <pointer_type 0x7f34f98792a0
        type <record_type 0x7f34f98791f8 section_addr_info BLK
            size <integer_cst 0x7f34f9d440a8 constant 192>
            unit size <integer_cst 0x7f34f9d44078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f98791f8 fields <field_decl 0x7f34f9871a18 num_sections> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f98792a0> chain <type_decl 0x7f34f9871ab0 D.4018>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f9890240 section_addrs>
    def_stmt section_addrs_48 = malloc (24);
    version 48
    ptr-info 0x7f34f98ac018>

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph target loc start # .MEM_108 = VDEF <.MEM_94>
section_addrs_48 = malloc (24);
test.c:121:17: warning: use location
   section_addrs = malloc (sizeof(struct section_addr_info));
                 ^
dot graph target loc en1

dot graph target line desc form basic block 29: new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph target line desend

dot graph target loc start # .MEM_108 = VDEF <.MEM_94>
section_addrs_48 = malloc (24);
test.c:121:17: warning: use location
   section_addrs = malloc (sizeof(struct section_addr_info));
                 ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start new_80->arg = section_addrs_48;
section_addrs_48 = malloc (24);
dot graph stmt end

dot graph stmt start new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph target loc start # .MEM_108 = VDEF <.MEM_94>
section_addrs_48 = malloc (24);
test.c:121:17: warning: use location
   section_addrs = malloc (sizeof(struct section_addr_info));
                 ^
dot graph target loc en1

dot graph target line desc form basic block 34: section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph target line desend

dot graph target loc start # .MEM_108 = VDEF <.MEM_94>
section_addrs_48 = malloc (24);
test.c:121:17: warning: use location
   section_addrs = malloc (sizeof(struct section_addr_info));
                 ^
dot graph target loc end

dot graph target basicblock start from main basic block 34dot graph target basicblock en1

dot graph stmt start section_addrs_48->num_sections = _61;
section_addrs_48 = malloc (24);
dot graph stmt end

dot graph stmt start section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph target loc start # .MEM_108 = VDEF <.MEM_94>
section_addrs_48 = malloc (24);
test.c:121:17: warning: use location
   section_addrs = malloc (sizeof(struct section_addr_info));
                 ^
dot graph target loc en1

dot graph target line desc form basic block 32: section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph target line desend

dot graph target loc start # .MEM_108 = VDEF <.MEM_94>
section_addrs_48 = malloc (24);
test.c:121:17: warning: use location
   section_addrs = malloc (sizeof(struct section_addr_info));
                 ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start section_addrs_48->other[sec_num_58].name = sec_57;
section_addrs_48 = malloc (24);
dot graph stmt end

dot graph stmt start section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph stmt end

dot graph target basicblock start from main basic block 34dot graph target basicblock en1

dot graph arrowsubgraph cluster_1940500652 dot graph subgraph  section_addrs_48->num_sections = _61;
section_addrs_48 = malloc (24);
dot graph subgrapend

 <ssa_name 0x7f34f988fdc8
    type <pointer_type 0x7f34f98792a0
        type <record_type 0x7f34f98791f8 section_addr_info BLK
            size <integer_cst 0x7f34f9d440a8 constant 192>
            unit size <integer_cst 0x7f34f9d44078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f98791f8 fields <field_decl 0x7f34f9871a18 num_sections> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f98792a0> chain <type_decl 0x7f34f9871ab0 D.4018>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f34f9890240 section_addrs>
    def_stmt section_addrs_48 = malloc (24);
    version 48
    ptr-info 0x7f34f98ac018>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f34f9870b00 main
    type <function_type 0x7f34f986f7e0
        type <integer_type 0x7f34f9d3c5e8 int public SI
            size <integer_cst 0x7f34f9d28e28 constant 32>
            unit size <integer_cst 0x7f34f9d28e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f34f9d3c5e8 precision 32 min <integer_cst 0x7f34f9d28de0 -2147483648> max <integer_cst 0x7f34f9d28df8 2147483647>
            pointer_to_this <pointer_type 0x7f34f9d43a80>>
        QI
        size <integer_cst 0x7f34f9d28cd8 constant 8>
        unit size <integer_cst 0x7f34f9d28cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f34f9d33168 test.c> initial <block 0x7f34f9882060>
    result <result_decl 0x7f34f9d33258 D.4023 type <integer_type 0x7f34f9d3c5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f34f9d28e28 32> unit size <integer_cst 0x7f34f9d28e40 4>
        align 32 context <function_decl 0x7f34f9870b00 main>>
    struct-function 0x7f34f98830b0>
 <ssa_name 0x7f34f98a4090
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f98a37e0 new>
    def_stmt new_80 = malloc (32);
    version 80
    ptr-info 0x7f34f98ac1b0>

dot graph START

======================================================================
 <ssa_name 0x7f34f98a4090
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f98a37e0 new>
    def_stmt new_80 = malloc (32);
    version 80
    ptr-info 0x7f34f98ac1b0>

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

cleanup_chain = new_80;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: cleanup_chain = new_80;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start cleanup_chain = new_80;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start cleanup_chain = new_80;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start old_chain_70 = cleanup_chain;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_104 = old_chain_70;
lto1: warning: use location
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: _104 = old_chain_70;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _104 = old_chain_70;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _104 = old_chain_70;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (old_chain_70 == 0B)
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph stmt end

if (old_chain_70 == 0B)

 ================== find cond branch ================= 
if (old_chain_70 == 0B)
Cond in fucntion main basic block 2
 ================== possiable direct basic block ================= 
from main basic block 3
 ================== possiable direct basic block ================= 
from main basic block 4
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: _71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _71 = cleanup_chain;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

cleanup_chain = new_69;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: cleanup_chain = new_69;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start cleanup_chain = new_69;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start cleanup_chain = new_69;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start old_chain_81 = cleanup_chain;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_115 = old_chain_81;
lto1: warning: use location
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 31: _115 = old_chain_81;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _115 = old_chain_81;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _115 = old_chain_81;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: _82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start _82 = cleanup_chain;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 35: _84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _84 = ptr_83->next;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 35: _85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _85 = ptr_83->function;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_86 = ptr_83->arg;
common.h:106:8: warning: use location
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 35: _86 = ptr_83->arg;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _86 = ptr_83->arg;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _86 = ptr_83->arg;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_88 = ptr_83->arg;
common.h:108:4: warning: use location
    printf("%x\n", ptr->arg);
    ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 35: _88 = ptr_83->arg;
common.h:108:4: warning: use location
    printf("%x\n", ptr->arg);
    ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _88 = ptr_83->arg;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _88 = ptr_83->arg;
common.h:108:4: warning: use location
    printf("%x\n", ptr->arg);
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_90 = ptr_83->free_arg;
common.h:109:14: warning: use location
       if (ptr->free_arg)
              ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 35: _90 = ptr_83->free_arg;
common.h:109:14: warning: use location
       if (ptr->free_arg)
              ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _90 = ptr_83->free_arg;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _90 = ptr_83->free_arg;
common.h:109:14: warning: use location
       if (ptr->free_arg)
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_91 = ptr_83->free_arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 36: _91 = ptr_83->free_arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

dot graph stmt start _91 = ptr_83->free_arg;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _91 = ptr_83->free_arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_92 = ptr_83->arg;
common.h:110:6: warning: use location
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 36: _92 = ptr_83->arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

dot graph stmt start _92 = ptr_83->arg;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _92 = ptr_83->arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free (ptr_83);
common.h:112:4: warning: use location
    free (ptr);
    ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 37: free (ptr_83);
common.h:112:4: warning: use location
    free (ptr);
    ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 37dot graph target basicblock en1

dot graph stmt start free (ptr_83);
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start free (ptr_83);
common.h:112:4: warning: use location
    free (ptr);
    ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (ptr_83);
common.h:112:4: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start new_80->arg = section_addrs_48;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 34: section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 34dot graph target basicblock en1

dot graph stmt start section_addrs_48->num_sections = _61;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 32: section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start section_addrs_48->other[sec_num_58].name = sec_57;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph stmt end

dot graph target basicblock start from main basic block 37dot graph target basicblock en1

dot graph arrowsubgraph cluster_1682637125 dot graph subgraph  free (ptr_83);
new_69 = malloc (32);
dot graph subgrapend

 <ssa_name 0x7f34f98a4090
    type <pointer_type 0x7f34f986fc78
        type <record_type 0x7f34f986fd20 cleanup BLK
            size <integer_cst 0x7f34f9d28f48 constant 256>
            unit size <integer_cst 0x7f34f9d44048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f34f986fd20 fields <field_decl 0x7f34f9871390 next> context <translation_unit_decl 0x7f34f9d33168 test.c>
            pointer_to_this <pointer_type 0x7f34f986fc78> chain <type_decl 0x7f34f9871428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f34f9d28be8 constant 64>
        unit size <integer_cst 0x7f34f9d28c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f34f986fe70>>
    var <var_decl 0x7f34f98a37e0 new>
    def_stmt new_80 = malloc (32);
    version 80
    ptr-info 0x7f34f98ac1b0>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 6
 [0m
[40;34m    used_stmt array stack totalsize of : 856
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
algorithm time: 0.016767 s
=======Mapping node_fun:null_cleanup=========
<bb 2> [100.00%]:
return;

=======is loop:0=========
=======Mapping node_fun:main=========
<bb 2> [7.51%]:
args[0] = "prog";
args[1] = "v";
args[2] = "-s";
args[3] = "idx";
args[4] = "addr";
args[5] = 0B;
new_69 = malloc (32);
old_chain_70 = cleanup_chain;
_71 = cleanup_chain;
new_69->next = _71;
new_69->function = null_cleanup;
new_69->free_arg = 0B;
new_69->arg = 0B;
cleanup_chain = new_69;
if (old_chain_70 == 0B)
  goto <bb 3>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========
<bb 3> [0.00%]:
exit (1);

=======is loop:0=========
<bb 4> [7.51%]:
_104 = old_chain_70;
_68 = _104;
_105 = _68;
_67 = _105;
_106 = _67;
my_cleanups_10 = _106;
sect_opts_11 = malloc (64);
arg_12 = MEM[(char * *)&args];
goto <bb 26>; [100.00%]

=======is loop:0=========
<bb 5> [92.50%]:
if (argcnt_13 == 0)
  goto <bb 6>; [33.00%]
else
  goto <bb 7>; [67.00%]

=======is loop:1=========
<bb 6> [30.52%]:
// predicted unlikely by continue predictor.
goto <bb 25>; [100.00%]

=======is loop:1=========
<bb 7> [61.98%]:
if (argcnt_13 == 1)
  goto <bb 8>; [34.00%]
else
  goto <bb 14>; [66.00%]

=======is loop:1=========
<bb 8> [21.07%]:
_15 = (long unsigned int) section_index_14;
_16 = _15 * 16;
_18 = sect_opts_17 + _16;
_18->name = ".text";
_19 = (long unsigned int) section_index_14;
_20 = _19 * 16;
_21 = sect_opts_17 + _20;
_21->value = arg_22;
section_index_23 = section_index_14 + 1;
_24 = (long unsigned int) section_index_23;
if (_24 >= num_sect_opts_25)
  goto <bb 9>; [33.00%]
else
  goto <bb 25>; [67.00%]

=======is loop:1=========
<bb 9> [6.95%]:
num_sect_opts_26 = num_sect_opts_25 * 2;
_27 = num_sect_opts_26 * 16;
if (_27 == 0)
  goto <bb 10>; [50.00%]
else
  goto <bb 11>; [50.00%]

=======is loop:1=========
<bb 10> [3.48%]:

=======is loop:1=========
<bb 11> [6.95%]:
# size_72 = PHI <_27(9), 1(10)>
newmem_73 = realloc (sect_opts_17, size_72);
if (newmem_73 == 0B)
  goto <bb 12>; [0.04%]
else
  goto <bb 13>; [99.96%]

=======is loop:1=========
<bb 12> [0.00%]:
exit (1);

=======is loop:0=========
<bb 13> [6.95%]:
_74 = newmem_73;
_137 = newmem_73;
sect_opts_28 = _137;
goto <bb 25>; [100.00%]

=======is loop:1=========
<bb 14> [40.90%]:
if (expecting_sec_name_29 != 0)
  goto <bb 15>; [50.00%]
else
  goto <bb 16>; [50.00%]

=======is loop:1=========
<bb 15> [20.45%]:
_30 = (long unsigned int) section_index_14;
_31 = _30 * 16;
_32 = sect_opts_17 + _31;
_32->value = arg_22;
goto <bb 25>; [100.00%]

=======is loop:1=========
<bb 16> [20.45%]:
if (expecting_sec_addr_33 != 0)
  goto <bb 17>; [50.00%]
else
  goto <bb 23>; [50.00%]

=======is loop:1=========
<bb 17> [10.23%]:
_34 = (long unsigned int) section_index_14;
_35 = _34 * 16;
_36 = sect_opts_17 + _35;
_36->value = arg_22;
section_index_37 = section_index_14 + 1;
_38 = (long unsigned int) section_index_37;
if (num_sect_opts_25 <= _38)
  goto <bb 18>; [33.00%]
else
  goto <bb 25>; [67.00%]

=======is loop:1=========
<bb 18> [3.37%]:
num_sect_opts_39 = num_sect_opts_25 * 2;
_40 = num_sect_opts_39 * 16;
if (_40 == 0)
  goto <bb 19>; [50.00%]
else
  goto <bb 20>; [50.00%]

=======is loop:1=========
<bb 19> [1.69%]:

=======is loop:1=========
<bb 20> [3.37%]:
# size_75 = PHI <_40(18), 1(19)>
newmem_76 = realloc (sect_opts_17, size_75);
if (newmem_76 == 0B)
  goto <bb 21>; [0.04%]
else
  goto <bb 22>; [99.96%]

=======is loop:1=========
<bb 21> [0.00%]:
exit (1);

=======is loop:0=========
<bb 22> [3.37%]:
_77 = newmem_76;
_131 = newmem_76;
sect_opts_41 = _131;
goto <bb 25>; [100.00%]

=======is loop:1=========
<bb 23> [10.23%]:
_42 = strcmp (arg_22, "-s");
if (_42 == 0)
  goto <bb 25>; [99.96%]
else
  goto <bb 24>; [0.04%]

=======is loop:1=========
<bb 24> [0.00%]:
exit (1);

=======is loop:0=========
<bb 25> [92.49%]:
# section_index_62 = PHI <section_index_14(6), section_index_23(8), section_index_23(13), section_index_14(15), section_index_37(17), section_index_37(22), section_index_14(23)>
# expecting_sec_addr_63 = PHI <expecting_sec_addr_33(6), expecting_sec_addr_33(8), expecting_sec_addr_33(13), 0(15), 0(17), 0(22), 1(23)>
# expecting_sec_name_64 = PHI <expecting_sec_name_29(6), expecting_sec_name_29(8), expecting_sec_name_29(13), expecting_sec_name_29(15), expecting_sec_name_29(17), expecting_sec_name_29(22), 1(23)>
# sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
# num_sect_opts_66 = PHI <num_sect_opts_25(6), num_sect_opts_25(8), num_sect_opts_26(13), num_sect_opts_25(15), num_sect_opts_25(17), num_sect_opts_39(22), num_sect_opts_25(23)>
argcnt_43 = argcnt_13 + 1;
_44 = (long unsigned int) argcnt_43;
_45 = _44 * 8;
_46 = &args + _45;
arg_47 = *_46;

=======is loop:1=========
<bb 26> [100.00%]:
# section_index_14 = PHI <0(4), section_index_62(25)>
# arg_22 = PHI <arg_12(4), arg_47(25)>
# expecting_sec_addr_33 = PHI <0(4), expecting_sec_addr_63(25)>
# expecting_sec_name_29 = PHI <0(4), expecting_sec_name_64(25)>
# argcnt_13 = PHI <0(4), argcnt_43(25)>
# sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
# num_sect_opts_25 = PHI <4(4), num_sect_opts_66(25)>
if (arg_22 != 0B)
  goto <bb 5>; [92.50%]
else
  goto <bb 27>; [7.50%]

=======is loop:1=========
<bb 27> [7.50%]:
if (section_index_14 <= 0)
  goto <bb 28>; [0.04%]
else
  goto <bb 29>; [99.96%]

=======is loop:0=========
<bb 28> [0.00%]:
exit (1);

=======is loop:0=========
<bb 29> [7.50%]:
section_addrs_48 = malloc (24);
new_80 = malloc (32);
old_chain_81 = cleanup_chain;
_82 = cleanup_chain;
new_80->next = _82;
new_80->function = free;
new_80->free_arg = 0B;
new_80->arg = section_addrs_48;
cleanup_chain = new_80;
if (old_chain_81 == 0B)
  goto <bb 30>; [0.04%]
else
  goto <bb 31>; [99.96%]

=======is loop:0=========
<bb 30> [0.00%]:
exit (1);

=======is loop:0=========
<bb 31> [7.49%]:
_115 = old_chain_81;
_79 = _115;
_116 = _79;
_78 = _116;
_117 = _78;
goto <bb 33>; [100.00%]

=======is loop:0=========
<bb 32> [42.47%]:
_50 = (long unsigned int) i_49;
_51 = _50 * 16;
_52 = sect_opts_17 + _51;
val_53 = _52->value;
_54 = (long unsigned int) i_49;
_55 = _54 * 16;
_56 = sect_opts_17 + _55;
sec_57 = _56->name;
section_addrs_48->other[sec_num_58].name = sec_57;
sec_num_59 = sec_num_58 + 1;
i_60 = i_49 + 1;

=======is loop:1=========
<bb 33> [49.96%]:
# sec_num_58 = PHI <0(31), sec_num_59(32)>
# i_49 = PHI <0(31), i_60(32)>
if (section_index_14 > i_49)
  goto <bb 32>; [85.00%]
else
  goto <bb 34>; [15.00%]

=======is loop:1=========
<bb 34> [7.49%]:
_61 = (long unsigned int) sec_num_58;
section_addrs_48->num_sections = _61;
goto <bb 38>; [100.00%]

=======is loop:0=========
<bb 35> [42.47%]:
_84 = ptr_83->next;
cleanup_chain = _84;
_85 = ptr_83->function;
_86 = ptr_83->arg;
_85 (_86);
_87 = __printf_chk (1, "cleanup!!!!! =========\n");
_88 = ptr_83->arg;
_89 = __printf_chk (1, "%x\n", _88);
_90 = ptr_83->free_arg;
if (_90 != 0B)
  goto <bb 36>; [93.48%]
else
  goto <bb 37>; [6.52%]

=======is loop:1=========
<bb 36> [39.70%]:
_91 = ptr_83->free_arg;
_92 = ptr_83->arg;
_91 (_92);

=======is loop:1=========
<bb 37> [42.47%]:
free (ptr_83);

=======is loop:1=========
<bb 38> [49.96%]:
ptr_83 = cleanup_chain;
if (my_cleanups_10 != ptr_83)
  goto <bb 35>; [85.00%]
else
  goto <bb 39>; [15.00%]

=======is loop:1=========
<bb 39> [7.49%]:
args ={v} {CLOBBER};
return 0;

=======is loop:0=========
time: 0.042573 s
