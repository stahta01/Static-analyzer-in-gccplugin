test.c: In function ‚Äòfoo3‚Äô:
test.c:53:6: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
   *z = malloc(1);
      ^
test.c:58:11: warning: format ‚Äò%d‚Äô expects argument of type ‚Äòint‚Äô, but argument 2 has type ‚Äòint *‚Äô [-Wformat=]
  printf("%d", p2);
          ~^
          %ls
test.c: In function ‚Äòfoo4‚Äô:
test.c:102:5: warning: assignment from incompatible pointer type [-Wincompatible-pointer-types]
  p2 = &b;
     ^
test.c: In function ‚Äòchild‚Äô:
test.c:167:7: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
  data = 10;
       ^
test.c:181:15: warning: passing argument 1 of ‚Äòpthread_exit‚Äô makes pointer from integer without a cast [-Wint-conversion]
  pthread_exit(test); // Èõ¢ÈñãÂ≠êÂü∑Ë°åÁ∑í
               ^~~~
In file included from test.c:3:0:
/usr/include/pthread.h:207:13: note: expected ‚Äòvoid *‚Äô but argument is of type ‚Äòint‚Äô
 extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));
             ^~~~~~~~~~~~
test.c: In function ‚Äòchild4‚Äô:
test.c:195:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c:196:14: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *test = &data;
              ^
test.c:215:16: warning: format ‚Äò%d‚Äô expects argument of type ‚Äòint‚Äô, but argument 2 has type ‚Äòint *‚Äô [-Wformat=]
  printf("asdda%d\n", pData);
               ~^
               %ls
test.c: In function ‚Äòchild3‚Äô:
test.c:229:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c:243:16: warning: format ‚Äò%d‚Äô expects argument of type ‚Äòint‚Äô, but argument 2 has type ‚Äòint *‚Äô [-Wformat=]
  printf("asdda%d\n", pData);
               ~^
               %ls
test.c: In function ‚Äòchild2‚Äô:
test.c:257:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c: In function ‚Äòmain‚Äô:
test.c:368:37: warning: passing argument 4 of ‚Äòpthread_create‚Äô makes pointer from integer without a cast [-Wint-conversion]
  pthread_create(&t, &attr2, child2, input2);
                                     ^~~~~~
In file included from test.c:3:0:
/usr/include/pthread.h:198:12: note: expected ‚Äòvoid * restrict‚Äô but argument is of type ‚Äòint‚Äô
 extern int pthread_create (pthread_t *__restrict __newthread,
            ^~~~~~~~~~~~~~
=======ipa_pta=========
 <ssa_name 0x7f43a3d573f0
    type <pointer_type 0x7f43a41c4a80
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f43a3d45498>>
    var <var_decl 0x7f43a3d591b0 w>
    def_stmt w_10 = malloc (5);
    version 10
    ptr-info 0x7f43a3d690d8>
In function ‚Äòtest22‚Äô:
test.c:308:7: warning: use location
  int *w = malloc(5);
       ^
 <ssa_name 0x7f43a3d57990
    type <pointer_type 0x7f43a3d45498
        type <pointer_type 0x7f43a41c4a80 type <integer_type 0x7f43a41bd5e8 int>
            public unsigned DI
            size <integer_cst 0x7f43a41a9be8 constant 64>
            unit size <integer_cst 0x7f43a41a9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a3d45498>>
        unsigned DI size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f43a3d59870 ppData>
    def_stmt ppData_15 = malloc (10);
    version 15
    ptr-info 0x7f43a3d69198>
In function ‚Äòchild‚Äô:
test.c:163:8: warning: use location
  int **ppData = malloc(10);
        ^
 <ssa_name 0x7f43a3d57798
    type <pointer_type 0x7f43a41c40a8
        type <void_type 0x7f43a41bdf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a41c40a8>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f43a3d391f8>>
   
    def_stmt _3 = malloc (20);
    version 3
    ptr-info 0x7f43a3d690f0>
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
 <ssa_name 0x7f43a3d61cf0
    type <pointer_type 0x7f43a3d44150
        type <record_type 0x7f43a3d440a8 adresse TI
            size <integer_cst 0x7f43a41a9c30 constant 128>
            unit size <integer_cst 0x7f43a41a9c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f43a3d440a8 fields <field_decl 0x7f43a3d43130 name> context <translation_unit_decl 0x7f43a41b4168 test.c>
            pointer_to_this <pointer_type 0x7f43a3d44150> chain <type_decl 0x7f43a3d431c8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f43a3d60750 a>
    def_stmt a_46 = malloc (32);
    version 46
    ptr-info 0x7f43a3d692b8>
In function ‚Äòmain‚Äô:
test.c:326:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
 <ssa_name 0x7f43a3d61d80
    type <pointer_type 0x7f43a41c4a80
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f43a3d45498>>
    var <var_decl 0x7f43a3d60360 q>
    def_stmt q_57 = malloc (10);
    version 57
    ptr-info 0x7f43a3d692d0>
test.c:379:7: warning: use location
  int *q = malloc(10);
       ^
 <ssa_name 0x7f43a3d61ea0
    type <pointer_type 0x7f43a41c4a80
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f43a3d45498>>
    var <var_decl 0x7f43a3d60240 data>
    def_stmt data_64 = malloc (400);
    version 64
    ptr-info 0x7f43a3d692e8>
test.c:403:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
 <ssa_name 0x7f43a3d61f30
    type <pointer_type 0x7f43a41c4a80
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f43a3d45498>>
    var <var_decl 0x7f43a3d601b0 p4>
    def_stmt p4_71 = malloc (10);
    version 71
    ptr-info 0x7f43a3d69300>
test.c:417:7: warning: use location
  int *p4 = malloc(10);
       ^
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
=======print_function_var -1546283040   6========
=======print_function_var -1546255232   1========
=======print_function_var -1546255376   2========
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
=======================================================
=======node_fun: =========
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path child4  function_call count: 0 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:child4========= [0m
[40;42m =======start_check_funciton:child4========= [0m
[40;33m =======POP node_fun stack:child4========= [0m
[40;42m =======pre add _ fucntion:foo5========= [0m
[40;46m =======add node_fun stack:foo5========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path foo5  function_call count: 0 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:foo5========= [0m
[40;42m =======start_check_funciton:foo5========= [0m
[40;33m =======POP node_fun stack:foo5========= [0m
[40;42m =======pre add _ fucntion:child========= [0m
[40;46m =======add node_fun stack:child========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path child  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path boo  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path test22  function_call count: 0 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:test22========= [0m
[40;42m =======start_check_funciton:test22========= [0m
 <function_decl 0x7f43a3d3ae00 test22
    type <function_type 0x7f43a3d39930
        type <void_type 0x7f43a41bdf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a41c40a8>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f43a3d38a78 value <pointer_type 0x7f43a41c4a80>
            chain <tree_list 0x7f43a41bcac8 value <void_type 0x7f43a41bdf18 void>>>
        pointer_to_this <pointer_type 0x7f43a3d455e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 300 col 6 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> attributes <tree_list 0x7f43a3d389d8> initial <block 0x7f43a3d49720>
    result <result_decl 0x7f43a41b4438 D.4050 type <void_type 0x7f43a41bdf18 void>
        ignored VOID file test.c line 300 col 6
        align 8 context <function_decl 0x7f43a3d3ae00 test22>>
    arguments <parm_decl 0x7f43a3d4b500 k
        type <pointer_type 0x7f43a41c4a80 type <integer_type 0x7f43a41bd5e8 int>
            public unsigned DI
            size <integer_cst 0x7f43a41a9be8 constant 64>
            unit size <integer_cst 0x7f43a41a9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a3d45498>>
        unsigned DI file test.c line 300 col 18 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3ae00 test22> arg-type <pointer_type 0x7f43a41c4a80>>
    struct-function 0x7f43a3d4f2c0>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d573f0
    type <pointer_type 0x7f43a41c4a80
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f43a3d45498>>
    var <var_decl 0x7f43a3d591b0 w>
    def_stmt w_10 = malloc (5);
    version 10
    ptr-info 0x7f43a3d690d8>
w_10 = malloc (5);
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry test22
dot graph target entry end

dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
w_10 = malloc (5);
test.c:308:7: warning: use location
  int *w = malloc(5);
       ^
dot graph target loc end

free (w_10);
test.c:309:2: warning: use location
  free(w);
  ^
dot graph target basicblock start from test22 basic block 2dot graph target basicblock end

dot graph stmt start free (w_10);
test.c:309:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (w_10);
test.c:309:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;32m   Maybe you don't have a memory leak.... more checks  [0m

======================================================================

[40;33m =======POP node_fun stack:test22========= [0m
[40;42m =======pre_check_funciton:boo========= [0m
[40;42m =======thread job funciton:boo========= [0m
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_17 = VDEF <.MEM_16(D)>
pthread_mutex_lock (&mLock);
test.c:159:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_18 = VDEF <.MEM_17>
pthread_mutex_lock (&mLock);
test.c:160:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_33 = VDEF <.MEM_32>
pthread_mutex_unlock (&mLock);
test.c:178:2: warning: use location
  pthread_mutex_unlock(&mLock);
  ^
[40;42m =======thread job funciton lock count :3========= [0m
[40;42m =======start_check_funciton:boo========= [0m
 <function_decl 0x7f43a3d3af00 boo
    type <function_type 0x7f43a3d39930
        type <void_type 0x7f43a41bdf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a41c40a8>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f43a3d38a78 value <pointer_type 0x7f43a41c4a80>
            chain <tree_list 0x7f43a41bcac8 value <void_type 0x7f43a41bdf18 void>>>
        pointer_to_this <pointer_type 0x7f43a3d455e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 284 col 6 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> attributes <tree_list 0x7f43a3d389d8> initial <block 0x7f43a3d49600>
    result <result_decl 0x7f43a41b43c0 D.4047 type <void_type 0x7f43a41bdf18 void>
        ignored VOID file test.c line 284 col 6
        align 8 context <function_decl 0x7f43a3d3af00 boo>>
    arguments <parm_decl 0x7f43a3d4b480 b
        type <pointer_type 0x7f43a41c4a80 type <integer_type 0x7f43a41bd5e8 int>
            public unsigned DI
            size <integer_cst 0x7f43a41a9be8 constant 64>
            unit size <integer_cst 0x7f43a41a9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a3d45498>>
        unsigned DI file test.c line 284 col 15 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3af00 boo> arg-type <pointer_type 0x7f43a41c4a80>>
    struct-function 0x7f43a3d4f210>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d57168
    type <pointer_type 0x7f43a41c4a80
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f43a3d45498>>
    var <parm_decl 0x7f43a3d4b480 b>
    def_stmt GIMPLE_NOP
    version 2
    ptr-info 0x7f43a3d690a8>
this other function ------ê…√UHâÂHÉÏHâ}¯HâuHãMHãE¯∫-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry boo
dot graph target entry end

dot graph target loc start # .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:288:2: warning: use location
  test22(b);
  ^
dot graph target loc end

test22 (b_2(D));
test.c:288:2: warning: use location
dot graph target basicblock start from boo basic block 2dot graph target basicblock end

dot graph stmt start test22 (b_2(D));
test.c:288:2: warning: use location
dot graph stmt end

this stmt is child function---test22-----

 ================== trace ================== 
trace fucntion name:test22 
[40;44m =======trace_function_path test22  function_call count: 0 level :0========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
test.c:302:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:303:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:304:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:305:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:306:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:307:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
test.c:309:2: warning: use location
  free(w);
  ^
tx1
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with b ========= [0m
[40;36m ======= relate stmt argument:b ========= [0m
fucntion collect path finsh
[40;44m =======print_function_path test22  function_call count: 0 level :1========  [0m

 ================== trace ================== 
dot graph entry boo
dot graph target entry end

dot graph target loc start # .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:288:2: warning: use location
  test22(b);
  ^
dot graph target loc end

free (b_2(D));
test.c:287:2: warning: use location
  free(b);
  ^
dot graph target basicblock start from boo basic block 2dot graph target basicblock end

dot graph stmt start free (b_2(D));
test.c:287:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (b_2(D));
test.c:287:2: warning: use location
[40;32m    HAS FREE STMT count:8 name:free [0m

 ================== find ================== 
dot graph entry boo
dot graph target entry end

dot graph target loc start # .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:288:2: warning: use location
  test22(b);
  ^
dot graph target loc end

free (b_2(D));
test.c:286:2: warning: use location
  free(b);
  ^
dot graph target basicblock start from boo basic block 2dot graph target basicblock end

dot graph stmt start free (b_2(D));
test.c:286:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (b_2(D));
test.c:286:2: warning: use location
[40;32m    HAS FREE STMT count:9 name:free [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:287:2: warning: Use after free error!: free location
  free(b);
  ^
# .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:288:2: warning: use location
  test22(b);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
test.c:286:2: warning: Use after free error!: free location
  free(b);
  ^
# .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:288:2: warning: use location
  test22(b);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
test.c:286:2: warning: Use after free error!: free location
  free(b);
  ^
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:287:2: warning: use location
  free(b);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;31m  	possible double free :9 [0m

======================================================================
[40;42m =======pre_check_funciton:boo========= [0m
[40;42m =======start_check_funciton:boo========= [0m
 <function_decl 0x7f43a3d3af00 boo
    type <function_type 0x7f43a3d39930
        type <void_type 0x7f43a41bdf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a41c40a8>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f43a3d38a78 value <pointer_type 0x7f43a41c4a80>
            chain <tree_list 0x7f43a41bcac8 value <void_type 0x7f43a41bdf18 void>>>
        pointer_to_this <pointer_type 0x7f43a3d455e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 284 col 6 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> attributes <tree_list 0x7f43a3d389d8> initial <block 0x7f43a3d49600>
    result <result_decl 0x7f43a41b43c0 D.4047 type <void_type 0x7f43a41bdf18 void>
        ignored VOID file test.c line 284 col 6
        align 8 context <function_decl 0x7f43a3d3af00 boo>>
    arguments <parm_decl 0x7f43a3d4b480 b
        type <pointer_type 0x7f43a41c4a80 type <integer_type 0x7f43a41bd5e8 int>
            public unsigned DI
            size <integer_cst 0x7f43a41a9be8 constant 64>
            unit size <integer_cst 0x7f43a41a9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a3d45498>>
        unsigned DI file test.c line 284 col 15 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3af00 boo> arg-type <pointer_type 0x7f43a41c4a80>>
    struct-function 0x7f43a3d4f210>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d57168
    type <pointer_type 0x7f43a41c4a80
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f43a3d45498>>
    var <parm_decl 0x7f43a3d4b480 b>
    def_stmt GIMPLE_NOP
    version 2
    ptr-info 0x7f43a3d690a8>
this other function ------free-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry boo
dot graph target entry end

dot graph target loc start # .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:288:2: warning: use location
  test22(b);
  ^
dot graph target loc end

test22 (b_2(D));
test.c:288:2: warning: use location
dot graph target basicblock start from boo basic block 2dot graph target basicblock end

dot graph stmt start test22 (b_2(D));
test.c:288:2: warning: use location
dot graph stmt end

this stmt is child function---test22-----

 ================== trace ================== 
trace fucntion name:test22 
[40;44m =======trace_function_path test22  function_call count: 0 level :0========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
test.c:302:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:303:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:304:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:305:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:306:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:307:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
test.c:309:2: warning: use location
  free(w);
  ^
tx1
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with b ========= [0m
[40;36m ======= relate stmt argument:b ========= [0m
fucntion collect path finsh
[40;44m =======print_function_path test22  function_call count: 0 level :1========  [0m

 ================== trace ================== 
dot graph entry boo
dot graph target entry end

dot graph target loc start # .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:288:2: warning: use location
  test22(b);
  ^
dot graph target loc end

free (b_2(D));
test.c:287:2: warning: use location
  free(b);
  ^
dot graph target basicblock start from boo basic block 2dot graph target basicblock end

dot graph stmt start free (b_2(D));
test.c:287:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (b_2(D));
test.c:287:2: warning: use location
[40;32m    HAS FREE STMT count:8 name:free [0m

 ================== find ================== 
dot graph entry boo
dot graph target entry end

dot graph target loc start # .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:288:2: warning: use location
  test22(b);
  ^
dot graph target loc end

free (b_2(D));
test.c:286:2: warning: use location
  free(b);
  ^
dot graph target basicblock start from boo basic block 2dot graph target basicblock end

dot graph stmt start free (b_2(D));
test.c:286:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (b_2(D));
test.c:286:2: warning: use location
[40;32m    HAS FREE STMT count:9 name:free [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:287:2: warning: Use after free error!: free location
  free(b);
  ^
# .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:288:2: warning: use location
  test22(b);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
test.c:286:2: warning: Use after free error!: free location
  free(b);
  ^
# .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:288:2: warning: use location
  test22(b);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
test.c:286:2: warning: Use after free error!: free location
  free(b);
  ^
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:287:2: warning: use location
  free(b);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;31m  	possible double free :9 [0m

======================================================================
[40;33m =======POP node_fun stack:boo========= [0m
[40;42m =======pre_check_funciton:child========= [0m
[40;42m =======thread job funciton:child========= [0m
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_17 = VDEF <.MEM_16(D)>
pthread_mutex_lock (&mLock);
test.c:159:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_18 = VDEF <.MEM_17>
pthread_mutex_lock (&mLock);
test.c:160:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_33 = VDEF <.MEM_32>
pthread_mutex_unlock (&mLock);
test.c:178:2: warning: use location
  pthread_mutex_unlock(&mLock);
  ^
[40;42m =======thread job funciton lock count :3========= [0m
[40;42m =======start_check_funciton:child========= [0m
 <function_decl 0x7f43a3d3ad00 child
    type <function_type 0x7f43a3d39888
        type <pointer_type 0x7f43a41c40a8 type <void_type 0x7f43a41bdf18 void>
            public unsigned DI
            size <integer_cst 0x7f43a41a9be8 constant 64>
            unit size <integer_cst 0x7f43a41a9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a3d391f8>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f43a3d38a00 value <pointer_type 0x7f43a41c40a8>
            chain <tree_list 0x7f43a41bcac8 value <void_type 0x7f43a41bdf18 void>>>
        pointer_to_this <pointer_type 0x7f43a3d39498>>
    addressable volatile nothrow static function-specific-target function-specific-opt QI file test.c line 133 col 7 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> attributes <tree_list 0x7f43a3d389d8> initial <block 0x7f43a3d49780>
    result <result_decl 0x7f43a41b44b0 D.4054 type <pointer_type 0x7f43a41c40a8>
        unsigned ignored DI file test.c line 133 col 7 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3ad00 child>>
    arguments <parm_decl 0x7f43a3d4b580 data type <pointer_type 0x7f43a41c40a8>
        unsigned DI file test.c line 133 col 19 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3ad00 child> arg-type <pointer_type 0x7f43a41c40a8>>
    struct-function 0x7f43a3d4f370>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d57990
    type <pointer_type 0x7f43a3d45498
        type <pointer_type 0x7f43a41c4a80 type <integer_type 0x7f43a41bd5e8 int>
            public unsigned DI
            size <integer_cst 0x7f43a41a9be8 constant 64>
            unit size <integer_cst 0x7f43a41a9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a3d45498>>
        unsigned DI size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f43a3d59870 ppData>
    def_stmt ppData_15 = malloc (10);
    version 15
    ptr-info 0x7f43a3d69198>
ppData_15 = malloc (10);
this Reserved word function ------malloc-----

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:163:8: warning: use location
  int **ppData = malloc(10);
        ^

======================================================================
 <function_decl 0x7f43a3d3ad00 child
    type <function_type 0x7f43a3d39888
        type <pointer_type 0x7f43a41c40a8 type <void_type 0x7f43a41bdf18 void>
            public unsigned DI
            size <integer_cst 0x7f43a41a9be8 constant 64>
            unit size <integer_cst 0x7f43a41a9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a3d391f8>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f43a3d38a00 value <pointer_type 0x7f43a41c40a8>
            chain <tree_list 0x7f43a41bcac8 value <void_type 0x7f43a41bdf18 void>>>
        pointer_to_this <pointer_type 0x7f43a3d39498>>
    addressable volatile nothrow static function-specific-target function-specific-opt QI file test.c line 133 col 7 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> attributes <tree_list 0x7f43a3d389d8> initial <block 0x7f43a3d49780>
    result <result_decl 0x7f43a41b44b0 D.4054 type <pointer_type 0x7f43a41c40a8>
        unsigned ignored DI file test.c line 133 col 7 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3ad00 child>>
    arguments <parm_decl 0x7f43a3d4b580 data type <pointer_type 0x7f43a41c40a8>
        unsigned DI file test.c line 133 col 19 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3ad00 child> arg-type <pointer_type 0x7f43a41c40a8>>
    struct-function 0x7f43a3d4f370>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d57798
    type <pointer_type 0x7f43a41c40a8
        type <void_type 0x7f43a41bdf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a41c40a8>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f43a3d391f8>>
   
    def_stmt _3 = malloc (20);
    version 3
    ptr-info 0x7f43a3d690f0>
_3 = malloc (20);
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

pData = _3;
test.c:164:7: warning: use location
  int *pData = malloc(20);
       ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start pData = _3;
test.c:164:7: warning: use location
dot graph stmt end

 
 LOCAL VARIBALE  
# .MEM_22 = VDEF <.MEM_21>
pData = _3;
test.c:164:7: warning: use location
 
 LOCAL VARIBALE  
dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

_5 = MEM[(int * *)&pData + 8B];
test.c:171:9: warning: use location
  *ppData[1] = 10;
         ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start _5 = MEM[(int * *)&pData + 8B];
test.c:171:9: warning: use location
dot graph stmt end

 
 LOCAL VARIBALE  
# VUSE <.MEM_25>
_5 = MEM[(int * *)&pData + 8B];
test.c:171:9: warning: use location
 
 LOCAL VARIBALE  
dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

*_5 = 10;
test.c:171:13: warning: use location
  *ppData[1] = 10;
             ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start *_5 = 10;
test.c:171:13: warning: use location
dot graph stmt end

 
 LOCAL VARIBALE  
# .MEM_26 = VDEF <.MEM_25>
*_5 = 10;
test.c:171:13: warning: use location
 
 LOCAL VARIBALE  
dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

_6 = MEM[(int * *)&pData + 16B];
test.c:172:9: warning: use location
  *ppData[2] = 10;
         ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start _6 = MEM[(int * *)&pData + 16B];
test.c:172:9: warning: use location
dot graph stmt end

 
 LOCAL VARIBALE  
# VUSE <.MEM_26>
_6 = MEM[(int * *)&pData + 16B];
test.c:172:9: warning: use location
 
 LOCAL VARIBALE  
dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

*_6 = 10;
test.c:172:13: warning: use location
  *ppData[2] = 10;
             ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start *_6 = 10;
test.c:172:13: warning: use location
dot graph stmt end

 
 LOCAL VARIBALE  
# .MEM_27 = VDEF <.MEM_26>
*_6 = 10;
test.c:172:13: warning: use location
 
 LOCAL VARIBALE  
dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

free (&pData);
test.c:177:2: warning: use location
  free(ppData);
  ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start free (&pData);
test.c:177:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (&pData);
test.c:177:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

free (&pData);
test.c:179:2: warning: use location
  free(ppData);
  ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start free (&pData);
test.c:179:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (&pData);
test.c:179:2: warning: use location
[40;32m    HAS FREE STMT count:2 name:free [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 
# .MEM_32 = VDEF <.MEM_31>
free (&pData);
test.c:177:2: warning: Use after free error!: free location
  free(ppData);
  ^
# .MEM_34 = VDEF <.MEM_33>
free (&pData);
test.c:179:2: warning: use location
  free(ppData);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================
 <function_decl 0x7f43a3d3ad00 child
    type <function_type 0x7f43a3d39888
        type <pointer_type 0x7f43a41c40a8 type <void_type 0x7f43a41bdf18 void>
            public unsigned DI
            size <integer_cst 0x7f43a41a9be8 constant 64>
            unit size <integer_cst 0x7f43a41a9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a3d391f8>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f43a3d38a00 value <pointer_type 0x7f43a41c40a8>
            chain <tree_list 0x7f43a41bcac8 value <void_type 0x7f43a41bdf18 void>>>
        pointer_to_this <pointer_type 0x7f43a3d39498>>
    addressable volatile nothrow static function-specific-target function-specific-opt QI file test.c line 133 col 7 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> attributes <tree_list 0x7f43a3d389d8> initial <block 0x7f43a3d49780>
    result <result_decl 0x7f43a41b44b0 D.4054 type <pointer_type 0x7f43a41c40a8>
        unsigned ignored DI file test.c line 133 col 7 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3ad00 child>>
    arguments <parm_decl 0x7f43a3d4b580 data type <pointer_type 0x7f43a41c40a8>
        unsigned DI file test.c line 133 col 19 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3ad00 child> arg-type <pointer_type 0x7f43a41c40a8>>
    struct-function 0x7f43a3d4f370>

dot graph START

======================================================================
 <integer_cst 0x7f43a3d3ce28 type <pointer_type 0x7f43a41c40a8> constant 10>
 <integer_cst 0x7f43a3d3ce28 type <pointer_type 0x7f43a41c40a8> constant 10>
this other function ------free-----

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:176:2: warning: use location
  boo(data);
  ^

======================================================================
[40;42m =======pre_check_funciton:child========= [0m
[40;42m =======start_check_funciton:child========= [0m
 <function_decl 0x7f43a3d3ad00 child
    type <function_type 0x7f43a3d39888
        type <pointer_type 0x7f43a41c40a8 type <void_type 0x7f43a41bdf18 void>
            public unsigned DI
            size <integer_cst 0x7f43a41a9be8 constant 64>
            unit size <integer_cst 0x7f43a41a9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a3d391f8>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f43a3d38a00 value <pointer_type 0x7f43a41c40a8>
            chain <tree_list 0x7f43a41bcac8 value <void_type 0x7f43a41bdf18 void>>>
        pointer_to_this <pointer_type 0x7f43a3d39498>>
    addressable volatile nothrow static function-specific-target function-specific-opt QI file test.c line 133 col 7 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> attributes <tree_list 0x7f43a3d389d8> initial <block 0x7f43a3d49780>
    result <result_decl 0x7f43a41b44b0 D.4054 type <pointer_type 0x7f43a41c40a8>
        unsigned ignored DI file test.c line 133 col 7 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3ad00 child>>
    arguments <parm_decl 0x7f43a3d4b580 data type <pointer_type 0x7f43a41c40a8>
        unsigned DI file test.c line 133 col 19 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3ad00 child> arg-type <pointer_type 0x7f43a41c40a8>>
    struct-function 0x7f43a3d4f370>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d57990
    type <pointer_type 0x7f43a3d45498
        type <pointer_type 0x7f43a41c4a80 type <integer_type 0x7f43a41bd5e8 int>
            public unsigned DI
            size <integer_cst 0x7f43a41a9be8 constant 64>
            unit size <integer_cst 0x7f43a41a9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a3d45498>>
        unsigned DI size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f43a3d59870 ppData>
    def_stmt ppData_15 = malloc (10);
    version 15
    ptr-info 0x7f43a3d69198>
ppData_15 = malloc (10);
this Reserved word function ------malloc-----

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:163:8: warning: use location
  int **ppData = malloc(10);
        ^

======================================================================
 <function_decl 0x7f43a3d3ad00 child
    type <function_type 0x7f43a3d39888
        type <pointer_type 0x7f43a41c40a8 type <void_type 0x7f43a41bdf18 void>
            public unsigned DI
            size <integer_cst 0x7f43a41a9be8 constant 64>
            unit size <integer_cst 0x7f43a41a9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a3d391f8>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f43a3d38a00 value <pointer_type 0x7f43a41c40a8>
            chain <tree_list 0x7f43a41bcac8 value <void_type 0x7f43a41bdf18 void>>>
        pointer_to_this <pointer_type 0x7f43a3d39498>>
    addressable volatile nothrow static function-specific-target function-specific-opt QI file test.c line 133 col 7 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> attributes <tree_list 0x7f43a3d389d8> initial <block 0x7f43a3d49780>
    result <result_decl 0x7f43a41b44b0 D.4054 type <pointer_type 0x7f43a41c40a8>
        unsigned ignored DI file test.c line 133 col 7 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3ad00 child>>
    arguments <parm_decl 0x7f43a3d4b580 data type <pointer_type 0x7f43a41c40a8>
        unsigned DI file test.c line 133 col 19 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3ad00 child> arg-type <pointer_type 0x7f43a41c40a8>>
    struct-function 0x7f43a3d4f370>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d57798
    type <pointer_type 0x7f43a41c40a8
        type <void_type 0x7f43a41bdf18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a41c40a8>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f43a3d391f8>>
   
    def_stmt _3 = malloc (20);
    version 3
    ptr-info 0x7f43a3d690f0>
_3 = malloc (20);
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

pData = _3;
test.c:164:7: warning: use location
  int *pData = malloc(20);
       ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start pData = _3;
test.c:164:7: warning: use location
dot graph stmt end

dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

_5 = MEM[(int * *)&pData + 8B];
test.c:171:9: warning: use location
  *ppData[1] = 10;
         ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start _5 = MEM[(int * *)&pData + 8B];
test.c:171:9: warning: use location
dot graph stmt end

dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

*_5 = 10;
test.c:171:13: warning: use location
  *ppData[1] = 10;
             ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start *_5 = 10;
test.c:171:13: warning: use location
dot graph stmt end

dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

_6 = MEM[(int * *)&pData + 16B];
test.c:172:9: warning: use location
  *ppData[2] = 10;
         ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start _6 = MEM[(int * *)&pData + 16B];
test.c:172:9: warning: use location
dot graph stmt end

dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

*_6 = 10;
test.c:172:13: warning: use location
  *ppData[2] = 10;
             ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start *_6 = 10;
test.c:172:13: warning: use location
dot graph stmt end

dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

free (&pData);
test.c:177:2: warning: use location
  free(ppData);
  ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start free (&pData);
test.c:177:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (&pData);
test.c:177:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry child
dot graph target entry end

dot graph target loc start # .MEM_21 = VDEF <.MEM_20>
_3 = malloc (20);
test.c:164:15: warning: use location
  int *pData = malloc(20);
               ^
dot graph target loc end

free (&pData);
test.c:179:2: warning: use location
  free(ppData);
  ^
dot graph target basicblock start from child basic block 2dot graph target basicblock end

dot graph stmt start free (&pData);
test.c:179:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (&pData);
test.c:179:2: warning: use location
[40;32m    HAS FREE STMT count:2 name:free [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 
# .MEM_32 = VDEF <.MEM_31>
free (&pData);
test.c:177:2: warning: Use after free error!: free location
  free(ppData);
  ^
# .MEM_34 = VDEF <.MEM_33>
free (&pData);
test.c:179:2: warning: use location
  free(ppData);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================
 <function_decl 0x7f43a3d3ad00 child
    type <function_type 0x7f43a3d39888
        type <pointer_type 0x7f43a41c40a8 type <void_type 0x7f43a41bdf18 void>
            public unsigned DI
            size <integer_cst 0x7f43a41a9be8 constant 64>
            unit size <integer_cst 0x7f43a41a9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f43a3d391f8>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f43a3d38a00 value <pointer_type 0x7f43a41c40a8>
            chain <tree_list 0x7f43a41bcac8 value <void_type 0x7f43a41bdf18 void>>>
        pointer_to_this <pointer_type 0x7f43a3d39498>>
    addressable volatile nothrow static function-specific-target function-specific-opt QI file test.c line 133 col 7 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> attributes <tree_list 0x7f43a3d389d8> initial <block 0x7f43a3d49780>
    result <result_decl 0x7f43a41b44b0 D.4054 type <pointer_type 0x7f43a41c40a8>
        unsigned ignored DI file test.c line 133 col 7 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3ad00 child>>
    arguments <parm_decl 0x7f43a3d4b580 data type <pointer_type 0x7f43a41c40a8>
        unsigned DI file test.c line 133 col 19 size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 context <function_decl 0x7f43a3d3ad00 child> arg-type <pointer_type 0x7f43a41c40a8>>
    struct-function 0x7f43a3d4f370>

dot graph START

======================================================================
 <integer_cst 0x7f43a3d3ce28 type <pointer_type 0x7f43a41c40a8> constant 10>
 <integer_cst 0x7f43a3d3ce28 type <pointer_type 0x7f43a41c40a8> constant 10>
this other function ------free-----

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:176:2: warning: use location
  boo(data);
  ^

======================================================================
[40;33m =======POP node_fun stack:child========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m
 <function_decl 0x7f43a3d3ab00 main
    type <function_type 0x7f43a3d397e0
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 319 col 5 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> initial <block 0x7f43a3d49840>
    result <result_decl 0x7f43a41b45a0 D.4063 type <integer_type 0x7f43a41bd5e8 int>
        ignored SI file test.c line 319 col 5 size <integer_cst 0x7f43a41a9e28 32> unit size <integer_cst 0x7f43a41a9e40 4>
        align 32 context <function_decl 0x7f43a3d3ab00 main>>
    struct-function 0x7f43a3d4f4d0>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d61cf0
    type <pointer_type 0x7f43a3d44150
        type <record_type 0x7f43a3d440a8 adresse TI
            size <integer_cst 0x7f43a41a9c30 constant 128>
            unit size <integer_cst 0x7f43a41a9c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f43a3d440a8 fields <field_decl 0x7f43a3d43130 name> context <translation_unit_decl 0x7f43a41b4168 test.c>
            pointer_to_this <pointer_type 0x7f43a3d44150> chain <type_decl 0x7f43a3d431c8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f43a3d60750 a>
    def_stmt a_46 = malloc (32);
    version 46
    ptr-info 0x7f43a3d692b8>
a_46 = malloc (32);
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:326:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_17 = a_46 + _16;
test.c:336:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^
dot graph target basicblock start from main basic block 5dot graph target basicblock end

dot graph stmt start _17 = a_46 + _16;
test.c:336:23: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:326:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_18 = _17->name;
test.c:336:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target basicblock start from main basic block 5dot graph target basicblock end

dot graph stmt start _18 = _17->name;
test.c:336:3: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:326:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_40 = __printf_chk (1, "%s, %d\n", _18, _14);
dot graph target basicblock start from main basic block 5dot graph target basicblock end

dot graph stmt start _40 = __printf_chk (1, "%s, %d\n", _18, _14);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:326:18: warning: use location
dot graph target loc end

_13 = a_46 + _12;
test.c:336:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^
dot graph target basicblock start from main basic block 5dot graph target basicblock end

dot graph stmt start _13 = a_46 + _12;
test.c:336:34: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:326:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_14 = _13->nummer;
test.c:336:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target basicblock start from main basic block 5dot graph target basicblock end

dot graph stmt start _14 = _13->nummer;
test.c:336:3: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:326:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_9 = a_46 + _8;
test.c:331:4: warning: use location
   a[i].nummer = 123;
    ^
dot graph target basicblock start from main basic block 3dot graph target basicblock end

dot graph stmt start _9 = a_46 + _8;
test.c:331:4: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:326:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_9->nummer = 123;
test.c:331:15: warning: use location
   a[i].nummer = 123;
               ^
dot graph target basicblock start from main basic block 3dot graph target basicblock end

dot graph stmt start _9->nummer = 123;
test.c:331:15: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:326:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_6 = a_46 + _5;
test.c:330:4: warning: use location
   a[i].name = "Testname";
    ^
dot graph target basicblock start from main basic block 3dot graph target basicblock end

dot graph stmt start _6 = a_46 + _5;
test.c:330:4: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:326:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_6->name = "Testname";
test.c:330:13: warning: use location
   a[i].name = "Testname";
             ^
dot graph target basicblock start from main basic block 3dot graph target basicblock end

dot graph stmt start _6->name = "Testname";
test.c:330:13: warning: use location
dot graph stmt end


 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f43a3d3ab00 main
    type <function_type 0x7f43a3d397e0
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 319 col 5 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> initial <block 0x7f43a3d49840>
    result <result_decl 0x7f43a41b45a0 D.4063 type <integer_type 0x7f43a41bd5e8 int>
        ignored SI file test.c line 319 col 5 size <integer_cst 0x7f43a41a9e28 32> unit size <integer_cst 0x7f43a41a9e40 4>
        align 32 context <function_decl 0x7f43a3d3ab00 main>>
    struct-function 0x7f43a3d4f4d0>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d61870
    type <integer_type 0x7f43a41bd7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f43a41bd738 precision 64 min <integer_cst 0x7f43a41a9eb8 0> max <integer_cst 0x7f43a41ab500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f43a41c99d8>>
   
    def_stmt _22 = t;
    version 22>
this other function ------__printf_chk-----
 
 Start is Pthread Job Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # VUSE <.MEM_103>
_22 = t;
test.c:370:2: warning: use location
  pthread_join(t, NULL);
  ^
dot graph target loc end

pthread_create (&t, &attr2, child2, _21);
test.c:368:2: warning: use location
  pthread_create(&t, &attr2, child2, input2);
  ^
dot graph target basicblock start from main basic block 7dot graph target basicblock end

dot graph stmt start pthread_create (&t, &attr2, child2, _21);
test.c:368:2: warning: use location
dot graph stmt end

this stmt is child function---pthread_create-----

 ================== find ================== 
pthread_create (&t, &attr2, child2, _21);
test.c:368:2: warning: use location
[40;32m    FIND PTHREAD_CREATED STMT  [0m

 ================== pre_pthread_detched ================== 

 ================== pre_pthread_detched end ================== 
[40;31m  wqeeeeeeeeeee 0  [0m
[40;44m =======trace_function_path main  function_call count: 3 level :-1========  [0m
[40;44m =======print_function_path main  function_call count: 3 level :-1========  [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 0 level :-1========  [0m
[40;44m =======print_function_path child4  function_call count: 0 level :-1========  [0m
[40;42m =======pre add _ fucntion:foo5========= [0m
[40;46m =======add node_fun stack:foo5========= [0m
[40;44m =======trace_function_path foo5  function_call count: 0 level :-1========  [0m
[40;44m =======print_function_path foo5  function_call count: 0 level :-1========  [0m
[40;42m =======pre add _ fucntion:child========= [0m
[40;46m =======add node_fun stack:child========= [0m
[40;44m =======trace_function_path child  function_call count: 1 level :-1========  [0m
[40;31m  find pthread_exit stmt  [0m
# .MEM_35 = VDEF <.MEM_34>
pthread_exit (100B);
test.c:181:2: warning: use location
  pthread_exit(test); // Èõ¢ÈñãÂ≠êÂü∑Ë°åÁ∑í
  ^
[40;44m =======print_function_path child  function_call count: 1 level :-1========  [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 1 level :-1========  [0m
[40;44m =======print_function_path boo  function_call count: 1 level :-1========  [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 0 level :-1========  [0m
[40;44m =======print_function_path test22  function_call count: 0 level :-1========  [0m

 ================== pre_pthread_detched ================== 
[40;44m =======trace_function_path child2  function_call count: 1 level :-1========  [0m
[40;44m =======print_function_path child2  function_call count: 1 level :-1========  [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 0 level :-1========  [0m
[40;44m =======print_function_path child3  function_call count: 0 level :-1========  [0m

 ================== pre_pthread_detched end ================== 
[40;44m =======trace_function_path child2  function_call count: 1 level :0========  [0m
[40;44m =======print_function_path child2  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 0 level :1========  [0m
[40;44m =======print_function_path child3  function_call count: 0 level :2========  [0m
[40;32m    FIND PTHREAD_CREATED TYPE is CREATE_JOINABLE  [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

dot graph target loc start # VUSE <.MEM_103>
_22 = t;
test.c:370:2: warning: use location
  pthread_join(t, NULL);
  ^
dot graph target loc end

pthread_join (_22, 0B);
test.c:370:2: warning: use location
dot graph target basicblock start from main basic block 7dot graph target basicblock end

dot graph stmt start pthread_join (_22, 0B);
test.c:370:2: warning: use location
dot graph stmt end

this stmt is child function---pthread_join-----
[40;32m    FIND PTHREAD_JOIN [0m

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;32m    pthread is JOINABLE and no memory leak   [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f43a3d3ab00 main
    type <function_type 0x7f43a3d397e0
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 319 col 5 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> initial <block 0x7f43a3d49840>
    result <result_decl 0x7f43a41b45a0 D.4063 type <integer_type 0x7f43a41bd5e8 int>
        ignored SI file test.c line 319 col 5 size <integer_cst 0x7f43a41a9e28 32> unit size <integer_cst 0x7f43a41a9e40 4>
        align 32 context <function_decl 0x7f43a3d3ab00 main>>
    struct-function 0x7f43a3d4f4d0>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d618b8
    type <pointer_type 0x7f43a3d422a0
        type <integer_type 0x7f43a3d392a0 pthread_t unsigned DI
            size <integer_cst 0x7f43a41a9be8 constant 64>
            unit size <integer_cst 0x7f43a41a9c00 constant 8>
            align 64 symtab 0 alias set -1 canonical type 0x7f43a41bd738 precision 64 min <integer_cst 0x7f43a41a9eb8 0> max <integer_cst 0x7f43a41ab500 18446744073709551615> context <translation_unit_decl 0x7f43a41b4168 test.c>
            pointer_to_this <pointer_type 0x7f43a3d422a0>>
        unsigned DI size <integer_cst 0x7f43a41a9be8 64> unit size <integer_cst 0x7f43a41a9c00 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _23 = &t2[i_34];
    version 23
    ptr-info 0x7f43a3d69288>
this other function ------pthread_join-----
 
 Start is Pthread Job Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_122 = VDEF <.MEM_91>
err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:375:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

_24 = t2[i_34];
test.c:377:3: warning: use location
   printf("%ld\n", t2[i]);
   ^
dot graph target basicblock start from main basic block 8dot graph target basicblock end

dot graph stmt start _24 = t2[i_34];
test.c:377:3: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_122 = VDEF <.MEM_91>
err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:375:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

_62 = __printf_chk (1, "%ld\n", _24);
dot graph target basicblock start from main basic block 8dot graph target basicblock end

dot graph stmt start _62 = __printf_chk (1, "%ld\n", _24);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_122 = VDEF <.MEM_91>
err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:375:7: warning: use location
dot graph target loc end

_28 = t2[i_35];
test.c:396:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph target basicblock start from main basic block 13dot graph target basicblock end

dot graph stmt start _28 = t2[i_35];
test.c:396:3: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_122 = VDEF <.MEM_91>
err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:375:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

pthread_join (_28, 0B);
test.c:396:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph target basicblock start from main basic block 13dot graph target basicblock end

dot graph stmt start pthread_join (_28, 0B);
test.c:396:3: warning: use location
dot graph stmt end

this stmt is child function---pthread_join-----
[40;32m    FIND PTHREAD_JOIN [0m
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_122 = VDEF <.MEM_91>
err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:375:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:375:7: warning: use location
dot graph target basicblock start from main basic block 8dot graph target basicblock end

dot graph stmt start err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:375:7: warning: use location
dot graph stmt end

this stmt is child function---pthread_create-----

 ================== find ================== 
err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:375:7: warning: use location
[40;32m    FIND PTHREAD_CREATED STMT  [0m

 ================== pre_pthread_detched ================== 
[40;44m =======trace_function_path child  function_call count: 1 level :-1========  [0m
[40;31m  find pthread_exit stmt  [0m
# .MEM_35 = VDEF <.MEM_34>
pthread_exit (100B);
test.c:181:2: warning: use location
  pthread_exit(test); // Èõ¢ÈñãÂ≠êÂü∑Ë°åÁ∑í
  ^
[40;44m =======print_function_path child  function_call count: 1 level :-1========  [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 1 level :-1========  [0m
[40;44m =======print_function_path boo  function_call count: 1 level :-1========  [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 0 level :-1========  [0m
[40;44m =======print_function_path test22  function_call count: 0 level :-1========  [0m

 ================== pre_pthread_detched end ================== 
[40;31m  wqeeeeeeeeeee 0  [0m
[40;44m =======trace_function_path child  function_call count: 1 level :0========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_29 = VDEF <.MEM_28>
free (_8);
test.c:174:2: warning: use location
  free(pData);
  ^
[40;44m =======print_function_path child  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 1 level :1========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
test.c:286:2: warning: use location
  free(b);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:287:2: warning: use location
  free(b);
  ^
[40;44m =======print_function_path boo  function_call count: 1 level :2========  [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 0 level :2========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
test.c:302:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:303:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:304:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:305:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:306:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:307:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
test.c:309:2: warning: use location
  free(w);
  ^
[40;44m =======print_function_path test22  function_call count: 0 level :3========  [0m
[40;32m    FIND PTHREAD_CREATED TYPE is CREATE_JOINABLE  [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;32m    pthread is JOINABLE and no memory leak   [0m

======================================================================

======================================================================
[40;31m  	possible double free :10 [0m

======================================================================
 <function_decl 0x7f43a3d3ab00 main
    type <function_type 0x7f43a3d397e0
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 319 col 5 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> initial <block 0x7f43a3d49840>
    result <result_decl 0x7f43a41b45a0 D.4063 type <integer_type 0x7f43a41bd5e8 int>
        ignored SI file test.c line 319 col 5 size <integer_cst 0x7f43a41a9e28 32> unit size <integer_cst 0x7f43a41a9e40 4>
        align 32 context <function_decl 0x7f43a3d3ab00 main>>
    struct-function 0x7f43a3d4f4d0>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d61d80
    type <pointer_type 0x7f43a41c4a80
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f43a3d45498>>
    var <var_decl 0x7f43a3d60360 q>
    def_stmt q_57 = malloc (10);
    version 57
    ptr-info 0x7f43a3d692d0>
q_57 = malloc (10);
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_105 = VDEF <.MEM_91>
q_57 = malloc (10);
test.c:379:7: warning: use location
  int *q = malloc(10);
       ^
dot graph target loc end

child (q_57);
test.c:384:3: warning: use location
   child(q);
   ^
dot graph target basicblock start from main basic block 11dot graph target basicblock end

dot graph stmt start child (q_57);
test.c:384:3: warning: use location
dot graph stmt end

this stmt is child function---child-----

 ================== trace ================== 
trace fucntion name:child 
[40;44m =======trace_function_path child  function_call count: 1 level :0========  [0m
tx1
[40;36m ======= node_fun:child========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
# VUSE <.MEM_18>
_1 = MEM[(int *)data_12(D)];
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_rhs3:û========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 866213287 stmt(RHS) :_1 = MEM[(int *)data_12(D)];
In function ‚Äòchild‚Äô:
test.c:161:6: warning: use location
   ++(*(int *)data);
      ^
MEM[(int *)data_12(D)]
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
_2 = _1 + 1;
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument:child========= [0m
[40;36m ======= relate gimple_assign_lhs:í========= [0m
_2 = _1 + 1;
test.c:161:3: warning: use location
   ++(*(int *)data);
   ^

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_19 = VDEF <.MEM_18>
MEM[(int *)data_12(D)] = _2;
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:û========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1297747273 stmt(LHS) :MEM[(int *)data_12(D)] = _2;
test.c:161:3: warning: use location
MEM[(int *)data_12(D)]
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:child========= [0m
[40;36m ======= relate gimple_assign_lhs:û========= [0m
# .MEM_19 = VDEF <.MEM_18>
MEM[(int *)data_12(D)] = _2;
test.c:161:3: warning: use location

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_22 = VDEF <.MEM_21>
pData = _3;
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:#========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1423924122 stmt(LHS) :pData = _3;
test.c:164:7: warning: use location
  int *pData = malloc(20);
       ^

dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_23 = VDEF <.MEM_22>
data2 = 0;
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:#========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1571615019 stmt(LHS) :data2 = 0;
test.c:166:6: warning: use location
  int data2 = 0;
      ^

dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_24 = VDEF <.MEM_23>
pData = &data2;
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:#========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1900154765 stmt(LHS) :pData = &data2;
test.c:169:8: warning: use location
  pData = &data2;
        ^

dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_24>
_4 = pData;
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_rhs3:#========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 328576703 stmt(RHS) :_4 = pData;
test.c:170:9: warning: use location
  *ppData[0] = 10;
         ^

dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_25 = VDEF <.MEM_24>
*_4 = 10;
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:û========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1447916706 stmt(LHS) :*_4 = 10;
test.c:170:13: warning: use location
  *ppData[0] = 10;
             ^
*_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_25>
_5 = MEM[(int * *)&pData + 8B];
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_rhs3:û========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1820596199 stmt(RHS) :_5 = MEM[(int * *)&pData + 8B];
test.c:171:9: warning: use location
  *ppData[1] = 10;
         ^
MEM[(int * *)&pData + 8B]
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_26 = VDEF <.MEM_25>
*_5 = 10;
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:û========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 473446175 stmt(LHS) :*_5 = 10;
test.c:171:13: warning: use location
  *ppData[1] = 10;
             ^
*_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_26>
_6 = MEM[(int * *)&pData + 16B];
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_rhs3:û========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1858236817 stmt(RHS) :_6 = MEM[(int * *)&pData + 16B];
test.c:172:9: warning: use location
  *ppData[2] = 10;
         ^
MEM[(int * *)&pData + 16B]
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_27 = VDEF <.MEM_26>
*_6 = 10;
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:û========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 84484230 stmt(LHS) :*_6 = 10;
test.c:172:13: warning: use location
  *ppData[2] = 10;
             ^
*_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_27>
_7 = pData;
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_rhs3:#========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 339811907 stmt(RHS) :_7 = pData;
test.c:173:3: warning: use location
  **ppData = 12;
   ^

dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_28 = VDEF <.MEM_27>
*_7 = 12;
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:û========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1628915132 stmt(LHS) :*_7 = 12;
test.c:173:11: warning: use location
  **ppData = 12;
           ^
*_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_28>
_8 = pData;
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_rhs3:#========= [0m
dot graph start relate form ID : 746553381
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1416828042 stmt(RHS) :_8 = pData;
test.c:174:2: warning: use location
  free(pData);
  ^

dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_35 = VDEF <.MEM_34>
pthread_exit (100B);
fucntion collect path finsh
[40;44m =======print_function_path child  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 1 level :1========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
In function ‚Äòmain‚Äô:
test.c:286:2: warning: use location
  free(b);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:287:2: warning: use location
  free(b);
  ^
tx1
[40;36m ======= node_fun:boo========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
fucntion collect path finsh
[40;44m =======print_function_path boo  function_call count: 1 level :2========  [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 0 level :2========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
test.c:302:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:303:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:304:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:305:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:306:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:307:2: warning: use location
  free(k);
  ^
tx1
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
fucntion collect path finsh
[40;44m =======print_function_path test22  function_call count: 0 level :3========  [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_105 = VDEF <.MEM_91>
q_57 = malloc (10);
test.c:379:7: warning: use location
  int *q = malloc(10);
       ^
dot graph target loc end

_31 = foo5 (q_57, q_57);
test.c:416:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target basicblock start from main basic block 21dot graph target basicblock end

dot graph stmt start _31 = foo5 (q_57, q_57);
test.c:416:2: warning: use location
dot graph stmt end

this stmt is child function---foo5-----

 ================== trace ================== 
trace fucntion name:foo5 
[40;44m =======trace_function_path foo5  function_call count: 0 level :0========  [0m
tx1
[40;36m ======= node_fun:foo5========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
# VUSE <.MEM_9(D)>
_1 = *z_4(D);
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_rhs3:û========= [0m
dot graph start relate form ID : 741880138
from foo5 basic block 2dot graph end relate end

dot graph relate stmt start ID : 970023335 stmt(RHS) :_1 = *z_4(D);
In function ‚Äòfoo5‚Äô:
test.c:37:2: warning: use location
  printf("test1%d\n", *z);
  ^
*z_4(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_10>
_2 = *y_5(D);
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeeq_57, points-to NULL, points-to vars: { D.4087 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_rhs3:û========= [0m
dot graph start relate form ID : 741880138
from foo5 basic block 2dot graph end relate end

dot graph relate stmt start ID : 314003072 stmt(RHS) :_2 = *y_5(D);
test.c:38:2: warning: use location
  printf("test2%d\n", *y);
  ^
*y_5(D)
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;44m =======print_function_path foo5  function_call count: 0 level :1========  [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_105 = VDEF <.MEM_91>
q_57 = malloc (10);
In function ‚Äòmain‚Äô:
test.c:379:7: warning: use location
  int *q = malloc(10);
       ^
dot graph target loc end

*q_57 = 20;
test.c:389:8: warning: use location
   q[0] = 20;
        ^
dot graph target basicblock start from main basic block 12dot graph target basicblock end

dot graph stmt start *q_57 = 20;
test.c:389:8: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_105 = VDEF <.MEM_91>
q_57 = malloc (10);
test.c:379:7: warning: use location
  int *q = malloc(10);
       ^
dot graph target loc end

_25 = q_57 != 0B;
test.c:381:9: warning: use location
  if ((q != NULL) && test)
         ^
dot graph target basicblock start from main basic block 10dot graph target basicblock end

dot graph stmt start _25 = q_57 != 0B;
test.c:381:9: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_105 = VDEF <.MEM_91>
q_57 = malloc (10);
test.c:379:7: warning: use location
  int *q = malloc(10);
       ^
dot graph target loc end

_27 = _25 & _26;
test.c:381:18: warning: use location
  if ((q != NULL) && test)
                  ^
dot graph target basicblock start from main basic block 10dot graph target basicblock end

dot graph stmt start _27 = _25 & _26;
test.c:381:18: warning: use location
dot graph stmt end


 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;31m  	possible double free :8 [0m

======================================================================
 <function_decl 0x7f43a3d3ab00 main
    type <function_type 0x7f43a3d397e0
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 319 col 5 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> initial <block 0x7f43a3d49840>
    result <result_decl 0x7f43a41b45a0 D.4063 type <integer_type 0x7f43a41bd5e8 int>
        ignored SI file test.c line 319 col 5 size <integer_cst 0x7f43a41a9e28 32> unit size <integer_cst 0x7f43a41a9e40 4>
        align 32 context <function_decl 0x7f43a3d3ab00 main>>
    struct-function 0x7f43a3d4f4d0>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d61ea0
    type <pointer_type 0x7f43a41c4a80
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f43a3d45498>>
    var <var_decl 0x7f43a3d60240 data>
    def_stmt data_64 = malloc (400);
    version 64
    ptr-info 0x7f43a3d692e8>
data_64 = malloc (400);
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_108 = VDEF <.MEM_92>
data_64 = malloc (400);
test.c:403:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc end

data_36 = PHI <0B(15), data_64(18)>
lto1: warning: use location
dot graph target basicblock start from main basic block 19dot graph target basicblock end

dot graph stmt start data_36 = PHI <0B(15), data_64(18)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_108 = VDEF <.MEM_92>
data_64 = malloc (400);
test.c:403:8: warning: use location
dot graph target loc end

free (data_36);
test.c:414:3: warning: use location
   free(data);
   ^
dot graph target basicblock start from main basic block 20dot graph target basicblock end

dot graph stmt start free (data_36);
test.c:414:3: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (data_36);
test.c:414:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_108 = VDEF <.MEM_92>
data_64 = malloc (400);
test.c:403:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc end

free (data_64);
test.c:409:3: warning: use location
   free(data);
   ^
dot graph target basicblock start from main basic block 18dot graph target basicblock end

dot graph stmt start free (data_64);
test.c:409:3: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (data_64);
test.c:409:3: warning: use location
[40;32m    HAS FREE STMT count:2 name:free [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================
 <function_decl 0x7f43a3d3ab00 main
    type <function_type 0x7f43a3d397e0
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 319 col 5 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> initial <block 0x7f43a3d49840>
    result <result_decl 0x7f43a41b45a0 D.4063 type <integer_type 0x7f43a41bd5e8 int>
        ignored SI file test.c line 319 col 5 size <integer_cst 0x7f43a41a9e28 32> unit size <integer_cst 0x7f43a41a9e40 4>
        align 32 context <function_decl 0x7f43a3d3ab00 main>>
    struct-function 0x7f43a3d4f4d0>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d61f30
    type <pointer_type 0x7f43a41c4a80
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        public unsigned DI
        size <integer_cst 0x7f43a41a9be8 constant 64>
        unit size <integer_cst 0x7f43a41a9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f43a3d45498>>
    var <var_decl 0x7f43a3d601b0 p4>
    def_stmt p4_71 = malloc (10);
    version 71
    ptr-info 0x7f43a3d69300>
p4_71 = malloc (10);
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_114 = VDEF <.MEM_113>
p4_71 = malloc (10);
test.c:417:7: warning: use location
  int *p4 = malloc(10);
       ^
dot graph target loc end

child4 (p4_71);
test.c:418:2: warning: use location
  child4(p4);
  ^
dot graph target basicblock start from main basic block 21dot graph target basicblock end

dot graph stmt start child4 (p4_71);
test.c:418:2: warning: use location
dot graph stmt end

this stmt is child function---child4-----

 ================== trace ================== 
trace fucntion name:child4 
[40;44m =======trace_function_path child4  function_call count: 0 level :0========  [0m
tx1
[40;36m ======= node_fun:child4========= [0m
[40;36m ======= find relate stmt with p4 ========= [0m
[40;36m ======= relate stmt argument:p4 ========= [0m
# VUSE <.MEM_13(D)>
_1 = data;
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeep4_71, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:p4========= [0m
[40;36m ======= relate gimple_assign_lhs2:í========= [0m
dot graph start relate form ID : 1057331289
from child4 basic block 3dot graph end relate end

dot graph relate stmt start ID : 1282912082 stmt(LHS) :_1 = data;
In function ‚Äòchild4‚Äô:
test.c:200:11: warning: use location
   *data = *data + 1;
           ^
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_13(D)>
_2 = *_1;
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeep4_71, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:p4========= [0m
[40;36m ======= relate gimple_assign_rhs3:û========= [0m
dot graph start relate form ID : 1057331289
from child4 basic block 3dot graph end relate end

dot graph relate stmt start ID : 535840268 stmt(RHS) :_2 = *_1;
test.c:200:11: warning: use location
*_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_13(D)>
_3 = data;
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeep4_71, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:p4========= [0m
[40;36m ======= relate gimple_assign_lhs2:í========= [0m
dot graph start relate form ID : 1057331289
from child4 basic block 3dot graph end relate end

dot graph relate stmt start ID : 1991626853 stmt(LHS) :_3 = data;
test.c:200:3: warning: use location
   *data = *data + 1;
   ^
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
_4 = _2 + 1;
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeep4_71, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument:child4========= [0m
[40;36m ======= relate gimple_assign_lhs:í========= [0m
_4 = _2 + 1;
test.c:200:17: warning: use location
   *data = *data + 1;
                 ^

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_15 = VDEF <.MEM_13(D)>
*_3 = _4;
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeep4_71, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:p4========= [0m
[40;36m ======= relate gimple_assign_lhs2:û========= [0m
dot graph start relate form ID : 1057331289
from child4 basic block 3dot graph end relate end

dot graph relate stmt start ID : 1139294988 stmt(LHS) :*_3 = _4;
test.c:200:9: warning: use location
   *data = *data + 1;
         ^
*_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:child4========= [0m
[40;36m ======= relate gimple_assign_lhs:û========= [0m
# .MEM_15 = VDEF <.MEM_13(D)>
*_3 = _4;
test.c:200:9: warning: use location

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_13(D)>
_5 = data;
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeep4_71, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:p4========= [0m
[40;36m ======= relate gimple_assign_lhs2:í========= [0m
dot graph start relate form ID : 1057331289
from child4 basic block 4dot graph end relate end

dot graph relate stmt start ID : 1275922441 stmt(LHS) :_5 = data;
test.c:203:3: warning: use location
   *data = 2;
   ^
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_14 = VDEF <.MEM_13(D)>
*_5 = 2;
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeetx1
, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)eeeeeeeeeeeeeeeeeeeep4_71, points-to NULL, points-to vars: { D.4089 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:p4========= [0m
[40;36m ======= relate gimple_assign_lhs2:û========= [0m
dot graph start relate form ID : 1057331289
from child4 basic block 4dot graph end relate end

dot graph relate stmt start ID : 1257610784 stmt(LHS) :*_5 = 2;
test.c:203:9: warning: use location
   *data = 2;
         ^
*_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;44m =======print_function_path child4  function_call count: 0 level :1========  [0m

 ================== trace ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f43a3d3ab00 main
    type <function_type 0x7f43a3d397e0
        type <integer_type 0x7f43a41bd5e8 int public SI
            size <integer_cst 0x7f43a41a9e28 constant 32>
            unit size <integer_cst 0x7f43a41a9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
            pointer_to_this <pointer_type 0x7f43a41c4a80>>
        QI
        size <integer_cst 0x7f43a41a9cd8 constant 8>
        unit size <integer_cst 0x7f43a41a9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 319 col 5 align 8 context <translation_unit_decl 0x7f43a41b4168 test.c> initial <block 0x7f43a3d49840>
    result <result_decl 0x7f43a41b45a0 D.4063 type <integer_type 0x7f43a41bd5e8 int>
        ignored SI file test.c line 319 col 5 size <integer_cst 0x7f43a41a9e28 32> unit size <integer_cst 0x7f43a41a9e40 4>
        align 32 context <function_decl 0x7f43a3d3ab00 main>>
    struct-function 0x7f43a3d4f4d0>

dot graph START

======================================================================
 <ssa_name 0x7f43a3d61af8
    type <integer_type 0x7f43a41bd5e8 int public SI
        size <integer_cst 0x7f43a41a9e28 constant 32>
        unit size <integer_cst 0x7f43a41a9e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f43a41bd5e8 precision 32 min <integer_cst 0x7f43a41a9de0 -2147483648> max <integer_cst 0x7f43a41a9df8 2147483647>
        pointer_to_this <pointer_type 0x7f43a41c4a80>>
   
    def_stmt _31 = foo5 (q_57, q_57);
    version 31>
this other function ------foo5-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_112 = VDEF <.MEM_94>
_31 = foo5 (q_57, q_57);
In function ‚Äòmain‚Äô:
test.c:416:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target loc end

_88 = __printf_chk (1, "123%d\n", _31);
dot graph target basicblock start from main basic block 21dot graph target basicblock end

dot graph stmt start _88 = __printf_chk (1, "123%d\n", _31);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
trace fucntion name:__printf_chk 

 ================== trace ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 11
 [0m
[40;34m    used_stmt array stack totalsize of : 320
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
=======Mapping node_fun:foo5=========
<bb 2> [100.00%]:
_1 = *z_4(D);
_8 = __printf_chk (1, "test1%d\n", _1);
_2 = *y_5(D);
_7 = __printf_chk (1, "test2%d\n", _2);
_6 = __printf_chk (1, "test3%d\n", 10);
return 10;

=======is loop:0=========
=======Mapping node_fun:child4=========
<bb 2> [100.00%]:
if (t_7(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_1 = data;
_2 = *_1;
_3 = data;
_4 = _2 + 1;
*_3 = _4;
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
_5 = data;
*_5 = 2;

=======is loop:0=========
<bb 5> [100.00%]:
_11 = __printf_chk (1, "asdda%d\n", &data);
return;

=======is loop:0=========
=======Mapping node_fun:child3=========
<bb 2> [100.00%]:
_1 = data;
free (_1);
_5 = __printf_chk (1, "asdda%d\n", &MEM[(void *)&data + 4B]);
_4 = __printf_chk (1, "asdda%d\n", 10);
return;

=======is loop:0=========
=======Mapping node_fun:boo=========
<bb 2> [100.00%]:
free (b_2(D));
free (b_2(D));
test22 (b_2(D));
_6 = __printf_chk (1, "asdda\n");
return;

=======is loop:0=========
=======Mapping node_fun:test22=========
<bb 2> [100.00%]:
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
w_10 = malloc (5);
free (w_10);
return;

=======is loop:0=========
=======Mapping node_fun:child=========
<bb 2> [100.00%]:
pthread_mutex_lock (&mLock);
pthread_mutex_lock (&mLock);
_1 = MEM[(int *)data_12(D)];
_2 = _1 + 1;
MEM[(int *)data_12(D)] = _2;
ppData_15 = malloc (10);
_3 = malloc (20);
pData = _3;
data2 = 0;
pData = &data2;
_4 = pData;
*_4 = 10;
_5 = MEM[(int * *)&pData + 8B];
*_5 = 10;
_6 = MEM[(int * *)&pData + 16B];
*_6 = 10;
_7 = pData;
*_7 = 12;
_8 = pData;
free (_8);
free (10B);
boo (10B);
free (&pData);
pthread_mutex_unlock (&mLock);
free (&pData);
pthread_exit (100B);

=======is loop:0=========
=======Mapping node_fun:child2=========
<bb 2> [100.00%]:
_1 = data;
_2 = MEM[(int *)_1];
_3 = _2 + 1;
MEM[(int *)_1] = _3;
_4 = MEM[(int *)&data];
_5 = _4 + 1;
MEM[(int *)&data] = _5;
_6 = data;
child3 (_6);
_7 = data;
free (_7);
return;

=======is loop:0=========
=======Mapping node_fun:main=========
<bb 2> [25.00%]:
size_69 = 2;
_1 = 2;
_2 = 2;
_3 = 32;
a_46 = malloc (32);
goto <bb 4>; [100.00%]

=======is loop:0=========
<bb 3> [50.01%]:
_4 = (long unsigned int) i_32;
_5 = _4 * 16;
_6 = a_46 + _5;
_6->name = "Testname";
_7 = (long unsigned int) i_32;
_8 = _7 * 16;
_9 = a_46 + _8;
_9->nummer = 123;
i_87 = i_32 + 1;

=======is loop:1=========
<bb 4> [75.01%]:
# i_32 = PHI <0(2), i_87(3)>
_10 = 2;
if (i_32 <= 1)
  goto <bb 3>; [66.67%]
else
  goto <bb 6>; [33.33%]

=======is loop:1=========
<bb 5> [50.01%]:
_11 = (long unsigned int) i_33;
_12 = _11 * 16;
_13 = a_46 + _12;
_14 = _13->nummer;
_15 = (long unsigned int) i_33;
_16 = _15 * 16;
_17 = a_46 + _16;
_18 = _17->name;
_40 = __printf_chk (1, "%s, %d\n", _18, _14);
i_84 = i_33 + 1;

=======is loop:1=========
<bb 6> [75.01%]:
# i_33 = PHI <0(4), i_84(5)>
_19 = 2;
if (i_33 <= 1)
  goto <bb 5>; [66.67%]
else
  goto <bb 7>; [33.33%]

=======is loop:1=========
<bb 7> [25.00%]:
input[0] = 1;
input[1] = 2;
pthread_attr_init (&attr);
pthread_attr_init (&attr2);
pthread_attr_setdetachstate (&attr, 1);
pthread_attr_setdetachstate (&attr2, 0);
_20 = (long int) input2_53(D);
_21 = (void *) _20;
pthread_create (&t, &attr2, child2, _21);
_22 = t;
pthread_join (_22, 0B);
goto <bb 9>; [100.00%]

=======is loop:0=========
<bb 8> [75.00%]:
_23 = &t2[i_34];
err_82 = pthread_create (_23, &attr2, child, 0B);
_24 = t2[i_34];
_62 = __printf_chk (1, "%ld\n", _24);
i_83 = i_34 + 1;

=======is loop:1=========
<bb 9> [100.00%]:
# i_34 = PHI <0(7), i_83(8)>
if (i_34 <= 2)
  goto <bb 8>; [75.00%]
else
  goto <bb 10>; [25.00%]

=======is loop:1=========
<bb 10> [25.00%]:
q_57 = malloc (10);
_25 = q_57 != 0B;
_26 = test_58(D) != 0;
_27 = _25 & _26;
if (_27 != 0)
  goto <bb 11>; [0.04%]
else
  goto <bb 12>; [99.96%]

=======is loop:0=========
<bb 11> [0.01%]:
child (q_57);

=======is loop:0=========
<bb 12> [24.99%]:
*q_57 = 20;
_74 = __printf_chk (1, "test\n");
goto <bb 14>; [100.00%]

=======is loop:0=========
<bb 13> [74.97%]:
_28 = t2[i_35];
pthread_join (_28, 0B);
i_80 = i_35 + 1;

=======is loop:1=========
<bb 14> [99.96%]:
# i_35 = PHI <0(12), i_80(13)>
if (i_35 <= 2)
  goto <bb 13>; [75.00%]
else
  goto <bb 15>; [25.00%]

=======is loop:1=========
<bb 15> [24.99%]:
_29 = staticTrue;
if (_29 != 0)
  goto <bb 16>; [33.00%]
else
  goto <bb 19>; [67.00%]

=======is loop:0=========
<bb 16> [8.25%]:
data_64 = malloc (400);
if (data_64 == 0B)
  goto <bb 17>; [0.04%]
else
  goto <bb 18>; [99.96%]

=======is loop:0=========
<bb 17> [0.00%]:
exit (-1);

=======is loop:0=========
<bb 18> [8.24%]:
free (data_64);

=======is loop:0=========
<bb 19> [24.99%]:
# data_36 = PHI <0B(15), data_64(18)>
_30 = staticTrue;
if (_30 != 0)
  goto <bb 20>; [36.64%]
else
  goto <bb 21>; [63.36%]

=======is loop:0=========
<bb 20> [9.16%]:
free (data_36);

=======is loop:0=========
<bb 21> [24.99%]:
_31 = foo5 (q_57, q_57);
_88 = __printf_chk (1, "123%d\n", _31);
p4_71 = malloc (10);
child4 (p4_71);
input ={v} {CLOBBER};
attr ={v} {CLOBBER};
attr2 ={v} {CLOBBER};
t ={v} {CLOBBER};
t2 ={v} {CLOBBER};
return 0;

=======is loop:0=========
time: 0.019830 s
test.c: In function ‚Äòchild‚Äô:
test.c:174:2: warning: attempt to free a non-heap object ‚Äòdata2‚Äô [-Wfree-nonheap-object]
  free(pData);
  ^
test.c:177:2: warning: attempt to free a non-heap object ‚ÄòpData‚Äô [-Wfree-nonheap-object]
  free(ppData);
  ^
test.c:179:2: warning: attempt to free a non-heap object ‚ÄòpData‚Äô [-Wfree-nonheap-object]
  free(ppData);
  ^
