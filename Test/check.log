In file included from test.c:6:0:
common.h: In function ‘discard_my_cleanups’:
common.h:94:21: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 2 has type ‘void *’ [-Wformat=]
   printf("freearg: %x\n", ptr->arg);
                    ~^     ~~~~~~~~
                    %p
common.h: In function ‘do_my_cleanups’:
common.h:108:13: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 2 has type ‘void *’ [-Wformat=]
    printf("%x\n", ptr->arg);
            ~^     ~~~~~~~~
            %p
test.c: In function ‘add_symbol_file_command’:
test.c:108:15: warning: implicit declaration of function ‘strcmp’ [-Wimplicit-function-declaration]
      else if (strcmp (arg, "-s") == 0)
               ^~~~~~
test.c: In function ‘main’:
test.c:149:26: warning: passing argument 1 of ‘add_symbol_file_command’ from incompatible pointer type [-Wincompatible-pointer-types]
  add_symbol_file_command(args);
                          ^~~~
test.c:49:1: note: expected ‘char **’ but argument is of type ‘const char **’
 add_symbol_file_command (char **args)
 ^~~~~~~~~~~~~~~~~~~~~~~
=======ipa_pta=========
============gimple assign==================
# .MEM_2 = VDEF <.MEM_1(D)>
args[0] = "prog";
 <addr_expr 0x7f80b03979a0
    type <pointer_type 0x7f80b03ac690
        type <array_type 0x7f80b03ac5e8 type <integer_type 0x7f80b03a3888 char>
            BLK
            size <integer_cst 0x7f80b03a6258 constant 40>
            unit size <integer_cst 0x7f80b03a6210 constant 5>
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f80b03ac540>
            pointer_to_this <pointer_type 0x7f80b03ac690>>
        unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly constant
    arg 0 <string_cst 0x7f80b0397980 type <array_type 0x7f80b03ac5e8>
        readonly constant static "prog\000">
    test.c:148:2 start: test.c:148:2 finish: test.c:148:2>
============gimple assign==================
# .MEM_3 = VDEF <.MEM_2>
args[1] = "v";
 <addr_expr 0x7f80b03979c0
    type <pointer_type 0x7f80b03ac888
        type <array_type 0x7f80b03ac7e0 type <integer_type 0x7f80b03a3888 char>
            HI
            size <integer_cst 0x7f80b085ad98 constant 16>
            unit size <integer_cst 0x7f80b085adb0 constant 2>
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f80b03ac738>
            pointer_to_this <pointer_type 0x7f80b03ac888>>
        unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly constant
    arg 0 <string_cst 0x7f80b03a6c30 type <array_type 0x7f80b03ac7e0>
        readonly constant static "v\000">
    test.c:148:2 start: test.c:148:2 finish: test.c:148:2>
============gimple assign==================
# .MEM_4 = VDEF <.MEM_3>
args[2] = "-s";
 <addr_expr 0x7f80b03979e0
    type <pointer_type 0x7f80b03aca80
        type <array_type 0x7f80b03ac9d8 type <integer_type 0x7f80b03a3888 char>
            BLK
            size <integer_cst 0x7f80b0876090 constant 24>
            unit size <integer_cst 0x7f80b03a6270 constant 3>
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f80b03ac930>
            pointer_to_this <pointer_type 0x7f80b03aca80>>
        unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly constant
    arg 0 <string_cst 0x7f80b03a6c48 type <array_type 0x7f80b03ac9d8>
        readonly constant static "-s\000">
    test.c:148:2 start: test.c:148:2 finish: test.c:148:2>
============gimple assign==================
# .MEM_5 = VDEF <.MEM_4>
args[3] = "idx";
 <addr_expr 0x7f80b0397a20
    type <pointer_type 0x7f80b03acc78
        type <array_type 0x7f80b03acbd0 type <integer_type 0x7f80b03a3888 char>
            SI
            size <integer_cst 0x7f80b085ae28 constant 32>
            unit size <integer_cst 0x7f80b085ae40 constant 4>
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f80b03acb28>
            pointer_to_this <pointer_type 0x7f80b03acc78>>
        unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly constant
    arg 0 <string_cst 0x7f80b0397a00 type <array_type 0x7f80b03acbd0>
        readonly constant static "idx\000">
    test.c:148:2 start: test.c:148:2 finish: test.c:148:2>
============gimple assign==================
# .MEM_6 = VDEF <.MEM_5>
args[4] = "addr";
 <addr_expr 0x7f80b0397a60
    type <pointer_type 0x7f80b03ac690
        type <array_type 0x7f80b03ac5e8 type <integer_type 0x7f80b03a3888 char>
            BLK
            size <integer_cst 0x7f80b03a6258 constant 40>
            unit size <integer_cst 0x7f80b03a6210 constant 5>
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f80b03ac540>
            pointer_to_this <pointer_type 0x7f80b03ac690>>
        unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly constant
    arg 0 <string_cst 0x7f80b0397a40 type <array_type 0x7f80b03ac5e8>
        readonly constant static "addr\000">
    test.c:148:2 start: test.c:148:2 finish: test.c:148:2>
============gimple assign==================
# .MEM_7 = VDEF <.MEM_6>
args[5] = 0B;
 <integer_cst 0x7f80b03a6c60 type <pointer_type 0x7f80b03ac0a8> constant 0>
============gimple assign==================
# VUSE <.MEM_98>
old_chain_70 = cleanup_chain;
 <var_decl 0x7f80b15efab0 cleanup_chain
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
    align 64 context <translation_unit_decl 0x7f80b0865168 test.c> initial <error_mark 0x7f80b085abd0>>
============COMPONEN2T_REF==================
 <var_decl 0x7f80b15efab0 cleanup_chain
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
    align 64 context <translation_unit_decl 0x7f80b0865168 test.c> initial <error_mark 0x7f80b085abd0>>
In function ‘main’:
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
============gimple assign==================
# VUSE <.MEM_98>
_71 = cleanup_chain;
 <var_decl 0x7f80b15efab0 cleanup_chain
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
    align 64 context <translation_unit_decl 0x7f80b0865168 test.c> initial <error_mark 0x7f80b085abd0>>
============COMPONEN2T_REF==================
 <var_decl 0x7f80b15efab0 cleanup_chain
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
    align 64 context <translation_unit_decl 0x7f80b0865168 test.c> initial <error_mark 0x7f80b085abd0>>
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
============gimple assign==================
# .MEM_99 = VDEF <.MEM_98>
new_69->next = _71;
 <ssa_name 0x7f80b03c9bd0
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _71 = cleanup_chain;
    version 71
    ptr-info 0x7f80b03e0108>
============gimple assign==================
# .MEM_100 = VDEF <.MEM_99>
new_69->function = null_cleanup;
 <addr_expr 0x7f80b03c85c0
    type <pointer_type 0x7f80b03a3bd0
        type <function_type 0x7f80b03a3b28 type <void_type 0x7f80b086ef18 void>
            QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f80b03a2a00 value <pointer_type 0x7f80b08750a8>
                chain <tree_list 0x7f80b086dac8 value <void_type 0x7f80b086ef18 void>>> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3bd0>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    constant
    arg 0 <function_decl 0x7f80b03a4d00 null_cleanup type <function_type 0x7f80b03a3b28>
        readonly addressable nothrow static function-specific-target function-specific-opt QI file test.c line 28 col 1 align 8 context <translation_unit_decl 0x7f80b0865168 test.c> initial <block 0x7f80b03b6000>
        result <result_decl 0x7f80b08651e0 D.4020 type <void_type 0x7f80b086ef18 void>
            ignored VOID file test.c line 28 col 1
            align 8 context <function_decl 0x7f80b03a4d00 null_cleanup>>
        arguments <parm_decl 0x7f80b03af180 arg type <pointer_type 0x7f80b08750a8>
            unsigned DI file test.c line 28 col 21 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 context <function_decl 0x7f80b03a4d00 null_cleanup> arg-type <pointer_type 0x7f80b08750a8>>
        struct-function 0x7f80b03b7000>
    test.c:59:46 start: test.c:59:46 finish: test.c:59:46>
============gimple assign==================
# .MEM_101 = VDEF <.MEM_100>
new_69->free_arg = 0B;
 <integer_cst 0x7f80b03a6e28 type <pointer_type 0x7f80b03a3bd0> constant 0>
============gimple assign==================
# .MEM_102 = VDEF <.MEM_101>
new_69->arg = 0B;
 <integer_cst 0x7f80b0876000 type <pointer_type 0x7f80b08750a8> constant 0>
============gimple assign==================
# .MEM_103 = VDEF <.MEM_102>
cleanup_chain = new_69;
 <ssa_name 0x7f80b08628b8
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d05a0 new>
    def_stmt new_69 = malloc (32);
    version 69
    ptr-info 0x7f80b03e00d8>
============gimple assign==================
_104 = old_chain_70;
 <ssa_name 0x7f80b03c9b88
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d0630 old_chain>
    def_stmt old_chain_70 = cleanup_chain;
    version 70
    ptr-info 0x7f80b03e00f0>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c9b88
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d0630 old_chain>
    def_stmt old_chain_70 = cleanup_chain;
    version 70
    ptr-info 0x7f80b03e00f0>
lto1: warning: use location
============gimple assign==================
_68 = _104;
 <ssa_name 0x7f80b03d8e10
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d06c0 D.4087>
    def_stmt _104 = old_chain_70;
    version 104
    ptr-info 0x7f80b03e02b8>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03d8e10
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d06c0 D.4087>
    def_stmt _104 = old_chain_70;
    version 104
    ptr-info 0x7f80b03e02b8>
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
============gimple assign==================
_105 = _68;
 <ssa_name 0x7f80b0862870
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _68 = _104;
    version 68
    ptr-info 0x7f80b03e00c0>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b0862870
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _68 = _104;
    version 68
    ptr-info 0x7f80b03e00c0>
lto1: warning: use location
============gimple assign==================
_67 = _105;
 <ssa_name 0x7f80b03d8e58
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d0000 D.4072>
    def_stmt _105 = _68;
    version 105
    ptr-info 0x7f80b03e02d0>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03d8e58
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d0000 D.4072>
    def_stmt _105 = _68;
    version 105
    ptr-info 0x7f80b03e02d0>
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
============gimple assign==================
_106 = _67;
 <ssa_name 0x7f80b0862828
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _67 = _105;
    version 67
    ptr-info 0x7f80b03e00a8>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b0862828
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _67 = _105;
    version 67
    ptr-info 0x7f80b03e00a8>
lto1: warning: use location
============gimple assign==================
my_cleanups_10 = _106;
 <ssa_name 0x7f80b03d8ea0
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03c4d80 D.4063>
    def_stmt _106 = _67;
    version 106
    ptr-info 0x7f80b03e02e8>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03d8ea0
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03c4d80 D.4063>
    def_stmt _106 = _67;
    version 106
    ptr-info 0x7f80b03e02e8>
test.c:59:18: warning: use location
  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
                  ^
============gimple assign==================
# VUSE <.MEM_107>
arg_12 = MEM[(char * *)&args];
 <mem_ref 0x7f80b03bf910
    type <pointer_type 0x7f80b03a3930
        type <integer_type 0x7f80b03a3888 char public string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03a3930>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f80b0865168 test.c>
        pointer_to_this <pointer_type 0x7f80b03a39d8>>
   
    arg 0 <addr_expr 0x7f80b0397f00
        type <pointer_type 0x7f80b03acdc8 type <array_type 0x7f80b03ac498>
            unsigned DI size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 symtab 0 alias set -1 structural equality>
       
        arg 0 <var_decl 0x7f80b15efd80 args type <array_type 0x7f80b03ac498>
            addressable BLK file test.c line 148 col 14
            size <integer_cst 0x7f80b0913c30 constant 384>
            unit size <integer_cst 0x7f80b03a6228 constant 48>
            align 128 context <function_decl 0x7f80b03a4b00 main>>
        test.c:149:26 start: test.c:149:26 finish: test.c:149:26>
    arg 1 <integer_cst 0x7f80b03a6cd8 type <pointer_type 0x7f80b03a39d8> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f80b03bf910
    type <pointer_type 0x7f80b03a3930
        type <integer_type 0x7f80b03a3888 char public string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03a3930>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f80b0865168 test.c>
        pointer_to_this <pointer_type 0x7f80b03a39d8>>
   
    arg 0 <addr_expr 0x7f80b0397f00
        type <pointer_type 0x7f80b03acdc8 type <array_type 0x7f80b03ac498>
            unsigned DI size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 symtab 0 alias set -1 structural equality>
       
        arg 0 <var_decl 0x7f80b15efd80 args type <array_type 0x7f80b03ac498>
            addressable BLK file test.c line 148 col 14
            size <integer_cst 0x7f80b0913c30 constant 384>
            unit size <integer_cst 0x7f80b03a6228 constant 48>
            align 128 context <function_decl 0x7f80b03a4b00 main>>
        test.c:149:26 start: test.c:149:26 finish: test.c:149:26>
    arg 1 <integer_cst 0x7f80b03a6cd8 type <pointer_type 0x7f80b03a39d8> constant 0>>
test.c:71:11: warning: use location
  for (arg = args[0]; arg != NULL; arg = args[++argcnt])
           ^
============gimple assign==================
_15 = (long unsigned int) section_index_14;
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
test.c:78:15: warning: use location
      sect_opts[section_index].name = ".text";
               ^
============gimple assign==================
_16 = _15 * 16;
 <ssa_name 0x7f80b03c3480
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _15 = (long unsigned int) section_index_14;
    version 15>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3480
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _15 = (long unsigned int) section_index_14;
    version 15>
test.c:78:15: warning: use location
============gimple assign==================
_18 = sect_opts_17 + _16;
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
test.c:78:15: warning: use location
============gimple assign==================
# .MEM_134 = VDEF <.MEM_94>
_18->name = ".text";
 <addr_expr 0x7f80b0397f40
    type <pointer_type 0x7f80b03ad738
        type <array_type 0x7f80b03ad690 type <integer_type 0x7f80b03a3888 char>
            BLK
            size <integer_cst 0x7f80b03a62b8 constant 48>
            unit size <integer_cst 0x7f80b03a62a0 constant 6>
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f80b03ac3f0>
            pointer_to_this <pointer_type 0x7f80b03ad738>>
        unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly constant
    arg 0 <string_cst 0x7f80b0397c20 type <array_type 0x7f80b03ad690>
        readonly constant static ".text\000">
    test.c:78:38 start: test.c:78:38 finish: test.c:78:38>
============gimple assign==================
_19 = (long unsigned int) section_index_14;
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
test.c:79:15: warning: use location
      sect_opts[section_index].value = arg;
               ^
============gimple assign==================
_20 = _19 * 16;
 <ssa_name 0x7f80b03c35a0
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _19 = (long unsigned int) section_index_14;
    version 19>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c35a0
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _19 = (long unsigned int) section_index_14;
    version 19>
test.c:79:15: warning: use location
============gimple assign==================
_21 = sect_opts_17 + _20;
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
test.c:79:15: warning: use location
============gimple assign==================
# .MEM_135 = VDEF <.MEM_134>
_21->value = arg_22;
 <ssa_name 0x7f80b03c3678
    type <pointer_type 0x7f80b03a3930
        type <integer_type 0x7f80b03a3888 char public string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03a3930>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f80b0865168 test.c>
        pointer_to_this <pointer_type 0x7f80b03a39d8>>
    var <var_decl 0x7f80b03bdea0 arg>
    def_stmt arg_22 = PHI <arg_12(4), arg_47(25)>
    version 22
    ptr-info 0x7f80b03a6f78>
============gimple assign==================
section_index_23 = section_index_14 + 1;
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
test.c:80:9: warning: use location
      if (++section_index >= num_sect_opts)
         ^
============gimple assign==================
_24 = (long unsigned int) section_index_23;
 <ssa_name 0x7f80b03c36c0
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_23 = section_index_14 + 1;
    version 23>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c36c0
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_23 = section_index_14 + 1;
    version 23>
test.c:80:10: warning: use location
      if (++section_index >= num_sect_opts)
          ^
============gimple assign==================
num_sect_opts_26 = num_sect_opts_25 * 2;
 <ssa_name 0x7f80b03c3750
    type <integer_type 0x7f80b03a3498 size_t public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615> context <translation_unit_decl 0x7f80b0865168 test.c>>
    var <var_decl 0x7f80b03c4360 num_sect_opts>
    def_stmt num_sect_opts_25 = PHI <4(4), num_sect_opts_66(25)>
    version 25>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3750
    type <integer_type 0x7f80b03a3498 size_t public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615> context <translation_unit_decl 0x7f80b0865168 test.c>>
    var <var_decl 0x7f80b03c4360 num_sect_opts>
    def_stmt num_sect_opts_25 = PHI <4(4), num_sect_opts_66(25)>
    version 25>
test.c:82:22: warning: use location
        num_sect_opts *= 2;
                      ^
============gimple assign==================
_27 = num_sect_opts_26 * 16;
 <ssa_name 0x7f80b03c3798
    type <integer_type 0x7f80b03a3498 size_t public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615> context <translation_unit_decl 0x7f80b0865168 test.c>>
    var <var_decl 0x7f80b03c4360 num_sect_opts>
    def_stmt num_sect_opts_26 = num_sect_opts_25 * 2;
    version 26>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3798
    type <integer_type 0x7f80b03a3498 size_t public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615> context <translation_unit_decl 0x7f80b0865168 test.c>>
    var <var_decl 0x7f80b03c4360 num_sect_opts>
    def_stmt num_sect_opts_26 = num_sect_opts_25 * 2;
    version 26>
test.c:84:11: warning: use location
           xrealloc (sect_opts, num_sect_opts
           ^
============gimple assign==================
_74 = newmem_73;
 <ssa_name 0x7f80b0862900
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0bd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f80b03e0120>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b0862900
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0bd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f80b03e0120>
test.c:45:10: warning: use location
   return (newmem);
          ^
============gimple assign==================
_137 = newmem_73;
 <ssa_name 0x7f80b0862900
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0bd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f80b03e0120>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b0862900
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0bd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f80b03e0120>
lto1: warning: use location
============gimple assign==================
sect_opts_28 = _137;
 <ssa_name 0x7f80b03de798
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0c60 D.4096>
    def_stmt _137 = newmem_73;
    version 137
    ptr-info 0x7f80b03e0360>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03de798
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0c60 D.4096>
    def_stmt _137 = newmem_73;
    version 137
    ptr-info 0x7f80b03e0360>
test.c:83:18: warning: use location
        sect_opts = ((struct sect_opt *)
                  ^
============gimple assign==================
_30 = (long unsigned int) section_index_14;
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
test.c:92:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
============gimple assign==================
_31 = _30 * 16;
 <ssa_name 0x7f80b03c38b8
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _30 = (long unsigned int) section_index_14;
    version 30>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c38b8
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _30 = (long unsigned int) section_index_14;
    version 30>
test.c:92:17: warning: use location
============gimple assign==================
_32 = sect_opts_17 + _31;
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
test.c:92:17: warning: use location
============gimple assign==================
# .MEM_133 = VDEF <.MEM_94>
_32->value = arg_22;
 <ssa_name 0x7f80b03c3678
    type <pointer_type 0x7f80b03a3930
        type <integer_type 0x7f80b03a3888 char public string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03a3930>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f80b0865168 test.c>
        pointer_to_this <pointer_type 0x7f80b03a39d8>>
    var <var_decl 0x7f80b03bdea0 arg>
    def_stmt arg_22 = PHI <arg_12(4), arg_47(25)>
    version 22
    ptr-info 0x7f80b03a6f78>
============gimple assign==================
_34 = (long unsigned int) section_index_14;
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
test.c:97:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
============gimple assign==================
_35 = _34 * 16;
 <ssa_name 0x7f80b03c39d8
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _34 = (long unsigned int) section_index_14;
    version 34>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c39d8
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _34 = (long unsigned int) section_index_14;
    version 34>
test.c:97:17: warning: use location
============gimple assign==================
_36 = sect_opts_17 + _35;
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
test.c:97:17: warning: use location
============gimple assign==================
# .MEM_129 = VDEF <.MEM_94>
_36->value = arg_22;
 <ssa_name 0x7f80b03c3678
    type <pointer_type 0x7f80b03a3930
        type <integer_type 0x7f80b03a3888 char public string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03a3930>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f80b0865168 test.c>
        pointer_to_this <pointer_type 0x7f80b03a39d8>>
    var <var_decl 0x7f80b03bdea0 arg>
    def_stmt arg_22 = PHI <arg_12(4), arg_47(25)>
    version 22
    ptr-info 0x7f80b03a6f78>
============gimple assign==================
section_index_37 = section_index_14 + 1;
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
test.c:100:11: warning: use location
        if (++section_index >= num_sect_opts)
           ^
============gimple assign==================
_38 = (long unsigned int) section_index_37;
 <ssa_name 0x7f80b03c3ab0
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_37 = section_index_14 + 1;
    version 37>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3ab0
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_37 = section_index_14 + 1;
    version 37>
test.c:100:12: warning: use location
        if (++section_index >= num_sect_opts)
            ^
============gimple assign==================
num_sect_opts_39 = num_sect_opts_25 * 2;
 <ssa_name 0x7f80b03c3750
    type <integer_type 0x7f80b03a3498 size_t public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615> context <translation_unit_decl 0x7f80b0865168 test.c>>
    var <var_decl 0x7f80b03c4360 num_sect_opts>
    def_stmt num_sect_opts_25 = PHI <4(4), num_sect_opts_66(25)>
    version 25>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3750
    type <integer_type 0x7f80b03a3498 size_t public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615> context <translation_unit_decl 0x7f80b0865168 test.c>>
    var <var_decl 0x7f80b03c4360 num_sect_opts>
    def_stmt num_sect_opts_25 = PHI <4(4), num_sect_opts_66(25)>
    version 25>
test.c:102:24: warning: use location
          num_sect_opts *= 2;
                        ^
============gimple assign==================
_40 = num_sect_opts_39 * 16;
 <ssa_name 0x7f80b03c3b40
    type <integer_type 0x7f80b03a3498 size_t public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615> context <translation_unit_decl 0x7f80b0865168 test.c>>
    var <var_decl 0x7f80b03c4360 num_sect_opts>
    def_stmt num_sect_opts_39 = num_sect_opts_25 * 2;
    version 39>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3b40
    type <integer_type 0x7f80b03a3498 size_t public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615> context <translation_unit_decl 0x7f80b0865168 test.c>>
    var <var_decl 0x7f80b03c4360 num_sect_opts>
    def_stmt num_sect_opts_39 = num_sect_opts_25 * 2;
    version 39>
test.c:104:14: warning: use location
              xrealloc (sect_opts, num_sect_opts
              ^
============gimple assign==================
_77 = newmem_76;
 <ssa_name 0x7f80b03c9f30
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0f30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f80b03e0150>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c9f30
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0f30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f80b03e0150>
test.c:45:10: warning: use location
   return (newmem);
          ^
============gimple assign==================
_131 = newmem_76;
 <ssa_name 0x7f80b03c9f30
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0f30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f80b03e0150>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c9f30
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0f30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f80b03e0150>
lto1: warning: use location
============gimple assign==================
sect_opts_41 = _131;
 <ssa_name 0x7f80b03de5e8
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d7000 D.4100>
    def_stmt _131 = newmem_76;
    version 131
    ptr-info 0x7f80b03e0348>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03de5e8
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d7000 D.4100>
    def_stmt _131 = newmem_76;
    version 131
    ptr-info 0x7f80b03e0348>
test.c:103:20: warning: use location
          sect_opts = ((struct sect_opt *)
                    ^
============gimple assign==================
argcnt_43 = argcnt_13 + 1;
 <ssa_name 0x7f80b03c33f0
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4090 argcnt>
    def_stmt argcnt_13 = PHI <0(4), argcnt_43(25)>
    version 13>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c33f0
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4090 argcnt>
    def_stmt argcnt_13 = PHI <0(4), argcnt_43(25)>
    version 13>
test.c:71:39: warning: use location
  for (arg = args[0]; arg != NULL; arg = args[++argcnt])
                                       ^
============gimple assign==================
_44 = (long unsigned int) argcnt_43;
 <ssa_name 0x7f80b03c3c60
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4090 argcnt>
    def_stmt argcnt_43 = argcnt_13 + 1;
    version 43>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3c60
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4090 argcnt>
    def_stmt argcnt_43 = argcnt_13 + 1;
    version 43>
test.c:71:46: warning: use location
  for (arg = args[0]; arg != NULL; arg = args[++argcnt])
                                              ^
============gimple assign==================
_45 = _44 * 8;
 <ssa_name 0x7f80b03c3ca8
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _44 = (long unsigned int) argcnt_43;
    version 44>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3ca8
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _44 = (long unsigned int) argcnt_43;
    version 44>
test.c:71:45: warning: use location
  for (arg = args[0]; arg != NULL; arg = args[++argcnt])
                                             ^
============gimple assign==================
_46 = &args + _45;
 <addr_expr 0x7f80b03c80a0
    type <pointer_type 0x7f80b03acdc8
        type <array_type 0x7f80b03ac498 type <pointer_type 0x7f80b03ac0a8>
            BLK
            size <integer_cst 0x7f80b0913c30 constant 384>
            unit size <integer_cst 0x7f80b03a6228 constant 48>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f80b03ac3f0>
            pointer_to_this <pointer_type 0x7f80b03acdc8>>
        unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f80b15efd80 args type <array_type 0x7f80b03ac498>
        addressable BLK file test.c line 148 col 14 size <integer_cst 0x7f80b0913c30 384> unit size <integer_cst 0x7f80b03a6228 48>
        align 128 context <function_decl 0x7f80b03a4b00 main>>
    test.c:149:26 start: test.c:149:26 finish: test.c:149:26>
============COMPONEN2T_REF==================
 <addr_expr 0x7f80b03c80a0
    type <pointer_type 0x7f80b03acdc8
        type <array_type 0x7f80b03ac498 type <pointer_type 0x7f80b03ac0a8>
            BLK
            size <integer_cst 0x7f80b0913c30 constant 384>
            unit size <integer_cst 0x7f80b03a6228 constant 48>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f80b03ac3f0>
            pointer_to_this <pointer_type 0x7f80b03acdc8>>
        unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f80b15efd80 args type <array_type 0x7f80b03ac498>
        addressable BLK file test.c line 148 col 14 size <integer_cst 0x7f80b0913c30 384> unit size <integer_cst 0x7f80b03a6228 48>
        align 128 context <function_decl 0x7f80b03a4b00 main>>
    test.c:149:26 start: test.c:149:26 finish: test.c:149:26>
test.c:71:45: warning: use location
============gimple assign==================
# VUSE <.MEM_93>
arg_47 = *_46;
 <mem_ref 0x7f80b03bfac8
    type <pointer_type 0x7f80b03a3930
        type <integer_type 0x7f80b03a3888 char public string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03a3930>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f80b0865168 test.c>
        pointer_to_this <pointer_type 0x7f80b03a39d8>>
   
    arg 0 <ssa_name 0x7f80b03c3d38
        type <pointer_type 0x7f80b03a39d8 type <pointer_type 0x7f80b03a3930>
            public unsigned DI size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 symtab 0 alias set -1 structural equality>
       
        def_stmt _46 = &args + _45;
        version 46
        ptr-info 0x7f80b03a6dc8>
    arg 1 <integer_cst 0x7f80b03a6cd8 type <pointer_type 0x7f80b03a39d8> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f80b03bfac8
    type <pointer_type 0x7f80b03a3930
        type <integer_type 0x7f80b03a3888 char public string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03a3930>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f80b0865168 test.c>
        pointer_to_this <pointer_type 0x7f80b03a39d8>>
   
    arg 0 <ssa_name 0x7f80b03c3d38
        type <pointer_type 0x7f80b03a39d8 type <pointer_type 0x7f80b03a3930>
            public unsigned DI size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 symtab 0 alias set -1 structural equality>
       
        def_stmt _46 = &args + _45;
        version 46
        ptr-info 0x7f80b03a6dc8>
    arg 1 <integer_cst 0x7f80b03a6cd8 type <pointer_type 0x7f80b03a39d8> constant 0>>
test.c:71:39: warning: use location
  for (arg = args[0]; arg != NULL; arg = args[++argcnt])
                                       ^
============gimple assign==================
# VUSE <.MEM_109>
old_chain_81 = cleanup_chain;
 <var_decl 0x7f80b15efab0 cleanup_chain
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
    align 64 context <translation_unit_decl 0x7f80b0865168 test.c> initial <error_mark 0x7f80b085abd0>>
============COMPONEN2T_REF==================
 <var_decl 0x7f80b15efab0 cleanup_chain
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
    align 64 context <translation_unit_decl 0x7f80b0865168 test.c> initial <error_mark 0x7f80b085abd0>>
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
============gimple assign==================
# VUSE <.MEM_109>
_82 = cleanup_chain;
 <var_decl 0x7f80b15efab0 cleanup_chain
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
    align 64 context <translation_unit_decl 0x7f80b0865168 test.c> initial <error_mark 0x7f80b085abd0>>
============COMPONEN2T_REF==================
 <var_decl 0x7f80b15efab0 cleanup_chain
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
    align 64 context <translation_unit_decl 0x7f80b0865168 test.c> initial <error_mark 0x7f80b085abd0>>
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
============gimple assign==================
# .MEM_110 = VDEF <.MEM_109>
new_80->next = _82;
 <ssa_name 0x7f80b03d8120
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _82 = cleanup_chain;
    version 82
    ptr-info 0x7f80b03e01e0>
============gimple assign==================
# .MEM_111 = VDEF <.MEM_110>
new_80->function = free;
 <addr_expr 0x7f80b03c8960
    type <pointer_type 0x7f80b03a3bd0
        type <function_type 0x7f80b03a3b28 type <void_type 0x7f80b086ef18 void>
            QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f80b03a2a00 value <pointer_type 0x7f80b08750a8>
                chain <tree_list 0x7f80b086dac8 value <void_type 0x7f80b086ef18 void>>> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3bd0>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    constant
    arg 0 <function_decl 0x7f80b03a4e00 free type <function_type 0x7f80b03a3b28>
        addressable nothrow public external in_system_header built-in QI file /usr/include/stdlib.h line 565 col 13
        align 8 built-in BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f80b0865168 test.c> attributes <tree_list 0x7f80b03a2a50>>
    test.c:122:17 start: test.c:122:17 finish: test.c:122:17>
============gimple assign==================
# .MEM_112 = VDEF <.MEM_111>
new_80->free_arg = 0B;
 <integer_cst 0x7f80b03a6e28 type <pointer_type 0x7f80b03a3bd0> constant 0>
============gimple assign==================
# .MEM_113 = VDEF <.MEM_112>
new_80->arg = section_addrs_48;
 <ssa_name 0x7f80b03c3dc8
    type <pointer_type 0x7f80b03ad2a0
        type <record_type 0x7f80b03ad1f8 section_addr_info BLK
            size <integer_cst 0x7f80b08760a8 constant 192>
            unit size <integer_cst 0x7f80b0876078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ad1f8 fields <field_decl 0x7f80b03a5a18 num_sections> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03ad2a0> chain <type_decl 0x7f80b03a5ab0 D.4018>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c4240 section_addrs>
    def_stmt section_addrs_48 = malloc (24);
    version 48
    ptr-info 0x7f80b03e0018>
============gimple assign==================
# .MEM_114 = VDEF <.MEM_113>
cleanup_chain = new_80;
 <ssa_name 0x7f80b03d8090
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d77e0 new>
    def_stmt new_80 = malloc (32);
    version 80
    ptr-info 0x7f80b03e01b0>
============gimple assign==================
_115 = old_chain_81;
 <ssa_name 0x7f80b03d80d8
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d7870 old_chain>
    def_stmt old_chain_81 = cleanup_chain;
    version 81
    ptr-info 0x7f80b03e01c8>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03d80d8
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d7870 old_chain>
    def_stmt old_chain_81 = cleanup_chain;
    version 81
    ptr-info 0x7f80b03e01c8>
lto1: warning: use location
============gimple assign==================
_79 = _115;
 <ssa_name 0x7f80b03de168
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d7900 D.4114>
    def_stmt _115 = old_chain_81;
    version 115
    ptr-info 0x7f80b03e0300>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03de168
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d7900 D.4114>
    def_stmt _115 = old_chain_81;
    version 115
    ptr-info 0x7f80b03e0300>
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
============gimple assign==================
_116 = _79;
 <ssa_name 0x7f80b03d8048
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _79 = _115;
    version 79
    ptr-info 0x7f80b03e0198>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03d8048
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _79 = _115;
    version 79
    ptr-info 0x7f80b03e0198>
lto1: warning: use location
============gimple assign==================
_78 = _116;
 <ssa_name 0x7f80b03de1b0
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d7510 D.4107>
    def_stmt _116 = _79;
    version 116
    ptr-info 0x7f80b03e0318>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03de1b0
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d7510 D.4107>
    def_stmt _116 = _79;
    version 116
    ptr-info 0x7f80b03e0318>
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
============gimple assign==================
_117 = _78;
 <ssa_name 0x7f80b03d8000
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _78 = _116;
    version 78
    ptr-info 0x7f80b03e0180>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03d8000
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _78 = _116;
    version 78
    ptr-info 0x7f80b03e0180>
lto1: warning: use location
============gimple assign==================
_50 = (long unsigned int) i_49;
 <ssa_name 0x7f80b03c3e10
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4120 i>
    def_stmt i_49 = PHI <0(31), i_60(32)>
    version 49>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3e10
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4120 i>
    def_stmt i_49 = PHI <0(31), i_60(32)>
    version 49>
test.c:126:32: warning: use location
     const char *val = sect_opts[i].value;
                                ^
============gimple assign==================
_51 = _50 * 16;
 <ssa_name 0x7f80b03c3e58
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _50 = (long unsigned int) i_49;
    version 50>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3e58
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _50 = (long unsigned int) i_49;
    version 50>
test.c:126:32: warning: use location
============gimple assign==================
_52 = sect_opts_17 + _51;
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
test.c:126:32: warning: use location
============gimple assign==================
# VUSE <.MEM_95>
val_53 = _52->value;
 <component_ref 0x7f80b08599c0
    type <pointer_type 0x7f80b03ac0a8
        type <integer_type 0x7f80b03ac000 char readonly string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03ac0a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03bfb18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
       
        arg 0 <ssa_name 0x7f80b03c3ee8 type <pointer_type 0x7f80b03acf18>
           
            def_stmt _52 = sect_opts_17 + _51;
            version 52
            ptr-info 0x7f80b03e0030>
        arg 1 <integer_cst 0x7f80b03a6d08 constant 0>>
    arg 1 <field_decl 0x7f80b03a55f0 value type <pointer_type 0x7f80b03ac0a8>
        unsigned DI file test.c line 24 col 14 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac18 constant 0> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03ace70 sect_opt>>
    test.c:126:35 start: test.c:126:35 finish: test.c:126:35>
============COMPONEN2T_REF==================
 <component_ref 0x7f80b08599c0
    type <pointer_type 0x7f80b03ac0a8
        type <integer_type 0x7f80b03ac000 char readonly string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03ac0a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03bfb18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
       
        arg 0 <ssa_name 0x7f80b03c3ee8 type <pointer_type 0x7f80b03acf18>
           
            def_stmt _52 = sect_opts_17 + _51;
            version 52
            ptr-info 0x7f80b03e0030>
        arg 1 <integer_cst 0x7f80b03a6d08 constant 0>>
    arg 1 <field_decl 0x7f80b03a55f0 value type <pointer_type 0x7f80b03ac0a8>
        unsigned DI file test.c line 24 col 14 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac18 constant 0> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03ace70 sect_opt>>
    test.c:126:35 start: test.c:126:35 finish: test.c:126:35>
test.c:126:17: warning: use location
     const char *val = sect_opts[i].value;
                 ^
============COMPONENT_REF==================
============gimple assign==================
_54 = (long unsigned int) i_49;
 <ssa_name 0x7f80b03c3e10
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4120 i>
    def_stmt i_49 = PHI <0(31), i_60(32)>
    version 49>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3e10
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4120 i>
    def_stmt i_49 = PHI <0(31), i_60(32)>
    version 49>
test.c:127:32: warning: use location
     const char *sec = sect_opts[i].name;
                                ^
============gimple assign==================
_55 = _54 * 16;
 <ssa_name 0x7f80b03c3f78
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _54 = (long unsigned int) i_49;
    version 54>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3f78
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _54 = (long unsigned int) i_49;
    version 54>
test.c:127:32: warning: use location
============gimple assign==================
_56 = sect_opts_17 + _55;
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
test.c:127:32: warning: use location
============gimple assign==================
# VUSE <.MEM_95>
sec_57 = _56->name;
 <component_ref 0x7f80b0859a20
    type <pointer_type 0x7f80b03ac0a8
        type <integer_type 0x7f80b03ac000 char readonly string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03ac0a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03bfb68
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
       
        arg 0 <ssa_name 0x7f80b03c9048 type <pointer_type 0x7f80b03acf18>
           
            def_stmt _56 = sect_opts_17 + _55;
            version 56
            ptr-info 0x7f80b03e0060>
        arg 1 <integer_cst 0x7f80b03a6d08 constant 0>>
    arg 1 <field_decl 0x7f80b03a5688 name type <pointer_type 0x7f80b03ac0a8>
        unsigned DI file test.c line 23 col 14 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac18 constant 0>
        bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03ace70 sect_opt>
        chain <field_decl 0x7f80b03a55f0 value type <pointer_type 0x7f80b03ac0a8>
            unsigned DI file test.c line 24 col 14 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f80b085ac18 0> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03ace70 sect_opt>>>
    test.c:127:35 start: test.c:127:35 finish: test.c:127:35>
============COMPONEN2T_REF==================
 <component_ref 0x7f80b0859a20
    type <pointer_type 0x7f80b03ac0a8
        type <integer_type 0x7f80b03ac000 char readonly string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03ac0a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03bfb68
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
       
        arg 0 <ssa_name 0x7f80b03c9048 type <pointer_type 0x7f80b03acf18>
           
            def_stmt _56 = sect_opts_17 + _55;
            version 56
            ptr-info 0x7f80b03e0060>
        arg 1 <integer_cst 0x7f80b03a6d08 constant 0>>
    arg 1 <field_decl 0x7f80b03a5688 name type <pointer_type 0x7f80b03ac0a8>
        unsigned DI file test.c line 23 col 14 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac18 constant 0>
        bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03ace70 sect_opt>
        chain <field_decl 0x7f80b03a55f0 value type <pointer_type 0x7f80b03ac0a8>
            unsigned DI file test.c line 24 col 14 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f80b085ac18 0> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03ace70 sect_opt>>>
    test.c:127:35 start: test.c:127:35 finish: test.c:127:35>
test.c:127:17: warning: use location
     const char *sec = sect_opts[i].name;
                 ^
============COMPONENT_REF==================
============gimple assign==================
# .MEM_125 = VDEF <.MEM_95>
section_addrs_48->other[sec_num_58].name = sec_57;
 <ssa_name 0x7f80b03c9090
    type <pointer_type 0x7f80b03ac0a8
        type <integer_type 0x7f80b03ac000 char readonly string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03ac0a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c4480 sec>
    def_stmt sec_57 = _56->name;
    version 57
    ptr-info 0x7f80b03e0078>
============gimple assign==================
sec_num_59 = sec_num_58 + 1;
 <ssa_name 0x7f80b03c90d8
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bde10 sec_num>
    def_stmt sec_num_58 = PHI <0(31), sec_num_59(32)>
    version 58>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c90d8
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bde10 sec_num>
    def_stmt sec_num_58 = PHI <0(31), sec_num_59(32)>
    version 58>
test.c:132:12: warning: use location
     sec_num++;
            ^
============gimple assign==================
i_60 = i_49 + 1;
 <ssa_name 0x7f80b03c3e10
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4120 i>
    def_stmt i_49 = PHI <0(31), i_60(32)>
    version 49>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c3e10
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4120 i>
    def_stmt i_49 = PHI <0(31), i_60(32)>
    version 49>
test.c:124:35: warning: use location
   for (i = 0; i < section_index; i++)
                                   ^
============gimple assign==================
_61 = (long unsigned int) sec_num_58;
 <ssa_name 0x7f80b03c90d8
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bde10 sec_num>
    def_stmt sec_num_58 = PHI <0(31), sec_num_59(32)>
    version 58>
============COMPONEN2T_REF==================
 <ssa_name 0x7f80b03c90d8
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bde10 sec_num>
    def_stmt sec_num_58 = PHI <0(31), sec_num_59(32)>
    version 58>
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
============gimple assign==================
# .MEM_118 = VDEF <.MEM_95>
section_addrs_48->num_sections = _61;
 <ssa_name 0x7f80b03c91b0
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _61 = (long unsigned int) sec_num_58;
    version 61>
============gimple assign==================
# VUSE <.MEM_97>
_84 = ptr_83->next;
 <component_ref 0x7f80b03d9270
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    arg 0 <mem_ref 0x7f80b03d3028 type <record_type 0x7f80b03a3d20 cleanup>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a5390 next type <pointer_type 0x7f80b03a3c78>
        unsigned DI file common.h line 38 col 19 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac18 constant 0>
        bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03a3d20 cleanup>
        chain <field_decl 0x7f80b03a52f8 function type <pointer_type 0x7f80b03a3bd0>
            unsigned DI file common.h line 39 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f80b085ac18 0> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup> chain <field_decl 0x7f80b03a5260 free_arg>>>
    common.h:105:23 start: common.h:105:23 finish: common.h:105:23>
============COMPONEN2T_REF==================
 <component_ref 0x7f80b03d9270
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    arg 0 <mem_ref 0x7f80b03d3028 type <record_type 0x7f80b03a3d20 cleanup>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a5390 next type <pointer_type 0x7f80b03a3c78>
        unsigned DI file common.h line 38 col 19 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac18 constant 0>
        bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03a3d20 cleanup>
        chain <field_decl 0x7f80b03a52f8 function type <pointer_type 0x7f80b03a3bd0>
            unsigned DI file common.h line 39 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f80b085ac18 0> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup> chain <field_decl 0x7f80b03a5260 free_arg>>>
    common.h:105:23 start: common.h:105:23 finish: common.h:105:23>
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
============COMPONENT_REF==================
============gimple assign==================
# .MEM_119 = VDEF <.MEM_97>
cleanup_chain = _84;
 <ssa_name 0x7f80b03d8870
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _84 = ptr_83->next;
    version 84
    ptr-info 0x7f80b03e0210>
============gimple assign==================
# VUSE <.MEM_119>
_85 = ptr_83->function;
 <component_ref 0x7f80b03d92d0
    type <pointer_type 0x7f80b03a3bd0
        type <function_type 0x7f80b03a3b28 type <void_type 0x7f80b086ef18 void>
            QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f80b03a2a00 value <pointer_type 0x7f80b08750a8>
                chain <tree_list 0x7f80b086dac8 value <void_type 0x7f80b086ef18 void>>> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3bd0>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03ab6e0
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a52f8 function type <pointer_type 0x7f80b03a3bd0>
        unsigned DI file common.h line 39 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac18 constant 0> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>
        chain <field_decl 0x7f80b03a5260 free_arg type <pointer_type 0x7f80b03a3bd0>
            unsigned DI file common.h line 40 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128
            offset <integer_cst 0x7f80b085ac48 constant 16>
            bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03a3d20 cleanup> chain <field_decl 0x7f80b03a51c8 arg>>>
    common.h:106:8 start: common.h:106:8 finish: common.h:106:8>
============COMPONEN2T_REF==================
 <component_ref 0x7f80b03d92d0
    type <pointer_type 0x7f80b03a3bd0
        type <function_type 0x7f80b03a3b28 type <void_type 0x7f80b086ef18 void>
            QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f80b03a2a00 value <pointer_type 0x7f80b08750a8>
                chain <tree_list 0x7f80b086dac8 value <void_type 0x7f80b086ef18 void>>> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3bd0>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03ab6e0
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a52f8 function type <pointer_type 0x7f80b03a3bd0>
        unsigned DI file common.h line 39 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac18 constant 0> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>
        chain <field_decl 0x7f80b03a5260 free_arg type <pointer_type 0x7f80b03a3bd0>
            unsigned DI file common.h line 40 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128
            offset <integer_cst 0x7f80b085ac48 constant 16>
            bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03a3d20 cleanup> chain <field_decl 0x7f80b03a51c8 arg>>>
    common.h:106:8 start: common.h:106:8 finish: common.h:106:8>
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
============COMPONENT_REF==================
============gimple assign==================
# VUSE <.MEM_119>
_86 = ptr_83->arg;
 <component_ref 0x7f80b03d9330
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
   
    arg 0 <mem_ref 0x7f80b03ab780
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
        unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>
    common.h:106:8 start: common.h:106:8 finish: common.h:106:8>
============COMPONEN2T_REF==================
 <component_ref 0x7f80b03d9330
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
   
    arg 0 <mem_ref 0x7f80b03ab780
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
        unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>
    common.h:106:8 start: common.h:106:8 finish: common.h:106:8>
common.h:106:8: warning: use location
============COMPONENT_REF==================
============gimple assign==================
# VUSE <.MEM_121>
_88 = ptr_83->arg;
 <component_ref 0x7f80b03d9390
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
   
    arg 0 <mem_ref 0x7f80b03dd028
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
        unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>
    common.h:108:4 start: common.h:108:4 finish: common.h:108:4>
============COMPONEN2T_REF==================
 <component_ref 0x7f80b03d9390
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
   
    arg 0 <mem_ref 0x7f80b03dd028
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
        unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>
    common.h:108:4 start: common.h:108:4 finish: common.h:108:4>
common.h:108:4: warning: use location
    printf("%x\n", ptr->arg);
    ^
============COMPONENT_REF==================
============gimple assign==================
# VUSE <.MEM_122>
_90 = ptr_83->free_arg;
 <component_ref 0x7f80b03d93f0
    type <pointer_type 0x7f80b03a3bd0
        type <function_type 0x7f80b03a3b28 type <void_type 0x7f80b086ef18 void>
            QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f80b03a2a00 value <pointer_type 0x7f80b08750a8>
                chain <tree_list 0x7f80b086dac8 value <void_type 0x7f80b086ef18 void>>> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3bd0>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03dd078
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a5260 free_arg type <pointer_type 0x7f80b03a3bd0>
        unsigned DI file common.h line 40 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16>
        bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03a3d20 cleanup>
        chain <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
            unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f80b085ac48 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>>
    common.h:109:14 start: common.h:109:14 finish: common.h:109:14>
============COMPONEN2T_REF==================
 <component_ref 0x7f80b03d93f0
    type <pointer_type 0x7f80b03a3bd0
        type <function_type 0x7f80b03a3b28 type <void_type 0x7f80b086ef18 void>
            QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f80b03a2a00 value <pointer_type 0x7f80b08750a8>
                chain <tree_list 0x7f80b086dac8 value <void_type 0x7f80b086ef18 void>>> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3bd0>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03dd078
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a5260 free_arg type <pointer_type 0x7f80b03a3bd0>
        unsigned DI file common.h line 40 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16>
        bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03a3d20 cleanup>
        chain <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
            unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f80b085ac48 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>>
    common.h:109:14 start: common.h:109:14 finish: common.h:109:14>
common.h:109:14: warning: use location
       if (ptr->free_arg)
              ^
============COMPONENT_REF==================
============gimple assign==================
# VUSE <.MEM_122>
_91 = ptr_83->free_arg;
 <component_ref 0x7f80b03d9450
    type <pointer_type 0x7f80b03a3bd0
        type <function_type 0x7f80b03a3b28 type <void_type 0x7f80b086ef18 void>
            QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f80b03a2a00 value <pointer_type 0x7f80b08750a8>
                chain <tree_list 0x7f80b086dac8 value <void_type 0x7f80b086ef18 void>>> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3bd0>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03dd0c8
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a5260 free_arg type <pointer_type 0x7f80b03a3bd0>
        unsigned DI file common.h line 40 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16>
        bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03a3d20 cleanup>
        chain <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
            unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f80b085ac48 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>>
    common.h:110:6 start: common.h:110:6 finish: common.h:110:6>
============COMPONEN2T_REF==================
 <component_ref 0x7f80b03d9450
    type <pointer_type 0x7f80b03a3bd0
        type <function_type 0x7f80b03a3b28 type <void_type 0x7f80b086ef18 void>
            QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f80b03a2a00 value <pointer_type 0x7f80b08750a8>
                chain <tree_list 0x7f80b086dac8 value <void_type 0x7f80b086ef18 void>>> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3bd0>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03dd0c8
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a5260 free_arg type <pointer_type 0x7f80b03a3bd0>
        unsigned DI file common.h line 40 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16>
        bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03a3d20 cleanup>
        chain <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
            unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f80b085ac48 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>>
    common.h:110:6 start: common.h:110:6 finish: common.h:110:6>
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
============COMPONENT_REF==================
============gimple assign==================
# VUSE <.MEM_122>
_92 = ptr_83->arg;
 <component_ref 0x7f80b03d94b0
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
   
    arg 0 <mem_ref 0x7f80b03dd118
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
        unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>
    common.h:110:6 start: common.h:110:6 finish: common.h:110:6>
============COMPONEN2T_REF==================
 <component_ref 0x7f80b03d94b0
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
   
    arg 0 <mem_ref 0x7f80b03dd118
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
        unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>
    common.h:110:6 start: common.h:110:6 finish: common.h:110:6>
common.h:110:6: warning: use location
============COMPONENT_REF==================
============gimple assign==================
# VUSE <.MEM_97>
ptr_83 = cleanup_chain;
 <var_decl 0x7f80b15efab0 cleanup_chain
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
    align 64 context <translation_unit_decl 0x7f80b0865168 test.c> initial <error_mark 0x7f80b085abd0>>
============COMPONEN2T_REF==================
 <var_decl 0x7f80b15efab0 cleanup_chain
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
    align 64 context <translation_unit_decl 0x7f80b0865168 test.c> initial <error_mark 0x7f80b085abd0>>
common.h:103:14: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
              ^
============gimple assign==================
# .MEM_9 = VDEF <.MEM_97>
args ={v} {CLOBBER};
 <constructor 0x7f80b03a6c78
    type <array_type 0x7f80b03ac498
        type <pointer_type 0x7f80b03ac0a8 type <integer_type 0x7f80b03ac000 char>
            public unsigned DI
            size <integer_cst 0x7f80b085abe8 constant 64>
            unit size <integer_cst 0x7f80b085ac00 constant 8>
            align 64 symtab 0 alias set -1 structural equality>
        BLK
        size <integer_cst 0x7f80b0913c30 constant 384>
        unit size <integer_cst 0x7f80b03a6228 constant 48>
        align 64 symtab 0 alias set -1 structural equality
        domain <integer_type 0x7f80b03ac3f0 type <integer_type 0x7f80b086e000 sizetype>
            DI size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085ac18 0> max <integer_cst 0x7f80b03a6210 5>>
        pointer_to_this <pointer_type 0x7f80b03acdc8>>
    constant volatile lngt 0>
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
------------------------------
_104 = old_chain_70;
 <ssa_name 0x7f80b03c9b88
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d0630 old_chain>
    def_stmt old_chain_70 = cleanup_chain;
    version 70
    ptr-info 0x7f80b03e00f0>
------------------------------
_68 = _104;
 <ssa_name 0x7f80b03d8e10
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d06c0 D.4087>
    def_stmt _104 = old_chain_70;
    version 104
    ptr-info 0x7f80b03e02b8>
------------------------------
_105 = _68;
 <ssa_name 0x7f80b0862870
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _68 = _104;
    version 68
    ptr-info 0x7f80b03e00c0>
------------------------------
_67 = _105;
 <ssa_name 0x7f80b03d8e58
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d0000 D.4072>
    def_stmt _105 = _68;
    version 105
    ptr-info 0x7f80b03e02d0>
------------------------------
_106 = _67;
 <ssa_name 0x7f80b0862828
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _67 = _105;
    version 67
    ptr-info 0x7f80b03e00a8>
------------------------------
my_cleanups_10 = _106;
 <ssa_name 0x7f80b03d8ea0
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03c4d80 D.4063>
    def_stmt _106 = _67;
    version 106
    ptr-info 0x7f80b03e02e8>
------------------------------
# VUSE <.MEM_107>
arg_12 = MEM[(char * *)&args];
 <mem_ref 0x7f80b03bf910
    type <pointer_type 0x7f80b03a3930
        type <integer_type 0x7f80b03a3888 char public string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03a3930>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f80b0865168 test.c>
        pointer_to_this <pointer_type 0x7f80b03a39d8>>
   
    arg 0 <addr_expr 0x7f80b0397f00
        type <pointer_type 0x7f80b03acdc8 type <array_type 0x7f80b03ac498>
            unsigned DI size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 symtab 0 alias set -1 structural equality>
       
        arg 0 <var_decl 0x7f80b15efd80 args type <array_type 0x7f80b03ac498>
            addressable BLK file test.c line 148 col 14
            size <integer_cst 0x7f80b0913c30 constant 384>
            unit size <integer_cst 0x7f80b03a6228 constant 48>
            align 128 context <function_decl 0x7f80b03a4b00 main>>
        test.c:149:26 start: test.c:149:26 finish: test.c:149:26>
    arg 1 <integer_cst 0x7f80b03a6cd8 type <pointer_type 0x7f80b03a39d8> constant 0>>
------------------------------
_15 = (long unsigned int) section_index_14;
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
------------------------------
_16 = _15 * 16;
 <ssa_name 0x7f80b03c3480
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _15 = (long unsigned int) section_index_14;
    version 15>
------------------------------
_18 = sect_opts_17 + _16;
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
------------------------------
_19 = (long unsigned int) section_index_14;
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
------------------------------
_20 = _19 * 16;
 <ssa_name 0x7f80b03c35a0
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _19 = (long unsigned int) section_index_14;
    version 19>
------------------------------
_21 = sect_opts_17 + _20;
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
------------------------------
section_index_23 = section_index_14 + 1;
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
------------------------------
_24 = (long unsigned int) section_index_23;
 <ssa_name 0x7f80b03c36c0
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_23 = section_index_14 + 1;
    version 23>
------------------------------
num_sect_opts_26 = num_sect_opts_25 * 2;
 <ssa_name 0x7f80b03c3750
    type <integer_type 0x7f80b03a3498 size_t public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615> context <translation_unit_decl 0x7f80b0865168 test.c>>
    var <var_decl 0x7f80b03c4360 num_sect_opts>
    def_stmt num_sect_opts_25 = PHI <4(4), num_sect_opts_66(25)>
    version 25>
------------------------------
_27 = num_sect_opts_26 * 16;
 <ssa_name 0x7f80b03c3798
    type <integer_type 0x7f80b03a3498 size_t public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615> context <translation_unit_decl 0x7f80b0865168 test.c>>
    var <var_decl 0x7f80b03c4360 num_sect_opts>
    def_stmt num_sect_opts_26 = num_sect_opts_25 * 2;
    version 26>
------------------------------
_74 = newmem_73;
 <ssa_name 0x7f80b0862900
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0bd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f80b03e0120>
------------------------------
_137 = newmem_73;
 <ssa_name 0x7f80b0862900
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0bd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f80b03e0120>
------------------------------
sect_opts_28 = _137;
 <ssa_name 0x7f80b03de798
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0c60 D.4096>
    def_stmt _137 = newmem_73;
    version 137
    ptr-info 0x7f80b03e0360>
------------------------------
_30 = (long unsigned int) section_index_14;
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
------------------------------
_31 = _30 * 16;
 <ssa_name 0x7f80b03c38b8
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _30 = (long unsigned int) section_index_14;
    version 30>
------------------------------
_32 = sect_opts_17 + _31;
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
------------------------------
_34 = (long unsigned int) section_index_14;
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
------------------------------
_35 = _34 * 16;
 <ssa_name 0x7f80b03c39d8
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _34 = (long unsigned int) section_index_14;
    version 34>
------------------------------
_36 = sect_opts_17 + _35;
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
------------------------------
section_index_37 = section_index_14 + 1;
 <ssa_name 0x7f80b03c3438
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_14 = PHI <0(4), section_index_62(25)>
    version 14>
------------------------------
_38 = (long unsigned int) section_index_37;
 <ssa_name 0x7f80b03c3ab0
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bdd80 section_index>
    def_stmt section_index_37 = section_index_14 + 1;
    version 37>
------------------------------
num_sect_opts_39 = num_sect_opts_25 * 2;
 <ssa_name 0x7f80b03c3750
    type <integer_type 0x7f80b03a3498 size_t public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615> context <translation_unit_decl 0x7f80b0865168 test.c>>
    var <var_decl 0x7f80b03c4360 num_sect_opts>
    def_stmt num_sect_opts_25 = PHI <4(4), num_sect_opts_66(25)>
    version 25>
------------------------------
_40 = num_sect_opts_39 * 16;
 <ssa_name 0x7f80b03c3b40
    type <integer_type 0x7f80b03a3498 size_t public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615> context <translation_unit_decl 0x7f80b0865168 test.c>>
    var <var_decl 0x7f80b03c4360 num_sect_opts>
    def_stmt num_sect_opts_39 = num_sect_opts_25 * 2;
    version 39>
------------------------------
_77 = newmem_76;
 <ssa_name 0x7f80b03c9f30
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0f30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f80b03e0150>
------------------------------
_131 = newmem_76;
 <ssa_name 0x7f80b03c9f30
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0f30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f80b03e0150>
------------------------------
sect_opts_41 = _131;
 <ssa_name 0x7f80b03de5e8
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d7000 D.4100>
    def_stmt _131 = newmem_76;
    version 131
    ptr-info 0x7f80b03e0348>
------------------------------
argcnt_43 = argcnt_13 + 1;
 <ssa_name 0x7f80b03c33f0
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4090 argcnt>
    def_stmt argcnt_13 = PHI <0(4), argcnt_43(25)>
    version 13>
------------------------------
_44 = (long unsigned int) argcnt_43;
 <ssa_name 0x7f80b03c3c60
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4090 argcnt>
    def_stmt argcnt_43 = argcnt_13 + 1;
    version 43>
------------------------------
_45 = _44 * 8;
 <ssa_name 0x7f80b03c3ca8
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _44 = (long unsigned int) argcnt_43;
    version 44>
------------------------------
_46 = &args + _45;
 <addr_expr 0x7f80b03c80a0
    type <pointer_type 0x7f80b03acdc8
        type <array_type 0x7f80b03ac498 type <pointer_type 0x7f80b03ac0a8>
            BLK
            size <integer_cst 0x7f80b0913c30 constant 384>
            unit size <integer_cst 0x7f80b03a6228 constant 48>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f80b03ac3f0>
            pointer_to_this <pointer_type 0x7f80b03acdc8>>
        unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f80b15efd80 args type <array_type 0x7f80b03ac498>
        addressable BLK file test.c line 148 col 14 size <integer_cst 0x7f80b0913c30 384> unit size <integer_cst 0x7f80b03a6228 48>
        align 128 context <function_decl 0x7f80b03a4b00 main>>
    test.c:149:26 start: test.c:149:26 finish: test.c:149:26>
------------------------------
# VUSE <.MEM_93>
arg_47 = *_46;
 <mem_ref 0x7f80b03bfac8
    type <pointer_type 0x7f80b03a3930
        type <integer_type 0x7f80b03a3888 char public string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03a3930>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f80b0865168 test.c>
        pointer_to_this <pointer_type 0x7f80b03a39d8>>
   
    arg 0 <ssa_name 0x7f80b03c3d38
        type <pointer_type 0x7f80b03a39d8 type <pointer_type 0x7f80b03a3930>
            public unsigned DI size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 symtab 0 alias set -1 structural equality>
       
        def_stmt _46 = &args + _45;
        version 46
        ptr-info 0x7f80b03a6dc8>
    arg 1 <integer_cst 0x7f80b03a6cd8 type <pointer_type 0x7f80b03a39d8> constant 0>>
------------------------------
_115 = old_chain_81;
 <ssa_name 0x7f80b03d80d8
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d7870 old_chain>
    def_stmt old_chain_81 = cleanup_chain;
    version 81
    ptr-info 0x7f80b03e01c8>
------------------------------
_79 = _115;
 <ssa_name 0x7f80b03de168
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d7900 D.4114>
    def_stmt _115 = old_chain_81;
    version 115
    ptr-info 0x7f80b03e0300>
------------------------------
_116 = _79;
 <ssa_name 0x7f80b03d8048
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _79 = _115;
    version 79
    ptr-info 0x7f80b03e0198>
------------------------------
_78 = _116;
 <ssa_name 0x7f80b03de1b0
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d7510 D.4107>
    def_stmt _116 = _79;
    version 116
    ptr-info 0x7f80b03e0318>
------------------------------
_117 = _78;
 <ssa_name 0x7f80b03d8000
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    def_stmt _78 = _116;
    version 78
    ptr-info 0x7f80b03e0180>
------------------------------
_50 = (long unsigned int) i_49;
 <ssa_name 0x7f80b03c3e10
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4120 i>
    def_stmt i_49 = PHI <0(31), i_60(32)>
    version 49>
------------------------------
_51 = _50 * 16;
 <ssa_name 0x7f80b03c3e58
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _50 = (long unsigned int) i_49;
    version 50>
------------------------------
_52 = sect_opts_17 + _51;
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
------------------------------
# VUSE <.MEM_95>
val_53 = _52->value;
 <component_ref 0x7f80b08599c0
    type <pointer_type 0x7f80b03ac0a8
        type <integer_type 0x7f80b03ac000 char readonly string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03ac0a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03bfb18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
       
        arg 0 <ssa_name 0x7f80b03c3ee8 type <pointer_type 0x7f80b03acf18>
           
            def_stmt _52 = sect_opts_17 + _51;
            version 52
            ptr-info 0x7f80b03e0030>
        arg 1 <integer_cst 0x7f80b03a6d08 constant 0>>
    arg 1 <field_decl 0x7f80b03a55f0 value type <pointer_type 0x7f80b03ac0a8>
        unsigned DI file test.c line 24 col 14 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac18 constant 0> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03ace70 sect_opt>>
    test.c:126:35 start: test.c:126:35 finish: test.c:126:35>
------------------------------
_54 = (long unsigned int) i_49;
 <ssa_name 0x7f80b03c3e10
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4120 i>
    def_stmt i_49 = PHI <0(31), i_60(32)>
    version 49>
------------------------------
_55 = _54 * 16;
 <ssa_name 0x7f80b03c3f78
    type <integer_type 0x7f80b086e7e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f80b086e738 precision 64 min <integer_cst 0x7f80b085aeb8 0> max <integer_cst 0x7f80b085c500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f80b087a9d8>>
   
    def_stmt _54 = (long unsigned int) i_49;
    version 54>
------------------------------
_56 = sect_opts_17 + _55;
 <ssa_name 0x7f80b03c3510
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
    version 17
    ptr-info 0x7f80b03a6f30>
------------------------------
# VUSE <.MEM_95>
sec_57 = _56->name;
 <component_ref 0x7f80b0859a20
    type <pointer_type 0x7f80b03ac0a8
        type <integer_type 0x7f80b03ac000 char readonly string-flag QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f80b086e3f0 precision 8 min <integer_cst 0x7f80b03a6198 -128> max <integer_cst 0x7f80b03a6180 127>
            pointer_to_this <pointer_type 0x7f80b03ac0a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03bfb68
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
       
        arg 0 <ssa_name 0x7f80b03c9048 type <pointer_type 0x7f80b03acf18>
           
            def_stmt _56 = sect_opts_17 + _55;
            version 56
            ptr-info 0x7f80b03e0060>
        arg 1 <integer_cst 0x7f80b03a6d08 constant 0>>
    arg 1 <field_decl 0x7f80b03a5688 name type <pointer_type 0x7f80b03ac0a8>
        unsigned DI file test.c line 23 col 14 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac18 constant 0>
        bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03ace70 sect_opt>
        chain <field_decl 0x7f80b03a55f0 value type <pointer_type 0x7f80b03ac0a8>
            unsigned DI file test.c line 24 col 14 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f80b085ac18 0> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03ace70 sect_opt>>>
    test.c:127:35 start: test.c:127:35 finish: test.c:127:35>
------------------------------
sec_num_59 = sec_num_58 + 1;
 <ssa_name 0x7f80b03c90d8
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bde10 sec_num>
    def_stmt sec_num_58 = PHI <0(31), sec_num_59(32)>
    version 58>
------------------------------
i_60 = i_49 + 1;
 <ssa_name 0x7f80b03c3e10
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03c4120 i>
    def_stmt i_49 = PHI <0(31), i_60(32)>
    version 49>
------------------------------
_61 = (long unsigned int) sec_num_58;
 <ssa_name 0x7f80b03c90d8
    type <integer_type 0x7f80b086e5e8 int public SI
        size <integer_cst 0x7f80b085ae28 constant 32>
        unit size <integer_cst 0x7f80b085ae40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
        pointer_to_this <pointer_type 0x7f80b0875a80>>
    var <var_decl 0x7f80b03bde10 sec_num>
    def_stmt sec_num_58 = PHI <0(31), sec_num_59(32)>
    version 58>
------------------------------
# VUSE <.MEM_97>
_84 = ptr_83->next;
 <component_ref 0x7f80b03d9270
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
   
    arg 0 <mem_ref 0x7f80b03d3028 type <record_type 0x7f80b03a3d20 cleanup>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a5390 next type <pointer_type 0x7f80b03a3c78>
        unsigned DI file common.h line 38 col 19 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac18 constant 0>
        bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03a3d20 cleanup>
        chain <field_decl 0x7f80b03a52f8 function type <pointer_type 0x7f80b03a3bd0>
            unsigned DI file common.h line 39 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f80b085ac18 0> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup> chain <field_decl 0x7f80b03a5260 free_arg>>>
    common.h:105:23 start: common.h:105:23 finish: common.h:105:23>
------------------------------
# VUSE <.MEM_119>
_85 = ptr_83->function;
 <component_ref 0x7f80b03d92d0
    type <pointer_type 0x7f80b03a3bd0
        type <function_type 0x7f80b03a3b28 type <void_type 0x7f80b086ef18 void>
            QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f80b03a2a00 value <pointer_type 0x7f80b08750a8>
                chain <tree_list 0x7f80b086dac8 value <void_type 0x7f80b086ef18 void>>> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3bd0>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03ab6e0
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a52f8 function type <pointer_type 0x7f80b03a3bd0>
        unsigned DI file common.h line 39 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac18 constant 0> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>
        chain <field_decl 0x7f80b03a5260 free_arg type <pointer_type 0x7f80b03a3bd0>
            unsigned DI file common.h line 40 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128
            offset <integer_cst 0x7f80b085ac48 constant 16>
            bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03a3d20 cleanup> chain <field_decl 0x7f80b03a51c8 arg>>>
    common.h:106:8 start: common.h:106:8 finish: common.h:106:8>
------------------------------
# VUSE <.MEM_119>
_86 = ptr_83->arg;
 <component_ref 0x7f80b03d9330
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
   
    arg 0 <mem_ref 0x7f80b03ab780
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
        unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>
    common.h:106:8 start: common.h:106:8 finish: common.h:106:8>
------------------------------
# VUSE <.MEM_121>
_88 = ptr_83->arg;
 <component_ref 0x7f80b03d9390
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
   
    arg 0 <mem_ref 0x7f80b03dd028
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
        unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>
    common.h:108:4 start: common.h:108:4 finish: common.h:108:4>
------------------------------
# VUSE <.MEM_122>
_90 = ptr_83->free_arg;
 <component_ref 0x7f80b03d93f0
    type <pointer_type 0x7f80b03a3bd0
        type <function_type 0x7f80b03a3b28 type <void_type 0x7f80b086ef18 void>
            QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f80b03a2a00 value <pointer_type 0x7f80b08750a8>
                chain <tree_list 0x7f80b086dac8 value <void_type 0x7f80b086ef18 void>>> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3bd0>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03dd078
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a5260 free_arg type <pointer_type 0x7f80b03a3bd0>
        unsigned DI file common.h line 40 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16>
        bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03a3d20 cleanup>
        chain <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
            unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f80b085ac48 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>>
    common.h:109:14 start: common.h:109:14 finish: common.h:109:14>
------------------------------
# VUSE <.MEM_122>
_91 = ptr_83->free_arg;
 <component_ref 0x7f80b03d9450
    type <pointer_type 0x7f80b03a3bd0
        type <function_type 0x7f80b03a3b28 type <void_type 0x7f80b086ef18 void>
            QI
            size <integer_cst 0x7f80b085acd8 constant 8>
            unit size <integer_cst 0x7f80b085acf0 constant 1>
            align 8 symtab 0 alias set -1 structural equality
            arg-types <tree_list 0x7f80b03a2a00 value <pointer_type 0x7f80b08750a8>
                chain <tree_list 0x7f80b086dac8 value <void_type 0x7f80b086ef18 void>>> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3bd0>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f80b03dd0c8
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a5260 free_arg type <pointer_type 0x7f80b03a3bd0>
        unsigned DI file common.h line 40 col 10 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16>
        bit offset <integer_cst 0x7f80b085ac60 constant 0> context <record_type 0x7f80b03a3d20 cleanup>
        chain <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
            unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f80b085ac48 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>>
    common.h:110:6 start: common.h:110:6 finish: common.h:110:6>
------------------------------
# VUSE <.MEM_122>
_92 = ptr_83->arg;
 <component_ref 0x7f80b03d94b0
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
   
    arg 0 <mem_ref 0x7f80b03dd118
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
       
        arg 0 <ssa_name 0x7f80b0862798 type <pointer_type 0x7f80b03a3c78>
            var <var_decl 0x7f80b03db120 ptr>
            def_stmt ptr_83 = cleanup_chain;
            version 83
            ptr-info 0x7f80b03e01f8>
        arg 1 <integer_cst 0x7f80b03a6e88 constant 0>>
    arg 1 <field_decl 0x7f80b03a51c8 arg type <pointer_type 0x7f80b08750a8>
        unsigned DI file common.h line 41 col 9 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f80b085ac48 constant 16> bit offset <integer_cst 0x7f80b085abe8 64> context <record_type 0x7f80b03a3d20 cleanup>>
    common.h:110:6 start: common.h:110:6 finish: common.h:110:6>
 <var_decl 0x7f80b15efab0 cleanup_chain
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    addressable static unsigned DI file common.h line 49 col 24 size <integer_cst 0x7f80b085abe8 64> unit size <integer_cst 0x7f80b085ac00 8>
    align 64 context <translation_unit_decl 0x7f80b0865168 test.c> initial <error_mark 0x7f80b085abd0>>
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
=======print_function_var -1319175504   9========
if (my_cleanups_10 != ptr_83)
if (old_chain_70 == 0B)
if (old_chain_81 == 0B)
tewtw
tewtw
if (arg_22 != 0B)
[40;41m =======recursive_stmt========= [0m
if (newmem_73 == 0B)
[40;41m =======recursive_stmt========= [0m
if (newmem_76 == 0B)
=======print_function_var -1319175504   9========
if (my_cleanups_10 != ptr_83)
if (old_chain_70 == 0B)
if (old_chain_81 == 0B)
if (my_cleanups_10 != ptr_83)
if (_90 != 0B)
=======print_function_var -1319175504   9========
if (my_cleanups_10 != ptr_83)
if (old_chain_70 == 0B)
if (old_chain_81 == 0B)
if (my_cleanups_10 != ptr_83)
if (_90 != 0B)
=======print_function_var -1319175504   9========
if (my_cleanups_10 != ptr_83)
if (old_chain_70 == 0B)
if (old_chain_81 == 0B)
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
=======================================================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 6 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:strcmp========= [0m
[40;33m =======POP node_fun stack:strcmp========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m
 <function_decl 0x7f80b03a4b00 main
    type <function_type 0x7f80b03a37e0
        type <integer_type 0x7f80b086e5e8 int public SI
            size <integer_cst 0x7f80b085ae28 constant 32>
            unit size <integer_cst 0x7f80b085ae40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
            pointer_to_this <pointer_type 0x7f80b0875a80>>
        QI
        size <integer_cst 0x7f80b085acd8 constant 8>
        unit size <integer_cst 0x7f80b085acf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f80b0865168 test.c> initial <block 0x7f80b03b6060>
    result <result_decl 0x7f80b0865258 D.4023 type <integer_type 0x7f80b086e5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f80b085ae28 32> unit size <integer_cst 0x7f80b085ae40 4>
        align 32 context <function_decl 0x7f80b03a4b00 main>>
    struct-function 0x7f80b03b70b0>
 <ssa_name 0x7f80b08628b8
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d05a0 new>
    def_stmt new_69 = malloc (32);
    version 69
    ptr-info 0x7f80b03e00d8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

cleanup_chain = new_69;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: cleanup_chain = new_69;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start cleanup_chain = new_69;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start cleanup_chain = new_69;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start old_chain_70 = cleanup_chain;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_104 = old_chain_70;
lto1: warning: use location
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: _104 = old_chain_70;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _104 = old_chain_70;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _104 = old_chain_70;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_68 = _104;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: _68 = _104;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _68 = _104;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _68 = _104;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_105 = _68;
lto1: warning: use location
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: _105 = _68;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _105 = _68;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _105 = _68;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_67 = _105;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: _67 = _105;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _67 = _105;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _67 = _105;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_106 = _67;
lto1: warning: use location
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: _106 = _67;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _106 = _67;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _106 = _67;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

my_cleanups_10 = _106;
test.c:59:18: warning: use location
  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
                  ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: my_cleanups_10 = _106;
test.c:59:18: warning: use location
  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
                  ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start my_cleanups_10 = _106;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start my_cleanups_10 = _106;
test.c:59:18: warning: use location
  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
        ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 38: if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
        ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 38dot graph target basicblock en1

dot graph stmt start if (my_cleanups_10 != ptr_83)
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
        ^
dot graph stmt end

if (my_cleanups_10 != ptr_83)

 ================== find cond branch ================= 
if (my_cleanups_10 != ptr_83)
Cond in fucntion main basic block 38
 ================== possiable direct basic block ================= 
from main basic block 35
 ================== possiable direct basic block ================= 
from main basic block 39
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (old_chain_70 == 0B)
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph stmt end

if (old_chain_70 == 0B)

 ================== find cond branch ================= 
if (old_chain_70 == 0B)
Cond in fucntion main basic block 2
 ================== possiable direct basic block ================= 
from main basic block 3
 ================== possiable direct basic block ================= 
from main basic block 4
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: _71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _71 = cleanup_chain;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start old_chain_81 = cleanup_chain;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_115 = old_chain_81;
lto1: warning: use location
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 31: _115 = old_chain_81;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _115 = old_chain_81;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _115 = old_chain_81;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_79 = _115;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 31: _79 = _115;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _79 = _115;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _79 = _115;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_116 = _79;
lto1: warning: use location
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 31: _116 = _79;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _116 = _79;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _116 = _79;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_78 = _116;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 31: _78 = _116;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _78 = _116;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _78 = _116;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_117 = _78;
lto1: warning: use location
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 31: _117 = _78;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _117 = _78;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _117 = _78;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: _82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_7>
new_69 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start _82 = cleanup_chain;
new_69 = malloc (32);
dot graph stmt end

dot graph stmt start _82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph stmt end

dot graph target basicblock start from main basic block 38dot graph target basicblock en1

dot graph arrowsubgraph cluster_754658641 dot graph subgraph  if (my_cleanups_10 != ptr_83)
my_cleanups_10 = _106;
dot graph subgrapend

 <ssa_name 0x7f80b08628b8
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d05a0 new>
    def_stmt new_69 = malloc (32);
    version 69
    ptr-info 0x7f80b03e00d8>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f80b03a4b00 main
    type <function_type 0x7f80b03a37e0
        type <integer_type 0x7f80b086e5e8 int public SI
            size <integer_cst 0x7f80b085ae28 constant 32>
            unit size <integer_cst 0x7f80b085ae40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
            pointer_to_this <pointer_type 0x7f80b0875a80>>
        QI
        size <integer_cst 0x7f80b085acd8 constant 8>
        unit size <integer_cst 0x7f80b085acf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f80b0865168 test.c> initial <block 0x7f80b03b6060>
    result <result_decl 0x7f80b0865258 D.4023 type <integer_type 0x7f80b086e5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f80b085ae28 32> unit size <integer_cst 0x7f80b085ae40 4>
        align 32 context <function_decl 0x7f80b03a4b00 main>>
    struct-function 0x7f80b03b70b0>
 <ssa_name 0x7f80b03c3360
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_11 = malloc (64);
    version 11
    ptr-info 0x7f80b03a6f00>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
lto1: warning: use location
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 26: sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 20: newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start newmem_76 = realloc (sect_opts_17, size_75);
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph stmt end

this stmt is child function---realloc-----

 ================== trace ================== 
 <ssa_name 0x7f80b03c3360
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_11 = malloc (64);
    version 11
    ptr-info 0x7f80b03a6f00>
trace fucntion name:realloc 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 11: newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start newmem_73 = realloc (sect_opts_17, size_72);
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph stmt end

this stmt is child function---realloc-----

 ================== trace ================== 
 <ssa_name 0x7f80b03c3360
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_11 = malloc (64);
    version 11
    ptr-info 0x7f80b03a6f00>
trace fucntion name:realloc 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
lto1: warning: use location
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 25: sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph stmt start sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---realloc-----
dot graph entry main
dot graph target entry end

_56 = sect_opts_17 + _55;
test.c:127:32: warning: use location
     const char *sec = sect_opts[i].name;
                                ^
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 32: _56 = sect_opts_17 + _55;
test.c:127:32: warning: use location
     const char *sec = sect_opts[i].name;
                                ^
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start _56 = sect_opts_17 + _55;
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start _56 = sect_opts_17 + _55;
test.c:127:32: warning: use location
     const char *sec = sect_opts[i].name;
                                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

sec_57 = _56->name;
test.c:127:17: warning: use location
     const char *sec = sect_opts[i].name;
                 ^
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 32: sec_57 = _56->name;
test.c:127:17: warning: use location
     const char *sec = sect_opts[i].name;
                 ^
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start sec_57 = _56->name;
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start sec_57 = _56->name;
test.c:127:17: warning: use location
     const char *sec = sect_opts[i].name;
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_52 = sect_opts_17 + _51;
test.c:126:32: warning: use location
     const char *val = sect_opts[i].value;
                                ^
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 32: _52 = sect_opts_17 + _51;
test.c:126:32: warning: use location
     const char *val = sect_opts[i].value;
                                ^
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start _52 = sect_opts_17 + _51;
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start _52 = sect_opts_17 + _51;
test.c:126:32: warning: use location
     const char *val = sect_opts[i].value;
                                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

val_53 = _52->value;
test.c:126:17: warning: use location
     const char *val = sect_opts[i].value;
                 ^
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 32: val_53 = _52->value;
test.c:126:17: warning: use location
     const char *val = sect_opts[i].value;
                 ^
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start val_53 = _52->value;
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start val_53 = _52->value;
test.c:126:17: warning: use location
     const char *val = sect_opts[i].value;
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_36 = sect_opts_17 + _35;
test.c:97:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 17: _36 = sect_opts_17 + _35;
test.c:97:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _36 = sect_opts_17 + _35;
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start _36 = sect_opts_17 + _35;
test.c:97:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_36->value = arg_22;
test.c:97:39: warning: use location
        sect_opts[section_index].value = arg;
                                       ^
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 17: _36->value = arg_22;
test.c:97:39: warning: use location
        sect_opts[section_index].value = arg;
                                       ^
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _36->value = arg_22;
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start _36->value = arg_22;
test.c:97:39: warning: use location
        sect_opts[section_index].value = arg;
                                       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_42 = strcmp (arg_22, "-s");
test.c:108:15: warning: use location
      else if (strcmp (arg, "-s") == 0)
               ^
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 23: _42 = strcmp (arg_22, "-s");
test.c:108:15: warning: use location
      else if (strcmp (arg, "-s") == 0)
               ^
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start _42 = strcmp (arg_22, "-s");
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start _42 = strcmp (arg_22, "-s");
test.c:108:15: warning: use location
      else if (strcmp (arg, "-s") == 0)
               ^
dot graph stmt end

this stmt is child function---strcmp-----

 ================== trace ================== 
 <ssa_name 0x7f80b03c3360
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_11 = malloc (64);
    version 11
    ptr-info 0x7f80b03a6f00>
trace fucntion name:strcmp 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

if (arg_22 != 0B)
test.c:71:2: warning: use location
  for (arg = args[0]; arg != NULL; arg = args[++argcnt])
  ^
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 26: if (arg_22 != 0B)
test.c:71:2: warning: use location
  for (arg = args[0]; arg != NULL; arg = args[++argcnt])
  ^
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start if (arg_22 != 0B)
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start if (arg_22 != 0B)
test.c:71:2: warning: use location
  for (arg = args[0]; arg != NULL; arg = args[++argcnt])
  ^
dot graph stmt end

if (arg_22 != 0B)

 ================== find cond branch ================= 
if (arg_22 != 0B)
Cond in fucntion main basic block 26
 ================== possiable direct basic block ================= 
from main basic block 5
 ================== possiable direct basic block ================= 
from main basic block 27
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_32 = sect_opts_17 + _31;
test.c:92:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 15: _32 = sect_opts_17 + _31;
test.c:92:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start _32 = sect_opts_17 + _31;
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start _32 = sect_opts_17 + _31;
test.c:92:17: warning: use location
        sect_opts[section_index].value = arg;
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_21 = sect_opts_17 + _20;
test.c:79:15: warning: use location
      sect_opts[section_index].value = arg;
               ^
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 8: _21 = sect_opts_17 + _20;
test.c:79:15: warning: use location
      sect_opts[section_index].value = arg;
               ^
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start _21 = sect_opts_17 + _20;
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start _21 = sect_opts_17 + _20;
test.c:79:15: warning: use location
      sect_opts[section_index].value = arg;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_18 = sect_opts_17 + _16;
test.c:78:15: warning: use location
      sect_opts[section_index].name = ".text";
               ^
dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc en1

dot graph target line desc form basic block 8: _18 = sect_opts_17 + _16;
test.c:78:15: warning: use location
      sect_opts[section_index].name = ".text";
               ^
dot graph target line desend

dot graph target loc start # .MEM_107 = VDEF <.MEM_103>
sect_opts_11 = malloc (64);
test.c:66:12: warning: use location
  sect_opts = xmalloc (sizeof(struct sect_opt) * num_sect_opts); /* allocation site */
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start _18 = sect_opts_17 + _16;
sect_opts_11 = malloc (64);
dot graph stmt end

dot graph stmt start _18 = sect_opts_17 + _16;
test.c:78:15: warning: use location
      sect_opts[section_index].name = ".text";
               ^
dot graph stmt end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph arrowsubgraph cluster_1947772574 dot graph subgraph  _56 = sect_opts_17 + _55;
sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
dot graph subgrapend

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph arrowsubgraph cluster_845793279 dot graph subgraph  sec_57 = _56->name;
_56 = sect_opts_17 + _55;
dot graph subgrapend

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph arrowsubgraph cluster_86807526 dot graph subgraph  _52 = sect_opts_17 + _51;
sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
dot graph subgrapend

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph arrowsubgraph cluster_1445672688 dot graph subgraph  val_53 = _52->value;
_52 = sect_opts_17 + _51;
dot graph subgrapend

 <ssa_name 0x7f80b03c3360
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c42d0 sect_opts>
    def_stmt sect_opts_11 = malloc (64);
    version 11
    ptr-info 0x7f80b03a6f00>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f80b03a4b00 main
    type <function_type 0x7f80b03a37e0
        type <integer_type 0x7f80b086e5e8 int public SI
            size <integer_cst 0x7f80b085ae28 constant 32>
            unit size <integer_cst 0x7f80b085ae40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
            pointer_to_this <pointer_type 0x7f80b0875a80>>
        QI
        size <integer_cst 0x7f80b085acd8 constant 8>
        unit size <integer_cst 0x7f80b085acf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f80b0865168 test.c> initial <block 0x7f80b03b6060>
    result <result_decl 0x7f80b0865258 D.4023 type <integer_type 0x7f80b086e5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f80b085ae28 32> unit size <integer_cst 0x7f80b085ae40 4>
        align 32 context <function_decl 0x7f80b03a4b00 main>>
    struct-function 0x7f80b03b70b0>
 <ssa_name 0x7f80b0862900
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0bd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f80b03e0120>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_137 = newmem_73;
lto1: warning: use location
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 13: _137 = newmem_73;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 13dot graph target basicblock en1

dot graph stmt start _137 = newmem_73;
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start _137 = newmem_73;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

sect_opts_28 = _137;
test.c:83:18: warning: use location
        sect_opts = ((struct sect_opt *)
                  ^
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 13: sect_opts_28 = _137;
test.c:83:18: warning: use location
        sect_opts = ((struct sect_opt *)
                  ^
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 13dot graph target basicblock en1

dot graph stmt start sect_opts_28 = _137;
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start sect_opts_28 = _137;
test.c:83:18: warning: use location
        sect_opts = ((struct sect_opt *)
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_74 = newmem_73;
test.c:45:10: warning: use location
   return (newmem);
          ^
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 13: _74 = newmem_73;
test.c:45:10: warning: use location
   return (newmem);
          ^
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 13dot graph target basicblock en1

dot graph stmt start _74 = newmem_73;
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start _74 = newmem_73;
test.c:45:10: warning: use location
   return (newmem);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (newmem_73 == 0B)
test.c:42:6: warning: use location
   if (!newmem)
      ^
dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 11: if (newmem_73 == 0B)
test.c:42:6: warning: use location
   if (!newmem)
      ^
dot graph target line desend

dot graph target loc start # .MEM_136 = VDEF <.MEM_135>
newmem_73 = realloc (sect_opts_17, size_72);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start if (newmem_73 == 0B)
newmem_73 = realloc (sect_opts_17, size_72);
dot graph stmt end

dot graph stmt start if (newmem_73 == 0B)
test.c:42:6: warning: use location
   if (!newmem)
      ^
dot graph stmt end

if (newmem_73 == 0B)

 ================== find cond branch ================= 
if (newmem_73 == 0B)
Cond in fucntion main basic block 11
 ================== possiable direct basic block ================= 
from main basic block 12
 ================== possiable direct basic block ================= 
from main basic block 13
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph target basicblock start from main basic block 13dot graph target basicblock en1

dot graph arrowsubgraph cluster_1416814762 dot graph subgraph  _137 = newmem_73;
newmem_73 = realloc (sect_opts_17, size_72);
dot graph subgrapend

dot graph target basicblock start from main basic block 13dot graph target basicblock en1

dot graph arrowsubgraph cluster_7484496 dot graph subgraph  sect_opts_28 = _137;
_137 = newmem_73;
dot graph subgrapend

dot graph target basicblock start from main basic block 13dot graph target basicblock en1

dot graph arrowsubgraph cluster_736121997 dot graph subgraph  _74 = newmem_73;
newmem_73 = realloc (sect_opts_17, size_72);
dot graph subgrapend

 <ssa_name 0x7f80b0862900
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0bd0 newmem>
    def_stmt newmem_73 = realloc (sect_opts_17, size_72);
    version 73
    ptr-info 0x7f80b03e0120>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f80b03a4b00 main
    type <function_type 0x7f80b03a37e0
        type <integer_type 0x7f80b086e5e8 int public SI
            size <integer_cst 0x7f80b085ae28 constant 32>
            unit size <integer_cst 0x7f80b085ae40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
            pointer_to_this <pointer_type 0x7f80b0875a80>>
        QI
        size <integer_cst 0x7f80b085acd8 constant 8>
        unit size <integer_cst 0x7f80b085acf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f80b0865168 test.c> initial <block 0x7f80b03b6060>
    result <result_decl 0x7f80b0865258 D.4023 type <integer_type 0x7f80b086e5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f80b085ae28 32> unit size <integer_cst 0x7f80b085ae40 4>
        align 32 context <function_decl 0x7f80b03a4b00 main>>
    struct-function 0x7f80b03b70b0>
 <ssa_name 0x7f80b03c9f30
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0f30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f80b03e0150>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_131 = newmem_76;
lto1: warning: use location
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 22: _131 = newmem_76;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

dot graph stmt start _131 = newmem_76;
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start _131 = newmem_76;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

sect_opts_41 = _131;
test.c:103:20: warning: use location
          sect_opts = ((struct sect_opt *)
                    ^
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 22: sect_opts_41 = _131;
test.c:103:20: warning: use location
          sect_opts = ((struct sect_opt *)
                    ^
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

dot graph stmt start sect_opts_41 = _131;
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start sect_opts_41 = _131;
test.c:103:20: warning: use location
          sect_opts = ((struct sect_opt *)
                    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_77 = newmem_76;
test.c:45:10: warning: use location
   return (newmem);
          ^
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 22: _77 = newmem_76;
test.c:45:10: warning: use location
   return (newmem);
          ^
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

dot graph stmt start _77 = newmem_76;
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start _77 = newmem_76;
test.c:45:10: warning: use location
   return (newmem);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (newmem_76 == 0B)
test.c:42:6: warning: use location
   if (!newmem)
      ^
dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc en1

dot graph target line desc form basic block 20: if (newmem_76 == 0B)
test.c:42:6: warning: use location
   if (!newmem)
      ^
dot graph target line desend

dot graph target loc start # .MEM_130 = VDEF <.MEM_129>
newmem_76 = realloc (sect_opts_17, size_75);
test.c:40:10: warning: use location
   newmem = realloc (oldmem, size); /* allocation site */
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start if (newmem_76 == 0B)
newmem_76 = realloc (sect_opts_17, size_75);
dot graph stmt end

dot graph stmt start if (newmem_76 == 0B)
test.c:42:6: warning: use location
   if (!newmem)
      ^
dot graph stmt end

if (newmem_76 == 0B)

 ================== find cond branch ================= 
if (newmem_76 == 0B)
Cond in fucntion main basic block 20
 ================== possiable direct basic block ================= 
from main basic block 21
 ================== possiable direct basic block ================= 
from main basic block 22
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph target basicblock start from main basic block 22dot graph target basicblock en1

dot graph arrowsubgraph cluster_31845504 dot graph subgraph  _131 = newmem_76;
newmem_76 = realloc (sect_opts_17, size_75);
dot graph subgrapend

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

dot graph arrowsubgraph cluster_1362775981 dot graph subgraph  sect_opts_41 = _131;
_131 = newmem_76;
dot graph subgrapend

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

dot graph arrowsubgraph cluster_1117654503 dot graph subgraph  _77 = newmem_76;
newmem_76 = realloc (sect_opts_17, size_75);
dot graph subgrapend

 <ssa_name 0x7f80b03c9f30
    type <pointer_type 0x7f80b08750a8
        type <void_type 0x7f80b086ef18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f80b08750a8>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b087abd0>>
    var <var_decl 0x7f80b03d0f30 newmem>
    def_stmt newmem_76 = realloc (sect_opts_17, size_75);
    version 76
    ptr-info 0x7f80b03e0150>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f80b03a4b00 main
    type <function_type 0x7f80b03a37e0
        type <integer_type 0x7f80b086e5e8 int public SI
            size <integer_cst 0x7f80b085ae28 constant 32>
            unit size <integer_cst 0x7f80b085ae40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
            pointer_to_this <pointer_type 0x7f80b0875a80>>
        QI
        size <integer_cst 0x7f80b085acd8 constant 8>
        unit size <integer_cst 0x7f80b085acf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f80b0865168 test.c> initial <block 0x7f80b03b6060>
    result <result_decl 0x7f80b0865258 D.4023 type <integer_type 0x7f80b086e5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f80b085ae28 32> unit size <integer_cst 0x7f80b085ae40 4>
        align 32 context <function_decl 0x7f80b03a4b00 main>>
    struct-function 0x7f80b03b70b0>
 <ssa_name 0x7f80b03c3dc8
    type <pointer_type 0x7f80b03ad2a0
        type <record_type 0x7f80b03ad1f8 section_addr_info BLK
            size <integer_cst 0x7f80b08760a8 constant 192>
            unit size <integer_cst 0x7f80b0876078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ad1f8 fields <field_decl 0x7f80b03a5a18 num_sections> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03ad2a0> chain <type_decl 0x7f80b03a5ab0 D.4018>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c4240 section_addrs>
    def_stmt section_addrs_48 = malloc (24);
    version 48
    ptr-info 0x7f80b03e0018>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph target loc start # .MEM_108 = VDEF <.MEM_94>
section_addrs_48 = malloc (24);
test.c:121:17: warning: use location
   section_addrs = malloc (sizeof(struct section_addr_info));
                 ^
dot graph target loc en1

dot graph target line desc form basic block 29: new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph target line desend

dot graph target loc start # .MEM_108 = VDEF <.MEM_94>
section_addrs_48 = malloc (24);
test.c:121:17: warning: use location
   section_addrs = malloc (sizeof(struct section_addr_info));
                 ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start new_80->arg = section_addrs_48;
section_addrs_48 = malloc (24);
dot graph stmt end

dot graph stmt start new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph target loc start # .MEM_108 = VDEF <.MEM_94>
section_addrs_48 = malloc (24);
test.c:121:17: warning: use location
   section_addrs = malloc (sizeof(struct section_addr_info));
                 ^
dot graph target loc en1

dot graph target line desc form basic block 34: section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph target line desend

dot graph target loc start # .MEM_108 = VDEF <.MEM_94>
section_addrs_48 = malloc (24);
test.c:121:17: warning: use location
   section_addrs = malloc (sizeof(struct section_addr_info));
                 ^
dot graph target loc end

dot graph target basicblock start from main basic block 34dot graph target basicblock en1

dot graph stmt start section_addrs_48->num_sections = _61;
section_addrs_48 = malloc (24);
dot graph stmt end

dot graph stmt start section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph target loc start # .MEM_108 = VDEF <.MEM_94>
section_addrs_48 = malloc (24);
test.c:121:17: warning: use location
   section_addrs = malloc (sizeof(struct section_addr_info));
                 ^
dot graph target loc en1

dot graph target line desc form basic block 32: section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph target line desend

dot graph target loc start # .MEM_108 = VDEF <.MEM_94>
section_addrs_48 = malloc (24);
test.c:121:17: warning: use location
   section_addrs = malloc (sizeof(struct section_addr_info));
                 ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start section_addrs_48->other[sec_num_58].name = sec_57;
section_addrs_48 = malloc (24);
dot graph stmt end

dot graph stmt start section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph stmt end

dot graph target basicblock start from main basic block 34dot graph target basicblock en1

dot graph arrowsubgraph cluster_1468212229 dot graph subgraph  section_addrs_48->num_sections = _61;
section_addrs_48 = malloc (24);
dot graph subgrapend

 <ssa_name 0x7f80b03c3dc8
    type <pointer_type 0x7f80b03ad2a0
        type <record_type 0x7f80b03ad1f8 section_addr_info BLK
            size <integer_cst 0x7f80b08760a8 constant 192>
            unit size <integer_cst 0x7f80b0876078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ad1f8 fields <field_decl 0x7f80b03a5a18 num_sections> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03ad2a0> chain <type_decl 0x7f80b03a5ab0 D.4018>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f80b03c4240 section_addrs>
    def_stmt section_addrs_48 = malloc (24);
    version 48
    ptr-info 0x7f80b03e0018>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f80b03a4b00 main
    type <function_type 0x7f80b03a37e0
        type <integer_type 0x7f80b086e5e8 int public SI
            size <integer_cst 0x7f80b085ae28 constant 32>
            unit size <integer_cst 0x7f80b085ae40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
            pointer_to_this <pointer_type 0x7f80b0875a80>>
        QI
        size <integer_cst 0x7f80b085acd8 constant 8>
        unit size <integer_cst 0x7f80b085acf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f80b0865168 test.c> initial <block 0x7f80b03b6060>
    result <result_decl 0x7f80b0865258 D.4023 type <integer_type 0x7f80b086e5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f80b085ae28 32> unit size <integer_cst 0x7f80b085ae40 4>
        align 32 context <function_decl 0x7f80b03a4b00 main>>
    struct-function 0x7f80b03b70b0>
 <ssa_name 0x7f80b03d8090
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d77e0 new>
    def_stmt new_80 = malloc (32);
    version 80
    ptr-info 0x7f80b03e01b0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

cleanup_chain = new_80;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: cleanup_chain = new_80;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start cleanup_chain = new_80;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start cleanup_chain = new_80;
common.h:133:14: warning: use location
   *pmy_chain = new;
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start old_chain_70 = cleanup_chain;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_104 = old_chain_70;
lto1: warning: use location
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: _104 = old_chain_70;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _104 = old_chain_70;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _104 = old_chain_70;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_68 = _104;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: _68 = _104;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _68 = _104;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _68 = _104;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_105 = _68;
lto1: warning: use location
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: _105 = _68;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _105 = _68;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _105 = _68;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_67 = _105;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: _67 = _105;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _67 = _105;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _67 = _105;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_106 = _67;
lto1: warning: use location
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: _106 = _67;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _106 = _67;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _106 = _67;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

my_cleanups_10 = _106;
test.c:59:18: warning: use location
  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
                  ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 4: my_cleanups_10 = _106;
test.c:59:18: warning: use location
  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
                  ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start my_cleanups_10 = _106;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start my_cleanups_10 = _106;
test.c:59:18: warning: use location
  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
        ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 38: if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
        ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 38dot graph target basicblock en1

dot graph stmt start if (my_cleanups_10 != ptr_83)
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
        ^
dot graph stmt end

if (my_cleanups_10 != ptr_83)

 ================== find cond branch ================= 
if (my_cleanups_10 != ptr_83)
Cond in fucntion main basic block 38
 ================== possiable direct basic block ================= 
from main basic block 35
 ================== possiable direct basic block ================= 
from main basic block 39
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (old_chain_70 == 0B)
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph stmt end

if (old_chain_70 == 0B)

 ================== find cond branch ================= 
if (old_chain_70 == 0B)
Cond in fucntion main basic block 2
 ================== possiable direct basic block ================= 
from main basic block 3
 ================== possiable direct basic block ================= 
from main basic block 4
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: _71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _71 = cleanup_chain;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start old_chain_81 = cleanup_chain;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_115 = old_chain_81;
lto1: warning: use location
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 31: _115 = old_chain_81;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _115 = old_chain_81;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _115 = old_chain_81;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_79 = _115;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 31: _79 = _115;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _79 = _115;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _79 = _115;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_116 = _79;
lto1: warning: use location
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 31: _116 = _79;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _116 = _79;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _116 = _79;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_78 = _116;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 31: _78 = _116;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _78 = _116;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _78 = _116;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_117 = _78;
lto1: warning: use location
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 31: _117 = _78;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _117 = _78;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _117 = _78;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: _82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start _82 = cleanup_chain;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start _82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 29: new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start new_80->arg = section_addrs_48;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start new_80->arg = section_addrs_48;
common.h:132:12: warning: use location
   new->arg = arg;
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 34: section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 34dot graph target basicblock en1

dot graph stmt start section_addrs_48->num_sections = _61;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start section_addrs_48->num_sections = _61;
test.c:139:31: warning: use location
   section_addrs->num_sections = sec_num;
                               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc en1

dot graph target line desc form basic block 32: section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph target line desend

dot graph target loc start # .MEM_109 = VDEF <.MEM_108>
new_80 = malloc (32);
common.h:125:19: warning: use location
   struct cleanup *new
                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start section_addrs_48->other[sec_num_58].name = sec_57;
new_80 = malloc (32);
dot graph stmt end

dot graph stmt start section_addrs_48->other[sec_num_58].name = sec_57;
test.c:131:40: warning: use location
     section_addrs->other[sec_num].name = (char *) sec;
                                        ^
dot graph stmt end

dot graph target basicblock start from main basic block 38dot graph target basicblock en1

dot graph arrowsubgraph cluster_1472550651 dot graph subgraph  if (my_cleanups_10 != ptr_83)
my_cleanups_10 = _106;
dot graph subgrapend

 <ssa_name 0x7f80b03d8090
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03d77e0 new>
    def_stmt new_80 = malloc (32);
    version 80
    ptr-info 0x7f80b03e01b0>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f80b03a4b00 main
    type <function_type 0x7f80b03a37e0
        type <integer_type 0x7f80b086e5e8 int public SI
            size <integer_cst 0x7f80b085ae28 constant 32>
            unit size <integer_cst 0x7f80b085ae40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
            pointer_to_this <pointer_type 0x7f80b0875a80>>
        QI
        size <integer_cst 0x7f80b085acd8 constant 8>
        unit size <integer_cst 0x7f80b085acf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f80b0865168 test.c> initial <block 0x7f80b03b6060>
    result <result_decl 0x7f80b0865258 D.4023 type <integer_type 0x7f80b086e5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f80b085ae28 32> unit size <integer_cst 0x7f80b085ae40 4>
        align 32 context <function_decl 0x7f80b03a4b00 main>>
    struct-function 0x7f80b03b70b0>
 <ssa_name 0x7f80b03c3ee8
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _52 = sect_opts_17 + _51;
    version 52
    ptr-info 0x7f80b03e0030>

dot graph START

======================================================================

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

val_53 = _52->value;
test.c:126:17: warning: use location
     const char *val = sect_opts[i].value;
                 ^
dot graph target loc start # VUSE <.MEM_95>
val_53 = _52->value;
test.c:126:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 32: val_53 = _52->value;
test.c:126:17: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_95>
val_53 = _52->value;
test.c:126:17: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start val_53 = _52->value;
val_53 = _52->value;
dot graph stmt end

dot graph stmt start val_53 = _52->value;
test.c:126:17: warning: use location
dot graph stmt end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph arrowsubgraph cluster_1889429038 dot graph subgraph  val_53 = _52->value;
_52 = sect_opts_17 + _51;
dot graph subgrapend

 <ssa_name 0x7f80b03c3ee8
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _52 = sect_opts_17 + _51;
    version 52
    ptr-info 0x7f80b03e0030>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
 <function_decl 0x7f80b03a4b00 main
    type <function_type 0x7f80b03a37e0
        type <integer_type 0x7f80b086e5e8 int public SI
            size <integer_cst 0x7f80b085ae28 constant 32>
            unit size <integer_cst 0x7f80b085ae40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
            pointer_to_this <pointer_type 0x7f80b0875a80>>
        QI
        size <integer_cst 0x7f80b085acd8 constant 8>
        unit size <integer_cst 0x7f80b085acf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f80b0865168 test.c> initial <block 0x7f80b03b6060>
    result <result_decl 0x7f80b0865258 D.4023 type <integer_type 0x7f80b086e5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f80b085ae28 32> unit size <integer_cst 0x7f80b085ae40 4>
        align 32 context <function_decl 0x7f80b03a4b00 main>>
    struct-function 0x7f80b03b70b0>
 <ssa_name 0x7f80b03c9048
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _56 = sect_opts_17 + _55;
    version 56
    ptr-info 0x7f80b03e0060>

dot graph START

======================================================================

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

sec_57 = _56->name;
test.c:127:17: warning: use location
     const char *sec = sect_opts[i].name;
                 ^
dot graph target loc start # VUSE <.MEM_95>
sec_57 = _56->name;
test.c:127:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 32: sec_57 = _56->name;
test.c:127:17: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_95>
sec_57 = _56->name;
test.c:127:17: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start sec_57 = _56->name;
sec_57 = _56->name;
dot graph stmt end

dot graph stmt start sec_57 = _56->name;
test.c:127:17: warning: use location
dot graph stmt end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph arrowsubgraph cluster_1811423891 dot graph subgraph  sec_57 = _56->name;
_56 = sect_opts_17 + _55;
dot graph subgrapend

 <ssa_name 0x7f80b03c9048
    type <pointer_type 0x7f80b03acf18
        type <record_type 0x7f80b03ace70 sect_opt TI
            size <integer_cst 0x7f80b085ac30 constant 128>
            unit size <integer_cst 0x7f80b085ac48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03ace70 fields <field_decl 0x7f80b03a5688 name> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03acf18> chain <type_decl 0x7f80b03a5720 D.4012>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _56 = sect_opts_17 + _55;
    version 56
    ptr-info 0x7f80b03e0060>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
 <function_decl 0x7f80b03a4b00 main
    type <function_type 0x7f80b03a37e0
        type <integer_type 0x7f80b086e5e8 int public SI
            size <integer_cst 0x7f80b085ae28 constant 32>
            unit size <integer_cst 0x7f80b085ae40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
            pointer_to_this <pointer_type 0x7f80b0875a80>>
        QI
        size <integer_cst 0x7f80b085acd8 constant 8>
        unit size <integer_cst 0x7f80b085acf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f80b0865168 test.c> initial <block 0x7f80b03b6060>
    result <result_decl 0x7f80b0865258 D.4023 type <integer_type 0x7f80b086e5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f80b085ae28 32> unit size <integer_cst 0x7f80b085ae40 4>
        align 32 context <function_decl 0x7f80b03a4b00 main>>
    struct-function 0x7f80b03b70b0>
 <ssa_name 0x7f80b0862798
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03db120 ptr>
    def_stmt ptr_83 = cleanup_chain;
    version 83
    ptr-info 0x7f80b03e01f8>

dot graph START

======================================================================

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
        ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 38: if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 38dot graph target basicblock en1

dot graph stmt start if (my_cleanups_10 != ptr_83)
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
        ^
dot graph stmt end

if (my_cleanups_10 != ptr_83)

 ================== find cond branch ================= 
if (my_cleanups_10 != ptr_83)
Cond in fucntion main basic block 38
 ================== possiable direct basic block ================= 
from main basic block 35
 ================== possiable direct basic block ================= 
from main basic block 39
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

free (ptr_83);
common.h:112:4: warning: use location
    free (ptr);
    ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 37: free (ptr_83);
common.h:112:4: warning: use location
    free (ptr);
    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 37dot graph target basicblock en1

dot graph stmt start free (ptr_83);
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start free (ptr_83);
common.h:112:4: warning: use location
    free (ptr);
    ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (ptr_83);
common.h:112:4: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

_92 = ptr_83->arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 36: _92 = ptr_83->arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

dot graph stmt start _92 = ptr_83->arg;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _92 = ptr_83->arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_91 = ptr_83->free_arg;
common.h:110:6: warning: use location
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 36: _91 = ptr_83->free_arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

dot graph stmt start _91 = ptr_83->free_arg;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _91 = ptr_83->free_arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_90 = ptr_83->free_arg;
common.h:109:14: warning: use location
       if (ptr->free_arg)
              ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 35: _90 = ptr_83->free_arg;
common.h:109:14: warning: use location
       if (ptr->free_arg)
              ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _90 = ptr_83->free_arg;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _90 = ptr_83->free_arg;
common.h:109:14: warning: use location
       if (ptr->free_arg)
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_90 != 0B)
common.h:109:10: warning: use location
       if (ptr->free_arg)
          ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 35: if (_90 != 0B)
common.h:109:10: warning: use location
       if (ptr->free_arg)
          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start if (_90 != 0B)
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start if (_90 != 0B)
common.h:109:10: warning: use location
       if (ptr->free_arg)
          ^
dot graph stmt end

if (_90 != 0B)

 ================== find cond branch ================= 
if (_90 != 0B)
Cond in fucntion main basic block 35
 ================== possiable direct basic block ================= 
from main basic block 36
 ================== possiable direct basic block ================= 
from main basic block 37
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_88 = ptr_83->arg;
common.h:108:4: warning: use location
    printf("%x\n", ptr->arg);
    ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 35: _88 = ptr_83->arg;
common.h:108:4: warning: use location
    printf("%x\n", ptr->arg);
    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _88 = ptr_83->arg;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _88 = ptr_83->arg;
common.h:108:4: warning: use location
    printf("%x\n", ptr->arg);
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_89 = __printf_chk (1, "%x\n", _88);
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 35: _89 = __printf_chk (1, "%x\n", _88);
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _89 = __printf_chk (1, "%x\n", _88);
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _89 = __printf_chk (1, "%x\n", _88);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f80b0862798
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03db120 ptr>
    def_stmt ptr_83 = cleanup_chain;
    version 83
    ptr-info 0x7f80b03e01f8>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_86 = ptr_83->arg;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 35: _86 = ptr_83->arg;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _86 = ptr_83->arg;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _86 = ptr_83->arg;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 35: _85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _85 = ptr_83->function;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 35: _84 = ptr_83->next;
common.h:105:23: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _84 = ptr_83->next;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _84 = ptr_83->next;
common.h:105:23: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

cleanup_chain = _84;
common.h:105:18: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                  ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 35: cleanup_chain = _84;
common.h:105:18: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                  ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start cleanup_chain = _84;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start cleanup_chain = _84;
common.h:105:18: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 2: old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start old_chain_70 = cleanup_chain;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_104 = old_chain_70;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 4: _104 = old_chain_70;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _104 = old_chain_70;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _104 = old_chain_70;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_68 = _104;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 4: _68 = _104;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _68 = _104;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _68 = _104;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_105 = _68;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 4: _105 = _68;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _105 = _68;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _105 = _68;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_67 = _105;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 4: _67 = _105;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _67 = _105;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _67 = _105;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_106 = _67;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 4: _106 = _67;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _106 = _67;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _106 = _67;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

my_cleanups_10 = _106;
test.c:59:18: warning: use location
  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
                  ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 4: my_cleanups_10 = _106;
test.c:59:18: warning: use location
  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
                  ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start my_cleanups_10 = _106;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start my_cleanups_10 = _106;
test.c:59:18: warning: use location
  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (old_chain_70 == 0B)
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph stmt end

if (old_chain_70 == 0B)

 ================== find cond branch ================= 
if (old_chain_70 == 0B)
Cond in fucntion main basic block 2
 ================== possiable direct basic block ================= 
from main basic block 3
 ================== possiable direct basic block ================= 
from main basic block 4
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 2: _71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _71 = cleanup_chain;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 29: old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start old_chain_81 = cleanup_chain;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_115 = old_chain_81;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 31: _115 = old_chain_81;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _115 = old_chain_81;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _115 = old_chain_81;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_79 = _115;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 31: _79 = _115;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _79 = _115;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _79 = _115;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_116 = _79;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 31: _116 = _79;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _116 = _79;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _116 = _79;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_78 = _116;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 31: _78 = _116;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _78 = _116;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _78 = _116;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_117 = _78;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 31: _117 = _78;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _117 = _78;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _117 = _78;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc en1

dot graph target line desc form basic block 29: _82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_97>
_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start _82 = cleanup_chain;
_84 = ptr_83->next;
dot graph stmt end

dot graph stmt start _82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph stmt end

dot graph target basicblock start from main basic block 38dot graph target basicblock en1

dot graph arrowsubgraph cluster_402221428 dot graph subgraph  if (my_cleanups_10 != ptr_83)
ptr_83 = cleanup_chain;
dot graph subgrapend

 <ssa_name 0x7f80b0862798
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03db120 ptr>
    def_stmt ptr_83 = cleanup_chain;
    version 83
    ptr-info 0x7f80b03e01f8>

 ================== Start Use after free Check ================== 
# .MEM_124 = VDEF <.MEM_96>
free (ptr_83);
common.h:112:4: warning: Use after free error!: free location 
    free (ptr);
    ^
if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
 <function_decl 0x7f80b03a4b00 main
    type <function_type 0x7f80b03a37e0
        type <integer_type 0x7f80b086e5e8 int public SI
            size <integer_cst 0x7f80b085ae28 constant 32>
            unit size <integer_cst 0x7f80b085ae40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f80b086e5e8 precision 32 min <integer_cst 0x7f80b085ade0 -2147483648> max <integer_cst 0x7f80b085adf8 2147483647>
            pointer_to_this <pointer_type 0x7f80b0875a80>>
        QI
        size <integer_cst 0x7f80b085acd8 constant 8>
        unit size <integer_cst 0x7f80b085acf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 146 col 5 align 8 context <translation_unit_decl 0x7f80b0865168 test.c> initial <block 0x7f80b03b6060>
    result <result_decl 0x7f80b0865258 D.4023 type <integer_type 0x7f80b086e5e8 int>
        ignored SI file test.c line 146 col 5 size <integer_cst 0x7f80b085ae28 32> unit size <integer_cst 0x7f80b085ae40 4>
        align 32 context <function_decl 0x7f80b03a4b00 main>>
    struct-function 0x7f80b03b70b0>
 <ssa_name 0x7f80b0862798
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03db120 ptr>
    def_stmt ptr_83 = cleanup_chain;
    version 83
    ptr-info 0x7f80b03e01f8>

dot graph START

======================================================================

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 38: if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
        ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 38dot graph target basicblock en1

dot graph stmt start if (my_cleanups_10 != ptr_83)
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
        ^
dot graph stmt end

if (my_cleanups_10 != ptr_83)

 ================== find cond branch ================= 
if (my_cleanups_10 != ptr_83)
Cond in fucntion main basic block 38
 ================== possiable direct basic block ================= 
from main basic block 35
 ================== possiable direct basic block ================= 
from main basic block 39
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

free (ptr_83);
common.h:112:4: warning: use location
    free (ptr);
    ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 37: free (ptr_83);
common.h:112:4: warning: use location
    free (ptr);
    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 37dot graph target basicblock en1

dot graph stmt start free (ptr_83);
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start free (ptr_83);
common.h:112:4: warning: use location
    free (ptr);
    ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (ptr_83);
common.h:112:4: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

_92 = ptr_83->arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 36: _92 = ptr_83->arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

dot graph stmt start _92 = ptr_83->arg;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _92 = ptr_83->arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_91 = ptr_83->free_arg;
common.h:110:6: warning: use location
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 36: _91 = ptr_83->free_arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

dot graph stmt start _91 = ptr_83->free_arg;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _91 = ptr_83->free_arg;
common.h:110:6: warning: use location
     (*ptr->free_arg) (ptr->arg);
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_90 = ptr_83->free_arg;
common.h:109:14: warning: use location
       if (ptr->free_arg)
              ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 35: _90 = ptr_83->free_arg;
common.h:109:14: warning: use location
       if (ptr->free_arg)
              ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _90 = ptr_83->free_arg;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _90 = ptr_83->free_arg;
common.h:109:14: warning: use location
       if (ptr->free_arg)
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_90 != 0B)
common.h:109:10: warning: use location
       if (ptr->free_arg)
          ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 35: if (_90 != 0B)
common.h:109:10: warning: use location
       if (ptr->free_arg)
          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start if (_90 != 0B)
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start if (_90 != 0B)
common.h:109:10: warning: use location
       if (ptr->free_arg)
          ^
dot graph stmt end

if (_90 != 0B)

 ================== find cond branch ================= 
if (_90 != 0B)
Cond in fucntion main basic block 35
 ================== possiable direct basic block ================= 
from main basic block 36
 ================== possiable direct basic block ================= 
from main basic block 37
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_88 = ptr_83->arg;
common.h:108:4: warning: use location
    printf("%x\n", ptr->arg);
    ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 35: _88 = ptr_83->arg;
common.h:108:4: warning: use location
    printf("%x\n", ptr->arg);
    ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _88 = ptr_83->arg;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _88 = ptr_83->arg;
common.h:108:4: warning: use location
    printf("%x\n", ptr->arg);
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_89 = __printf_chk (1, "%x\n", _88);
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 35: _89 = __printf_chk (1, "%x\n", _88);
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _89 = __printf_chk (1, "%x\n", _88);
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _89 = __printf_chk (1, "%x\n", _88);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f80b0862798
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03db120 ptr>
    def_stmt ptr_83 = cleanup_chain;
    version 83
    ptr-info 0x7f80b03e01f8>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_86 = ptr_83->arg;
common.h:106:8: warning: use location
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 35: _86 = ptr_83->arg;
common.h:106:8: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _86 = ptr_83->arg;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _86 = ptr_83->arg;
common.h:106:8: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 35: _85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _85 = ptr_83->function;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 35: _84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _84 = ptr_83->next;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _84 = ptr_83->next;
common.h:105:23: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

cleanup_chain = _84;
common.h:105:18: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                  ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 35: cleanup_chain = _84;
common.h:105:18: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                  ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start cleanup_chain = _84;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start cleanup_chain = _84;
common.h:105:18: warning: use location
       *pmy_chain = ptr->next; /* Do this first in case of recursion.  */
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start old_chain_70 = cleanup_chain;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start old_chain_70 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_104 = old_chain_70;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 4: _104 = old_chain_70;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _104 = old_chain_70;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _104 = old_chain_70;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_68 = _104;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 4: _68 = _104;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _68 = _104;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _68 = _104;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_105 = _68;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 4: _105 = _68;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _105 = _68;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _105 = _68;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_67 = _105;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 4: _67 = _105;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _67 = _105;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _67 = _105;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_106 = _67;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 4: _106 = _67;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _106 = _67;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _106 = _67;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

my_cleanups_10 = _106;
test.c:59:18: warning: use location
  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
                  ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 4: my_cleanups_10 = _106;
test.c:59:18: warning: use location
  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
                  ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start my_cleanups_10 = _106;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start my_cleanups_10 = _106;
test.c:59:18: warning: use location
  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (old_chain_70 == 0B)
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start if (old_chain_70 == 0B)
common.h:135:5: warning: use location
  if (old_chain == NULL)
     ^
dot graph stmt end

if (old_chain_70 == 0B)

 ================== find cond branch ================= 
if (old_chain_70 == 0B)
Cond in fucntion main basic block 2
 ================== possiable direct basic block ================= 
from main basic block 3
 ================== possiable direct basic block ================= 
from main basic block 4
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _71 = cleanup_chain;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _71 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 29: old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start old_chain_81 = cleanup_chain;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start old_chain_81 = cleanup_chain;
common.h:127:19: warning: use location
   struct cleanup *old_chain = *pmy_chain;
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_115 = old_chain_81;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 31: _115 = old_chain_81;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _115 = old_chain_81;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _115 = old_chain_81;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_79 = _115;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 31: _79 = _115;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _79 = _115;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _79 = _115;
common.h:145:10: warning: use location
   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_116 = _79;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 31: _116 = _79;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _116 = _79;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _116 = _79;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_78 = _116;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 31: _78 = _116;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _78 = _116;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _78 = _116;
common.h:151:10: warning: use location
   return make_my_cleanup (&cleanup_chain, function, arg);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_117 = _78;
lto1: warning: use location
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 31: _117 = _78;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _117 = _78;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _117 = _78;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc en1

dot graph target line desc form basic block 29: _82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph target line desend

dot graph target loc start # VUSE <.MEM_119>
_85 = ptr_83->function;
common.h:106:8: warning: use location
       (*ptr->function) (ptr->arg);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start _82 = cleanup_chain;
_85 = ptr_83->function;
dot graph stmt end

dot graph stmt start _82 = cleanup_chain;
common.h:129:15: warning: use location
   new->next = *pmy_chain;
               ^
dot graph stmt end

dot graph target basicblock start from main basic block 38dot graph target basicblock en1

dot graph arrowsubgraph cluster_1646794702 dot graph subgraph  if (my_cleanups_10 != ptr_83)
ptr_83 = cleanup_chain;
dot graph subgrapend

 <ssa_name 0x7f80b0862798
    type <pointer_type 0x7f80b03a3c78
        type <record_type 0x7f80b03a3d20 cleanup BLK
            size <integer_cst 0x7f80b085af48 constant 256>
            unit size <integer_cst 0x7f80b0876048 constant 32>
            align 64 symtab 0 alias set -1 canonical type 0x7f80b03a3d20 fields <field_decl 0x7f80b03a5390 next> context <translation_unit_decl 0x7f80b0865168 test.c>
            pointer_to_this <pointer_type 0x7f80b03a3c78> chain <type_decl 0x7f80b03a5428 D.3994>>
        public unsigned DI
        size <integer_cst 0x7f80b085abe8 constant 64>
        unit size <integer_cst 0x7f80b085ac00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f80b03a3e70>>
    var <var_decl 0x7f80b03db120 ptr>
    def_stmt ptr_83 = cleanup_chain;
    version 83
    ptr-info 0x7f80b03e01f8>

 ================== Start Use after free Check ================== 
# .MEM_124 = VDEF <.MEM_96>
free (ptr_83);
common.h:112:4: warning: Use after free error!: free location 
    free (ptr);
    ^
if (my_cleanups_10 != ptr_83)
common.h:103:8: warning: use location
  while ((ptr = *pmy_chain) != old_chain)
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 9
 [0m
[40;34m    used_stmt array stack totalsize of : 1032
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
algorithm time: 0.026246 s
=======Mapping node_fun:null_cleanup=========
<bb 2> [100.00%]:
return;

=======is loop:0=========
=======Mapping node_fun:main=========
<bb 2> [7.51%]:
args[0] = "prog";
args[1] = "v";
args[2] = "-s";
args[3] = "idx";
args[4] = "addr";
args[5] = 0B;
new_69 = malloc (32);
old_chain_70 = cleanup_chain;
_71 = cleanup_chain;
new_69->next = _71;
new_69->function = null_cleanup;
new_69->free_arg = 0B;
new_69->arg = 0B;
cleanup_chain = new_69;
if (old_chain_70 == 0B)
  goto <bb 3>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========
<bb 3> [0.00%]:
exit (1);

=======is loop:0=========
<bb 4> [7.51%]:
_104 = old_chain_70;
_68 = _104;
_105 = _68;
_67 = _105;
_106 = _67;
my_cleanups_10 = _106;
sect_opts_11 = malloc (64);
arg_12 = MEM[(char * *)&args];
goto <bb 26>; [100.00%]

=======is loop:0=========
<bb 5> [92.50%]:
if (argcnt_13 == 0)
  goto <bb 6>; [33.00%]
else
  goto <bb 7>; [67.00%]

=======is loop:1=========
<bb 6> [30.52%]:
// predicted unlikely by continue predictor.
goto <bb 25>; [100.00%]

=======is loop:1=========
<bb 7> [61.98%]:
if (argcnt_13 == 1)
  goto <bb 8>; [34.00%]
else
  goto <bb 14>; [66.00%]

=======is loop:1=========
<bb 8> [21.07%]:
_15 = (long unsigned int) section_index_14;
_16 = _15 * 16;
_18 = sect_opts_17 + _16;
_18->name = ".text";
_19 = (long unsigned int) section_index_14;
_20 = _19 * 16;
_21 = sect_opts_17 + _20;
_21->value = arg_22;
section_index_23 = section_index_14 + 1;
_24 = (long unsigned int) section_index_23;
if (_24 >= num_sect_opts_25)
  goto <bb 9>; [33.00%]
else
  goto <bb 25>; [67.00%]

=======is loop:1=========
<bb 9> [6.95%]:
num_sect_opts_26 = num_sect_opts_25 * 2;
_27 = num_sect_opts_26 * 16;
if (_27 == 0)
  goto <bb 10>; [50.00%]
else
  goto <bb 11>; [50.00%]

=======is loop:1=========
<bb 10> [3.48%]:

=======is loop:1=========
<bb 11> [6.95%]:
# size_72 = PHI <_27(9), 1(10)>
newmem_73 = realloc (sect_opts_17, size_72);
if (newmem_73 == 0B)
  goto <bb 12>; [0.04%]
else
  goto <bb 13>; [99.96%]

=======is loop:1=========
<bb 12> [0.00%]:
exit (1);

=======is loop:0=========
<bb 13> [6.95%]:
_74 = newmem_73;
_137 = newmem_73;
sect_opts_28 = _137;
goto <bb 25>; [100.00%]

=======is loop:1=========
<bb 14> [40.90%]:
if (expecting_sec_name_29 != 0)
  goto <bb 15>; [50.00%]
else
  goto <bb 16>; [50.00%]

=======is loop:1=========
<bb 15> [20.45%]:
_30 = (long unsigned int) section_index_14;
_31 = _30 * 16;
_32 = sect_opts_17 + _31;
_32->value = arg_22;
goto <bb 25>; [100.00%]

=======is loop:1=========
<bb 16> [20.45%]:
if (expecting_sec_addr_33 != 0)
  goto <bb 17>; [50.00%]
else
  goto <bb 23>; [50.00%]

=======is loop:1=========
<bb 17> [10.23%]:
_34 = (long unsigned int) section_index_14;
_35 = _34 * 16;
_36 = sect_opts_17 + _35;
_36->value = arg_22;
section_index_37 = section_index_14 + 1;
_38 = (long unsigned int) section_index_37;
if (num_sect_opts_25 <= _38)
  goto <bb 18>; [33.00%]
else
  goto <bb 25>; [67.00%]

=======is loop:1=========
<bb 18> [3.37%]:
num_sect_opts_39 = num_sect_opts_25 * 2;
_40 = num_sect_opts_39 * 16;
if (_40 == 0)
  goto <bb 19>; [50.00%]
else
  goto <bb 20>; [50.00%]

=======is loop:1=========
<bb 19> [1.69%]:

=======is loop:1=========
<bb 20> [3.37%]:
# size_75 = PHI <_40(18), 1(19)>
newmem_76 = realloc (sect_opts_17, size_75);
if (newmem_76 == 0B)
  goto <bb 21>; [0.04%]
else
  goto <bb 22>; [99.96%]

=======is loop:1=========
<bb 21> [0.00%]:
exit (1);

=======is loop:0=========
<bb 22> [3.37%]:
_77 = newmem_76;
_131 = newmem_76;
sect_opts_41 = _131;
goto <bb 25>; [100.00%]

=======is loop:1=========
<bb 23> [10.23%]:
_42 = strcmp (arg_22, "-s");
if (_42 == 0)
  goto <bb 25>; [99.96%]
else
  goto <bb 24>; [0.04%]

=======is loop:1=========
<bb 24> [0.00%]:
exit (1);

=======is loop:0=========
<bb 25> [92.49%]:
# section_index_62 = PHI <section_index_14(6), section_index_23(8), section_index_23(13), section_index_14(15), section_index_37(17), section_index_37(22), section_index_14(23)>
# expecting_sec_addr_63 = PHI <expecting_sec_addr_33(6), expecting_sec_addr_33(8), expecting_sec_addr_33(13), 0(15), 0(17), 0(22), 1(23)>
# expecting_sec_name_64 = PHI <expecting_sec_name_29(6), expecting_sec_name_29(8), expecting_sec_name_29(13), expecting_sec_name_29(15), expecting_sec_name_29(17), expecting_sec_name_29(22), 1(23)>
# sect_opts_65 = PHI <sect_opts_17(6), sect_opts_17(8), sect_opts_28(13), sect_opts_17(15), sect_opts_17(17), sect_opts_41(22), sect_opts_17(23)>
# num_sect_opts_66 = PHI <num_sect_opts_25(6), num_sect_opts_25(8), num_sect_opts_26(13), num_sect_opts_25(15), num_sect_opts_25(17), num_sect_opts_39(22), num_sect_opts_25(23)>
argcnt_43 = argcnt_13 + 1;
_44 = (long unsigned int) argcnt_43;
_45 = _44 * 8;
_46 = &args + _45;
arg_47 = *_46;

=======is loop:1=========
<bb 26> [100.00%]:
# section_index_14 = PHI <0(4), section_index_62(25)>
# arg_22 = PHI <arg_12(4), arg_47(25)>
# expecting_sec_addr_33 = PHI <0(4), expecting_sec_addr_63(25)>
# expecting_sec_name_29 = PHI <0(4), expecting_sec_name_64(25)>
# argcnt_13 = PHI <0(4), argcnt_43(25)>
# sect_opts_17 = PHI <sect_opts_11(4), sect_opts_65(25)>
# num_sect_opts_25 = PHI <4(4), num_sect_opts_66(25)>
if (arg_22 != 0B)
  goto <bb 5>; [92.50%]
else
  goto <bb 27>; [7.50%]

=======is loop:1=========
<bb 27> [7.50%]:
if (section_index_14 <= 0)
  goto <bb 28>; [0.04%]
else
  goto <bb 29>; [99.96%]

=======is loop:0=========
<bb 28> [0.00%]:
exit (1);

=======is loop:0=========
<bb 29> [7.50%]:
section_addrs_48 = malloc (24);
new_80 = malloc (32);
old_chain_81 = cleanup_chain;
_82 = cleanup_chain;
new_80->next = _82;
new_80->function = free;
new_80->free_arg = 0B;
new_80->arg = section_addrs_48;
cleanup_chain = new_80;
if (old_chain_81 == 0B)
  goto <bb 30>; [0.04%]
else
  goto <bb 31>; [99.96%]

=======is loop:0=========
<bb 30> [0.00%]:
exit (1);

=======is loop:0=========
<bb 31> [7.49%]:
_115 = old_chain_81;
_79 = _115;
_116 = _79;
_78 = _116;
_117 = _78;
goto <bb 33>; [100.00%]

=======is loop:0=========
<bb 32> [42.47%]:
_50 = (long unsigned int) i_49;
_51 = _50 * 16;
_52 = sect_opts_17 + _51;
val_53 = _52->value;
_54 = (long unsigned int) i_49;
_55 = _54 * 16;
_56 = sect_opts_17 + _55;
sec_57 = _56->name;
section_addrs_48->other[sec_num_58].name = sec_57;
sec_num_59 = sec_num_58 + 1;
i_60 = i_49 + 1;

=======is loop:1=========
<bb 33> [49.96%]:
# sec_num_58 = PHI <0(31), sec_num_59(32)>
# i_49 = PHI <0(31), i_60(32)>
if (section_index_14 > i_49)
  goto <bb 32>; [85.00%]
else
  goto <bb 34>; [15.00%]

=======is loop:1=========
<bb 34> [7.49%]:
_61 = (long unsigned int) sec_num_58;
section_addrs_48->num_sections = _61;
goto <bb 38>; [100.00%]

=======is loop:0=========
<bb 35> [42.47%]:
_84 = ptr_83->next;
cleanup_chain = _84;
_85 = ptr_83->function;
_86 = ptr_83->arg;
_85 (_86);
_87 = __printf_chk (1, "cleanup!!!!! =========\n");
_88 = ptr_83->arg;
_89 = __printf_chk (1, "%x\n", _88);
_90 = ptr_83->free_arg;
if (_90 != 0B)
  goto <bb 36>; [93.48%]
else
  goto <bb 37>; [6.52%]

=======is loop:1=========
<bb 36> [39.70%]:
_91 = ptr_83->free_arg;
_92 = ptr_83->arg;
_91 (_92);

=======is loop:1=========
<bb 37> [42.47%]:
free (ptr_83);

=======is loop:1=========
<bb 38> [49.96%]:
ptr_83 = cleanup_chain;
if (my_cleanups_10 != ptr_83)
  goto <bb 35>; [85.00%]
else
  goto <bb 39>; [15.00%]

=======is loop:1=========
<bb 39> [7.49%]:
args ={v} {CLOBBER};
return 0;

=======is loop:0=========
time: 0.096835 s
