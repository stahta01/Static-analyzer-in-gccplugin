test.c: In function ‚Äòfoo3‚Äô:
test.c:53:6: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
   *z = malloc(1);
      ^
test.c:58:11: warning: format ‚Äò%d‚Äô expects argument of type ‚Äòint‚Äô, but argument 2 has type ‚Äòint *‚Äô [-Wformat=]
  printf("%d", p2);
          ~^
          %ls
test.c: In function ‚Äòfoo4‚Äô:
test.c:102:5: warning: assignment from incompatible pointer type [-Wincompatible-pointer-types]
  p2 = &b;
     ^
test.c: In function ‚Äòchild‚Äô:
test.c:168:7: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
  data = 10;
       ^
test.c:182:15: warning: passing argument 1 of ‚Äòpthread_exit‚Äô makes pointer from integer without a cast [-Wint-conversion]
  pthread_exit(test); // Èõ¢ÈñãÂ≠êÂü∑Ë°åÁ∑í
               ^~~~
In file included from test.c:3:0:
/usr/include/pthread.h:207:13: note: expected ‚Äòvoid *‚Äô but argument is of type ‚Äòint‚Äô
 extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));
             ^~~~~~~~~~~~
test.c: In function ‚Äòchild4‚Äô:
test.c:196:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c:197:14: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *test = &data;
              ^
test.c:216:16: warning: format ‚Äò%d‚Äô expects argument of type ‚Äòint‚Äô, but argument 2 has type ‚Äòint *‚Äô [-Wformat=]
  printf("asdda%d\n", pData);
               ~^
               %ls
test.c: In function ‚Äòchild3‚Äô:
test.c:230:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c:244:16: warning: format ‚Äò%d‚Äô expects argument of type ‚Äòint‚Äô, but argument 2 has type ‚Äòint *‚Äô [-Wformat=]
  printf("asdda%d\n", pData);
               ~^
               %ls
test.c: In function ‚Äòchild2‚Äô:
test.c:258:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c: In function ‚Äòmain‚Äô:
test.c:369:37: warning: passing argument 4 of ‚Äòpthread_create‚Äô makes pointer from integer without a cast [-Wint-conversion]
  pthread_create(&t, &attr2, child2, input2);
                                     ^~~~~~
In file included from test.c:3:0:
/usr/include/pthread.h:198:12: note: expected ‚Äòvoid * restrict‚Äô but argument is of type ‚Äòint‚Äô
 extern int pthread_create (pthread_t *__restrict __newthread,
            ^~~~~~~~~~~~~~
=======ipa_pta=========
 <ssa_name 0x7f91172fc3f0
    type <pointer_type 0x7f9117769a80
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        public unsigned DI
        size <integer_cst 0x7f911774ebe8 constant 64>
        unit size <integer_cst 0x7f911774ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f91172ea498>>
    var <var_decl 0x7f91172fe1b0 w>
    def_stmt w_10 = malloc (5);
    version 10
    ptr-info 0x7f911730e0c0>
In function ‚Äòtest22‚Äô:
test.c:309:7: warning: use location
  int *w = malloc(5);
       ^
 <ssa_name 0x7f91172fca68
    type <pointer_type 0x7f91172ea498
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
        unsigned DI size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f91172fe870 ppData>
    def_stmt ppData_18 = malloc (10);
    version 18
    ptr-info 0x7f911730e198>
In function ‚Äòchild‚Äô:
test.c:163:8: warning: use location
  int **ppData = malloc(10);
        ^
 <ssa_name 0x7f9117305dc8
    type <pointer_type 0x7f91172e9150
        type <record_type 0x7f91172e90a8 adresse TI
            size <integer_cst 0x7f911774ec30 constant 128>
            unit size <integer_cst 0x7f911774ec48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f91172e90a8 fields <field_decl 0x7f91172e8130 name> context <translation_unit_decl 0x7f9117759168 test.c>
            pointer_to_this <pointer_type 0x7f91172e9150> chain <type_decl 0x7f91172e81c8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f911774ebe8 constant 64>
        unit size <integer_cst 0x7f911774ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f91173066c0 a>
    def_stmt a_46 = malloc (32);
    version 46
    ptr-info 0x7f911730e2b8>
In function ‚Äòmain‚Äô:
test.c:327:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
 <ssa_name 0x7f9117305e58
    type <pointer_type 0x7f9117769a80
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        public unsigned DI
        size <integer_cst 0x7f911774ebe8 constant 64>
        unit size <integer_cst 0x7f911774ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f91172ea498>>
    var <var_decl 0x7f91173062d0 q>
    def_stmt q_57 = malloc (10);
    version 57
    ptr-info 0x7f911730e2d0>
test.c:380:7: warning: use location
  int *q = malloc(10);
       ^
 <ssa_name 0x7f9117305f78
    type <pointer_type 0x7f9117769a80
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        public unsigned DI
        size <integer_cst 0x7f911774ebe8 constant 64>
        unit size <integer_cst 0x7f911774ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f91172ea498>>
    var <var_decl 0x7f91173061b0 data>
    def_stmt data_64 = malloc (400);
    version 64
    ptr-info 0x7f911730e2e8>
test.c:404:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
 <ssa_name 0x7f911730a000
    type <pointer_type 0x7f9117769a80
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        public unsigned DI
        size <integer_cst 0x7f911774ebe8 constant 64>
        unit size <integer_cst 0x7f911774ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f91172ea498>>
    var <var_decl 0x7f9117306120 p4>
    def_stmt p4_71 = malloc (10);
    version 71
    ptr-info 0x7f911730e300>
test.c:418:7: warning: use location
  int *p4 = malloc(10);
       ^
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
=======print_function_var 389047280   1========
=======print_function_var 389047136   2========
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
=======================================================
=======node_fun: =========
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path child4  function_call count: 0 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:child4========= [0m
[40;42m =======start_check_funciton:child4========= [0m
[40;33m =======POP node_fun stack:child4========= [0m
[40;42m =======pre add _ fucntion:foo5========= [0m
[40;46m =======add node_fun stack:foo5========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path foo5  function_call count: 0 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:foo5========= [0m
[40;42m =======start_check_funciton:foo5========= [0m
[40;33m =======POP node_fun stack:foo5========= [0m
[40;42m =======pre add _ fucntion:child========= [0m
[40;46m =======add node_fun stack:child========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path child  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path boo  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path test22  function_call count: 0 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:test22========= [0m
[40;42m =======start_check_funciton:test22========= [0m
 <function_decl 0x7f91172dfe00 test22
    type <function_type 0x7f91172de930
        type <void_type 0x7f9117762f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91177690a8>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f91172dda78 value <pointer_type 0x7f9117769a80>
            chain <tree_list 0x7f9117761ac8 value <void_type 0x7f9117762f18 void>>>
        pointer_to_this <pointer_type 0x7f91172ea5e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 301 col 6 align 8 context <translation_unit_decl 0x7f9117759168 test.c> attributes <tree_list 0x7f91172dd9d8> initial <block 0x7f91172ee720>
    result <result_decl 0x7f9117759438 D.4050 type <void_type 0x7f9117762f18 void>
        ignored VOID file test.c line 301 col 6
        align 8 context <function_decl 0x7f91172dfe00 test22>>
    arguments <parm_decl 0x7f91172f0500 k
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
        unsigned DI file test.c line 301 col 18 size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 context <function_decl 0x7f91172dfe00 test22> arg-type <pointer_type 0x7f9117769a80>>
    struct-function 0x7f91172f42c0>

dot graph START

======================================================================
 <ssa_name 0x7f91172fc3f0
    type <pointer_type 0x7f9117769a80
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        public unsigned DI
        size <integer_cst 0x7f911774ebe8 constant 64>
        unit size <integer_cst 0x7f911774ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f91172ea498>>
    var <var_decl 0x7f91172fe1b0 w>
    def_stmt w_10 = malloc (5);
    version 10
    ptr-info 0x7f911730e0c0>
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry test22
dot graph target entry end

dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
w_10 = malloc (5);
test.c:309:7: warning: use location
  int *w = malloc(5);
       ^
dot graph target loc end

free (w_10);
test.c:310:2: warning: use location
  free(w);
  ^
dot graph target basicblock start from test22 basic block 2dot graph target basicblock end

dot graph stmt start free (w_10);
test.c:310:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (w_10);
test.c:310:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;32m   Maybe you don't have a memory leak.... more checks  [0m

======================================================================

[40;33m =======POP node_fun stack:test22========= [0m
[40;42m =======pre_check_funciton:boo========= [0m
[40;42m =======thread job funciton:boo========= [0m
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_20 = VDEF <.MEM_19(D)>
pthread_mutex_lock (&mLock);
test.c:159:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_21 = VDEF <.MEM_20>
pthread_mutex_lock (&mLock);
test.c:160:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_36 = VDEF <.MEM_35>
pthread_mutex_unlock (&mLock);
test.c:179:2: warning: use location
  pthread_mutex_unlock(&mLock);
  ^
[40;42m =======thread job funciton lock count :3========= [0m
[40;42m =======start_check_funciton:boo========= [0m
 <function_decl 0x7f91172dff00 boo
    type <function_type 0x7f91172de930
        type <void_type 0x7f9117762f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91177690a8>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f91172dda78 value <pointer_type 0x7f9117769a80>
            chain <tree_list 0x7f9117761ac8 value <void_type 0x7f9117762f18 void>>>
        pointer_to_this <pointer_type 0x7f91172ea5e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 285 col 6 align 8 context <translation_unit_decl 0x7f9117759168 test.c> attributes <tree_list 0x7f91172dd9d8> initial <block 0x7f91172ee600>
    result <result_decl 0x7f91177593c0 D.4047 type <void_type 0x7f9117762f18 void>
        ignored VOID file test.c line 285 col 6
        align 8 context <function_decl 0x7f91172dff00 boo>>
    arguments <parm_decl 0x7f91172f0480 b
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
        unsigned DI file test.c line 285 col 15 size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 context <function_decl 0x7f91172dff00 boo> arg-type <pointer_type 0x7f9117769a80>>
    struct-function 0x7f91172f4210>

dot graph START

======================================================================
 <ssa_name 0x7f91172fc168
    type <pointer_type 0x7f9117769a80
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        public unsigned DI
        size <integer_cst 0x7f911774ebe8 constant 64>
        unit size <integer_cst 0x7f911774ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f91172ea498>>
    var <parm_decl 0x7f91172f0480 b>
    def_stmt GIMPLE_NOP
    version 2
    ptr-info 0x7f911730e090>
this other function ------ê…√UHâÂHÉÏHâ}¯HâuHãMHãE¯∫-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry boo
dot graph target entry end

dot graph target loc start # .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:289:2: warning: use location
  test22(b);
  ^
dot graph target loc end

test22 (b_2(D));
test.c:289:2: warning: use location
dot graph target basicblock start from boo basic block 2dot graph target basicblock end

dot graph stmt start test22 (b_2(D));
test.c:289:2: warning: use location
dot graph stmt end

this stmt is child function---test22-----

 ================== trace ================== 
trace fucntion name:test22 
[40;44m =======trace_function_path test22  function_call count: 0 level :0========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
test.c:303:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:304:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:305:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:306:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:307:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:308:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
test.c:310:2: warning: use location
  free(w);
  ^
tx1
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with b ========= [0m
[40;36m ======= relate stmt argument:b ========= [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
# .MEM_18 = VDEF <.MEM_17>
w_10 = malloc (5);
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
# VUSE <.MEM_19>
return;
fucntion collect path finsh
[40;44m =======print_function_path test22  function_call count: 0 level :1========  [0m

 ================== trace ================== 
dot graph entry boo
dot graph target entry end

dot graph target loc start # .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:289:2: warning: use location
  test22(b);
  ^
dot graph target loc end

free (b_2(D));
test.c:288:2: warning: use location
  free(b);
  ^
dot graph target basicblock start from boo basic block 2dot graph target basicblock end

dot graph stmt start free (b_2(D));
test.c:288:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (b_2(D));
test.c:288:2: warning: use location
[40;32m    HAS FREE STMT count:8 name:free [0m

 ================== find ================== 
dot graph entry boo
dot graph target entry end

dot graph target loc start # .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:289:2: warning: use location
  test22(b);
  ^
dot graph target loc end

free (b_2(D));
test.c:287:2: warning: use location
  free(b);
  ^
dot graph target basicblock start from boo basic block 2dot graph target basicblock end

dot graph stmt start free (b_2(D));
test.c:287:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (b_2(D));
test.c:287:2: warning: use location
[40;32m    HAS FREE STMT count:9 name:free [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:288:2: warning: Use after free error!: free location
  free(b);
  ^
# .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:289:2: warning: use location
  test22(b);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
test.c:287:2: warning: Use after free error!: free location
  free(b);
  ^
# .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:289:2: warning: use location
  test22(b);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
test.c:287:2: warning: Use after free error!: free location
  free(b);
  ^
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:288:2: warning: use location
  free(b);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;31m  	possible double free :9 [0m

======================================================================
[40;42m =======pre_check_funciton:boo========= [0m
[40;42m =======start_check_funciton:boo========= [0m
 <function_decl 0x7f91172dff00 boo
    type <function_type 0x7f91172de930
        type <void_type 0x7f9117762f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91177690a8>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f91172dda78 value <pointer_type 0x7f9117769a80>
            chain <tree_list 0x7f9117761ac8 value <void_type 0x7f9117762f18 void>>>
        pointer_to_this <pointer_type 0x7f91172ea5e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 285 col 6 align 8 context <translation_unit_decl 0x7f9117759168 test.c> attributes <tree_list 0x7f91172dd9d8> initial <block 0x7f91172ee600>
    result <result_decl 0x7f91177593c0 D.4047 type <void_type 0x7f9117762f18 void>
        ignored VOID file test.c line 285 col 6
        align 8 context <function_decl 0x7f91172dff00 boo>>
    arguments <parm_decl 0x7f91172f0480 b
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
        unsigned DI file test.c line 285 col 15 size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 context <function_decl 0x7f91172dff00 boo> arg-type <pointer_type 0x7f9117769a80>>
    struct-function 0x7f91172f4210>

dot graph START

======================================================================
 <ssa_name 0x7f91172fc168
    type <pointer_type 0x7f9117769a80
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        public unsigned DI
        size <integer_cst 0x7f911774ebe8 constant 64>
        unit size <integer_cst 0x7f911774ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f91172ea498>>
    var <parm_decl 0x7f91172f0480 b>
    def_stmt GIMPLE_NOP
    version 2
    ptr-info 0x7f911730e090>
this other function ------free-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry boo
dot graph target entry end

dot graph target loc start # .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:289:2: warning: use location
  test22(b);
  ^
dot graph target loc end

test22 (b_2(D));
test.c:289:2: warning: use location
dot graph target basicblock start from boo basic block 2dot graph target basicblock end

dot graph stmt start test22 (b_2(D));
test.c:289:2: warning: use location
dot graph stmt end

this stmt is child function---test22-----

 ================== trace ================== 
trace fucntion name:test22 
[40;44m =======trace_function_path test22  function_call count: 0 level :0========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
test.c:303:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:304:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:305:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:306:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:307:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:308:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
test.c:310:2: warning: use location
  free(w);
  ^
tx1
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with b ========= [0m
[40;36m ======= relate stmt argument:b ========= [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
# .MEM_18 = VDEF <.MEM_17>
w_10 = malloc (5);
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
# VUSE <.MEM_19>
return;
fucntion collect path finsh
[40;44m =======print_function_path test22  function_call count: 0 level :1========  [0m

 ================== trace ================== 
dot graph entry boo
dot graph target entry end

dot graph target loc start # .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:289:2: warning: use location
  test22(b);
  ^
dot graph target loc end

free (b_2(D));
test.c:288:2: warning: use location
  free(b);
  ^
dot graph target basicblock start from boo basic block 2dot graph target basicblock end

dot graph stmt start free (b_2(D));
test.c:288:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (b_2(D));
test.c:288:2: warning: use location
[40;32m    HAS FREE STMT count:8 name:free [0m

 ================== find ================== 
dot graph entry boo
dot graph target entry end

dot graph target loc start # .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:289:2: warning: use location
  test22(b);
  ^
dot graph target loc end

free (b_2(D));
test.c:287:2: warning: use location
  free(b);
  ^
dot graph target basicblock start from boo basic block 2dot graph target basicblock end

dot graph stmt start free (b_2(D));
test.c:287:2: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (b_2(D));
test.c:287:2: warning: use location
[40;32m    HAS FREE STMT count:9 name:free [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:288:2: warning: Use after free error!: free location
  free(b);
  ^
# .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:289:2: warning: use location
  test22(b);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
test.c:287:2: warning: Use after free error!: free location
  free(b);
  ^
# .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
test.c:289:2: warning: use location
  test22(b);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
test.c:287:2: warning: Use after free error!: free location
  free(b);
  ^
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:288:2: warning: use location
  free(b);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;31m  	possible double free :9 [0m

======================================================================
[40;33m =======POP node_fun stack:boo========= [0m
[40;42m =======pre_check_funciton:child========= [0m
[40;42m =======thread job funciton:child========= [0m
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_20 = VDEF <.MEM_19(D)>
pthread_mutex_lock (&mLock);
test.c:159:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_21 = VDEF <.MEM_20>
pthread_mutex_lock (&mLock);
test.c:160:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_36 = VDEF <.MEM_35>
pthread_mutex_unlock (&mLock);
test.c:179:2: warning: use location
  pthread_mutex_unlock(&mLock);
  ^
[40;42m =======thread job funciton lock count :3========= [0m
[40;42m =======start_check_funciton:child========= [0m
 <function_decl 0x7f91172dfd00 child
    type <function_type 0x7f91172de888
        type <pointer_type 0x7f91177690a8 type <void_type 0x7f9117762f18 void>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172de1f8>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f91172dda00 value <pointer_type 0x7f91177690a8>
            chain <tree_list 0x7f9117761ac8 value <void_type 0x7f9117762f18 void>>>
        pointer_to_this <pointer_type 0x7f91172de498>>
    addressable volatile nothrow static function-specific-target function-specific-opt QI file test.c line 133 col 7 align 8 context <translation_unit_decl 0x7f9117759168 test.c> attributes <tree_list 0x7f91172dd9d8> initial <block 0x7f91172ee780>
    result <result_decl 0x7f91177594b0 D.4054 type <pointer_type 0x7f91177690a8>
        unsigned ignored DI file test.c line 133 col 7 size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 context <function_decl 0x7f91172dfd00 child>>
    arguments <parm_decl 0x7f91172f0580 data type <pointer_type 0x7f91177690a8>
        unsigned DI file test.c line 133 col 19 size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 context <function_decl 0x7f91172dfd00 child> arg-type <pointer_type 0x7f91177690a8>>
    struct-function 0x7f91172f4370>

dot graph START

======================================================================
 <ssa_name 0x7f91172fca68
    type <pointer_type 0x7f91172ea498
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
        unsigned DI size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f91172fe870 ppData>
    def_stmt ppData_18 = malloc (10);
    version 18
    ptr-info 0x7f911730e198>
this Reserved word function ------malloc-----

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:163:8: warning: use location
  int **ppData = malloc(10);
        ^

======================================================================
 <function_decl 0x7f91172dfd00 child
    type <function_type 0x7f91172de888
        type <pointer_type 0x7f91177690a8 type <void_type 0x7f9117762f18 void>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172de1f8>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f91172dda00 value <pointer_type 0x7f91177690a8>
            chain <tree_list 0x7f9117761ac8 value <void_type 0x7f9117762f18 void>>>
        pointer_to_this <pointer_type 0x7f91172de498>>
    addressable volatile nothrow static function-specific-target function-specific-opt QI file test.c line 133 col 7 align 8 context <translation_unit_decl 0x7f9117759168 test.c> attributes <tree_list 0x7f91172dd9d8> initial <block 0x7f91172ee780>
    result <result_decl 0x7f91177594b0 D.4054 type <pointer_type 0x7f91177690a8>
        unsigned ignored DI file test.c line 133 col 7 size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 context <function_decl 0x7f91172dfd00 child>>
    arguments <parm_decl 0x7f91172f0580 data type <pointer_type 0x7f91177690a8>
        unsigned DI file test.c line 133 col 19 size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 context <function_decl 0x7f91172dfd00 child> arg-type <pointer_type 0x7f91177690a8>>
    struct-function 0x7f91172f4370>

dot graph START

======================================================================
 <integer_cst 0x7f91172e1e10 type <pointer_type 0x7f91177690a8> constant 10>
 <integer_cst 0x7f91172e1e10 type <pointer_type 0x7f91177690a8> constant 10>
this Reserved word function ------malloc-----

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:177:2: warning: use location
  boo(data);
  ^

======================================================================
[40;42m =======pre_check_funciton:child========= [0m
[40;42m =======start_check_funciton:child========= [0m
 <function_decl 0x7f91172dfd00 child
    type <function_type 0x7f91172de888
        type <pointer_type 0x7f91177690a8 type <void_type 0x7f9117762f18 void>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172de1f8>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f91172dda00 value <pointer_type 0x7f91177690a8>
            chain <tree_list 0x7f9117761ac8 value <void_type 0x7f9117762f18 void>>>
        pointer_to_this <pointer_type 0x7f91172de498>>
    addressable volatile nothrow static function-specific-target function-specific-opt QI file test.c line 133 col 7 align 8 context <translation_unit_decl 0x7f9117759168 test.c> attributes <tree_list 0x7f91172dd9d8> initial <block 0x7f91172ee780>
    result <result_decl 0x7f91177594b0 D.4054 type <pointer_type 0x7f91177690a8>
        unsigned ignored DI file test.c line 133 col 7 size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 context <function_decl 0x7f91172dfd00 child>>
    arguments <parm_decl 0x7f91172f0580 data type <pointer_type 0x7f91177690a8>
        unsigned DI file test.c line 133 col 19 size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 context <function_decl 0x7f91172dfd00 child> arg-type <pointer_type 0x7f91177690a8>>
    struct-function 0x7f91172f4370>

dot graph START

======================================================================
 <ssa_name 0x7f91172fca68
    type <pointer_type 0x7f91172ea498
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
        unsigned DI size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f91172fe870 ppData>
    def_stmt ppData_18 = malloc (10);
    version 18
    ptr-info 0x7f911730e198>
this Reserved word function ------malloc-----

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:163:8: warning: use location
  int **ppData = malloc(10);
        ^

======================================================================
 <function_decl 0x7f91172dfd00 child
    type <function_type 0x7f91172de888
        type <pointer_type 0x7f91177690a8 type <void_type 0x7f9117762f18 void>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172de1f8>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f91172dda00 value <pointer_type 0x7f91177690a8>
            chain <tree_list 0x7f9117761ac8 value <void_type 0x7f9117762f18 void>>>
        pointer_to_this <pointer_type 0x7f91172de498>>
    addressable volatile nothrow static function-specific-target function-specific-opt QI file test.c line 133 col 7 align 8 context <translation_unit_decl 0x7f9117759168 test.c> attributes <tree_list 0x7f91172dd9d8> initial <block 0x7f91172ee780>
    result <result_decl 0x7f91177594b0 D.4054 type <pointer_type 0x7f91177690a8>
        unsigned ignored DI file test.c line 133 col 7 size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 context <function_decl 0x7f91172dfd00 child>>
    arguments <parm_decl 0x7f91172f0580 data type <pointer_type 0x7f91177690a8>
        unsigned DI file test.c line 133 col 19 size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 context <function_decl 0x7f91172dfd00 child> arg-type <pointer_type 0x7f91177690a8>>
    struct-function 0x7f91172f4370>

dot graph START

======================================================================
 <integer_cst 0x7f91172e1e10 type <pointer_type 0x7f91177690a8> constant 10>
 <integer_cst 0x7f91172e1e10 type <pointer_type 0x7f91177690a8> constant 10>
this Reserved word function ------malloc-----

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:177:2: warning: use location
  boo(data);
  ^

======================================================================
[40;33m =======POP node_fun stack:child========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m
 <function_decl 0x7f91172dfb00 main
    type <function_type 0x7f91172de7e0
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 320 col 5 align 8 context <translation_unit_decl 0x7f9117759168 test.c> initial <block 0x7f91172ee840>
    result <result_decl 0x7f91177595a0 D.4063 type <integer_type 0x7f91177625e8 int>
        ignored SI file test.c line 320 col 5 size <integer_cst 0x7f911774ee28 32> unit size <integer_cst 0x7f911774ee40 4>
        align 32 context <function_decl 0x7f91172dfb00 main>>
    struct-function 0x7f91172f44d0>

dot graph START

======================================================================
 <ssa_name 0x7f9117305dc8
    type <pointer_type 0x7f91172e9150
        type <record_type 0x7f91172e90a8 adresse TI
            size <integer_cst 0x7f911774ec30 constant 128>
            unit size <integer_cst 0x7f911774ec48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f91172e90a8 fields <field_decl 0x7f91172e8130 name> context <translation_unit_decl 0x7f9117759168 test.c>
            pointer_to_this <pointer_type 0x7f91172e9150> chain <type_decl 0x7f91172e81c8 D.4033>>
        public unsigned DI
        size <integer_cst 0x7f911774ebe8 constant 64>
        unit size <integer_cst 0x7f911774ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f91173066c0 a>
    def_stmt a_46 = malloc (32);
    version 46
    ptr-info 0x7f911730e2b8>
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:327:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_17 = a_46 + _16;
test.c:337:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^
dot graph target basicblock start from main basic block 5dot graph target basicblock end

dot graph stmt start _17 = a_46 + _16;
test.c:337:23: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:327:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_18 = _17->name;
test.c:337:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target basicblock start from main basic block 5dot graph target basicblock end

dot graph stmt start _18 = _17->name;
test.c:337:3: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:327:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_40 = __printf_chk (1, "%s, %d\n", _18, _14);
dot graph target basicblock start from main basic block 5dot graph target basicblock end

dot graph stmt start _40 = __printf_chk (1, "%s, %d\n", _18, _14);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:327:18: warning: use location
dot graph target loc end

_13 = a_46 + _12;
test.c:337:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^
dot graph target basicblock start from main basic block 5dot graph target basicblock end

dot graph stmt start _13 = a_46 + _12;
test.c:337:34: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:327:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_14 = _13->nummer;
test.c:337:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target basicblock start from main basic block 5dot graph target basicblock end

dot graph stmt start _14 = _13->nummer;
test.c:337:3: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:327:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_9 = a_46 + _8;
test.c:332:4: warning: use location
   a[i].nummer = 123;
    ^
dot graph target basicblock start from main basic block 3dot graph target basicblock end

dot graph stmt start _9 = a_46 + _8;
test.c:332:4: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:327:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_9->nummer = 123;
test.c:332:15: warning: use location
   a[i].nummer = 123;
               ^
dot graph target basicblock start from main basic block 3dot graph target basicblock end

dot graph stmt start _9->nummer = 123;
test.c:332:15: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:327:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_6 = a_46 + _5;
test.c:331:4: warning: use location
   a[i].name = "Testname";
    ^
dot graph target basicblock start from main basic block 3dot graph target basicblock end

dot graph stmt start _6 = a_46 + _5;
test.c:331:4: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_96 = VDEF <.MEM_95(D)>
a_46 = malloc (32);
test.c:327:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

_6->name = "Testname";
test.c:331:13: warning: use location
   a[i].name = "Testname";
             ^
dot graph target basicblock start from main basic block 3dot graph target basicblock end

dot graph stmt start _6->name = "Testname";
test.c:331:13: warning: use location
dot graph stmt end


 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f91172dfb00 main
    type <function_type 0x7f91172de7e0
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 320 col 5 align 8 context <translation_unit_decl 0x7f9117759168 test.c> initial <block 0x7f91172ee840>
    result <result_decl 0x7f91177595a0 D.4063 type <integer_type 0x7f91177625e8 int>
        ignored SI file test.c line 320 col 5 size <integer_cst 0x7f911774ee28 32> unit size <integer_cst 0x7f911774ee40 4>
        align 32 context <function_decl 0x7f91172dfb00 main>>
    struct-function 0x7f91172f44d0>

dot graph START

======================================================================
 <ssa_name 0x7f9117305948
    type <integer_type 0x7f91177627e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f911774ebe8 constant 64>
        unit size <integer_cst 0x7f911774ec00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f9117762738 precision 64 min <integer_cst 0x7f911774eeb8 0> max <integer_cst 0x7f9117750500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f911776e9d8>>
   
    def_stmt _22 = t;
    version 22>
this other function ------__printf_chk-----
 
 Start is Pthread Job Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # VUSE <.MEM_103>
_22 = t;
test.c:371:2: warning: use location
  pthread_join(t, NULL);
  ^
dot graph target loc end

pthread_create (&t, &attr2, child2, _21);
test.c:369:2: warning: use location
  pthread_create(&t, &attr2, child2, input2);
  ^
dot graph target basicblock start from main basic block 7dot graph target basicblock end

dot graph stmt start pthread_create (&t, &attr2, child2, _21);
test.c:369:2: warning: use location
dot graph stmt end

this stmt is child function---pthread_create-----

 ================== find ================== 
pthread_create (&t, &attr2, child2, _21);
test.c:369:2: warning: use location
[40;32m    FIND PTHREAD_CREATED STMT  [0m

 ================== pre_pthread_detched ================== 

 ================== pre_pthread_detched end ================== 
[40;31m  wqeeeeeeeeeee 0  [0m
[40;44m =======trace_function_path main  function_call count: 3 level :-1========  [0m
[40;44m =======print_function_path main  function_call count: 3 level :-1========  [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 0 level :-1========  [0m
[40;44m =======print_function_path child4  function_call count: 0 level :-1========  [0m
[40;42m =======pre add _ fucntion:foo5========= [0m
[40;46m =======add node_fun stack:foo5========= [0m
[40;44m =======trace_function_path foo5  function_call count: 0 level :-1========  [0m
[40;44m =======print_function_path foo5  function_call count: 0 level :-1========  [0m
[40;42m =======pre add _ fucntion:child========= [0m
[40;46m =======add node_fun stack:child========= [0m
[40;44m =======trace_function_path child  function_call count: 1 level :-1========  [0m
[40;31m  find pthread_exit stmt  [0m
# .MEM_38 = VDEF <.MEM_37>
pthread_exit (100B);
test.c:182:2: warning: use location
  pthread_exit(test); // Èõ¢ÈñãÂ≠êÂü∑Ë°åÁ∑í
  ^
[40;44m =======print_function_path child  function_call count: 1 level :-1========  [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 1 level :-1========  [0m
[40;44m =======print_function_path boo  function_call count: 1 level :-1========  [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 0 level :-1========  [0m
[40;44m =======print_function_path test22  function_call count: 0 level :-1========  [0m

 ================== pre_pthread_detched ================== 
[40;44m =======trace_function_path child2  function_call count: 1 level :-1========  [0m
[40;44m =======print_function_path child2  function_call count: 1 level :-1========  [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 0 level :-1========  [0m
[40;44m =======print_function_path child3  function_call count: 0 level :-1========  [0m

 ================== pre_pthread_detched end ================== 
[40;44m =======trace_function_path child2  function_call count: 1 level :0========  [0m
tx1
[40;36m ======= node_fun:child2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
# VUSE <.MEM_8(D)>
_1 = data;
_21, points-to NULL, points-to vars: { }
tx
# VUSE <.MEM_8(D)>
_2 = MEM[(int *)_1];
_21, points-to NULL, points-to vars: { }
tx
_3 = _2 + 1;
_21, points-to NULL, points-to vars: { }
tx
[40;36m ======= relate node_fun argument:child2========= [0m
[40;36m ======= relate gimple_assign_lhs:í========= [0m
_3 = _2 + 1;
In function ‚Äòchild2‚Äô:
test.c:269:2: warning: use location
  ++(*(int *)data);
  ^

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_9 = VDEF <.MEM_8(D)>
MEM[(int *)_1] = _3;
_21, points-to NULL, points-to vars: { }
tx
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:û========= [0m
dot graph start relate form ID : 237758063
from child2 basic block 2dot graph end relate end

dot graph relate stmt start ID : 363502256 stmt(LHS) :MEM[(int *)_1] = _3;
test.c:269:2: warning: use location
MEM[(int *)_1]
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:child2========= [0m
[40;36m ======= relate gimple_assign_lhs:û========= [0m
# .MEM_9 = VDEF <.MEM_8(D)>
MEM[(int *)_1] = _3;
test.c:269:2: warning: use location

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_9>
_4 = MEM[(int *)&data];
_21, points-to NULL, points-to vars: { }
tx
_5 = _4 + 1;
_21, points-to NULL, points-to vars: { }
tx
[40;36m ======= relate node_fun argument:child2========= [0m
[40;36m ======= relate gimple_assign_lhs:í========= [0m
_5 = _4 + 1;
test.c:270:2: warning: use location
  ++(*(int *)pData);
  ^

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_10 = VDEF <.MEM_9>
MEM[(int *)&data] = _5;
_21, points-to NULL, points-to vars: { }
tx
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:û========= [0m
dot graph start relate form ID : 237758063
from child2 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1671075227 stmt(LHS) :MEM[(int *)&data] = _5;
test.c:270:2: warning: use location
  ++(*(int *)pData);
  ^
MEM[(int *)&data]
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:child2========= [0m
[40;36m ======= relate gimple_assign_lhs:û========= [0m
# .MEM_10 = VDEF <.MEM_9>
MEM[(int *)&data] = _5;
test.c:270:2: warning: use location

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_10>
_6 = data;
_21, points-to NULL, points-to vars: { }
tx
# .MEM_11 = VDEF <.MEM_10>
child3 (_6);
# VUSE <.MEM_11>
_7 = data;
_21, points-to NULL, points-to vars: { }
tx
# .MEM_12 = VDEF <.MEM_11>
free (_7);
# VUSE <.MEM_12>
return;
fucntion collect path finsh
[40;44m =======print_function_path child2  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 0 level :1========  [0m
tx1
[40;36m ======= node_fun:child3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
# VUSE <.MEM_6(D)>
_1 = data;
_21, points-to NULL, points-to vars: { }
tx
# .MEM_7 = VDEF <.MEM_6(D)>
free (_1);
# .MEM_8 = VDEF <.MEM_7>
_5 = __printf_chk (1, "asdda%d\n", &MEM[(void *)&data + 4B]);
# .MEM_9 = VDEF <.MEM_8>
_4 = __printf_chk (1, "asdda%d\n", 10);
# VUSE <.MEM_9>
return;
fucntion collect path finsh
[40;44m =======print_function_path child3  function_call count: 0 level :2========  [0m
[40;32m    FIND PTHREAD_CREATED TYPE is CREATE_JOINABLE  [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

dot graph target loc start # VUSE <.MEM_103>
_22 = t;
In function ‚Äòmain‚Äô:
test.c:371:2: warning: use location
  pthread_join(t, NULL);
  ^
dot graph target loc end

pthread_join (_22, 0B);
test.c:371:2: warning: use location
dot graph target basicblock start from main basic block 7dot graph target basicblock end

dot graph stmt start pthread_join (_22, 0B);
test.c:371:2: warning: use location
dot graph stmt end

this stmt is child function---pthread_join-----
[40;32m    FIND PTHREAD_JOIN [0m

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;32m    pthread is JOINABLE and no memory leak   [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f91172dfb00 main
    type <function_type 0x7f91172de7e0
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 320 col 5 align 8 context <translation_unit_decl 0x7f9117759168 test.c> initial <block 0x7f91172ee840>
    result <result_decl 0x7f91177595a0 D.4063 type <integer_type 0x7f91177625e8 int>
        ignored SI file test.c line 320 col 5 size <integer_cst 0x7f911774ee28 32> unit size <integer_cst 0x7f911774ee40 4>
        align 32 context <function_decl 0x7f91172dfb00 main>>
    struct-function 0x7f91172f44d0>

dot graph START

======================================================================
 <ssa_name 0x7f9117305990
    type <pointer_type 0x7f91172e72a0
        type <integer_type 0x7f91172de2a0 pthread_t unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 canonical type 0x7f9117762738 precision 64 min <integer_cst 0x7f911774eeb8 0> max <integer_cst 0x7f9117750500 18446744073709551615> context <translation_unit_decl 0x7f9117759168 test.c>
            pointer_to_this <pointer_type 0x7f91172e72a0>>
        unsigned DI size <integer_cst 0x7f911774ebe8 64> unit size <integer_cst 0x7f911774ec00 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _23 = &t2[i_34];
    version 23
    ptr-info 0x7f911730e288>
this other function ------pthread_join-----
 
 Start is Pthread Job Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_122 = VDEF <.MEM_91>
err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:376:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

_24 = t2[i_34];
test.c:378:3: warning: use location
   printf("%ld\n", t2[i]);
   ^
dot graph target basicblock start from main basic block 8dot graph target basicblock end

dot graph stmt start _24 = t2[i_34];
test.c:378:3: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_122 = VDEF <.MEM_91>
err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:376:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

_62 = __printf_chk (1, "%ld\n", _24);
dot graph target basicblock start from main basic block 8dot graph target basicblock end

dot graph stmt start _62 = __printf_chk (1, "%ld\n", _24);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_122 = VDEF <.MEM_91>
err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:376:7: warning: use location
dot graph target loc end

_28 = t2[i_35];
test.c:397:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph target basicblock start from main basic block 13dot graph target basicblock end

dot graph stmt start _28 = t2[i_35];
test.c:397:3: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_122 = VDEF <.MEM_91>
err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:376:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

pthread_join (_28, 0B);
test.c:397:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph target basicblock start from main basic block 13dot graph target basicblock end

dot graph stmt start pthread_join (_28, 0B);
test.c:397:3: warning: use location
dot graph stmt end

this stmt is child function---pthread_join-----
[40;32m    FIND PTHREAD_JOIN [0m
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_122 = VDEF <.MEM_91>
err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:376:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:376:7: warning: use location
dot graph target basicblock start from main basic block 8dot graph target basicblock end

dot graph stmt start err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:376:7: warning: use location
dot graph stmt end

this stmt is child function---pthread_create-----

 ================== find ================== 
err_82 = pthread_create (_23, &attr2, child, 0B);
test.c:376:7: warning: use location
[40;32m    FIND PTHREAD_CREATED STMT  [0m

 ================== pre_pthread_detched ================== 
[40;44m =======trace_function_path child  function_call count: 1 level :-1========  [0m
[40;31m  find pthread_exit stmt  [0m
# .MEM_38 = VDEF <.MEM_37>
pthread_exit (100B);
test.c:182:2: warning: use location
  pthread_exit(test); // Èõ¢ÈñãÂ≠êÂü∑Ë°åÁ∑í
  ^
[40;44m =======print_function_path child  function_call count: 1 level :-1========  [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 1 level :-1========  [0m
[40;44m =======print_function_path boo  function_call count: 1 level :-1========  [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 0 level :-1========  [0m
[40;44m =======print_function_path test22  function_call count: 0 level :-1========  [0m

 ================== pre_pthread_detched end ================== 
[40;31m  wqeeeeeeeeeee 0  [0m
[40;44m =======trace_function_path child  function_call count: 1 level :0========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_32 = VDEF <.MEM_31>
free (_11);
test.c:175:2: warning: use location
  free(pData);
  ^
tx0
[40;44m =======print_function_path child  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 1 level :1========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
test.c:287:2: warning: use location
  free(b);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:288:2: warning: use location
  free(b);
  ^
tx0
[40;44m =======print_function_path boo  function_call count: 1 level :2========  [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 0 level :2========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
test.c:303:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:304:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:305:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:306:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:307:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:308:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
test.c:310:2: warning: use location
  free(w);
  ^
tx0
[40;44m =======print_function_path test22  function_call count: 0 level :3========  [0m
[40;32m    FIND PTHREAD_CREATED TYPE is CREATE_JOINABLE  [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;32m    pthread is JOINABLE and no memory leak   [0m

======================================================================

======================================================================
[40;31m  	possible double free :10 [0m

======================================================================
 <function_decl 0x7f91172dfb00 main
    type <function_type 0x7f91172de7e0
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 320 col 5 align 8 context <translation_unit_decl 0x7f9117759168 test.c> initial <block 0x7f91172ee840>
    result <result_decl 0x7f91177595a0 D.4063 type <integer_type 0x7f91177625e8 int>
        ignored SI file test.c line 320 col 5 size <integer_cst 0x7f911774ee28 32> unit size <integer_cst 0x7f911774ee40 4>
        align 32 context <function_decl 0x7f91172dfb00 main>>
    struct-function 0x7f91172f44d0>

dot graph START

======================================================================
 <ssa_name 0x7f9117305e58
    type <pointer_type 0x7f9117769a80
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        public unsigned DI
        size <integer_cst 0x7f911774ebe8 constant 64>
        unit size <integer_cst 0x7f911774ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f91172ea498>>
    var <var_decl 0x7f91173062d0 q>
    def_stmt q_57 = malloc (10);
    version 57
    ptr-info 0x7f911730e2d0>
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_105 = VDEF <.MEM_91>
q_57 = malloc (10);
test.c:380:7: warning: use location
  int *q = malloc(10);
       ^
dot graph target loc end

child (q_57);
test.c:385:3: warning: use location
   child(q);
   ^
dot graph target basicblock start from main basic block 11dot graph target basicblock end

dot graph stmt start child (q_57);
test.c:385:3: warning: use location
dot graph stmt end

this stmt is child function---child-----

 ================== trace ================== 
trace fucntion name:child 
[40;44m =======trace_function_path child  function_call count: 1 level :0========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_32 = VDEF <.MEM_31>
free (_11);
test.c:175:2: warning: use location
  free(pData);
  ^
tx1
[40;36m ======= node_fun:child========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
# .MEM_20 = VDEF <.MEM_19(D)>
pthread_mutex_lock (&mLock);
# .MEM_21 = VDEF <.MEM_20>
pthread_mutex_lock (&mLock);
# VUSE <.MEM_21>
_1 = MEM[(int *)data_15(D)];
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
_2 = _1 + 1;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument:child========= [0m
[40;36m ======= relate gimple_assign_lhs:í========= [0m
_2 = _1 + 1;
In function ‚Äòchild‚Äô:
test.c:161:3: warning: use location
   ++(*(int *)data);
   ^

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_22 = VDEF <.MEM_21>
MEM[(int *)data_15(D)] = _2;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:û========= [0m
dot graph start relate form ID : 1707268689
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 434919867 stmt(LHS) :MEM[(int *)data_15(D)] = _2;
test.c:161:3: warning: use location
MEM[(int *)data_15(D)]
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:child========= [0m
[40;36m ======= relate gimple_assign_lhs:û========= [0m
# .MEM_22 = VDEF <.MEM_21>
MEM[(int *)data_15(D)] = _2;
test.c:161:3: warning: use location

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_23 = VDEF <.MEM_22>
ppData_18 = malloc (10);
# .MEM_24 = VDEF <.MEM_23>
pData = data_15(D);
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument:child========= [0m
[40;36m ======= relate gimple_assign_lhs:#========= [0m
# .MEM_24 = VDEF <.MEM_23>
pData = data_15(D);
test.c:164:7: warning: use location
  int *pData = data;
       ^

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_24>
_3 = pData;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:í========= [0m
dot graph start relate form ID : 1707268689
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 535183991 stmt(LHS) :_3 = pData;
test.c:165:9: warning: use location
  *pData += 1;
         ^
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_24>
_4 = *_3;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
# VUSE <.MEM_24>
_5 = pData;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:í========= [0m
dot graph start relate form ID : 1707268689
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1218979163 stmt(LHS) :_5 = pData;
test.c:165:9: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
_6 = _4 + 1;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument:child========= [0m
[40;36m ======= relate gimple_assign_lhs:í========= [0m
_6 = _4 + 1;
test.c:165:9: warning: use location

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_25 = VDEF <.MEM_24>
*_5 = _6;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:û========= [0m
dot graph start relate form ID : 1707268689
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1642593015 stmt(LHS) :*_5 = _6;
test.c:165:9: warning: use location
*_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:child========= [0m
[40;36m ======= relate gimple_assign_lhs:û========= [0m
# .MEM_25 = VDEF <.MEM_24>
*_5 = _6;
test.c:165:9: warning: use location

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_26 = VDEF <.MEM_25>
data2 = 0;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
# .MEM_27 = VDEF <.MEM_26>
pData = &data2;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
# VUSE <.MEM_27>
_7 = pData;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:í========= [0m
dot graph start relate form ID : 1707268689
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1109698766 stmt(LHS) :_7 = pData;
test.c:171:9: warning: use location
  *ppData[0] = 10;
         ^
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_28 = VDEF <.MEM_27>
*_7 = 10;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
 <mem_ref 0x7f91172fa6e0
    type <integer_type 0x7f91177625e8 int public SI
        size <integer_cst 0x7f911774ee28 constant 32>
        unit size <integer_cst 0x7f911774ee40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
        pointer_to_this <pointer_type 0x7f9117769a80>>
   
    arg 0 <ssa_name 0x7f91172fc8b8
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
       
        def_stmt _7 = pData;
        version 7
        ptr-info 0x7f911730e108>
    arg 1 <integer_cst 0x7f91172e1d20 type <pointer_type 0x7f9117769a80> constant 0>
    test.c:171:2 start: test.c:171:2 finish: test.c:171:2>
 <mem_ref 0x7f91172fa6e0
    type <integer_type 0x7f91177625e8 int public SI
        size <integer_cst 0x7f911774ee28 constant 32>
        unit size <integer_cst 0x7f911774ee40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
        pointer_to_this <pointer_type 0x7f9117769a80>>
   
    arg 0 <ssa_name 0x7f91172fc8b8
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
       
        def_stmt _7 = pData;
        version 7
        ptr-info 0x7f911730e108>
    arg 1 <integer_cst 0x7f91172e1d20 type <pointer_type 0x7f9117769a80> constant 0>
    test.c:171:2 start: test.c:171:2 finish: test.c:171:2>
# VUSE <.MEM_28>
_8 = MEM[(int * *)&pData + 8B];
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:í========= [0m
dot graph start relate form ID : 1707268689
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 524374511 stmt(LHS) :_8 = MEM[(int * *)&pData + 8B];
test.c:172:9: warning: use location
  *ppData[1] = 10;
         ^
_8
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_29 = VDEF <.MEM_28>
*_8 = 10;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
 <mem_ref 0x7f91172fa730
    type <integer_type 0x7f91177625e8 int public SI
        size <integer_cst 0x7f911774ee28 constant 32>
        unit size <integer_cst 0x7f911774ee40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
        pointer_to_this <pointer_type 0x7f9117769a80>>
   
    arg 0 <ssa_name 0x7f91172fc900
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
       
        def_stmt _8 = MEM[(int * *)&pData + 8B];
        version 8
        ptr-info 0x7f911730e120>
    arg 1 <integer_cst 0x7f91172e1d20 type <pointer_type 0x7f9117769a80> constant 0>
    test.c:172:2 start: test.c:172:2 finish: test.c:172:2>
 <mem_ref 0x7f91172fa730
    type <integer_type 0x7f91177625e8 int public SI
        size <integer_cst 0x7f911774ee28 constant 32>
        unit size <integer_cst 0x7f911774ee40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
        pointer_to_this <pointer_type 0x7f9117769a80>>
   
    arg 0 <ssa_name 0x7f91172fc900
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
       
        def_stmt _8 = MEM[(int * *)&pData + 8B];
        version 8
        ptr-info 0x7f911730e120>
    arg 1 <integer_cst 0x7f91172e1d20 type <pointer_type 0x7f9117769a80> constant 0>
    test.c:172:2 start: test.c:172:2 finish: test.c:172:2>
# VUSE <.MEM_29>
_9 = MEM[(int * *)&pData + 16B];
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:í========= [0m
dot graph start relate form ID : 1707268689
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1274911818 stmt(LHS) :_9 = MEM[(int * *)&pData + 16B];
test.c:173:9: warning: use location
  *ppData[2] = 10;
         ^
_9
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_30 = VDEF <.MEM_29>
*_9 = 10;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
 <mem_ref 0x7f91172fa780
    type <integer_type 0x7f91177625e8 int public SI
        size <integer_cst 0x7f911774ee28 constant 32>
        unit size <integer_cst 0x7f911774ee40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
        pointer_to_this <pointer_type 0x7f9117769a80>>
   
    arg 0 <ssa_name 0x7f91172fc948
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
       
        def_stmt _9 = MEM[(int * *)&pData + 16B];
        version 9
        ptr-info 0x7f911730e138>
    arg 1 <integer_cst 0x7f91172e1d20 type <pointer_type 0x7f9117769a80> constant 0>
    test.c:173:2 start: test.c:173:2 finish: test.c:173:2>
 <mem_ref 0x7f91172fa780
    type <integer_type 0x7f91177625e8 int public SI
        size <integer_cst 0x7f911774ee28 constant 32>
        unit size <integer_cst 0x7f911774ee40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
        pointer_to_this <pointer_type 0x7f9117769a80>>
   
    arg 0 <ssa_name 0x7f91172fc948
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
       
        def_stmt _9 = MEM[(int * *)&pData + 16B];
        version 9
        ptr-info 0x7f911730e138>
    arg 1 <integer_cst 0x7f91172e1d20 type <pointer_type 0x7f9117769a80> constant 0>
    test.c:173:2 start: test.c:173:2 finish: test.c:173:2>
# VUSE <.MEM_30>
_10 = pData;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:í========= [0m
dot graph start relate form ID : 1707268689
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1101901129 stmt(LHS) :_10 = pData;
test.c:174:3: warning: use location
  **ppData = 12;
   ^
_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_31 = VDEF <.MEM_30>
*_10 = 12;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
 <mem_ref 0x7f91172fa7a8
    type <integer_type 0x7f91177625e8 int public SI
        size <integer_cst 0x7f911774ee28 constant 32>
        unit size <integer_cst 0x7f911774ee40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
        pointer_to_this <pointer_type 0x7f9117769a80>>
   
    arg 0 <ssa_name 0x7f91172fc990
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
       
        def_stmt _10 = pData;
        version 10
        ptr-info 0x7f911730e150>
    arg 1 <integer_cst 0x7f91172e1d20 type <pointer_type 0x7f9117769a80> constant 0>
    test.c:174:2 start: test.c:174:2 finish: test.c:174:2>
 <mem_ref 0x7f91172fa7a8
    type <integer_type 0x7f91177625e8 int public SI
        size <integer_cst 0x7f911774ee28 constant 32>
        unit size <integer_cst 0x7f911774ee40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
        pointer_to_this <pointer_type 0x7f9117769a80>>
   
    arg 0 <ssa_name 0x7f91172fc990
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
       
        def_stmt _10 = pData;
        version 10
        ptr-info 0x7f911730e150>
    arg 1 <integer_cst 0x7f91172e1d20 type <pointer_type 0x7f9117769a80> constant 0>
    test.c:174:2 start: test.c:174:2 finish: test.c:174:2>
# VUSE <.MEM_31>
_11 = pData;
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:í========= [0m
dot graph start relate form ID : 1707268689
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1516846547 stmt(LHS) :_11 = pData;
test.c:175:2: warning: use location
  free(pData);
  ^
_11
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_32 = VDEF <.MEM_31>
free (_11);
# .MEM_33 = VDEF <.MEM_32>
free (10B);
# .MEM_34 = VDEF <.MEM_33>
boo (10B);
# .MEM_35 = VDEF <.MEM_34>
free (&pData);
# .MEM_36 = VDEF <.MEM_35>
pthread_mutex_unlock (&mLock);
# .MEM_37 = VDEF <.MEM_36>
free (&pData);
# .MEM_38 = VDEF <.MEM_37>
pthread_exit (100B);
# .MEM_38 = VDEF <.MEM_37>
pthread_exit (100B);
fucntion collect path finsh
[40;44m =======print_function_path child  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 1 level :1========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
In function ‚Äòmain‚Äô:
test.c:287:2: warning: use location
  free(b);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:288:2: warning: use location
  free(b);
  ^
tx1
[40;36m ======= node_fun:boo========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
# .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
# .MEM_11 = VDEF <.MEM_10>
_6 = __printf_chk (1, "asdda\n");
# VUSE <.MEM_11>
return;
fucntion collect path finsh
[40;44m =======print_function_path boo  function_call count: 1 level :2========  [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 0 level :2========  [0m
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
test.c:303:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:304:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:305:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:306:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:307:2: warning: use location
  free(k);
  ^
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:308:2: warning: use location
  free(k);
  ^
tx1
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
# .MEM_18 = VDEF <.MEM_17>
w_10 = malloc (5);
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
# VUSE <.MEM_19>
return;
fucntion collect path finsh
[40;44m =======print_function_path test22  function_call count: 0 level :3========  [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_105 = VDEF <.MEM_91>
q_57 = malloc (10);
test.c:380:7: warning: use location
  int *q = malloc(10);
       ^
dot graph target loc end

_31 = foo5 (q_57, q_57);
test.c:417:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target basicblock start from main basic block 21dot graph target basicblock end

dot graph stmt start _31 = foo5 (q_57, q_57);
test.c:417:2: warning: use location
dot graph stmt end

this stmt is child function---foo5-----

 ================== trace ================== 
trace fucntion name:foo5 
[40;44m =======trace_function_path foo5  function_call count: 0 level :0========  [0m
tx1
[40;36m ======= node_fun:foo5========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
# VUSE <.MEM_9(D)>
_1 = *z_4(D);
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
# .MEM_10 = VDEF <.MEM_9(D)>
_8 = __printf_chk (1, "test1%d\n", _1);
# VUSE <.MEM_10>
_2 = *y_5(D);
q_57, points-to NULL, points-to vars: { D.4086 } (nonlocal, escaped, escaped heap)
tx
# .MEM_11 = VDEF <.MEM_10>
_7 = __printf_chk (1, "test2%d\n", _2);
# .MEM_12 = VDEF <.MEM_11>
_6 = __printf_chk (1, "test3%d\n", 10);
# VUSE <.MEM_12>
return 10;
fucntion collect path finsh
[40;44m =======print_function_path foo5  function_call count: 0 level :1========  [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_105 = VDEF <.MEM_91>
q_57 = malloc (10);
test.c:380:7: warning: use location
  int *q = malloc(10);
       ^
dot graph target loc end

*q_57 = 20;
test.c:390:8: warning: use location
   q[0] = 20;
        ^
dot graph target basicblock start from main basic block 12dot graph target basicblock end

dot graph stmt start *q_57 = 20;
test.c:390:8: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_105 = VDEF <.MEM_91>
q_57 = malloc (10);
test.c:380:7: warning: use location
  int *q = malloc(10);
       ^
dot graph target loc end

_25 = q_57 != 0B;
test.c:382:9: warning: use location
  if ((q != NULL) && test)
         ^
dot graph target basicblock start from main basic block 10dot graph target basicblock end

dot graph stmt start _25 = q_57 != 0B;
test.c:382:9: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_105 = VDEF <.MEM_91>
q_57 = malloc (10);
test.c:380:7: warning: use location
  int *q = malloc(10);
       ^
dot graph target loc end

_27 = _25 & _26;
test.c:382:18: warning: use location
  if ((q != NULL) && test)
                  ^
dot graph target basicblock start from main basic block 10dot graph target basicblock end

dot graph stmt start _27 = _25 & _26;
test.c:382:18: warning: use location
dot graph stmt end


 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;31m  	possible double free :9 [0m

======================================================================
 <function_decl 0x7f91172dfb00 main
    type <function_type 0x7f91172de7e0
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 320 col 5 align 8 context <translation_unit_decl 0x7f9117759168 test.c> initial <block 0x7f91172ee840>
    result <result_decl 0x7f91177595a0 D.4063 type <integer_type 0x7f91177625e8 int>
        ignored SI file test.c line 320 col 5 size <integer_cst 0x7f911774ee28 32> unit size <integer_cst 0x7f911774ee40 4>
        align 32 context <function_decl 0x7f91172dfb00 main>>
    struct-function 0x7f91172f44d0>

dot graph START

======================================================================
 <ssa_name 0x7f9117305f78
    type <pointer_type 0x7f9117769a80
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        public unsigned DI
        size <integer_cst 0x7f911774ebe8 constant 64>
        unit size <integer_cst 0x7f911774ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f91172ea498>>
    var <var_decl 0x7f91173061b0 data>
    def_stmt data_64 = malloc (400);
    version 64
    ptr-info 0x7f911730e2e8>
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_108 = VDEF <.MEM_92>
data_64 = malloc (400);
test.c:404:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc end

data_36 = PHI <0B(15), data_64(18)>
lto1: warning: use location
dot graph target basicblock start from main basic block 19dot graph target basicblock end

dot graph stmt start data_36 = PHI <0B(15), data_64(18)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_108 = VDEF <.MEM_92>
data_64 = malloc (400);
test.c:404:8: warning: use location
dot graph target loc end

free (data_36);
test.c:415:3: warning: use location
   free(data);
   ^
dot graph target basicblock start from main basic block 20dot graph target basicblock end

dot graph stmt start free (data_36);
test.c:415:3: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (data_36);
test.c:415:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_108 = VDEF <.MEM_92>
data_64 = malloc (400);
test.c:404:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc end

free (data_64);
test.c:410:3: warning: use location
   free(data);
   ^
dot graph target basicblock start from main basic block 18dot graph target basicblock end

dot graph stmt start free (data_64);
test.c:410:3: warning: use location
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (data_64);
test.c:410:3: warning: use location
[40;32m    HAS FREE STMT count:2 name:free [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================
 <function_decl 0x7f91172dfb00 main
    type <function_type 0x7f91172de7e0
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 320 col 5 align 8 context <translation_unit_decl 0x7f9117759168 test.c> initial <block 0x7f91172ee840>
    result <result_decl 0x7f91177595a0 D.4063 type <integer_type 0x7f91177625e8 int>
        ignored SI file test.c line 320 col 5 size <integer_cst 0x7f911774ee28 32> unit size <integer_cst 0x7f911774ee40 4>
        align 32 context <function_decl 0x7f91172dfb00 main>>
    struct-function 0x7f91172f44d0>

dot graph START

======================================================================
 <ssa_name 0x7f911730a000
    type <pointer_type 0x7f9117769a80
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        public unsigned DI
        size <integer_cst 0x7f911774ebe8 constant 64>
        unit size <integer_cst 0x7f911774ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f91172ea498>>
    var <var_decl 0x7f9117306120 p4>
    def_stmt p4_71 = malloc (10);
    version 71
    ptr-info 0x7f911730e300>
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_114 = VDEF <.MEM_113>
p4_71 = malloc (10);
test.c:418:7: warning: use location
  int *p4 = malloc(10);
       ^
dot graph target loc end

child4 (p4_71);
test.c:419:2: warning: use location
  child4(p4);
  ^
dot graph target basicblock start from main basic block 21dot graph target basicblock end

dot graph stmt start child4 (p4_71);
test.c:419:2: warning: use location
dot graph stmt end

this stmt is child function---child4-----

 ================== trace ================== 
trace fucntion name:child4 
[40;44m =======trace_function_path child4  function_call count: 0 level :0========  [0m
tx1
[40;36m ======= node_fun:child4========= [0m
[40;36m ======= find relate stmt with p4 ========= [0m
[40;36m ======= relate stmt argument:p4 ========= [0m
if (t_7(D) != 0)
# VUSE <.MEM_13(D)>
_1 = data;
p4_71, points-to NULL, points-to vars: { D.4088 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:p4========= [0m
[40;36m ======= relate gimple_assign_lhs2:í========= [0m
dot graph start relate form ID : 59964798
from child4 basic block 3dot graph end relate end

dot graph relate stmt start ID : 640596315 stmt(LHS) :_1 = data;
In function ‚Äòchild4‚Äô:
test.c:201:11: warning: use location
   *data = *data + 1;
           ^
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_13(D)>
_2 = *_1;
p4_71, points-to NULL, points-to vars: { D.4088 } (nonlocal, escaped, escaped heap)
tx
# VUSE <.MEM_13(D)>
_3 = data;
p4_71, points-to NULL, points-to vars: { D.4088 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:p4========= [0m
[40;36m ======= relate gimple_assign_lhs2:í========= [0m
dot graph start relate form ID : 59964798
from child4 basic block 3dot graph end relate end

dot graph relate stmt start ID : 2066242630 stmt(LHS) :_3 = data;
test.c:201:3: warning: use location
   *data = *data + 1;
   ^
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
_4 = _2 + 1;
p4_71, points-to NULL, points-to vars: { D.4088 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument:child4========= [0m
[40;36m ======= relate gimple_assign_lhs:í========= [0m
_4 = _2 + 1;
test.c:201:17: warning: use location
   *data = *data + 1;
                 ^

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_15 = VDEF <.MEM_13(D)>
*_3 = _4;
p4_71, points-to NULL, points-to vars: { D.4088 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:p4========= [0m
[40;36m ======= relate gimple_assign_lhs2:û========= [0m
dot graph start relate form ID : 59964798
from child4 basic block 3dot graph end relate end

dot graph relate stmt start ID : 1389433290 stmt(LHS) :*_3 = _4;
test.c:201:9: warning: use location
   *data = *data + 1;
         ^
*_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:child4========= [0m
[40;36m ======= relate gimple_assign_lhs:û========= [0m
# .MEM_15 = VDEF <.MEM_13(D)>
*_3 = _4;
test.c:201:9: warning: use location

 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# VUSE <.MEM_13(D)>
_5 = data;
p4_71, points-to NULL, points-to vars: { D.4088 } (nonlocal, escaped, escaped heap)
tx
[40;36m ======= relate node_fun argument222:p4========= [0m
[40;36m ======= relate gimple_assign_lhs2:í========= [0m
dot graph start relate form ID : 59964798
from child4 basic block 4dot graph end relate end

dot graph relate stmt start ID : 2010461590 stmt(LHS) :_5 = data;
test.c:204:3: warning: use location
   *data = 2;
   ^
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
# .MEM_14 = VDEF <.MEM_13(D)>
*_5 = 2;
p4_71, points-to NULL, points-to vars: { D.4088 } (nonlocal, escaped, escaped heap)
tx
 <mem_ref 0x7f91172f6fc8
    type <integer_type 0x7f91177625e8 int public SI
        size <integer_cst 0x7f911774ee28 constant 32>
        unit size <integer_cst 0x7f911774ee40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
        pointer_to_this <pointer_type 0x7f9117769a80>>
   
    arg 0 <ssa_name 0x7f9117756d80
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
       
        def_stmt _5 = data;
        version 5
        ptr-info 0x7f911730e060>
    arg 1 <integer_cst 0x7f91172e1d20 type <pointer_type 0x7f9117769a80> constant 0>
    test.c:204:3 start: test.c:204:3 finish: test.c:204:3>
 <mem_ref 0x7f91172f6fc8
    type <integer_type 0x7f91177625e8 int public SI
        size <integer_cst 0x7f911774ee28 constant 32>
        unit size <integer_cst 0x7f911774ee40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
        pointer_to_this <pointer_type 0x7f9117769a80>>
   
    arg 0 <ssa_name 0x7f9117756d80
        type <pointer_type 0x7f9117769a80 type <integer_type 0x7f91177625e8 int>
            public unsigned DI
            size <integer_cst 0x7f911774ebe8 constant 64>
            unit size <integer_cst 0x7f911774ec00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f91172ea498>>
       
        def_stmt _5 = data;
        version 5
        ptr-info 0x7f911730e060>
    arg 1 <integer_cst 0x7f91172e1d20 type <pointer_type 0x7f9117769a80> constant 0>
    test.c:204:3 start: test.c:204:3 finish: test.c:204:3>
# .MEM_16 = VDEF <.MEM_12>
_11 = __printf_chk (1, "asdda%d\n", &data);
# VUSE <.MEM_16>
return;
fucntion collect path finsh
[40;44m =======print_function_path child4  function_call count: 0 level :1========  [0m

 ================== trace ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f91172dfb00 main
    type <function_type 0x7f91172de7e0
        type <integer_type 0x7f91177625e8 int public SI
            size <integer_cst 0x7f911774ee28 constant 32>
            unit size <integer_cst 0x7f911774ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
            pointer_to_this <pointer_type 0x7f9117769a80>>
        QI
        size <integer_cst 0x7f911774ecd8 constant 8>
        unit size <integer_cst 0x7f911774ecf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 320 col 5 align 8 context <translation_unit_decl 0x7f9117759168 test.c> initial <block 0x7f91172ee840>
    result <result_decl 0x7f91177595a0 D.4063 type <integer_type 0x7f91177625e8 int>
        ignored SI file test.c line 320 col 5 size <integer_cst 0x7f911774ee28 32> unit size <integer_cst 0x7f911774ee40 4>
        align 32 context <function_decl 0x7f91172dfb00 main>>
    struct-function 0x7f91172f44d0>

dot graph START

======================================================================
 <ssa_name 0x7f9117305bd0
    type <integer_type 0x7f91177625e8 int public SI
        size <integer_cst 0x7f911774ee28 constant 32>
        unit size <integer_cst 0x7f911774ee40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f91177625e8 precision 32 min <integer_cst 0x7f911774ede0 -2147483648> max <integer_cst 0x7f911774edf8 2147483647>
        pointer_to_this <pointer_type 0x7f9117769a80>>
   
    def_stmt _31 = foo5 (q_57, q_57);
    version 31>
this other function ------foo5-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

dot graph target loc start # .MEM_112 = VDEF <.MEM_94>
_31 = foo5 (q_57, q_57);
In function ‚Äòmain‚Äô:
test.c:417:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target loc end

_88 = __printf_chk (1, "123%d\n", _31);
dot graph target basicblock start from main basic block 21dot graph target basicblock end

dot graph stmt start _88 = __printf_chk (1, "123%d\n", _31);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
trace fucntion name:__printf_chk 

 ================== trace ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 10
 [0m
[40;34m    used_stmt array stack totalsize of : 264
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
=======Mapping node_fun:foo5=========
<bb 2> [100.00%]:
_1 = *z_4(D);
_8 = __printf_chk (1, "test1%d\n", _1);
_2 = *y_5(D);
_7 = __printf_chk (1, "test2%d\n", _2);
_6 = __printf_chk (1, "test3%d\n", 10);
return 10;

=======is loop:0=========
=======Mapping node_fun:child4=========
<bb 2> [100.00%]:
if (t_7(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_1 = data;
_2 = *_1;
_3 = data;
_4 = _2 + 1;
*_3 = _4;
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
_5 = data;
*_5 = 2;

=======is loop:0=========
<bb 5> [100.00%]:
_11 = __printf_chk (1, "asdda%d\n", &data);
return;

=======is loop:0=========
=======Mapping node_fun:child3=========
<bb 2> [100.00%]:
_1 = data;
free (_1);
_5 = __printf_chk (1, "asdda%d\n", &MEM[(void *)&data + 4B]);
_4 = __printf_chk (1, "asdda%d\n", 10);
return;

=======is loop:0=========
=======Mapping node_fun:boo=========
<bb 2> [100.00%]:
free (b_2(D));
free (b_2(D));
test22 (b_2(D));
_6 = __printf_chk (1, "asdda\n");
return;

=======is loop:0=========
=======Mapping node_fun:test22=========
<bb 2> [100.00%]:
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
w_10 = malloc (5);
free (w_10);
return;

=======is loop:0=========
=======Mapping node_fun:child=========
<bb 2> [100.00%]:
pthread_mutex_lock (&mLock);
pthread_mutex_lock (&mLock);
_1 = MEM[(int *)data_15(D)];
_2 = _1 + 1;
MEM[(int *)data_15(D)] = _2;
ppData_18 = malloc (10);
pData = data_15(D);
_3 = pData;
_4 = *_3;
_5 = pData;
_6 = _4 + 1;
*_5 = _6;
data2 = 0;
pData = &data2;
_7 = pData;
*_7 = 10;
_8 = MEM[(int * *)&pData + 8B];
*_8 = 10;
_9 = MEM[(int * *)&pData + 16B];
*_9 = 10;
_10 = pData;
*_10 = 12;
_11 = pData;
free (_11);
free (10B);
boo (10B);
free (&pData);
pthread_mutex_unlock (&mLock);
free (&pData);
pthread_exit (100B);

=======is loop:0=========
=======Mapping node_fun:child2=========
<bb 2> [100.00%]:
_1 = data;
_2 = MEM[(int *)_1];
_3 = _2 + 1;
MEM[(int *)_1] = _3;
_4 = MEM[(int *)&data];
_5 = _4 + 1;
MEM[(int *)&data] = _5;
_6 = data;
child3 (_6);
_7 = data;
free (_7);
return;

=======is loop:0=========
=======Mapping node_fun:main=========
<bb 2> [25.00%]:
size_69 = 2;
_1 = 2;
_2 = 2;
_3 = 32;
a_46 = malloc (32);
goto <bb 4>; [100.00%]

=======is loop:0=========
<bb 3> [50.01%]:
_4 = (long unsigned int) i_32;
_5 = _4 * 16;
_6 = a_46 + _5;
_6->name = "Testname";
_7 = (long unsigned int) i_32;
_8 = _7 * 16;
_9 = a_46 + _8;
_9->nummer = 123;
i_87 = i_32 + 1;

=======is loop:1=========
<bb 4> [75.01%]:
# i_32 = PHI <0(2), i_87(3)>
_10 = 2;
if (i_32 <= 1)
  goto <bb 3>; [66.67%]
else
  goto <bb 6>; [33.33%]

=======is loop:1=========
<bb 5> [50.01%]:
_11 = (long unsigned int) i_33;
_12 = _11 * 16;
_13 = a_46 + _12;
_14 = _13->nummer;
_15 = (long unsigned int) i_33;
_16 = _15 * 16;
_17 = a_46 + _16;
_18 = _17->name;
_40 = __printf_chk (1, "%s, %d\n", _18, _14);
i_84 = i_33 + 1;

=======is loop:1=========
<bb 6> [75.01%]:
# i_33 = PHI <0(4), i_84(5)>
_19 = 2;
if (i_33 <= 1)
  goto <bb 5>; [66.67%]
else
  goto <bb 7>; [33.33%]

=======is loop:1=========
<bb 7> [25.00%]:
input[0] = 1;
input[1] = 2;
pthread_attr_init (&attr);
pthread_attr_init (&attr2);
pthread_attr_setdetachstate (&attr, 1);
pthread_attr_setdetachstate (&attr2, 0);
_20 = (long int) input2_53(D);
_21 = (void *) _20;
pthread_create (&t, &attr2, child2, _21);
_22 = t;
pthread_join (_22, 0B);
goto <bb 9>; [100.00%]

=======is loop:0=========
<bb 8> [75.00%]:
_23 = &t2[i_34];
err_82 = pthread_create (_23, &attr2, child, 0B);
_24 = t2[i_34];
_62 = __printf_chk (1, "%ld\n", _24);
i_83 = i_34 + 1;

=======is loop:1=========
<bb 9> [100.00%]:
# i_34 = PHI <0(7), i_83(8)>
if (i_34 <= 2)
  goto <bb 8>; [75.00%]
else
  goto <bb 10>; [25.00%]

=======is loop:1=========
<bb 10> [25.00%]:
q_57 = malloc (10);
_25 = q_57 != 0B;
_26 = test_58(D) != 0;
_27 = _25 & _26;
if (_27 != 0)
  goto <bb 11>; [0.04%]
else
  goto <bb 12>; [99.96%]

=======is loop:0=========
<bb 11> [0.01%]:
child (q_57);

=======is loop:0=========
<bb 12> [24.99%]:
*q_57 = 20;
_74 = __printf_chk (1, "test\n");
goto <bb 14>; [100.00%]

=======is loop:0=========
<bb 13> [74.97%]:
_28 = t2[i_35];
pthread_join (_28, 0B);
i_80 = i_35 + 1;

=======is loop:1=========
<bb 14> [99.96%]:
# i_35 = PHI <0(12), i_80(13)>
if (i_35 <= 2)
  goto <bb 13>; [75.00%]
else
  goto <bb 15>; [25.00%]

=======is loop:1=========
<bb 15> [24.99%]:
_29 = staticTrue;
if (_29 != 0)
  goto <bb 16>; [33.00%]
else
  goto <bb 19>; [67.00%]

=======is loop:0=========
<bb 16> [8.25%]:
data_64 = malloc (400);
if (data_64 == 0B)
  goto <bb 17>; [0.04%]
else
  goto <bb 18>; [99.96%]

=======is loop:0=========
<bb 17> [0.00%]:
exit (-1);

=======is loop:0=========
<bb 18> [8.24%]:
free (data_64);

=======is loop:0=========
<bb 19> [24.99%]:
# data_36 = PHI <0B(15), data_64(18)>
_30 = staticTrue;
if (_30 != 0)
  goto <bb 20>; [36.64%]
else
  goto <bb 21>; [63.36%]

=======is loop:0=========
<bb 20> [9.16%]:
free (data_36);

=======is loop:0=========
<bb 21> [24.99%]:
_31 = foo5 (q_57, q_57);
_88 = __printf_chk (1, "123%d\n", _31);
p4_71 = malloc (10);
child4 (p4_71);
input ={v} {CLOBBER};
attr ={v} {CLOBBER};
attr2 ={v} {CLOBBER};
t ={v} {CLOBBER};
t2 ={v} {CLOBBER};
return 0;

=======is loop:0=========
time: 0.023797 s
test.c: In function ‚Äòchild‚Äô:
test.c:175:2: warning: attempt to free a non-heap object ‚Äòdata2‚Äô [-Wfree-nonheap-object]
  free(pData);
  ^
test.c:178:2: warning: attempt to free a non-heap object ‚ÄòpData‚Äô [-Wfree-nonheap-object]
  free(ppData);
  ^
test.c:180:2: warning: attempt to free a non-heap object ‚ÄòpData‚Äô [-Wfree-nonheap-object]
  free(ppData);
  ^
