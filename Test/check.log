test.c: In function â€˜mainâ€™:
test.c:60:14: warning: assignment to â€˜intâ€™ from â€˜char *â€™ makes integer from pointer without a cast [-Wint-conversion]
   60 |         q[0] = "0";
      |              ^
test.c:61:14: warning: assignment to â€˜intâ€™ from â€˜char *â€™ makes integer from pointer without a cast [-Wint-conversion]
   61 |         q[1] = "0";
      |              ^
test.c:80:13: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
   80 |         foo(p);
      |             ^
      |             |
      |             struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:99:12: warning: assignment to â€˜int *â€™ from â€˜intâ€™ makes pointer from integer without a cast [-Wint-conversion]
   99 |         p5 = foo9(p5);
      |            ^
test.c:123:29: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  123 |                         foo(p);
      |                             ^
      |                             |
      |                             struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:126:37: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  126 |                                 foo(p);
      |                                     ^
      |                                     |
      |                                     struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:130:37: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  130 |                                 foo(p);
      |                                     ^
      |                                     |
      |                                     struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:134:29: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  134 |                         foo(p);
      |                             ^
      |                             |
      |                             struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:146:29: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  146 |                         foo(p);
      |                             ^
      |                             |
      |                             struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cfg                  ------------|      |      |      |      |          |          |
ompexp                           |      |      |      |      |   +100.0%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
ssa                              |      |      |      |      |     -0.9%|          |
nothrow                          |      |      |      |      |     -1.0%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
einline              ------------|      |      |      |      |          |          |
early_optimizations  ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
forwprop                         |      |      |      |      |     -1.9%|          |
ethread                          |      |      |      |      |     -2.0%|          |
esra                 ------------|      |      |      |      |          |          |
ealias               ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
iftoswitch           ------------|      |      |      |      |          |          |
profile_estimate     ------------|      |      |      |      |          |          |
local-pure-const                 |      |      |      |      |          |   +100.0%|
release_ssa          ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
=======node_fun:main=========
node:= 2 
 	next_branch :=3
	next_branch :=12
node:= 3 
 	next_branch :=4
	next_branch :=7
node:= 4 
 	next_branch :=5
	next_branch :=6
node:= 5 
 	next_branch :=10
node:= 6 
 	next_branch :=10
node:= 7 
 	next_branch :=8
	next_branch :=9
node:= 8 
 	next_branch :=19
node:= 9 
 	next_branch :=10
node:= 10 
 	next_branch :=11
	next_branch :=12
node:= 11 
 node:= 12 
 	next_branch :=13
	next_branch :=14
node:= 13 
 	next_branch :=19
node:= 14 
 	next_branch :=15
	next_branch :=16
node:= 15 
 	next_branch :=19
node:= 16 
 	next_branch :=17
	next_branch :=18
node:= 17 
 	next_branch :=18
node:= 18 
 	next_branch :=19
=======node_fun:foo9=========
=======node_fun:foo=========
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
# .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
# .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
# .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
# .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
# .MEM_75 = VDEF <.MEM_74>
foo (p_30);
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
# .MEM_81 = VDEF <.MEM_77>
foo (p_30);
# .MEM_83 = VDEF <.MEM_81>
foo (p_30);
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
# .MEM_82 = VDEF <.MEM_81>
foo (p_30);
# .MEM_78 = VDEF <.MEM_77>
foo (p_30);
# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
# .MEM_85 = VDEF <.MEM_55>
foo (p_30);
# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
# .MEM_88 = VDEF <.MEM_87>
foo (p4_54(D));
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================
--------GIMPLE Cond -------
 initssssss:= 0
 initssssss:= 1
--------GIMPLE Cond -------
 initssssss:= 0
 initssssss:= 1
--------GIMPLE Cond -------
 initssssss:= 0
 initssssss:= 1
--------GIMPLE Cond -------
 initssssss:= 0
 initssssss:= 1
--------GIMPLE Cond -------
 initssssss:= 0
 initssssss:= 1
--------GIMPLE Cond -------
 initssssss:= 0
 initssssss:= 1
--------GIMPLE Cond -------
 initssssss:= 0
 initssssss:= 1
--------GIMPLE Cond -------
 initssssss:= 0
 initssssss:= 1

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 6 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:foo9========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path foo9  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:foo9========= [0m
[40;42m =======start_check_funciton:foo9========= [0m
[40;33m =======POP node_fun stack:foo9========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path foo  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======start_check_funciton:foo========= [0m
[40;33m =======POP node_fun stack:foo========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa98e0b3870
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953cf0 p6>
    def_stmt p6_16 = malloc (100);
    version:16
    ptr-info 0x7fa98dbd9228>
# .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
In function â€˜mainâ€™:
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
this stmt is child function---realloc-----

 ================== find ================== 
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
this stmt is child function---realloc-----

 ================== find ================== 
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b3870
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953cf0 p6>
    def_stmt p6_16 = malloc (100);
    version:16
    ptr-info 0x7fa98dbd9228>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa98e0b38b8
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953cf0 p6>
    def_stmt p6_18 = realloc (p6_16, 100);
    version:18
    ptr-info 0x7fa98dbd9240>
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
this stmt is child function---realloc-----

 ================== find ================== 
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b38b8
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953cf0 p6>
    def_stmt p6_18 = realloc (p6_16, 100);
    version:18
    ptr-info 0x7fa98dbd9240>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:2 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7fa98e0b3900
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953c60 p7>
    def_stmt p7_20 = realloc (p6_18, 100);
    version:20
    ptr-info 0x7fa98dbd9258>
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
this stmt is child function---realloc-----

 ================== find ================== 
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b3900
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953c60 p7>
    def_stmt p7_20 = realloc (p6_18, 100);
    version:20
    ptr-info 0x7fa98dbd9258>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:2 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7fa98e0b3948
    type <pointer_type 0x7fa98dbca498
        type <record_type 0x7fa98dbca348 st TI
            size <integer_cst 0x7fa98e0abc00 constant 128>
            unit-size <integer_cst 0x7fa98e0abc18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98dbca348 fields <field_decl 0x7fa98dbcd1c8 flag> context <translation_unit_decl 0x7fa98e0b6168 test.c>
            pointer_to_this <pointer_type 0x7fa98dbca498>>
        unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953bd0 p9>
    def_stmt p9_25 = malloc (0);
    version:25
    ptr-info 0x7fa98dbd9270>
# .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^
this stmt is child function---free-----

 ================== find ================== 
free (p9_25);
test.c:74:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
MEM[(struct st *)p9_25 + 48B].f = _5;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
MEM[(struct st *)p9_25 + 48B].f = _5;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
p9_25 = malloc (0);
test.c:72:25: warning: use location
   72 |         struct st *p9 = malloc(0);
      |                         ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b3948
    type <pointer_type 0x7fa98dbca498
        type <record_type 0x7fa98dbca348 st TI
            size <integer_cst 0x7fa98e0abc00 constant 128>
            unit-size <integer_cst 0x7fa98e0abc18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98dbca348 fields <field_decl 0x7fa98dbcd1c8 flag> context <translation_unit_decl 0x7fa98e0b6168 test.c>
            pointer_to_this <pointer_type 0x7fa98dbca498>>
        unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953bd0 p9>
    def_stmt p9_25 = malloc (0);
    version:25
    ptr-info 0x7fa98dbd9270>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7fa98e0b3708
    type <pointer_type 0x7fa98e0c7000
        type <void_type 0x7fa98e0c0f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa98e0c7000>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa98e0cc9d8>>
   
    def_stmt _5 = malloc (1);
    version:5
    ptr-info 0x7fa98dbd91e0>
# .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
MEM[(struct st *)p9_25 + 48B].f = _5;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
MEM[(struct st *)p9_25 + 48B].f = _5;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^
this stmt is child function---free-----

 ================== find ================== 
free (p9_25);
test.c:74:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
_5 = malloc (1);
test.c:73:19: warning: use location
   73 |         p9[3].f = malloc(1);
      |                   ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b3708
    type <pointer_type 0x7fa98e0c7000
        type <void_type 0x7fa98e0c0f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa98e0c7000>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa98e0cc9d8>>
   
    def_stmt _5 = malloc (1);
    version:5
    ptr-info 0x7fa98dbd91e0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7fa98e0b3990
    type <pointer_type 0x7fa98dbca498
        type <record_type 0x7fa98dbca348 st TI
            size <integer_cst 0x7fa98e0abc00 constant 128>
            unit-size <integer_cst 0x7fa98e0abc18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98dbca348 fields <field_decl 0x7fa98dbcd1c8 flag> context <translation_unit_decl 0x7fa98e0b6168 test.c>
            pointer_to_this <pointer_type 0x7fa98dbca498>>
        unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953b40 p>
    def_stmt p_30 = malloc (10);
    version:30
    ptr-info 0x7fa98dbd9288>
# .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:3 
foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:4 
foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_75 = VDEF <.MEM_74>
foo (p_30);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b3990
    type <pointer_type 0x7fa98dbca498
        type <record_type 0x7fa98dbca348 st TI
            size <integer_cst 0x7fa98e0abc00 constant 128>
            unit-size <integer_cst 0x7fa98e0abc18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98dbca348 fields <field_decl 0x7fa98dbcd1c8 flag> context <translation_unit_decl 0x7fa98e0b6168 test.c>
            pointer_to_this <pointer_type 0x7fa98dbca498>>
        unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953b40 p>
    def_stmt p_30 = malloc (10);
    version:30
    ptr-info 0x7fa98dbd9288>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa98e0b3750
    type <pointer_type 0x7fa98e0c7000
        type <void_type 0x7fa98e0c0f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa98e0c7000>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa98e0cc9d8>>
   
    def_stmt _6 = malloc (1);
    version:6
    ptr-info 0x7fa98dbd91f8>
# .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_75 = VDEF <.MEM_74>
foo (p_30);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b3750
    type <pointer_type 0x7fa98e0c7000
        type <void_type 0x7fa98e0c0f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa98e0c7000>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa98e0cc9d8>>
   
    def_stmt _6 = malloc (1);
    version:6
    ptr-info 0x7fa98dbd91f8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa98e0b3798
    type <pointer_type 0x7fa98e0c7000
        type <void_type 0x7fa98e0c0f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa98e0c7000>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa98e0cc9d8>>
   
    def_stmt _7 = malloc (1);
    version:7
    ptr-info 0x7fa98dbd9210>
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_75 = VDEF <.MEM_74>
foo (p_30);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b3798
    type <pointer_type 0x7fa98e0c7000
        type <void_type 0x7fa98e0c0f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa98e0c7000>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa98e0cc9d8>>
   
    def_stmt _7 = malloc (1);
    version:7
    ptr-info 0x7fa98dbd9210>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa98e0b3798
    type <pointer_type 0x7fa98e0c7000
        type <void_type 0x7fa98e0c0f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa98e0c7000>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa98e0cc9d8>>
   
    def_stmt _7 = malloc (1);
    version:7
    ptr-info 0x7fa98dbd9210>
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_75 = VDEF <.MEM_74>
foo (p_30);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b3798
    type <pointer_type 0x7fa98e0c7000
        type <void_type 0x7fa98e0c0f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa98e0c7000>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa98e0cc9d8>>
   
    def_stmt _7 = malloc (1);
    version:7
    ptr-info 0x7fa98dbd9210>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa98e0b37e0
    type <integer_type 0x7fa98e0c05e8 int public SI
        size <integer_cst 0x7fa98e0abdf8 constant 32>
        unit-size <integer_cst 0x7fa98e0abe10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
        pointer_to_this <pointer_type 0x7fa98e0c79d8>>
   
    def_stmt _8 = foo9 (p5_36(D));
    version:8>
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));

 ================== trace ptable================== 
trace fucntion name:foo9 
[40;44m =======trace_function_path foo9  function_call count: 1 level :888========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:33:9: warning: use location
   33 |         free(z);
      |         ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---foo9-----
this other function ------foo9-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
this stmt is child function---foo9-----

 ================== trace ================== 
trace fucntion name:foo9 
[40;44m =======trace_function_path foo9  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:33:9: warning: use location
   33 |         free(z);
      |         ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_9 = (long int) _8;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
p5_38 = (int *) _9;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
[40;31m    branch possiable have return in bb:18 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:13 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b37e0
    type <integer_type 0x7fa98e0c05e8 int public SI
        size <integer_cst 0x7fa98e0abdf8 constant 32>
        unit-size <integer_cst 0x7fa98e0abe10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
        pointer_to_this <pointer_type 0x7fa98e0c79d8>>
   
    def_stmt _8 = foo9 (p5_36(D));
    version:8>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: Use after free error!: free location 
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: Use after free error!: free location 
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:3 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa98e0b39d8
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953f30 p5>
    def_stmt GIMPLE_NOP
    version:36>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
this stmt is child function---foo9-----

 ================== trace ================== 
trace fucntion name:foo9 
[40;44m =======trace_function_path foo9  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:33:9: warning: use location
   33 |         free(z);
      |         ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_9 = (long int) _8;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
p5_38 = (int *) _9;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
[40;31m    branch possiable have return in bb:18 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:13 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b39d8
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953f30 p5>
    def_stmt GIMPLE_NOP
    version:36>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: Use after free error!: free location 
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: Use after free error!: free location 
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:3 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa98e0b3a20
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953f30 p5>
    def_stmt p5_38 = (int *) _9;
    version:38
    ptr-info 0x7fa98dbd92a0>
p5_38 = (int *) _9;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
[40;31m    branch possiable have return in bb:18 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:13 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
this stmt is child function---foo9-----

 ================== trace ================== 
trace fucntion name:foo9 
[40;44m =======trace_function_path foo9  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo9========= [0m
[40;36m ======= find relate stmt with p5 ========= [0m
[40;36m ======= relate stmt argument:p5 ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
foo9 (p5_38);
test.c:116:17: warning: use location
this stmt is child function---foo9-----

 ================== trace ================== 
trace fucntion name:foo9 
[40;44m =======trace_function_path foo9  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo9========= [0m
[40;36m ======= find relate stmt with p5 ========= [0m
[40;36m ======= relate stmt argument:p5 ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b3a20
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953f30 p5>
    def_stmt p5_38 = (int *) _9;
    version:38
    ptr-info 0x7fa98dbd92a0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa98e0b3a20
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953f30 p5>
    def_stmt p5_38 = (int *) _9;
    version:38
    ptr-info 0x7fa98dbd92a0>
p5_38 = (int *) _9;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
[40;31m    branch possiable have return in bb:18 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:13 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
this stmt is child function---foo9-----

 ================== trace ================== 
trace fucntion name:foo9 
[40;44m =======trace_function_path foo9  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo9========= [0m
[40;36m ======= find relate stmt with p5 ========= [0m
[40;36m ======= relate stmt argument:p5 ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b3a20
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98e953f30 p5>
    def_stmt p5_38 = (int *) _9;
    version:38
    ptr-info 0x7fa98dbd92a0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa98e0b3af8
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98dbd4090 p3>
    def_stmt GIMPLE_NOP
    version:44>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
[40;31m    branch possiable have return in bb:8 [0m
beacuse in succ := 19 have return 
# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
foo (p3_44(D));
test.c:137:33: warning: use location
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
[40;31m    branch possiable have return in bb:8 [0m
beacuse in succ := 19 have return 
# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
foo (p3_44(D));
test.c:137:33: warning: use location
this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa98e0b3af8
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98dbd4090 p3>
    def_stmt GIMPLE_NOP
    version:44>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
prev:= 8
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
prev:= 8
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
prev:= 8
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
prev:= 8
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
prev:= 8
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
prev:= 8
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [Looserules]:3 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa98e0b3b88
    type <pointer_type 0x7fa98e0c79d8
        type <integer_type 0x7fa98e0c05e8 int public SI
            size <integer_cst 0x7fa98e0abdf8 constant 32>
            unit-size <integer_cst 0x7fa98e0abe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa98e0c05e8 precision:32 min <integer_cst 0x7fa98e0abdb0 -2147483648> max <integer_cst 0x7fa98e0abdc8 2147483647>
            pointer_to_this <pointer_type 0x7fa98e0c79d8>>
        public unsigned DI
        size <integer_cst 0x7fa98e0abbb8 constant 64>
        unit-size <integer_cst 0x7fa98e0abbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa98dbd4000 p4>
    def_stmt GIMPLE_NOP
    version:54>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:foo9========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path foo9  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:foo9========= [0m
[40;42m =======start_check_funciton:foo9========= [0m
[40;33m =======POP node_fun stack:foo9========= [0m
[40;44m =======node_fun:foo========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path foo  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======start_check_funciton:foo========= [0m
[40;33m =======POP node_fun stack:foo========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
p6_16 = malloc (100);
p6_18 = realloc (p6_16, 100);
p7_20 = realloc (p6_18, 100);
*p7_20 = 48;
_1 = (long int) "0";
_2 = (int) _1;
*p6_16 = _2;
_3 = (long int) "0";
_4 = (int) _3;
MEM[(int *)p6_16 + 4B] = _4;
p9_25 = malloc (0);
_5 = malloc (1);
MEM[(struct st *)p9_25 + 48B].f = _5;
free (p9_25);
p_30 = malloc (10);
_6 = malloc (1);
MEM[(struct st *)p_30 + 48B].f = _6;
_7 = malloc (1);
MEM[(struct st *)p_30 + 32B].f = _7;
foo (p_30);
_8 = foo9 (p5_36(D));
_9 = (long int) _8;
p5_38 = (int *) _9;
if (test_39(D) != 0)
  goto <bb 3>; [33.00%]
else
  goto <bb 12>; [67.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 354334800]:
foo9 (p5_38);
if (test_39(D) > test2_41(D))
  goto <bb 4>; [50.00%]
else
  goto <bb 7>; [50.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 177167400]:
foo (p_30);
if (test_39(D) < test2_41(D))
  goto <bb 5>; [50.00%]
else
  goto <bb 6>; [50.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 88583700]:
foo (p_30);
foo9 (p5_38);
goto <bb 10>; [100.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 88583700]:
foo (p_30);
goto <bb 10>; [100.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 177167400]:
foo (p_30);
if (test_39(D) < test2_41(D))
  goto <bb 8>; [34.00%]
else
  goto <bb 9>; [66.00%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 60236917]:
foo (p3_44(D));
goto <bb 19>; [100.00%]

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 116930483]:
foo9 (p5_38);

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 294097884]:
if (test3_50(D) != 0)
  goto <bb 11>; [33.00%]
else
  goto <bb 12>; [67.00%]

=======is loop:0=========

 bb index 11 
<bb 11> [local count: 97052301]:
foo (p_30);
exit (0);

=======is loop:0=========

 bb index 12 
<bb 12> [local count: 916452608]:
if (test_39(D) == test2_41(D))
  goto <bb 13>; [20.24%]
else
  goto <bb 14>; [79.76%]

=======is loop:0=========

 bb index 13 
<bb 13> [local count: 185490007]:
foo9 (p5_38);
goto <bb 19>; [100.00%]

=======is loop:0=========

 bb index 14 
<bb 14> [local count: 730962601]:
if (test_39(D) >= test2_41(D))
  goto <bb 15>; [48.88%]
else
  goto <bb 16>; [51.12%]

=======is loop:0=========

 bb index 15 
<bb 15> [local count: 357294517]:
foo9 (p5_38);
goto <bb 19>; [100.00%]

=======is loop:0=========

 bb index 16 
<bb 16> [local count: 373668084]:
if (test_39(D) > test2_41(D))
  goto <bb 17>; [33.00%]
else
  goto <bb 18>; [67.00%]

=======is loop:0=========

 bb index 17 
<bb 17> [local count: 123310467]:
foo9 (p5_38);
foo (p4_54(D));

=======is loop:0=========

 bb index 18 
<bb 18> [local count: 373668084]:
foo9 (p5_38);

=======is loop:0=========

 bb index 19 
<bb 19> [local count: 976689525]:
return 0;

=======Mapping node_fun:foo9=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
free (z_2(D));
return;

=======Mapping node_fun:foo=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
free (z_2(D));
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 8 [0m
[40;34m    gimple free   count : 3 [0m
[40;34m    find Entry point : 12 [0m
[40;34m    used_stmt array stack totalsize of : 0.001776 mb[0m
[40;34m    collect time: : 0.000523 s [0m
[40;34m    algorithm time: 0.044535 s [0m
[40;34m    gimple stmt count : : 51 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cp                   ------------|      |      |      |      |          |          |
inline               ------------|      |      |      |      |          |          |
fixup_cfg            ------------|      |      |      |      |          |          |
adjust_alignment     ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
backprop             ------------|      |      |      |      |          |          |
phiprop              ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
alias                ------------|      |      |      |      |          |          |
retslot              ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
stdarg               ------------|      |      |      |      |          |          |
cdce                 ------------|      |      |      |      |          |          |
cselim               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
ifcombine            ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ch                   ------------|      |      |      |      |          |          |
cplxlower            ------------|      |      |      |      |          |          |
sra                  ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     +1.1%|     -0.1%|
copyprop                         |      |      |      |      |     +1.1%|     -0.1%|
reassoc              ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
sincos               ------------|      |      |      |      |          |          |
laddress             ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
walloca              ------------|      |      |      |      |          |          |
sink                 ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
fix_loops            ------------|      |      |      |      |          |          |
no_loop              ------------|      |      |      |      |          |          |
veclower2            ------------|      |      |      |      |          |          |
switchlower          ------------|      |      |      |      |          |          |
reassoc              ------------|      |      |      |      |          |          |
slsr                 ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     +1.1%|     -0.0%|
strlen                           |      |      |      |      |     +1.1%|     -0.0%|
copyprop             ------------|      |      |      |      |          |          |
wrestrict            ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
fab                  ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
crited               ------------|      |      |      |      |          |          |
uncprop              ------------|      |      |      |      |          |          |
local-pure-const     ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
nrv                  ------------|      |      |      |      |          |          |
isel                 ------------|      |      |      |      |          |          |
optimized            ------------|      |      |      |      |          |          |
expand                           |      |      |      |      |----------|----------|
vregs                            |      |      |      |      |    +73.6%|    +28.2%|
into_cfglayout                   |      |      |      |      |     -2.5%|     -1.0%|
jump                             |      |      |      |      |     -2.6%|     -1.0%|
subreg1              ------------|      |      |      |      |          |          |
dfinit               ------------|      |      |      |      |          |          |
cse1                 ------------|      |      |      |      |          |          |
fwprop1                          |      |      |      |      |     -3.0%|     -5.1%|
ce1                              |      |      |      |      |     -3.1%|     -5.4%|
reginfo              ------------|      |      |      |      |          |          |
loop2                ------------|      |      |      |      |          |          |
loop2_init           ------------|      |      |      |      |          |          |
loop2_invariant      ------------|      |      |      |      |          |          |
loop2_done           ------------|      |      |      |      |          |          |
dse1                 ------------|      |      |      |      |          |          |
fwprop2              ------------|      |      |      |      |          |          |
init-regs                        |      |      |      |      |     +7.1%|     +4.5%|
combine                          |      |      |      |      |    -24.3%|     -6.7%|
ce2                              |      |    +1|      |      |    -40.8%|    -11.8%|
outof_cfglayout      ------------|      |      |      |      |          |          |
split1               ------------|      |      |      |      |          |          |
subreg3              ------------|      |      |      |      |          |          |
mode_sw              ------------|      |      |      |      |          |          |
asmcons              ------------|      |      |      |      |          |          |
ira                              |      |      |      |      |     -0.7%|     -0.7%|
reload                           |      |      |      |      |    -14.9%|    -15.0%|
postreload                       |      |      |      |      |    -16.7%|    -16.8%|
split2               ------------|      |      |      |      |          |          |
cmpelim              ------------|      |      |      |      |          |          |
pro_and_epilogue                 |      |      |      |      |     +7.4%|     +7.4%|
dse2                             |      |      |      |      |     +6.9%|     +6.9%|
csa                  ------------|      |      |      |      |          |          |
jump2                ------------|      |      |      |      |          |          |
ce3                  ------------|      |      |      |      |          |          |
cprop_hardreg        ------------|      |      |      |      |          |          |
rtl_dce              ------------|      |      |      |      |          |          |
bbro                 ------------|      |      |      |      |          |          |
split4               ------------|      |      |      |      |          |          |
stack                ------------|      |      |      |      |          |          |
zero_call_used_regs  ------------|      |      |      |      |          |          |
alignments           ------------|      |      |      |      |          |          |
