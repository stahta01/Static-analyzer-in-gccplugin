test.c: In function â€˜mainâ€™:
test.c:60:14: warning: assignment to â€˜intâ€™ from â€˜char *â€™ makes integer from pointer without a cast [-Wint-conversion]
   60 |         q[0] = "0";
      |              ^
test.c:61:14: warning: assignment to â€˜intâ€™ from â€˜char *â€™ makes integer from pointer without a cast [-Wint-conversion]
   61 |         q[1] = "0";
      |              ^
test.c:80:13: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
   80 |         foo(p);
      |             ^
      |             |
      |             struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:99:12: warning: assignment to â€˜int *â€™ from â€˜intâ€™ makes pointer from integer without a cast [-Wint-conversion]
   99 |         p5 = foo9(p5);
      |            ^
test.c:123:29: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  123 |                         foo(p);
      |                             ^
      |                             |
      |                             struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:126:37: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  126 |                                 foo(p);
      |                                     ^
      |                                     |
      |                                     struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:130:37: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  130 |                                 foo(p);
      |                                     ^
      |                                     |
      |                                     struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:134:29: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  134 |                         foo(p);
      |                             ^
      |                             |
      |                             struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:146:29: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  146 |                         foo(p);
      |                             ^
      |                             |
      |                             struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cfg                  ------------|      |      |      |      |          |          |
ompexp                           |      |      |      |      |   +100.0%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
ssa                              |      |      |      |      |     -0.9%|          |
nothrow                          |      |      |      |      |     -1.0%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
einline              ------------|      |      |      |      |          |          |
early_optimizations  ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
forwprop                         |      |      |      |      |     -1.9%|          |
ethread                          |      |      |      |      |     -2.0%|          |
esra                 ------------|      |      |      |      |          |          |
ealias               ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
iftoswitch           ------------|      |      |      |      |          |          |
profile_estimate     ------------|      |      |      |      |          |          |
local-pure-const                 |      |      |      |      |          |   +100.0%|
release_ssa          ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
=======node_fun:main=========
node:= 2 
 	next_branch :=3
	next_branch :=12
node:= 3 
 	next_branch :=4
	next_branch :=7
node:= 4 
 	next_branch :=5
	next_branch :=6
node:= 5 
 	next_branch :=10
node:= 6 
 	next_branch :=10
node:= 7 
 	next_branch :=8
	next_branch :=9
node:= 8 
 	next_branch :=19
node:= 9 
 	next_branch :=10
node:= 10 
 	next_branch :=11
	next_branch :=12
node:= 11 
 node:= 12 
 	next_branch :=13
	next_branch :=14
node:= 13 
 	next_branch :=19
node:= 14 
 	next_branch :=15
	next_branch :=16
node:= 15 
 	next_branch :=19
node:= 16 
 	next_branch :=17
	next_branch :=18
node:= 17 
 	next_branch :=18
node:= 18 
 	next_branch :=19
=======node_fun:foo9=========
=======node_fun:foo=========
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
# .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
# .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
# .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
# .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
# .MEM_75 = VDEF <.MEM_74>
foo (p_30);
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
# .MEM_81 = VDEF <.MEM_77>
foo (p_30);
# .MEM_83 = VDEF <.MEM_81>
foo (p_30);
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
# .MEM_82 = VDEF <.MEM_81>
foo (p_30);
# .MEM_78 = VDEF <.MEM_77>
foo (p_30);
# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
# .MEM_85 = VDEF <.MEM_55>
foo (p_30);
# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
# .MEM_88 = VDEF <.MEM_87>
foo (p4_54(D));
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 6 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:foo9========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path foo9  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:foo9========= [0m
[40;42m =======start_check_funciton:foo9========= [0m
[40;33m =======POP node_fun stack:foo9========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path foo  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======start_check_funciton:foo========= [0m
[40;33m =======POP node_fun stack:foo========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f7567d5d870
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdcf0 p6>
    def_stmt p6_16 = malloc (100);
    version:16
    ptr-info 0x7f7567883228>
# .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
In function â€˜mainâ€™:
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(int *)p6_16 + 4B] = _4;
p6_16 = malloc (100);
dot graph stmt end

dot graph stmt start MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(int *)p6_16 + 4B] = _4;
p6_16 = malloc (100);
dot graph stmt end

dot graph stmt start MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start *p6_16 = _2;
p6_16 = malloc (100);
dot graph stmt end

dot graph stmt start *p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start *p6_16 = _2;
p6_16 = malloc (100);
dot graph stmt end

dot graph stmt start *p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p6_18 = realloc (p6_16, 100);
p6_16 = malloc (100);
dot graph stmt end

dot graph stmt start p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph stmt end

dot graph target color descreddot graph target color desend

If realloc() fails, the initial memory block will not be freed() this stmt is child function---realloc-----

 ================== find ================== 
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p7_20 = realloc (p6_18, 100);
p6_16 = malloc (100);
dot graph stmt end

dot graph stmt start p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
dot graph stmt end

dot graph target color descreddot graph target color desend

If realloc() fails, the initial memory block will not be freed() this stmt is child function---realloc-----

 ================== find ================== 
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
[40;32m    FIND REALLOC STMT count:2 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
dot graph target line desend

dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start *p7_20 = 48;
p6_16 = malloc (100);
dot graph stmt end

dot graph stmt start *p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
dot graph entry main
dot graph target entry end

p6_16 = malloc (100);
test.c:54:19: warning: use location
   54 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: p6_16 = malloc (100);
test.c:54:19: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_60 = VDEF <.MEM_59(D)>
p6_16 = malloc (100);
test.c:54:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p6_16 = malloc (100);
p6_16 = malloc (100);
dot graph stmt end

dot graph stmt start p6_16 = malloc (100);
test.c:54:19: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2104475015 dot graph subgraph  MEM[(int *)p6_16 + 4B] = _4;
p6_16 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2096599136 dot graph subgraph  MEM[(int *)p6_16 + 4B] = _4;
_4 = (int) _3;
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1547785288 dot graph subgraph  *p6_16 = _2;
p6_16 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1801007264 dot graph subgraph  *p6_16 = _2;
_2 = (int) _1;
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_22756292 dot graph subgraph  p6_18 = realloc (p6_16, 100);
p6_16 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1385475697 dot graph subgraph  p7_20 = realloc (p6_18, 100);
p6_18 = realloc (p6_16, 100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1003026346 dot graph subgraph  *p7_20 = 48;
p7_20 = realloc (p6_18, 100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1996576307 dot graph subgraph  p6_16 = malloc (100);
p6_16 = malloc (100);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5d870
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdcf0 p6>
    def_stmt p6_16 = malloc (100);
    version:16
    ptr-info 0x7f7567883228>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f7567d5d8b8
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdcf0 p6>
    def_stmt p6_18 = realloc (p6_16, 100);
    version:18
    ptr-info 0x7f7567883240>
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
dot graph target loc start # .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(int *)p6_16 + 4B] = _4;
p6_18 = realloc (p6_16, 100);
dot graph stmt end

dot graph stmt start MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
dot graph target loc start # .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(int *)p6_16 + 4B] = _4;
p6_18 = realloc (p6_16, 100);
dot graph stmt end

dot graph stmt start MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
dot graph target loc start # .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start *p6_16 = _2;
p6_18 = realloc (p6_16, 100);
dot graph stmt end

dot graph stmt start *p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
dot graph target loc start # .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start *p6_16 = _2;
p6_18 = realloc (p6_16, 100);
dot graph stmt end

dot graph stmt start *p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
dot graph entry main
dot graph target entry end

p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc start # .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p6_18 = realloc (p6_16, 100);
p6_18 = realloc (p6_16, 100);
dot graph stmt end

dot graph stmt start p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
dot graph stmt end

dot graph target color descreddot graph target color desend

If realloc() fails, the initial memory block will not be freed() this stmt is child function---realloc-----

 ================== find ================== 
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================

======================================================================

 Expand conflict 
 The same function may have multiple branches :realloc
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
dot graph target loc start # .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
dot graph target line desend

dot graph target loc start # .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start *p7_20 = 48;
p6_18 = realloc (p6_16, 100);
dot graph stmt end

dot graph stmt start *p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
dot graph stmt end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1785972442 dot graph subgraph  MEM[(int *)p6_16 + 4B] = _4;
p6_16 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1169162576 dot graph subgraph  MEM[(int *)p6_16 + 4B] = _4;
_4 = (int) _3;
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1574818733 dot graph subgraph  *p6_16 = _2;
p6_16 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1369134201 dot graph subgraph  *p6_16 = _2;
_2 = (int) _1;
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_546792840 dot graph subgraph  p6_18 = realloc (p6_16, 100);
p6_16 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_119615750 dot graph subgraph  *p7_20 = 48;
p7_20 = realloc (p6_18, 100);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5d8b8
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdcf0 p6>
    def_stmt p6_18 = realloc (p6_16, 100);
    version:18
    ptr-info 0x7f7567883240>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_65 = VDEF <.MEM_64>
MEM[(int *)p6_16 + 4B] = _4;
test.c:61:14: warning: use location
   61 |         q[1] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_64 = VDEF <.MEM_63>
*p6_16 = _2;
test.c:60:14: warning: use location
   60 |         q[0] = "0";
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:2 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f7567d5d900
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdc60 p7>
    def_stmt p7_20 = realloc (p6_18, 100);
    version:20
    ptr-info 0x7f7567883258>
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
dot graph entry main
dot graph target entry end

p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
dot graph target loc start # .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p7_20 = realloc (p6_18, 100);
p7_20 = realloc (p6_18, 100);
dot graph stmt end

dot graph stmt start p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
dot graph stmt end

dot graph target color descreddot graph target color desend

If realloc() fails, the initial memory block will not be freed() this stmt is child function---realloc-----

 ================== find ================== 
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
dot graph target loc start # .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
dot graph target line desend

dot graph target loc start # .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start *p7_20 = 48;
p7_20 = realloc (p6_18, 100);
dot graph stmt end

dot graph stmt start *p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
dot graph stmt end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1953287939 dot graph subgraph  p7_20 = realloc (p6_18, 100);
p6_18 = realloc (p6_16, 100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_571179789 dot graph subgraph  *p7_20 = 48;
p7_20 = realloc (p6_18, 100);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5d900
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdc60 p7>
    def_stmt p7_20 = realloc (p6_18, 100);
    version:20
    ptr-info 0x7f7567883258>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_63 = VDEF <.MEM_62>
*p7_20 = 48;
test.c:59:15: warning: use location
   59 |         p7[0] = '0';
      |               ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:2 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f7567d5d948
    type <pointer_type 0x7f7567874498
        type <record_type 0x7f7567874348 st TI
            size <integer_cst 0x7f7567d55c00 constant 128>
            unit-size <integer_cst 0x7f7567d55c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567874348 fields <field_decl 0x7f75678771c8 flag> context <translation_unit_decl 0x7f7567d60168 test.c>
            pointer_to_this <pointer_type 0x7f7567874498>>
        unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdbd0 p9>
    def_stmt p9_25 = malloc (0);
    version:25
    ptr-info 0x7f7567883270>
# .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^
dot graph target loc start # .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
test.c:72:25: warning: use location
   72 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc en1

dot graph target line desc form basic block 2: free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
test.c:72:25: warning: use location
   72 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start free (p9_25);
p9_25 = malloc (0);
dot graph stmt end

dot graph stmt start free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (p9_25);
test.c:74:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
MEM[(struct st *)p9_25 + 48B].f = _5;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^
dot graph target loc start # .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
test.c:72:25: warning: use location
   72 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
test.c:72:25: warning: use location
   72 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p9_25 + 48B].f = _5;
p9_25 = malloc (0);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
MEM[(struct st *)p9_25 + 48B].f = _5;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^
dot graph target loc start # .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
test.c:72:25: warning: use location
   72 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
test.c:72:25: warning: use location
   72 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p9_25 + 48B].f = _5;
p9_25 = malloc (0);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
dot graph entry main
dot graph target entry end

p9_25 = malloc (0);
test.c:72:25: warning: use location
   72 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc start # .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
test.c:72:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: p9_25 = malloc (0);
test.c:72:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_66 = VDEF <.MEM_65>
p9_25 = malloc (0);
test.c:72:25: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p9_25 = malloc (0);
p9_25 = malloc (0);
dot graph stmt end

dot graph stmt start p9_25 = malloc (0);
test.c:72:25: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_870127490 dot graph subgraph  free (p9_25);
p9_25 = malloc (0);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_480744742 dot graph subgraph  MEM[(struct st *)p9_25 + 48B].f = _5;
p9_25 = malloc (0);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1783353679 dot graph subgraph  MEM[(struct st *)p9_25 + 48B].f = _5;
_5 = malloc (1);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_354409708 dot graph subgraph  p9_25 = malloc (0);
p9_25 = malloc (0);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5d948
    type <pointer_type 0x7f7567874498
        type <record_type 0x7f7567874348 st TI
            size <integer_cst 0x7f7567d55c00 constant 128>
            unit-size <integer_cst 0x7f7567d55c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567874348 fields <field_decl 0x7f75678771c8 flag> context <translation_unit_decl 0x7f7567d60168 test.c>
            pointer_to_this <pointer_type 0x7f7567874498>>
        unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdbd0 p9>
    def_stmt p9_25 = malloc (0);
    version:25
    ptr-info 0x7f7567883270>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f7567d5d708
    type <pointer_type 0x7f7567d71000
        type <void_type 0x7f7567d6af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f7567d71000>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f7567d769d8>>
   
    def_stmt _5 = malloc (1);
    version:5
    ptr-info 0x7f75678831e0>
# .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
MEM[(struct st *)p9_25 + 48B].f = _5;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^
dot graph target loc start # .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
test.c:73:19: warning: use location
   73 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
test.c:73:19: warning: use location
   73 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p9_25 + 48B].f = _5;
_5 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
MEM[(struct st *)p9_25 + 48B].f = _5;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^
dot graph target loc start # .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
test.c:73:19: warning: use location
   73 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
test.c:73:19: warning: use location
   73 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p9_25 + 48B].f = _5;
_5 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p9_25 + 48B].f = _5;
test.c:73:17: warning: use location
   73 |         p9[3].f = malloc(1);
      |                 ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^
dot graph target loc start # .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
test.c:73:19: warning: use location
   73 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
test.c:73:19: warning: use location
   73 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start free (p9_25);
_5 = malloc (1);
dot graph stmt end

dot graph stmt start free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (p9_25);
test.c:74:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
dot graph entry main
dot graph target entry end

_5 = malloc (1);
test.c:73:19: warning: use location
   73 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc start # .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
test.c:73:19: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = malloc (1);
test.c:73:19: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_67 = VDEF <.MEM_66>
_5 = malloc (1);
test.c:73:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _5 = malloc (1);
_5 = malloc (1);
dot graph stmt end

dot graph stmt start _5 = malloc (1);
test.c:73:19: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_392316437 dot graph subgraph  MEM[(struct st *)p9_25 + 48B].f = _5;
_5 = malloc (1);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1502579510 dot graph subgraph  MEM[(struct st *)p9_25 + 48B].f = _5;
_5 = malloc (1);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1005156476 dot graph subgraph  free (p9_25);
p9_25 = malloc (0);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1648970461 dot graph subgraph  _5 = malloc (1);
_5 = malloc (1);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5d708
    type <pointer_type 0x7f7567d71000
        type <void_type 0x7f7567d6af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f7567d71000>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f7567d769d8>>
   
    def_stmt _5 = malloc (1);
    version:5
    ptr-info 0x7f75678831e0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f7567d5d990
    type <pointer_type 0x7f7567874498
        type <record_type 0x7f7567874348 st TI
            size <integer_cst 0x7f7567d55c00 constant 128>
            unit-size <integer_cst 0x7f7567d55c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567874348 fields <field_decl 0x7f75678771c8 flag> context <translation_unit_decl 0x7f7567d60168 test.c>
            pointer_to_this <pointer_type 0x7f7567874498>>
        unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdb40 p>
    def_stmt p_30 = malloc (10);
    version:30
    ptr-info 0x7f7567883288>
# .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 11: foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start foo (p_30);
p_30 = malloc (10);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 2138094289
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 90520858 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 90520858 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 7: foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 7dot graph target basicblock en1

dot graph stmt start foo (p_30);
p_30 = malloc (10);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 1203808843
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 939760659 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 939760659 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 6: foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start foo (p_30);
p_30 = malloc (10);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 1577271301
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 300547459 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 300547459 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:3 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 5: foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start foo (p_30);
p_30 = malloc (10);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 1767611870
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1534262668 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1534262668 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:4 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 4: foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start foo (p_30);
p_30 = malloc (10);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 249662948
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1167913510 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1167913510 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_75 = VDEF <.MEM_74>
foo (p_30);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 2: foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start foo (p_30);
p_30 = malloc (10);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 1187786284
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 272419240 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 272419240 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
p_30 = malloc (10);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
p_30 = malloc (10);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
p_30 = malloc (10);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
p_30 = malloc (10);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
dot graph entry main
dot graph target entry end

p_30 = malloc (10);
test.c:75:24: warning: use location
   75 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: p_30 = malloc (10);
test.c:75:24: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_70 = VDEF <.MEM_69>
p_30 = malloc (10);
test.c:75:24: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p_30 = malloc (10);
p_30 = malloc (10);
dot graph stmt end

dot graph stmt start p_30 = malloc (10);
test.c:75:24: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_405905560 dot graph subgraph  foo (p_30);
p_30 = malloc (10);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5d990
    type <pointer_type 0x7f7567874498
        type <record_type 0x7f7567874348 st TI
            size <integer_cst 0x7f7567d55c00 constant 128>
            unit-size <integer_cst 0x7f7567d55c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567874348 fields <field_decl 0x7f75678771c8 flag> context <translation_unit_decl 0x7f7567d60168 test.c>
            pointer_to_this <pointer_type 0x7f7567874498>>
        unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdb40 p>
    def_stmt p_30 = malloc (10);
    version:30
    ptr-info 0x7f7567883288>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f7567d5d750
    type <pointer_type 0x7f7567d71000
        type <void_type 0x7f7567d6af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f7567d71000>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f7567d769d8>>
   
    def_stmt _6 = malloc (1);
    version:6
    ptr-info 0x7f75678831f8>
# .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
_6 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
_6 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 11: foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start foo (p_30);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 7: foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 7dot graph target basicblock en1

dot graph stmt start foo (p_30);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start foo (p_30);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 5: foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start foo (p_30);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 4: foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start foo (p_30);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_75 = VDEF <.MEM_74>
foo (p_30);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start foo (p_30);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
_6 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
_6 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
dot graph entry main
dot graph target entry end

_6 = malloc (1);
test.c:76:18: warning: use location
   76 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _6 = malloc (1);
test.c:76:18: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_71 = VDEF <.MEM_70>
_6 = malloc (1);
test.c:76:18: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _6 = malloc (1);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start _6 = malloc (1);
test.c:76:18: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_1759284399 dot graph subgraph  foo (p_30);
p_30 = malloc (10);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5d750
    type <pointer_type 0x7f7567d71000
        type <void_type 0x7f7567d6af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f7567d71000>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f7567d769d8>>
   
    def_stmt _6 = malloc (1);
    version:6
    ptr-info 0x7f75678831f8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f7567d5d798
    type <pointer_type 0x7f7567d71000
        type <void_type 0x7f7567d6af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f7567d71000>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f7567d769d8>>
   
    def_stmt _7 = malloc (1);
    version:7
    ptr-info 0x7f7567883210>
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
_7 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
_7 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 11: foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start foo (p_30);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 7: foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 7dot graph target basicblock en1

dot graph stmt start foo (p_30);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start foo (p_30);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 5: foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start foo (p_30);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 4: foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start foo (p_30);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_75 = VDEF <.MEM_74>
foo (p_30);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start foo (p_30);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
_7 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
_7 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
dot graph entry main
dot graph target entry end

_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _7 = malloc (1);
test.c:79:18: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _7 = malloc (1);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start _7 = malloc (1);
test.c:79:18: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_892999932 dot graph subgraph  foo (p_30);
p_30 = malloc (10);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5d798
    type <pointer_type 0x7f7567d71000
        type <void_type 0x7f7567d6af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f7567d71000>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f7567d769d8>>
   
    def_stmt _7 = malloc (1);
    version:7
    ptr-info 0x7f7567883210>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f7567d5d798
    type <pointer_type 0x7f7567d71000
        type <void_type 0x7f7567d6af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f7567d71000>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f7567d769d8>>
   
    def_stmt _7 = malloc (1);
    version:7
    ptr-info 0x7f7567883210>
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
_7 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_74 = VDEF <.MEM_73>
MEM[(struct st *)p_30 + 32B].f = _7;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
_7 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 32B].f = _7;
test.c:79:16: warning: use location
   79 |         p[2].f = malloc(1);
      |                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 11: foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start foo (p_30);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:146:25: warning: use location
  146 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 7: foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 7dot graph target basicblock en1

dot graph stmt start foo (p_30);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:134:25: warning: use location
  134 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start foo (p_30);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:130:33: warning: use location
  130 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 5: foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start foo (p_30);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:126:33: warning: use location
  126 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 4: foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start foo (p_30);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:123:25: warning: use location
  123 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_75 = VDEF <.MEM_74>
foo (p_30);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start foo (p_30);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_30);
test.c:80:9: warning: use location
   80 |         foo(p);
      |         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
_7 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
MEM[(struct st *)p_30 + 48B].f = _6;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
_7 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_30 + 48B].f = _6;
test.c:76:16: warning: use location
   76 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
dot graph entry main
dot graph target entry end

_7 = malloc (1);
test.c:79:18: warning: use location
   79 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _7 = malloc (1);
test.c:79:18: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_73 = VDEF <.MEM_72>
_7 = malloc (1);
test.c:79:18: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _7 = malloc (1);
_7 = malloc (1);
dot graph stmt end

dot graph stmt start _7 = malloc (1);
test.c:79:18: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph arrowsubgraph cluster_650206033 dot graph subgraph  foo (p_30);
p_30 = malloc (10);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5d798
    type <pointer_type 0x7f7567d71000
        type <void_type 0x7f7567d6af18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f7567d71000>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f7567d769d8>>
   
    def_stmt _7 = malloc (1);
    version:7
    ptr-info 0x7f7567883210>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f7567d5d7e0
    type <integer_type 0x7f7567d6a5e8 int public SI
        size <integer_cst 0x7f7567d55df8 constant 32>
        unit-size <integer_cst 0x7f7567d55e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
        pointer_to_this <pointer_type 0x7f7567d719d8>>
   
    def_stmt _8 = foo9 (p5_36(D));
    version:8>
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));

 ================== trace ptable================== 
trace fucntion name:foo9 
[40;44m =======trace_function_path foo9  function_call count: 1 level :888========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:33:9: warning: use location
   33 |         free(z);
      |         ^
dot graph start relate form ID : 104317735
from foo9 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1418464919 stmt(free) :free (z_2(D));
test.c:33:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1418464919 stmt(free) :free (z_2(D));
test.c:33:9: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---foo9-----
this other function ------foo9-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
dot graph entry main
dot graph target entry end

_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
dot graph target loc start # .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _8 = foo9 (p5_36(D));
_8 = foo9 (p5_36(D));
dot graph stmt end

dot graph stmt start _8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
dot graph stmt end

this stmt is child function---foo9-----

 ================== trace ================== 
trace fucntion name:foo9 
[40;44m =======trace_function_path foo9  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:33:9: warning: use location
   33 |         free(z);
      |         ^
dot graph start relate form ID : 950753493
from foo9 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1871929605 stmt(free) :free (z_2(D));
test.c:33:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1871929605 stmt(free) :free (z_2(D));
test.c:33:9: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_9 = (long int) _8;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
dot graph target loc start # .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _9 = (long int) _8;
test.c:99:14: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _9 = (long int) _8;
_8 = foo9 (p5_36(D));
dot graph stmt end

dot graph stmt start _9 = (long int) _8;
test.c:99:14: warning: use location
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
p5_38 = (int *) _9;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
dot graph target loc start # .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 2: p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
dot graph target line desend

dot graph target loc start # .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p5_38 = (int *) _9;
_8 = foo9 (p5_36(D));
dot graph stmt end

dot graph stmt start p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
dot graph stmt end

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
[40;31m    branch possiable have return in bb:18 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:13 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_805243940 dot graph subgraph  _8 = foo9 (p5_36(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1200416441 dot graph subgraph  _9 = (long int) _8;
_8 = foo9 (p5_36(D));
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_892359467 dot graph subgraph  p5_38 = (int *) _9;
_9 = (long int) _8;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5d7e0
    type <integer_type 0x7f7567d6a5e8 int public SI
        size <integer_cst 0x7f7567d55df8 constant 32>
        unit-size <integer_cst 0x7f7567d55e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
        pointer_to_this <pointer_type 0x7f7567d719d8>>
   
    def_stmt _8 = foo9 (p5_36(D));
    version:8>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: Use after free error!: free location 
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: Use after free error!: free location 
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:3 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f7567d5d9d8
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdf30 p5>
    def_stmt GIMPLE_NOP
    version:36>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
dot graph entry main
dot graph target entry end

_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
dot graph target loc start # .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _8 = foo9 (p5_36(D));
_8 = foo9 (p5_36(D));
dot graph stmt end

dot graph stmt start _8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
dot graph stmt end

this stmt is child function---foo9-----

 ================== trace ================== 
trace fucntion name:foo9 
[40;44m =======trace_function_path foo9  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:33:9: warning: use location
   33 |         free(z);
      |         ^
dot graph start relate form ID : 1993030224
from foo9 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1472835681 stmt(free) :free (z_2(D));
test.c:33:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1472835681 stmt(free) :free (z_2(D));
test.c:33:9: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_9 = (long int) _8;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
dot graph target loc start # .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _9 = (long int) _8;
test.c:99:14: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _9 = (long int) _8;
_8 = foo9 (p5_36(D));
dot graph stmt end

dot graph stmt start _9 = (long int) _8;
test.c:99:14: warning: use location
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
p5_38 = (int *) _9;
bb index := 2
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
  148 |                         exit(0);
      |                         ^
beacuse in succ := 11 have return or exit
# .MEM_86 = VDEF <.MEM_85>
exit (0);
test.c:148:25: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 11

======================================================================
dot graph entry main
dot graph target entry end

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
dot graph target loc start # .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 2: p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
dot graph target line desend

dot graph target loc start # .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p5_38 = (int *) _9;
_8 = foo9 (p5_36(D));
dot graph stmt end

dot graph stmt start p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
dot graph stmt end

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
[40;31m    branch possiable have return in bb:18 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:13 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1298265027 dot graph subgraph  _8 = foo9 (p5_36(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2036359207 dot graph subgraph  _9 = (long int) _8;
_8 = foo9 (p5_36(D));
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1594347580 dot graph subgraph  p5_38 = (int *) _9;
_9 = (long int) _8;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5d9d8
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdf30 p5>
    def_stmt GIMPLE_NOP
    version:36>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: Use after free error!: free location 
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

_9 = (long int) _8;
test.c:99:14: warning: use location
   99 |         p5 = foo9(p5);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_76 = VDEF <.MEM_75>
_8 = foo9 (p5_36(D));
test.c:99:14: warning: Use after free error!: free location 
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

p5_38 = (int *) _9;
test.c:99:12: warning: use location
   99 |         p5 = foo9(p5);
      |            ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:1 [0m
[40;31m  	possible double free [Looserules]:3 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f7567d5da20
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdf30 p5>
    def_stmt p5_38 = (int *) _9;
    version:38
    ptr-info 0x7f75678832a0>
p5_38 = (int *) _9;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
[40;31m    branch possiable have return in bb:18 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:13 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
prev:= 5
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:124:28: warning: use location
  124 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================

# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
dot graph entry main
dot graph target entry end

foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
dot graph target loc start # .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: foo9 (p5_38);
test.c:116:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start foo9 (p5_38);
foo9 (p5_38);
dot graph stmt end

dot graph stmt start foo9 (p5_38);
test.c:116:17: warning: use location
dot graph stmt end

this stmt is child function---foo9-----

 ================== trace ================== 
trace fucntion name:foo9 
[40;44m =======trace_function_path foo9  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo9========= [0m
[40;36m ======= find relate stmt with p5 ========= [0m
[40;36m ======= relate stmt argument:p5 ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
dot graph entry main
dot graph target entry end

foo9 (p5_38);
test.c:116:17: warning: use location
dot graph target loc start # .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: foo9 (p5_38);
test.c:116:17: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start foo9 (p5_38);
foo9 (p5_38);
dot graph stmt end

dot graph stmt start foo9 (p5_38);
test.c:116:17: warning: use location
dot graph stmt end

this stmt is child function---foo9-----

 ================== trace ================== 
trace fucntion name:foo9 
[40;44m =======trace_function_path foo9  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo9========= [0m
[40;36m ======= find relate stmt with p5 ========= [0m
[40;36m ======= relate stmt argument:p5 ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 
dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1143194564 dot graph subgraph  foo9 (p5_38);
p5_38 = (int *) _9;
dot graph subgrapend

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_608704288 dot graph subgraph  foo9 (p5_38);
p5_38 = (int *) _9;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5da20
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdf30 p5>
    def_stmt p5_38 = (int *) _9;
    version:38
    ptr-info 0x7f75678832a0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f7567d5da20
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdf30 p5>
    def_stmt p5_38 = (int *) _9;
    version:38
    ptr-info 0x7f75678832a0>
p5_38 = (int *) _9;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
[40;31m    branch possiable have return in bb:18 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
# .MEM_89 = VDEF <.MEM_57>
foo9 (p5_38);
test.c:165:25: warning: use location
  165 |                         foo9(p5);
      |                         ^
prev:= 18
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
# .MEM_87 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:161:25: warning: use location
  161 |                         foo9(p5);
      |                         ^
prev:= 17
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
if (test_39(D) > test2_41(D))
test.c:159:20: warning: use location
  159 |                 if (test > test2)
      |                    ^
=======================Path Constaint=====5======================

=======================Path Constaint===========================

# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:15 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
# .MEM_90 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:155:17: warning: use location
  155 |                 foo9(p5);
      |                 ^
prev:= 15
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
if (test_39(D) >= test2_41(D))
test.c:154:17: warning: use location
  154 |         else if (test >= test2)
      |                 ^
=======================Path Constaint=====4======================

=======================Path Constaint===========================

# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
[40;31m    branch possiable have return in bb:13 [0m
beacuse in succ := 19 have return 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
# .MEM_91 = VDEF <.MEM_56>
foo9 (p5_38);
test.c:153:17: warning: use location
  153 |                 foo9(p5);
      |                 ^
prev:= 13
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test3_50(D) != 0)
test.c:144:20: warning: use location
  144 |                 if (test3)
      |                    ^
if (test_39(D) == test2_41(D))
test.c:152:12: warning: use location
  152 |         if (test == test2)
      |            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
# .MEM_79 = VDEF <.MEM_78>
foo9 (p5_38);
test.c:141:33: warning: use location
  141 |                                 foo9(p5);
      |                                 ^
prev:= 9
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================

# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
dot graph entry main
dot graph target entry end

foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
dot graph target loc start # .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: foo9 (p5_38);
test.c:127:33: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start foo9 (p5_38);
foo9 (p5_38);
dot graph stmt end

dot graph stmt start foo9 (p5_38);
test.c:127:33: warning: use location
dot graph stmt end

this stmt is child function---foo9-----

 ================== trace ================== 
trace fucntion name:foo9 
[40;44m =======trace_function_path foo9  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo9========= [0m
[40;36m ======= find relate stmt with p5 ========= [0m
[40;36m ======= relate stmt argument:p5 ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================


======================================================================

 Expand conflict 
 The same function may have multiple branches :foo9
# .MEM_84 = VDEF <.MEM_83>
foo9 (p5_38);
test.c:127:33: warning: use location
  127 |                                 foo9(p5);
      |                                 ^
# .MEM_77 = VDEF <.MEM_76>
foo9 (p5_38);
test.c:116:17: warning: use location
  116 |                 foo9(p5);
      |                 ^
prev:= 3
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
=======================Path Constaint=====1======================

=======================Path Constaint===========================

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph arrowsubgraph cluster_811657298 dot graph subgraph  foo9 (p5_38);
p5_38 = (int *) _9;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5da20
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f75685fdf30 p5>
    def_stmt p5_38 = (int *) _9;
    version:38
    ptr-info 0x7f75678832a0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f7567d5daf8
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f756787e090 p3>
    def_stmt GIMPLE_NOP
    version:44>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
[40;31m    branch possiable have return in bb:8 [0m
beacuse in succ := 19 have return 
# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
dot graph entry main
dot graph target entry end

foo (p3_44(D));
test.c:137:33: warning: use location
dot graph target loc start # .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 8: foo (p3_44(D));
test.c:137:33: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start foo (p3_44(D));
foo (p3_44(D));
dot graph stmt end

dot graph stmt start foo (p3_44(D));
test.c:137:33: warning: use location
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 1828037134
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 896148411 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 896148411 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
[40;31m    branch possiable have return in bb:8 [0m
beacuse in succ := 19 have return 
# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
dot graph entry main
dot graph target entry end

foo (p3_44(D));
test.c:137:33: warning: use location
dot graph target loc start # .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 8: foo (p3_44(D));
test.c:137:33: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start foo (p3_44(D));
foo (p3_44(D));
dot graph stmt end

dot graph stmt start foo (p3_44(D));
test.c:137:33: warning: use location
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 1350247522
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1380631075 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1380631075 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph arrowsubgraph cluster_714998983 dot graph subgraph  foo (p3_44(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph arrowsubgraph cluster_95763807 dot graph subgraph  foo (p3_44(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f7567d5daf8
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f756787e090 p3>
    def_stmt GIMPLE_NOP
    version:44>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: use location
   57 |         p6 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: use location
   58 |         p7 = realloc(p6, 100);
      |              ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: use location
   74 |         free(p9);
      |         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
prev:= 8
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
prev:= 8
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
prev:= 8
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_61 = VDEF <.MEM_60>
p6_18 = realloc (p6_16, 100);
test.c:57:14: warning: Use after free error!: free location 
   57 |         p6 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
prev:= 8
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_62 = VDEF <.MEM_61>
p7_20 = realloc (p6_18, 100);
test.c:58:14: warning: Use after free error!: free location 
   58 |         p7 = realloc(p6, 100);
      |              ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
prev:= 8
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_69 = VDEF <.MEM_68>
free (p9_25);
test.c:74:9: warning: Use after free error!: free location 
   74 |         free(p9);
      |         ^
prev:= 2
=======================Path Constaint===========================

=======================NO find Path Constaint===========================

=======================Path Constaint===========================

# .MEM_80 = VDEF <.MEM_78>
foo (p3_44(D));
test.c:137:33: warning: use location
  137 |                                 foo(p3);
      |                                 ^
prev:= 8
=======================Path Constaint===========================

if (test_39(D) != 0)
test.c:114:12: warning: use location
  114 |         if (test)
      |            ^
if (test_39(D) > test2_41(D))
test.c:121:20: warning: use location
  121 |                 if (test > test2)
      |                    ^
if (test_39(D) < test2_41(D))
test.c:135:28: warning: use location
  135 |                         if (test < test2)
      |                            ^
=======================Path Constaint=====3======================

=======================Path Constaint===========================


 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [Looserules]:3 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f7567d5db88
    type <pointer_type 0x7f7567d719d8
        type <integer_type 0x7f7567d6a5e8 int public SI
            size <integer_cst 0x7f7567d55df8 constant 32>
            unit-size <integer_cst 0x7f7567d55e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f7567d6a5e8 precision:32 min <integer_cst 0x7f7567d55db0 -2147483648> max <integer_cst 0x7f7567d55dc8 2147483647>
            pointer_to_this <pointer_type 0x7f7567d719d8>>
        public unsigned DI
        size <integer_cst 0x7f7567d55bb8 constant 64>
        unit-size <integer_cst 0x7f7567d55bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f756787e000 p4>
    def_stmt GIMPLE_NOP
    version:54>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:foo9========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path foo9  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:foo9========= [0m
[40;42m =======start_check_funciton:foo9========= [0m
[40;33m =======POP node_fun stack:foo9========= [0m
[40;44m =======node_fun:foo========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path foo  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======start_check_funciton:foo========= [0m
[40;33m =======POP node_fun stack:foo========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
p6_16 = malloc (100);
p6_18 = realloc (p6_16, 100);
p7_20 = realloc (p6_18, 100);
*p7_20 = 48;
_1 = (long int) "0";
_2 = (int) _1;
*p6_16 = _2;
_3 = (long int) "0";
_4 = (int) _3;
MEM[(int *)p6_16 + 4B] = _4;
p9_25 = malloc (0);
_5 = malloc (1);
MEM[(struct st *)p9_25 + 48B].f = _5;
free (p9_25);
p_30 = malloc (10);
_6 = malloc (1);
MEM[(struct st *)p_30 + 48B].f = _6;
_7 = malloc (1);
MEM[(struct st *)p_30 + 32B].f = _7;
foo (p_30);
_8 = foo9 (p5_36(D));
_9 = (long int) _8;
p5_38 = (int *) _9;
if (test_39(D) != 0)
  goto <bb 3>; [33.00%]
else
  goto <bb 12>; [67.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 354334800]:
foo9 (p5_38);
if (test_39(D) > test2_41(D))
  goto <bb 4>; [50.00%]
else
  goto <bb 7>; [50.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 177167400]:
foo (p_30);
if (test_39(D) < test2_41(D))
  goto <bb 5>; [50.00%]
else
  goto <bb 6>; [50.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 88583700]:
foo (p_30);
foo9 (p5_38);
goto <bb 10>; [100.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 88583700]:
foo (p_30);
goto <bb 10>; [100.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 177167400]:
foo (p_30);
if (test_39(D) < test2_41(D))
  goto <bb 8>; [34.00%]
else
  goto <bb 9>; [66.00%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 60236917]:
foo (p3_44(D));
goto <bb 19>; [100.00%]

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 116930483]:
foo9 (p5_38);

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 294097884]:
if (test3_50(D) != 0)
  goto <bb 11>; [33.00%]
else
  goto <bb 12>; [67.00%]

=======is loop:0=========

 bb index 11 
<bb 11> [local count: 97052301]:
foo (p_30);
exit (0);

=======is loop:0=========

 bb index 12 
<bb 12> [local count: 916452608]:
if (test_39(D) == test2_41(D))
  goto <bb 13>; [20.24%]
else
  goto <bb 14>; [79.76%]

=======is loop:0=========

 bb index 13 
<bb 13> [local count: 185490007]:
foo9 (p5_38);
goto <bb 19>; [100.00%]

=======is loop:0=========

 bb index 14 
<bb 14> [local count: 730962601]:
if (test_39(D) >= test2_41(D))
  goto <bb 15>; [48.88%]
else
  goto <bb 16>; [51.12%]

=======is loop:0=========

 bb index 15 
<bb 15> [local count: 357294517]:
foo9 (p5_38);
goto <bb 19>; [100.00%]

=======is loop:0=========

 bb index 16 
<bb 16> [local count: 373668084]:
if (test_39(D) > test2_41(D))
  goto <bb 17>; [33.00%]
else
  goto <bb 18>; [67.00%]

=======is loop:0=========

 bb index 17 
<bb 17> [local count: 123310467]:
foo9 (p5_38);
foo (p4_54(D));

=======is loop:0=========

 bb index 18 
<bb 18> [local count: 373668084]:
foo9 (p5_38);

=======is loop:0=========

 bb index 19 
<bb 19> [local count: 976689525]:
return 0;

=======Mapping node_fun:foo9=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
free (z_2(D));
return;

=======Mapping node_fun:foo=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
free (z_2(D));
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 8 [0m
[40;34m    gimple free   count : 3 [0m
[40;34m    find Entry point : 12 [0m
[40;34m    used_stmt array stack totalsize of : 0.001776 mb[0m
[40;34m    collect time: : 0.000653 s [0m
[40;34m    algorithm time: 0.049135 s [0m
[40;34m    gimple stmt count : : 51 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cp                   ------------|      |      |      |      |          |          |
inline               ------------|      |      |      |      |          |          |
fixup_cfg            ------------|      |      |      |      |          |          |
adjust_alignment     ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
backprop             ------------|      |      |      |      |          |          |
phiprop              ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
alias                ------------|      |      |      |      |          |          |
retslot              ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
stdarg               ------------|      |      |      |      |          |          |
cdce                 ------------|      |      |      |      |          |          |
cselim               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
ifcombine            ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ch                   ------------|      |      |      |      |          |          |
cplxlower            ------------|      |      |      |      |          |          |
sra                  ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     +1.1%|     -0.1%|
copyprop                         |      |      |      |      |     +1.1%|     -0.1%|
reassoc              ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
sincos               ------------|      |      |      |      |          |          |
laddress             ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
walloca              ------------|      |      |      |      |          |          |
sink                 ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
fix_loops            ------------|      |      |      |      |          |          |
no_loop              ------------|      |      |      |      |          |          |
veclower2            ------------|      |      |      |      |          |          |
switchlower          ------------|      |      |      |      |          |          |
reassoc              ------------|      |      |      |      |          |          |
slsr                 ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     +1.1%|     -0.0%|
strlen                           |      |      |      |      |     +1.1%|     -0.0%|
copyprop             ------------|      |      |      |      |          |          |
wrestrict            ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
fab                  ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
crited               ------------|      |      |      |      |          |          |
uncprop              ------------|      |      |      |      |          |          |
local-pure-const     ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
nrv                  ------------|      |      |      |      |          |          |
isel                 ------------|      |      |      |      |          |          |
optimized            ------------|      |      |      |      |          |          |
expand                           |      |      |      |      |----------|----------|
vregs                            |      |      |      |      |    +73.6%|    +28.2%|
into_cfglayout                   |      |      |      |      |     -2.5%|     -1.0%|
jump                             |      |      |      |      |     -2.6%|     -1.0%|
subreg1              ------------|      |      |      |      |          |          |
dfinit               ------------|      |      |      |      |          |          |
cse1                 ------------|      |      |      |      |          |          |
fwprop1                          |      |      |      |      |     -3.0%|     -5.1%|
ce1                              |      |      |      |      |     -3.1%|     -5.4%|
reginfo              ------------|      |      |      |      |          |          |
loop2                ------------|      |      |      |      |          |          |
loop2_init           ------------|      |      |      |      |          |          |
loop2_invariant      ------------|      |      |      |      |          |          |
loop2_done           ------------|      |      |      |      |          |          |
dse1                 ------------|      |      |      |      |          |          |
fwprop2              ------------|      |      |      |      |          |          |
init-regs                        |      |      |      |      |     +7.1%|     +4.5%|
combine                          |      |      |      |      |    -24.3%|     -6.7%|
ce2                              |      |    +1|      |      |    -40.8%|    -11.8%|
outof_cfglayout      ------------|      |      |      |      |          |          |
split1               ------------|      |      |      |      |          |          |
subreg3              ------------|      |      |      |      |          |          |
mode_sw              ------------|      |      |      |      |          |          |
asmcons              ------------|      |      |      |      |          |          |
ira                              |      |      |      |      |     -0.7%|     -0.7%|
reload                           |      |      |      |      |    -14.9%|    -15.0%|
postreload                       |      |      |      |      |    -16.7%|    -16.8%|
split2               ------------|      |      |      |      |          |          |
cmpelim              ------------|      |      |      |      |          |          |
pro_and_epilogue                 |      |      |      |      |     +7.4%|     +7.4%|
dse2                             |      |      |      |      |     +6.9%|     +6.9%|
csa                  ------------|      |      |      |      |          |          |
jump2                ------------|      |      |      |      |          |          |
ce3                  ------------|      |      |      |      |          |          |
cprop_hardreg        ------------|      |      |      |      |          |          |
rtl_dce              ------------|      |      |      |      |          |          |
bbro                 ------------|      |      |      |      |          |          |
split4               ------------|      |      |      |      |          |          |
stack                ------------|      |      |      |      |          |          |
zero_call_used_regs  ------------|      |      |      |      |          |          |
alignments           ------------|      |      |      |      |          |          |
