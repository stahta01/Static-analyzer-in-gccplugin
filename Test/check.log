test.c: In function â€˜fooâ€™:
test.c:14:5: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
  *z = malloc(10);
     ^
=======ipa_pta=========
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
# .MEM_8 = VDEF <.MEM_7(D)>
_1 = malloc (10);
# .MEM_8 = VDEF <.MEM_7(D)>
foo (p_3(D));
# .MEM_9 = VDEF <.MEM_8>
foo (p_3(D));
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
=======================================================
[40;44m =======node_fun:foo========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path foo  function_call count: 1 level :0========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======start_check_funciton:foo========= [0m

dot graph START

======================================================================
 <ssa_name 0x7ff2b9556750
    type <pointer_type 0x7ff2b95690a8
        type <void_type 0x7ff2b9562f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7ff2b95690a8>>
        public unsigned DI
        size <integer_cst 0x7ff2b954ebe8 constant 64>
        unit size <integer_cst 0x7ff2b954ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7ff2b956ebd0>>
   
    def_stmt _1 = malloc (10);
    version 1
    ptr-info 0x7ff2b9095b10>

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo
dot graph target entry end

_2 = (long int) _1;
In function â€˜fooâ€™:
test.c:14:5: warning: use location
  *z = malloc(10);
     ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
_1 = malloc (10);
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = (long int) _1;
test.c:14:5: warning: use location
  *z = malloc(10);
     ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
_1 = malloc (10);
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
dot graph target loc end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph stmt start _2 = (long int) _1;
_1 = malloc (10);
dot graph stmt end

dot graph stmt start _2 = (long int) _1;
test.c:14:5: warning: use location
  *z = malloc(10);
     ^
dot graph stmt end

dot graph entry foo
dot graph target entry end

_3 = (int) _2;
test.c:14:5: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
_1 = malloc (10);
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = (int) _2;
test.c:14:5: warning: use location
  *z = malloc(10);
     ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
_1 = malloc (10);
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
dot graph target loc end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph stmt start _3 = (int) _2;
_1 = malloc (10);
dot graph stmt end

dot graph stmt start _3 = (int) _2;
test.c:14:5: warning: use location
  *z = malloc(10);
     ^
dot graph stmt end

dot graph entry foo
dot graph target entry end

*z_6(D) = _3;
test.c:14:5: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
_1 = malloc (10);
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: *z_6(D) = _3;
test.c:14:5: warning: use location
  *z = malloc(10);
     ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
_1 = malloc (10);
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
dot graph target loc end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph stmt start *z_6(D) = _3;
_1 = malloc (10);
dot graph stmt end

dot graph stmt start *z_6(D) = _3;
test.c:14:5: warning: use location
  *z = malloc(10);
     ^
dot graph stmt end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_687827018 dot graph subgraph  _2 = (long int) _1;
_1 = malloc (10);
dot graph subgrapend

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_267789109 dot graph subgraph  _3 = (int) _2;
_2 = (long int) _1;
dot graph subgrapend

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1099518158 dot graph subgraph  *z_6(D) = _3;
_3 = (int) _2;
dot graph subgrapend

 <ssa_name 0x7ff2b9556750
    type <pointer_type 0x7ff2b95690a8
        type <void_type 0x7ff2b9562f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7ff2b95690a8>>
        public unsigned DI
        size <integer_cst 0x7ff2b954ebe8 constant 64>
        unit size <integer_cst 0x7ff2b954ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7ff2b956ebd0>>
   
    def_stmt _1 = malloc (10);
    version 1
    ptr-info 0x7ff2b9095b10>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <integer_cst 0x7ff2b9095ab0 type <integer_type 0x7ff2b90929d8 size_t> constant 10>
[40;33m =======POP node_fun stack:foo========= [0m
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;44m =======print_function_path foo  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======start_check_funciton:foo========= [0m

dot graph START

======================================================================
 <ssa_name 0x7ff2b9556750
    type <pointer_type 0x7ff2b95690a8
        type <void_type 0x7ff2b9562f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7ff2b95690a8>>
        public unsigned DI
        size <integer_cst 0x7ff2b954ebe8 constant 64>
        unit size <integer_cst 0x7ff2b954ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7ff2b956ebd0>>
   
    def_stmt _1 = malloc (10);
    version 1
    ptr-info 0x7ff2b9095b10>

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo
dot graph target entry end

_2 = (long int) _1;
In function â€˜mainâ€™:
test.c:14:5: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
_1 = malloc (10);
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = (long int) _1;
test.c:14:5: warning: use location
  *z = malloc(10);
     ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
_1 = malloc (10);
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
dot graph target loc end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph stmt start _2 = (long int) _1;
_1 = malloc (10);
dot graph stmt end

dot graph stmt start _2 = (long int) _1;
test.c:14:5: warning: use location
  *z = malloc(10);
     ^
dot graph stmt end

dot graph entry foo
dot graph target entry end

_3 = (int) _2;
test.c:14:5: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
_1 = malloc (10);
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: _3 = (int) _2;
test.c:14:5: warning: use location
  *z = malloc(10);
     ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
_1 = malloc (10);
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
dot graph target loc end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph stmt start _3 = (int) _2;
_1 = malloc (10);
dot graph stmt end

dot graph stmt start _3 = (int) _2;
test.c:14:5: warning: use location
  *z = malloc(10);
     ^
dot graph stmt end

dot graph entry foo
dot graph target entry end

*z_6(D) = _3;
test.c:14:5: warning: use location
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
_1 = malloc (10);
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: *z_6(D) = _3;
test.c:14:5: warning: use location
  *z = malloc(10);
     ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
_1 = malloc (10);
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
dot graph target loc end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph stmt start *z_6(D) = _3;
_1 = malloc (10);
dot graph stmt end

dot graph stmt start *z_6(D) = _3;
test.c:14:5: warning: use location
  *z = malloc(10);
     ^
dot graph stmt end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_651610356 dot graph subgraph  _2 = (long int) _1;
_1 = malloc (10);
dot graph subgrapend

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_614342762 dot graph subgraph  _3 = (int) _2;
_2 = (long int) _1;
dot graph subgrapend

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1497961049 dot graph subgraph  *z_6(D) = _3;
_3 = (int) _2;
dot graph subgrapend

 <ssa_name 0x7ff2b9556750
    type <pointer_type 0x7ff2b95690a8
        type <void_type 0x7ff2b9562f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7ff2b95690a8>>
        public unsigned DI
        size <integer_cst 0x7ff2b954ebe8 constant 64>
        unit size <integer_cst 0x7ff2b954ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7ff2b956ebd0>>
   
    def_stmt _1 = malloc (10);
    version 1
    ptr-info 0x7ff2b9095b10>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <integer_cst 0x7ff2b9095ab0 type <integer_type 0x7ff2b90929d8 size_t> constant 10>
[40;33m =======POP node_fun stack:foo========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7ff2b9556990
    type <pointer_type 0x7ff2b9569a80
        type <integer_type 0x7ff2b95625e8 int public SI
            size <integer_cst 0x7ff2b954ee28 constant 32>
            unit size <integer_cst 0x7ff2b954ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7ff2b95625e8 precision 32 min <integer_cst 0x7ff2b954ede0 -2147483648> max <integer_cst 0x7ff2b954edf8 2147483647>
            pointer_to_this <pointer_type 0x7ff2b9569a80>>
        public unsigned DI
        size <integer_cst 0x7ff2b954ebe8 constant 64>
        unit size <integer_cst 0x7ff2b954ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7ff2ba2e3c60 p>
    def_stmt GIMPLE_NOP
    version 3
    ptr-info 0x7ff2b9095b40>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

free (p_3(D));
test.c:28:2: warning: use location
  free(p);
  ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
foo (p_3(D));
test.c:22:2: warning: use location
  foo(p);
  ^
dot graph target loc en1

dot graph target line desc form basic block 4: free (p_3(D));
test.c:28:2: warning: use location
  free(p);
  ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
foo (p_3(D));
test.c:22:2: warning: use location
  foo(p);
  ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start free (p_3(D));
foo (p_3(D));
dot graph stmt end

dot graph stmt start free (p_3(D));
test.c:28:2: warning: use location
  free(p);
  ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (p_3(D));
test.c:28:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

free (p_3(D));
test.c:26:3: warning: use location
   free(p);
   ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
foo (p_3(D));
test.c:22:2: warning: use location
  foo(p);
  ^
dot graph target loc en1

dot graph target line desc form basic block 3: free (p_3(D));
test.c:26:3: warning: use location
   free(p);
   ^
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
foo (p_3(D));
test.c:22:2: warning: use location
  foo(p);
  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start free (p_3(D));
foo (p_3(D));
dot graph stmt end

dot graph stmt start free (p_3(D));
test.c:26:3: warning: use location
   free(p);
   ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (p_3(D));
test.c:26:3: warning: use location
[40;32m    HAS FREE STMT count:2 name:free [0m

 ================== find ================== 

 Expand conflict 
 The same function may have multiple branches :foo
# .MEM_8 = VDEF <.MEM_7(D)>
foo (p_3(D));
test.c:22:2: warning: use location
  foo(p);
  ^
# .MEM_9 = VDEF <.MEM_8>
foo (p_3(D));
test.c:25:3: warning: use location
   foo(p);
   ^
# .MEM_8 = VDEF <.MEM_7(D)>
foo (p_3(D));
dot graph entry main
dot graph target entry end

foo (p_3(D));
test.c:22:2: warning: use location
  foo(p);
  ^
dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
foo (p_3(D));
test.c:22:2: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: foo (p_3(D));
test.c:22:2: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_8 = VDEF <.MEM_7(D)>
foo (p_3(D));
test.c:22:2: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start foo (p_3(D));
foo (p_3(D));
dot graph stmt end

dot graph stmt start foo (p_3(D));
test.c:22:2: warning: use location
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
 <ssa_name 0x7ff2b9556990
    type <pointer_type 0x7ff2b9569a80
        type <integer_type 0x7ff2b95625e8 int public SI
            size <integer_cst 0x7ff2b954ee28 constant 32>
            unit size <integer_cst 0x7ff2b954ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7ff2b95625e8 precision 32 min <integer_cst 0x7ff2b954ede0 -2147483648> max <integer_cst 0x7ff2b954edf8 2147483647>
            pointer_to_this <pointer_type 0x7ff2b9569a80>>
        public unsigned DI
        size <integer_cst 0x7ff2b954ebe8 constant 64>
        unit size <integer_cst 0x7ff2b954ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7ff2ba2e3c60 p>
    def_stmt GIMPLE_NOP
    version 3
    ptr-info 0x7ff2b9095b40>
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
dot graph arrowdot graph start relate for1ID : 816873886
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 808575684 stmt(call) :_1 = malloc (10);
In function â€˜fooâ€™:
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
10
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:2 
dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_1000307845 dot graph subgraph  free (p_3(D));
GIMPLE_NOP
dot graph subgrapend

 <ssa_name 0x7ff2b9556990
    type <pointer_type 0x7ff2b9569a80
        type <integer_type 0x7ff2b95625e8 int public SI
            size <integer_cst 0x7ff2b954ee28 constant 32>
            unit size <integer_cst 0x7ff2b954ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7ff2b95625e8 precision 32 min <integer_cst 0x7ff2b954ede0 -2147483648> max <integer_cst 0x7ff2b954edf8 2147483647>
            pointer_to_this <pointer_type 0x7ff2b9569a80>>
        public unsigned DI
        size <integer_cst 0x7ff2b954ebe8 constant 64>
        unit size <integer_cst 0x7ff2b954ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7ff2ba2e3c60 p>
    def_stmt GIMPLE_NOP
    version 3
    ptr-info 0x7ff2b9095b40>
dot graph start relate for1ID : 816873886
from foo basic block 2dot graph end relate end

subgraph cluster_1699073064 dot graph subgraph  start ID : 808575684 stmt(relate) ï¼Œ Tree ID : 816873886 : _1 = malloc (10);
In function â€˜mainâ€™:
test.c:14:7: warning: use location
dot graph subgrapend


 ================== Start Use after free Check ================== 
# .MEM_10 = VDEF <.MEM_9>
free (p_3(D));
test.c:26:3: warning: Use after free error!: free location 
   free(p);
   ^
# .MEM_11 = VDEF <.MEM_6>
free (p_3(D));
test.c:28:2: warning: use location
  free(p);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7ff2b9556990
    type <pointer_type 0x7ff2b9569a80
        type <integer_type 0x7ff2b95625e8 int public SI
            size <integer_cst 0x7ff2b954ee28 constant 32>
            unit size <integer_cst 0x7ff2b954ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7ff2b95625e8 precision 32 min <integer_cst 0x7ff2b954ede0 -2147483648> max <integer_cst 0x7ff2b954edf8 2147483647>
            pointer_to_this <pointer_type 0x7ff2b9569a80>>
        public unsigned DI
        size <integer_cst 0x7ff2b954ebe8 constant 64>
        unit size <integer_cst 0x7ff2b954ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7ff2ba2e3c60 p>
    def_stmt GIMPLE_NOP
    version 3
    ptr-info 0x7ff2b9095b40>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

free (p_3(D));
test.c:28:2: warning: use location
dot graph target loc start # .MEM_9 = VDEF <.MEM_8>
foo (p_3(D));
test.c:25:3: warning: use location
   foo(p);
   ^
dot graph target loc en1

dot graph target line desc form basic block 4: free (p_3(D));
test.c:28:2: warning: use location
  free(p);
  ^
dot graph target line desend

dot graph target loc start # .MEM_9 = VDEF <.MEM_8>
foo (p_3(D));
test.c:25:3: warning: use location
   foo(p);
   ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start free (p_3(D));
foo (p_3(D));
dot graph stmt end

dot graph stmt start free (p_3(D));
test.c:28:2: warning: use location
  free(p);
  ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (p_3(D));
test.c:28:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

free (p_3(D));
test.c:26:3: warning: use location
   free(p);
   ^
dot graph target loc start # .MEM_9 = VDEF <.MEM_8>
foo (p_3(D));
test.c:25:3: warning: use location
   foo(p);
   ^
dot graph target loc en1

dot graph target line desc form basic block 3: free (p_3(D));
test.c:26:3: warning: use location
   free(p);
   ^
dot graph target line desend

dot graph target loc start # .MEM_9 = VDEF <.MEM_8>
foo (p_3(D));
test.c:25:3: warning: use location
   foo(p);
   ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start free (p_3(D));
foo (p_3(D));
dot graph stmt end

dot graph stmt start free (p_3(D));
test.c:26:3: warning: use location
   free(p);
   ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (p_3(D));
test.c:26:3: warning: use location
[40;32m    HAS FREE STMT count:2 name:free [0m

 ================== find ================== 
# .MEM_9 = VDEF <.MEM_8>
foo (p_3(D));
dot graph entry main
dot graph target entry end

foo (p_3(D));
test.c:25:3: warning: use location
   foo(p);
   ^
dot graph target loc start # .MEM_9 = VDEF <.MEM_8>
foo (p_3(D));
test.c:25:3: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: foo (p_3(D));
test.c:25:3: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_9 = VDEF <.MEM_8>
foo (p_3(D));
test.c:25:3: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start foo (p_3(D));
foo (p_3(D));
dot graph stmt end

dot graph stmt start foo (p_3(D));
test.c:25:3: warning: use location
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
 <ssa_name 0x7ff2b9556990
    type <pointer_type 0x7ff2b9569a80
        type <integer_type 0x7ff2b95625e8 int public SI
            size <integer_cst 0x7ff2b954ee28 constant 32>
            unit size <integer_cst 0x7ff2b954ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7ff2b95625e8 precision 32 min <integer_cst 0x7ff2b954ede0 -2147483648> max <integer_cst 0x7ff2b954edf8 2147483647>
            pointer_to_this <pointer_type 0x7ff2b9569a80>>
        public unsigned DI
        size <integer_cst 0x7ff2b954ebe8 constant 64>
        unit size <integer_cst 0x7ff2b954ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7ff2ba2e3c60 p>
    def_stmt GIMPLE_NOP
    version 3
    ptr-info 0x7ff2b9095b40>
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
dot graph arrowdot graph start relate for1ID : 281028683
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 77482900 stmt(call) :_1 = malloc (10);
In function â€˜fooâ€™:
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
10
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:2 

 Expand conflict 
 The same function may have multiple branches :foo
# .MEM_9 = VDEF <.MEM_8>
foo (p_3(D));
In function â€˜mainâ€™:
test.c:25:3: warning: use location
   foo(p);
   ^
# .MEM_8 = VDEF <.MEM_7(D)>
foo (p_3(D));
test.c:22:2: warning: use location
  foo(p);
  ^
dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_1242377428 dot graph subgraph  free (p_3(D));
GIMPLE_NOP
dot graph subgrapend

 <ssa_name 0x7ff2b9556990
    type <pointer_type 0x7ff2b9569a80
        type <integer_type 0x7ff2b95625e8 int public SI
            size <integer_cst 0x7ff2b954ee28 constant 32>
            unit size <integer_cst 0x7ff2b954ee40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7ff2b95625e8 precision 32 min <integer_cst 0x7ff2b954ede0 -2147483648> max <integer_cst 0x7ff2b954edf8 2147483647>
            pointer_to_this <pointer_type 0x7ff2b9569a80>>
        public unsigned DI
        size <integer_cst 0x7ff2b954ebe8 constant 64>
        unit size <integer_cst 0x7ff2b954ec00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7ff2ba2e3c60 p>
    def_stmt GIMPLE_NOP
    version 3
    ptr-info 0x7ff2b9095b40>
dot graph start relate for1ID : 816873886
from foo basic block 2dot graph end relate end

subgraph cluster_592957309 dot graph subgraph  start ID : 808575684 stmt(relate) ï¼Œ Tree ID : 816873886 : _1 = malloc (10);
test.c:14:7: warning: use location
  *z = malloc(10);
       ^
dot graph subgrapend

dot graph start relate for1ID : 281028683
from foo basic block 2dot graph end relate end

subgraph cluster_1731616726 dot graph subgraph  start ID : 77482900 stmt(relate) ï¼Œ Tree ID : 281028683 : _1 = malloc (10);
test.c:14:7: warning: use location
dot graph subgrapend


 ================== Start Use after free Check ================== 
# .MEM_10 = VDEF <.MEM_9>
free (p_3(D));
test.c:26:3: warning: Use after free error!: free location 
   free(p);
   ^
# .MEM_11 = VDEF <.MEM_6>
free (p_3(D));
test.c:28:2: warning: use location
  free(p);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh
=======Mapping node_fun:foo=========
<bb 2> [100.00%]:
_1 = malloc (10);
_2 = (long int) _1;
_3 = (int) _2;
*z_6(D) = _3;
return;

=======is loop:0=========
=======Mapping node_fun:main=========
<bb 2> [100.00%]:
foo (p_3(D));
if (test_5(D) != 0)
  goto <bb 3>; [36.64%]
else
  goto <bb 4>; [63.36%]

=======is loop:0=========
<bb 3> [36.64%]:
foo (p_3(D));
free (p_3(D));

=======is loop:0=========
<bb 4> [100.00%]:
free (p_3(D));
return 0;

=======is loop:0=========
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 2 [0m
[40;34m    used_stmt array stack totalsize of : 208 [0m
[40;34m    collect time: : 0.000065 s [0m
[40;34m    algorithm time: 0.005114 s [0m
[40;34m    gimple stmt count : : 11 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
