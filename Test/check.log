test.c: In function â€˜mainâ€™:
test.c:53:14: warning: assignment to â€˜intâ€™ from â€˜char *â€™ makes integer from pointer without a cast [-Wint-conversion]
   53 |         q[0] = "0";
      |              ^
test.c:54:14: warning: assignment to â€˜intâ€™ from â€˜char *â€™ makes integer from pointer without a cast [-Wint-conversion]
   54 |         q[1] = "0";
      |              ^
test.c:73:13: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
   73 |         foo(p);
      |             ^
      |             |
      |             struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:115:29: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  115 |                         foo(p);
      |                             ^
      |                             |
      |                             struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:118:37: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  118 |                                 foo(p);
      |                                     ^
      |                                     |
      |                                     struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:121:37: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  121 |                                 foo(p);
      |                                     ^
      |                                     |
      |                                     struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:125:29: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  125 |                         foo(p);
      |                             ^
      |                             |
      |                             struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:136:29: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  136 |                         foo(p);
      |                             ^
      |                             |
      |                             struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
test.c:141:21: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  141 |                 foo(p);
      |                     ^
      |                     |
      |                     struct st *
test.c:27:14: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
   27 | int foo(int *z)
      |         ~~~~~^
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cfg                  ------------|      |      |      |      |          |          |
ompexp                           |      |      |      |      |   +100.0%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
ssa                              |      |      |      |      |     -0.8%|          |
nothrow                          |      |      |      |      |     -0.8%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
einline              ------------|      |      |      |      |          |          |
early_optimizations  ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
forwprop                         |      |      |      |      |     -1.7%|          |
ethread                          |      |      |      |      |     -1.7%|          |
esra                 ------------|      |      |      |      |          |          |
ealias               ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
iftoswitch           ------------|      |      |      |      |          |          |
profile_estimate     ------------|      |      |      |      |          |          |
local-pure-const                 |      |      |      |      |          |   +100.0%|
release_ssa          ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
--------GIMPLE Cond -------
succs:= 4
--------GIMPLE Cond -------
succs:= 5
--------GIMPLE Cond -------
succs:= 7
--------GIMPLE_SWITCH -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 13
succs:= 14
--------GIMPLE Cond -------
succs:= 15
succs:= 15
succs:= 14
--------GIMPLE Cond -------
succs:= 18
succs:= 18
--------GIMPLE Cond -------
succs:= 21
--------GIMPLE Cond -------
succs:= 22
--------GIMPLE Cond -------
succs:= 23
--------GIMPLE Cond -------
succs:= 13
succs:= 24
--------GIMPLE Cond -------
succs:= 24
succs:= 26
succs:= 5
succs:= 22
succs:= 23
succs:= 26
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);
# .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);
# .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);
# .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
# .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
# .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
# .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
# .MEM_100 = VDEF <.MEM_99>
foo (p_45);
# .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
# .MEM_102 = VDEF <.MEM_81>
foo (p5_52(D));
# .MEM_104 = VDEF <.MEM_102>
foo (p5_52(D));
# .MEM_103 = VDEF <.MEM_102>
foo (p5_52(D));
# .MEM_105 = VDEF <.MEM_102>
foo (p5_52(D));
# .MEM_111 = VDEF <.MEM_82>
foo (p_45);
# .MEM_113 = VDEF <.MEM_111>
foo (p_45);
# .MEM_112 = VDEF <.MEM_111>
foo (p_45);
# .MEM_108 = VDEF <.MEM_82>
foo (p_45);
# .MEM_110 = VDEF <.MEM_108>
foo (p3_65(D));
# .MEM_109 = VDEF <.MEM_108>
foo (p5_52(D));
# .MEM_114 = VDEF <.MEM_84>
foo (p_45);
# .MEM_107 = VDEF <.MEM_82>
foo (p_45);
# .MEM_106 = VDEF <.MEM_82>
foo (p4_60(D));
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path foo  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======start_check_funciton:foo========= [0m
[40;33m =======POP node_fun stack:foo========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa91e8b6ca8
    type <pointer_type 0x7fa91e8ca9d8
        type <integer_type 0x7fa91e8c35e8 int public SI
            size <integer_cst 0x7fa91e8aedf8 constant 32>
            unit-size <integer_cst 0x7fa91e8aee10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa91e8c35e8 precision:32 min <integer_cst 0x7fa91e8aedb0 -2147483648> max <integer_cst 0x7fa91e8aedc8 2147483647>
            pointer_to_this <pointer_type 0x7fa91e8ca9d8>>
        public unsigned DI
        size <integer_cst 0x7fa91e8aebb8 constant 64>
        unit-size <integer_cst 0x7fa91e8aebd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa91f156c60 p6>
    def_stmt p6_34 = malloc (100);
    version:34
    ptr-info 0x7fa91e3e62b8>
# .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

MEM[(int *)p6_34 + 4B] = _4;
In function â€˜mainâ€™:
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^
dot graph target loc start # .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);
test.c:50:19: warning: use location
   50 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);
test.c:50:19: warning: use location
   50 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(int *)p6_34 + 4B] = _4;
p6_34 = malloc (100);
dot graph stmt end

dot graph stmt start MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
dot graph target loc start # .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);
test.c:50:19: warning: use location
   50 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);
test.c:50:19: warning: use location
   50 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(int *)p6_34 + 4B] = _4;
p6_34 = malloc (100);
dot graph stmt end

dot graph stmt start MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

*p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^
dot graph target loc start # .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);
test.c:50:19: warning: use location
   50 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);
test.c:50:19: warning: use location
   50 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start *p6_34 = _2;
p6_34 = malloc (100);
dot graph stmt end

dot graph stmt start *p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

*p6_34 = _2;
test.c:53:14: warning: use location
dot graph target loc start # .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);
test.c:50:19: warning: use location
   50 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);
test.c:50:19: warning: use location
   50 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start *p6_34 = _2;
p6_34 = malloc (100);
dot graph stmt end

dot graph stmt start *p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
   52 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc start # .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);
test.c:50:19: warning: use location
   50 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
   52 |         p6 = realloc(p6, 100);
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);
test.c:50:19: warning: use location
   50 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p6_36 = realloc (p6_34, 100);
p6_34 = malloc (100);
dot graph stmt end

dot graph stmt start p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
   52 |         p6 = realloc(p6, 100);
      |              ^
dot graph stmt end

dot graph target color descreddot graph target color desend

If realloc() fails, the initial memory block will not be freed() this stmt is child function---realloc-----

 ================== find ================== 
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
[40;32m    FIND realloc STMT count:0 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

p6_34 = malloc (100);
test.c:50:19: warning: use location
   50 |         int *p6 = malloc(100);
      |                   ^
dot graph target loc start # .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);
test.c:50:19: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: p6_34 = malloc (100);
test.c:50:19: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_87 = VDEF <.MEM_86(D)>
p6_34 = malloc (100);
test.c:50:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p6_34 = malloc (100);
p6_34 = malloc (100);
dot graph stmt end

dot graph stmt start p6_34 = malloc (100);
test.c:50:19: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1948566481 dot graph subgraph  MEM[(int *)p6_34 + 4B] = _4;
p6_34 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1494983770 dot graph subgraph  MEM[(int *)p6_34 + 4B] = _4;
_4 = (int) _3;
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_739063418 dot graph subgraph  *p6_34 = _2;
p6_34 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_826643017 dot graph subgraph  *p6_34 = _2;
_2 = (int) _1;
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_487124108 dot graph subgraph  p6_36 = realloc (p6_34, 100);
p6_34 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_2126953673 dot graph subgraph  p6_34 = malloc (100);
p6_34 = malloc (100);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: Use after free error!: free location 
   52 |         p6 = realloc(p6, 100);
      |              ^
# .MEM_90 = VDEF <.MEM_89>
MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: Use after free error!: free location 
   52 |         p6 = realloc(p6, 100);
      |              ^
# .MEM_90 = VDEF <.MEM_89>
MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: Use after free error!: free location 
   52 |         p6 = realloc(p6, 100);
      |              ^
# .MEM_89 = VDEF <.MEM_88>
*p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: Use after free error!: free location 
   52 |         p6 = realloc(p6, 100);
      |              ^
# .MEM_89 = VDEF <.MEM_88>
*p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa91e8b6cf0
    type <pointer_type 0x7fa91e8ca9d8
        type <integer_type 0x7fa91e8c35e8 int public SI
            size <integer_cst 0x7fa91e8aedf8 constant 32>
            unit-size <integer_cst 0x7fa91e8aee10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa91e8c35e8 precision:32 min <integer_cst 0x7fa91e8aedb0 -2147483648> max <integer_cst 0x7fa91e8aedc8 2147483647>
            pointer_to_this <pointer_type 0x7fa91e8ca9d8>>
        public unsigned DI
        size <integer_cst 0x7fa91e8aebb8 constant 64>
        unit-size <integer_cst 0x7fa91e8aebd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa91f156c60 p6>
    def_stmt p6_36 = realloc (p6_34, 100);
    version:36
    ptr-info 0x7fa91e3e62d0>
# .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^
dot graph target loc start # .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
   52 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
   52 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(int *)p6_34 + 4B] = _4;
p6_36 = realloc (p6_34, 100);
dot graph stmt end

dot graph stmt start MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
dot graph target loc start # .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
   52 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
   52 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(int *)p6_34 + 4B] = _4;
p6_36 = realloc (p6_34, 100);
dot graph stmt end

dot graph stmt start MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

*p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^
dot graph target loc start # .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
   52 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
   52 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start *p6_34 = _2;
p6_36 = realloc (p6_34, 100);
dot graph stmt end

dot graph stmt start *p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

*p6_34 = _2;
test.c:53:14: warning: use location
dot graph target loc start # .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
   52 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^
dot graph target line desend

dot graph target loc start # .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
   52 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start *p6_34 = _2;
p6_36 = realloc (p6_34, 100);
dot graph stmt end

dot graph stmt start *p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
   52 |         p6 = realloc(p6, 100);
      |              ^
dot graph target loc start # .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p6_36 = realloc (p6_34, 100);
p6_36 = realloc (p6_34, 100);
dot graph stmt end

dot graph stmt start p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
dot graph stmt end

dot graph target color descreddot graph target color desend

If realloc() fails, the initial memory block will not be freed() this stmt is child function---realloc-----

 ================== find ================== 
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
[40;32m    FIND realloc STMT count:0 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
dot graph target loc start # .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p6_36 = realloc (p6_34, 100);
p6_36 = realloc (p6_34, 100);
dot graph stmt end

dot graph stmt start p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
dot graph stmt end

dot graph target color descreddot graph target color desend

If realloc() fails, the initial memory block will not be freed() this stmt is child function---realloc-----

 ================== find ================== 
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: use location
[40;32m    FIND realloc STMT count:0 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1019231621 dot graph subgraph  MEM[(int *)p6_34 + 4B] = _4;
p6_34 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_893111875 dot graph subgraph  MEM[(int *)p6_34 + 4B] = _4;
_4 = (int) _3;
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_210994399 dot graph subgraph  *p6_34 = _2;
p6_34 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1790203769 dot graph subgraph  *p6_34 = _2;
_2 = (int) _1;
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1882442549 dot graph subgraph  p6_36 = realloc (p6_34, 100);
p6_34 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1373473857 dot graph subgraph  p6_36 = realloc (p6_34, 100);
p6_36 = realloc (p6_34, 100);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: Use after free error!: free location 
# .MEM_90 = VDEF <.MEM_89>
MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: Use after free error!: free location 
   52 |         p6 = realloc(p6, 100);
      |              ^
# .MEM_90 = VDEF <.MEM_89>
MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: Use after free error!: free location 
   52 |         p6 = realloc(p6, 100);
      |              ^
# .MEM_90 = VDEF <.MEM_89>
MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: Use after free error!: free location 
   52 |         p6 = realloc(p6, 100);
      |              ^
# .MEM_90 = VDEF <.MEM_89>
MEM[(int *)p6_34 + 4B] = _4;
test.c:54:14: warning: use location
   54 |         q[1] = "0";
      |              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: Use after free error!: free location 
   52 |         p6 = realloc(p6, 100);
      |              ^
# .MEM_89 = VDEF <.MEM_88>
*p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: Use after free error!: free location 
   52 |         p6 = realloc(p6, 100);
      |              ^
# .MEM_89 = VDEF <.MEM_88>
*p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: Use after free error!: free location 
   52 |         p6 = realloc(p6, 100);
      |              ^
# .MEM_89 = VDEF <.MEM_88>
*p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_88 = VDEF <.MEM_87>
p6_36 = realloc (p6_34, 100);
test.c:52:14: warning: Use after free error!: free location 
   52 |         p6 = realloc(p6, 100);
      |              ^
# .MEM_89 = VDEF <.MEM_88>
*p6_34 = _2;
test.c:53:14: warning: use location
   53 |         q[0] = "0";
      |              ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa91e8b6d38
    type <pointer_type 0x7fa91e3d7348
        type <record_type 0x7fa91e3d7f18 st TI
            size <integer_cst 0x7fa91e8aec00 constant 128>
            unit-size <integer_cst 0x7fa91e8aec18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa91e3d7f18 fields <field_decl 0x7fa91e3da1c8 flag> context <translation_unit_decl 0x7fa91e8b9168 test.c>
            pointer_to_this <pointer_type 0x7fa91e3d7348>>
        public unsigned DI
        size <integer_cst 0x7fa91e8aebb8 constant 64>
        unit-size <integer_cst 0x7fa91e8aebd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa91f156bd0 p9>
    def_stmt p9_40 = malloc (0);
    version:40
    ptr-info 0x7fa91e3e62e8>
# .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

free (p9_40);
test.c:67:9: warning: use location
   67 |         free(p9);
      |         ^
dot graph target loc start # .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);
test.c:65:25: warning: use location
   65 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc en1

dot graph target line desc form basic block 2: free (p9_40);
test.c:67:9: warning: use location
   67 |         free(p9);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);
test.c:65:25: warning: use location
   65 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start free (p9_40);
p9_40 = malloc (0);
dot graph stmt end

dot graph stmt start free (p9_40);
test.c:67:9: warning: use location
   67 |         free(p9);
      |         ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (p9_40);
test.c:67:9: warning: use location
[40;32m    HAS FREE STMT count:0 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

MEM[(struct st *)p9_40 + 48B].f = _5;
test.c:66:17: warning: use location
   66 |         p9[3].f = malloc(1);
      |                 ^
dot graph target loc start # .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);
test.c:65:25: warning: use location
   65 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p9_40 + 48B].f = _5;
test.c:66:17: warning: use location
   66 |         p9[3].f = malloc(1);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);
test.c:65:25: warning: use location
   65 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p9_40 + 48B].f = _5;
p9_40 = malloc (0);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p9_40 + 48B].f = _5;
test.c:66:17: warning: use location
   66 |         p9[3].f = malloc(1);
      |                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(struct st *)p9_40 + 48B].f = _5;
test.c:66:17: warning: use location
dot graph target loc start # .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);
test.c:65:25: warning: use location
   65 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p9_40 + 48B].f = _5;
test.c:66:17: warning: use location
   66 |         p9[3].f = malloc(1);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);
test.c:65:25: warning: use location
   65 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p9_40 + 48B].f = _5;
p9_40 = malloc (0);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p9_40 + 48B].f = _5;
test.c:66:17: warning: use location
   66 |         p9[3].f = malloc(1);
      |                 ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_19 = _18->f;
test.c:82:27: warning: use location
   82 |                 free(p9[i].f);
      |                           ^
dot graph target loc start # .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);
test.c:65:25: warning: use location
   65 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc en1

dot graph target line desc form basic block 6: _19 = _18->f;
test.c:82:27: warning: use location
   82 |                 free(p9[i].f);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);
test.c:65:25: warning: use location
   65 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _19 = _18->f;
p9_40 = malloc (0);
dot graph stmt end

dot graph stmt start _19 = _18->f;
test.c:82:27: warning: use location
   82 |                 free(p9[i].f);
      |                           ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

free (_19);
test.c:82:17: warning: use location
   82 |                 free(p9[i].f);
      |                 ^
dot graph target loc start # .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);
test.c:65:25: warning: use location
   65 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc en1

dot graph target line desc form basic block 6: free (_19);
test.c:82:17: warning: use location
   82 |                 free(p9[i].f);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);
test.c:65:25: warning: use location
   65 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free (_19);
p9_40 = malloc (0);
dot graph stmt end

dot graph stmt start free (_19);
test.c:82:17: warning: use location
   82 |                 free(p9[i].f);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (_19);
test.c:82:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

p9_40 = malloc (0);
test.c:65:25: warning: use location
   65 |         struct st *p9 = malloc(0);
      |                         ^
dot graph target loc start # .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);
test.c:65:25: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: p9_40 = malloc (0);
test.c:65:25: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_91 = VDEF <.MEM_90>
p9_40 = malloc (0);
test.c:65:25: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p9_40 = malloc (0);
p9_40 = malloc (0);
dot graph stmt end

dot graph stmt start p9_40 = malloc (0);
test.c:65:25: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_1075847717 dot graph subgraph  _19 = _18->f;
_5 = malloc (1);
dot graph subgrapend

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_189588725 dot graph subgraph  free (_19);
_19 = _18->f;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_94 = VDEF <.MEM_93>
free (p9_40);
test.c:67:9: warning: Use after free error!: free location 
   67 |         free(p9);
      |         ^
# VUSE <.MEM_115>
_19 = _18->f;
test.c:82:27: warning: use location
   82 |                 free(p9[i].f);
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa91e8b6750
    type <pointer_type 0x7fa91e8ca000
        type <void_type 0x7fa91e8c3f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa91e8ca000>>
        public unsigned DI
        size <integer_cst 0x7fa91e8aebb8 constant 64>
        unit-size <integer_cst 0x7fa91e8aebd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa91e8cf9d8>>
   
    def_stmt _5 = malloc (1);
    version:5
    ptr-info 0x7fa91e3e61e0>
# .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p9_40 + 48B].f = _5;
test.c:66:17: warning: use location
   66 |         p9[3].f = malloc(1);
      |                 ^
dot graph target loc start # .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);
test.c:66:19: warning: use location
   66 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p9_40 + 48B].f = _5;
test.c:66:17: warning: use location
   66 |         p9[3].f = malloc(1);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);
test.c:66:19: warning: use location
   66 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p9_40 + 48B].f = _5;
_5 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p9_40 + 48B].f = _5;
test.c:66:17: warning: use location
   66 |         p9[3].f = malloc(1);
      |                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(struct st *)p9_40 + 48B].f = _5;
test.c:66:17: warning: use location
dot graph target loc start # .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);
test.c:66:19: warning: use location
   66 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p9_40 + 48B].f = _5;
test.c:66:17: warning: use location
   66 |         p9[3].f = malloc(1);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);
test.c:66:19: warning: use location
   66 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p9_40 + 48B].f = _5;
_5 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p9_40 + 48B].f = _5;
test.c:66:17: warning: use location
   66 |         p9[3].f = malloc(1);
      |                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free (p9_40);
test.c:67:9: warning: use location
   67 |         free(p9);
      |         ^
dot graph target loc start # .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);
test.c:66:19: warning: use location
   66 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 2: free (p9_40);
test.c:67:9: warning: use location
   67 |         free(p9);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);
test.c:66:19: warning: use location
   66 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start free (p9_40);
_5 = malloc (1);
dot graph stmt end

dot graph stmt start free (p9_40);
test.c:67:9: warning: use location
   67 |         free(p9);
      |         ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (p9_40);
test.c:67:9: warning: use location
[40;32m    HAS FREE STMT count:0 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_19 = _18->f;
test.c:82:27: warning: use location
   82 |                 free(p9[i].f);
      |                           ^
dot graph target loc start # .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);
test.c:66:19: warning: use location
   66 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 6: _19 = _18->f;
test.c:82:27: warning: use location
   82 |                 free(p9[i].f);
      |                           ^
dot graph target line desend

dot graph target loc start # .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);
test.c:66:19: warning: use location
   66 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _19 = _18->f;
_5 = malloc (1);
dot graph stmt end

dot graph stmt start _19 = _18->f;
test.c:82:27: warning: use location
   82 |                 free(p9[i].f);
      |                           ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

free (_19);
test.c:82:17: warning: use location
   82 |                 free(p9[i].f);
      |                 ^
dot graph target loc start # .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);
test.c:66:19: warning: use location
   66 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc en1

dot graph target line desc form basic block 6: free (_19);
test.c:82:17: warning: use location
   82 |                 free(p9[i].f);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);
test.c:66:19: warning: use location
   66 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free (_19);
_5 = malloc (1);
dot graph stmt end

dot graph stmt start free (_19);
test.c:82:17: warning: use location
   82 |                 free(p9[i].f);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (_19);
test.c:82:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

_5 = malloc (1);
test.c:66:19: warning: use location
   66 |         p9[3].f = malloc(1);
      |                   ^
dot graph target loc start # .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);
test.c:66:19: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = malloc (1);
test.c:66:19: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_92 = VDEF <.MEM_91>
_5 = malloc (1);
test.c:66:19: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _5 = malloc (1);
_5 = malloc (1);
dot graph stmt end

dot graph stmt start _5 = malloc (1);
test.c:66:19: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_2027967001 dot graph subgraph  _19 = _18->f;
_5 = malloc (1);
dot graph subgrapend

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_986956663 dot graph subgraph  free (_19);
_19 = _18->f;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_94 = VDEF <.MEM_93>
free (p9_40);
test.c:67:9: warning: Use after free error!: free location 
   67 |         free(p9);
      |         ^
# VUSE <.MEM_115>
_19 = _18->f;
test.c:82:27: warning: use location
   82 |                 free(p9[i].f);
      |                           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa91e8b6d80
    type <pointer_type 0x7fa91e3d7348
        type <record_type 0x7fa91e3d7f18 st TI
            size <integer_cst 0x7fa91e8aec00 constant 128>
            unit-size <integer_cst 0x7fa91e8aec18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa91e3d7f18 fields <field_decl 0x7fa91e3da1c8 flag> context <translation_unit_decl 0x7fa91e8b9168 test.c>
            pointer_to_this <pointer_type 0x7fa91e3d7348>>
        public unsigned DI
        size <integer_cst 0x7fa91e8aebb8 constant 64>
        unit-size <integer_cst 0x7fa91e8aebd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa91f156b40 p>
    def_stmt p_45 = malloc (10);
    version:45
    ptr-info 0x7fa91e3e6300>
# .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:141:17: warning: use location
  141 |                 foo(p);
      |                 ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 25: foo (p_45);
test.c:141:17: warning: use location
  141 |                 foo(p);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph stmt start foo (p_45);
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:141:17: warning: use location
  141 |                 foo(p);
      |                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 1529106370
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1035891968 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1035891968 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_114 = VDEF <.MEM_84>
foo (p_45);
bb index := 23
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 23 ,possiable got to succ := 28

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:136:25: warning: use location
  136 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 23: foo (p_45);
test.c:136:25: warning: use location
  136 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start foo (p_45);
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:136:25: warning: use location
  136 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 1513412295
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 2085369909 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2085369909 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:125:25: warning: use location
  125 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 18: foo (p_45);
test.c:125:25: warning: use location
  125 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start foo (p_45);
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:125:25: warning: use location
  125 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 1847193490
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1746103394 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1746103394 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:3 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:121:33: warning: use location
  121 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 17: foo (p_45);
test.c:121:33: warning: use location
  121 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start foo (p_45);
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:121:33: warning: use location
  121 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 2050813756
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1634697094 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1634697094 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:4 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:118:33: warning: use location
  118 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 16: foo (p_45);
test.c:118:33: warning: use location
  118 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start foo (p_45);
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:118:33: warning: use location
  118 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 1933546642
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 578898832 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 578898832 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:5 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:115:25: warning: use location
  115 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 15: foo (p_45);
test.c:115:25: warning: use location
  115 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start foo (p_45);
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:115:25: warning: use location
  115 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 617363109
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1827424272 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1827424272 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:6 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_14 = p_45 + _13;
test.c:81:23: warning: use location
   81 |                 free(p[i].f);
      |                       ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 6: _14 = p_45 + _13;
test.c:81:23: warning: use location
   81 |                 free(p[i].f);
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _14 = p_45 + _13;
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start _14 = p_45 + _13;
test.c:81:23: warning: use location
   81 |                 free(p[i].f);
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_15 = _14->f;
test.c:81:26: warning: use location
   81 |                 free(p[i].f);
      |                          ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 6: _15 = _14->f;
test.c:81:26: warning: use location
   81 |                 free(p[i].f);
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _15 = _14->f;
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start _15 = _14->f;
test.c:81:26: warning: use location
   81 |                 free(p[i].f);
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

free (_15);
test.c:81:17: warning: use location
   81 |                 free(p[i].f);
      |                 ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 6: free (_15);
test.c:81:17: warning: use location
   81 |                 free(p[i].f);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free (_15);
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start free (_15);
test.c:81:17: warning: use location
   81 |                 free(p[i].f);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (_15);
test.c:81:17: warning: use location
[40;32m    HAS FREE STMT count:6 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_118 = VDEF <.MEM_117>
_9->f = _10;
bb index := 3
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 28

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _9->f = _10;
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start _9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_99 = VDEF <.MEM_98>
MEM[(struct st *)p_45 + 32B].f = _11;
bb index := 5
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 28

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 5: MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_45 + 32B].f = _11;
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_100 = VDEF <.MEM_99>
foo (p_45);
bb index := 5
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 28

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:73:9: warning: use location
   73 |         foo(p);
      |         ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 5: foo (p_45);
test.c:73:9: warning: use location
   73 |         foo(p);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start foo (p_45);
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:73:9: warning: use location
   73 |         foo(p);
      |         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 1727264027
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1146102608 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1146102608 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with p ========= [0m
[40;36m ======= relate stmt argument:p ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:8 
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_45 + 48B].f = _6;
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_45 + 48B].f = _6;
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_45 = malloc (10);
test.c:68:24: warning: use location
   68 |         struct st *p = malloc(10);
      |                        ^
dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: p_45 = malloc (10);
test.c:68:24: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_95 = VDEF <.MEM_94>
p_45 = malloc (10);
test.c:68:24: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start p_45 = malloc (10);
p_45 = malloc (10);
dot graph stmt end

dot graph stmt start p_45 = malloc (10);
test.c:68:24: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph arrowsubgraph cluster_120854010 dot graph subgraph  foo (p_45);
p_45 = malloc (10);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_107 = VDEF <.MEM_82>
foo (p_45);
test.c:141:17: warning: use location
  141 |                 foo(p);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_114 = VDEF <.MEM_84>
foo (p_45);
test.c:136:25: warning: use location
  136 |                         foo(p);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_108 = VDEF <.MEM_82>
foo (p_45);
test.c:125:25: warning: use location
  125 |                         foo(p);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_112 = VDEF <.MEM_111>
foo (p_45);
test.c:121:33: warning: use location
  121 |                                 foo(p);
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_113 = VDEF <.MEM_111>
foo (p_45);
test.c:118:33: warning: use location
  118 |                                 foo(p);
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_111 = VDEF <.MEM_82>
foo (p_45);
test.c:115:25: warning: use location
  115 |                         foo(p);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_100 = VDEF <.MEM_99>
foo (p_45);
test.c:73:9: warning: Use after free error!: free location 
   73 |         foo(p);
      |         ^
_14 = p_45 + _13;
test.c:81:23: warning: use location
   81 |                 free(p[i].f);
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 4
if (i_21 <= 9)
test.c:70:27: warning: use location
   70 |         for (int i = 0; i < 10; i++)
      |                           ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_100 = VDEF <.MEM_99>
foo (p_45);
test.c:73:9: warning: Use after free error!: free location 
   73 |         foo(p);
      |         ^
# VUSE <.MEM_79>
_15 = _14->f;
test.c:81:26: warning: use location
   81 |                 free(p[i].f);
      |                          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 4
if (i_21 <= 9)
test.c:70:27: warning: use location
   70 |         for (int i = 0; i < 10; i++)
      |                           ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_100 = VDEF <.MEM_99>
foo (p_45);
test.c:73:9: warning: Use after free error!: free location 
   73 |         foo(p);
      |         ^
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: use location
   81 |                 free(p[i].f);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 4
if (i_21 <= 9)
test.c:70:27: warning: use location
   70 |         for (int i = 0; i < 10; i++)
      |                           ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;31m  	possible double free :8 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa91e8b6798
    type <pointer_type 0x7fa91e8ca000
        type <void_type 0x7fa91e8c3f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa91e8ca000>>
        public unsigned DI
        size <integer_cst 0x7fa91e8aebb8 constant 64>
        unit-size <integer_cst 0x7fa91e8aebd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa91e8cf9d8>>
   
    def_stmt _6 = malloc (1);
    version:6
    ptr-info 0x7fa91e3e61f8>
# .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_45 + 48B].f = _6;
_6 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_45 + 48B].f = _6;
_6 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

foo (p_45);
test.c:141:17: warning: use location
  141 |                 foo(p);
      |                 ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 25: foo (p_45);
test.c:141:17: warning: use location
  141 |                 foo(p);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph stmt start foo (p_45);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:141:17: warning: use location
  141 |                 foo(p);
      |                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_114 = VDEF <.MEM_84>
foo (p_45);
bb index := 23
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 23 ,possiable got to succ := 28

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:136:25: warning: use location
  136 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 23: foo (p_45);
test.c:136:25: warning: use location
  136 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start foo (p_45);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:136:25: warning: use location
  136 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:125:25: warning: use location
  125 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 18: foo (p_45);
test.c:125:25: warning: use location
  125 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start foo (p_45);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:125:25: warning: use location
  125 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:121:33: warning: use location
  121 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 17: foo (p_45);
test.c:121:33: warning: use location
  121 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start foo (p_45);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:121:33: warning: use location
  121 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:118:33: warning: use location
  118 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 16: foo (p_45);
test.c:118:33: warning: use location
  118 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start foo (p_45);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:118:33: warning: use location
  118 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:115:25: warning: use location
  115 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 15: foo (p_45);
test.c:115:25: warning: use location
  115 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start foo (p_45);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:115:25: warning: use location
  115 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_14 = p_45 + _13;
test.c:81:23: warning: use location
   81 |                 free(p[i].f);
      |                       ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _14 = p_45 + _13;
test.c:81:23: warning: use location
   81 |                 free(p[i].f);
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _14 = p_45 + _13;
_6 = malloc (1);
dot graph stmt end

dot graph stmt start _14 = p_45 + _13;
test.c:81:23: warning: use location
   81 |                 free(p[i].f);
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_15 = _14->f;
test.c:81:26: warning: use location
   81 |                 free(p[i].f);
      |                          ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _15 = _14->f;
test.c:81:26: warning: use location
   81 |                 free(p[i].f);
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _15 = _14->f;
_6 = malloc (1);
dot graph stmt end

dot graph stmt start _15 = _14->f;
test.c:81:26: warning: use location
   81 |                 free(p[i].f);
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

free (_15);
test.c:81:17: warning: use location
   81 |                 free(p[i].f);
      |                 ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: free (_15);
test.c:81:17: warning: use location
   81 |                 free(p[i].f);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free (_15);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start free (_15);
test.c:81:17: warning: use location
   81 |                 free(p[i].f);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (_15);
test.c:81:17: warning: use location
[40;32m    HAS FREE STMT count:0 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_118 = VDEF <.MEM_117>
_9->f = _10;
bb index := 3
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 28

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _9->f = _10;
_6 = malloc (1);
dot graph stmt end

dot graph stmt start _9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_99 = VDEF <.MEM_98>
MEM[(struct st *)p_45 + 32B].f = _11;
bb index := 5
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 28

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 5: MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_45 + 32B].f = _11;
_6 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_100 = VDEF <.MEM_99>
foo (p_45);
bb index := 5
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 28

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:73:9: warning: use location
   73 |         foo(p);
      |         ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 5: foo (p_45);
test.c:73:9: warning: use location
   73 |         foo(p);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start foo (p_45);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:73:9: warning: use location
   73 |         foo(p);
      |         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
dot graph entry main
dot graph target entry end

_6 = malloc (1);
test.c:69:18: warning: use location
   69 |         p[3].f = malloc(1);
      |                  ^
dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: _6 = malloc (1);
test.c:69:18: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_96 = VDEF <.MEM_95>
_6 = malloc (1);
test.c:69:18: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _6 = malloc (1);
_6 = malloc (1);
dot graph stmt end

dot graph stmt start _6 = malloc (1);
test.c:69:18: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph arrowsubgraph cluster_1873838713 dot graph subgraph  foo (p_45);
p_45 = malloc (10);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_107 = VDEF <.MEM_82>
foo (p_45);
test.c:141:17: warning: use location
  141 |                 foo(p);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_114 = VDEF <.MEM_84>
foo (p_45);
test.c:136:25: warning: use location
  136 |                         foo(p);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_108 = VDEF <.MEM_82>
foo (p_45);
test.c:125:25: warning: use location
  125 |                         foo(p);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_112 = VDEF <.MEM_111>
foo (p_45);
test.c:121:33: warning: use location
  121 |                                 foo(p);
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_113 = VDEF <.MEM_111>
foo (p_45);
test.c:118:33: warning: use location
  118 |                                 foo(p);
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_111 = VDEF <.MEM_82>
foo (p_45);
test.c:115:25: warning: use location
  115 |                         foo(p);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7fa91e8b68b8
    type <pointer_type 0x7fa91e8ca000
        type <void_type 0x7fa91e8c3f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa91e8ca000>>
        public unsigned DI
        size <integer_cst 0x7fa91e8aebb8 constant 64>
        unit-size <integer_cst 0x7fa91e8aebd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa91e8cf9d8>>
   
    def_stmt _10 = malloc (1);
    version:10
    ptr-info 0x7fa91e3e6228>
# .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_118 = VDEF <.MEM_117>
_9->f = _10;
bb index := 3
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 28

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
test.c:71:26: warning: use location
   71 |                 p[i].f = malloc(1);
      |                          ^
dot graph target loc en1

dot graph target line desc form basic block 3: _9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
test.c:71:26: warning: use location
   71 |                 p[i].f = malloc(1);
      |                          ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _9->f = _10;
_10 = malloc (1);
dot graph stmt end

dot graph stmt start _9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_118 = VDEF <.MEM_117>
_9->f = _10;
bb index := 3
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 28

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_9->f = _10;
test.c:71:24: warning: use location
dot graph target loc start # .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
test.c:71:26: warning: use location
   71 |                 p[i].f = malloc(1);
      |                          ^
dot graph target loc en1

dot graph target line desc form basic block 3: _9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
test.c:71:26: warning: use location
   71 |                 p[i].f = malloc(1);
      |                          ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _9->f = _10;
_10 = malloc (1);
dot graph stmt end

dot graph stmt start _9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_99 = VDEF <.MEM_98>
MEM[(struct st *)p_45 + 32B].f = _11;
bb index := 5
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 28

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
test.c:71:26: warning: use location
   71 |                 p[i].f = malloc(1);
      |                          ^
dot graph target loc en1

dot graph target line desc form basic block 5: MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
test.c:71:26: warning: use location
   71 |                 p[i].f = malloc(1);
      |                          ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_45 + 32B].f = _11;
_10 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_15 = _14->f;
test.c:81:26: warning: use location
   81 |                 free(p[i].f);
      |                          ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
test.c:71:26: warning: use location
   71 |                 p[i].f = malloc(1);
      |                          ^
dot graph target loc en1

dot graph target line desc form basic block 6: _15 = _14->f;
test.c:81:26: warning: use location
   81 |                 free(p[i].f);
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
test.c:71:26: warning: use location
   71 |                 p[i].f = malloc(1);
      |                          ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _15 = _14->f;
_10 = malloc (1);
dot graph stmt end

dot graph stmt start _15 = _14->f;
test.c:81:26: warning: use location
   81 |                 free(p[i].f);
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

free (_15);
test.c:81:17: warning: use location
   81 |                 free(p[i].f);
      |                 ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
test.c:71:26: warning: use location
   71 |                 p[i].f = malloc(1);
      |                          ^
dot graph target loc en1

dot graph target line desc form basic block 6: free (_15);
test.c:81:17: warning: use location
   81 |                 free(p[i].f);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
test.c:71:26: warning: use location
   71 |                 p[i].f = malloc(1);
      |                          ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free (_15);
_10 = malloc (1);
dot graph stmt end

dot graph stmt start free (_15);
test.c:81:17: warning: use location
   81 |                 free(p[i].f);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (_15);
test.c:81:17: warning: use location
[40;32m    HAS FREE STMT count:0 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
bb index := 3
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 28

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_10 = malloc (1);
test.c:71:26: warning: use location
   71 |                 p[i].f = malloc(1);
      |                          ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
test.c:71:26: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 3: _10 = malloc (1);
test.c:71:26: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_78>
_10 = malloc (1);
test.c:71:26: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _10 = malloc (1);
_10 = malloc (1);
dot graph stmt end

dot graph stmt start _10 = malloc (1);
test.c:71:26: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_1050381853 dot graph subgraph  _15 = _14->f;
_10 = malloc (1);
dot graph subgrapend

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph arrowsubgraph cluster_869457972 dot graph subgraph  free (_15);
_15 = _14->f;
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7fa91e8b6900
    type <pointer_type 0x7fa91e8ca000
        type <void_type 0x7fa91e8c3f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa91e8ca000>>
        public unsigned DI
        size <integer_cst 0x7fa91e8aebb8 constant 64>
        unit-size <integer_cst 0x7fa91e8aebd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa91e8cf9d8>>
   
    def_stmt _11 = malloc (1);
    version:11
    ptr-info 0x7fa91e3e6240>
# .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_99 = VDEF <.MEM_98>
MEM[(struct st *)p_45 + 32B].f = _11;
bb index := 5
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 28

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 5: MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_45 + 32B].f = _11;
_11 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_99 = VDEF <.MEM_98>
MEM[(struct st *)p_45 + 32B].f = _11;
bb index := 5
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 28

======================================================================
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 5: MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_45 + 32B].f = _11;
_11 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_45 + 32B].f = _11;
test.c:72:16: warning: use location
   72 |         p[2].f = malloc(1);
      |                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

foo (p_45);
test.c:141:17: warning: use location
  141 |                 foo(p);
      |                 ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 25: foo (p_45);
test.c:141:17: warning: use location
  141 |                 foo(p);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph stmt start foo (p_45);
_11 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:141:17: warning: use location
  141 |                 foo(p);
      |                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_114 = VDEF <.MEM_84>
foo (p_45);
bb index := 23
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 23 ,possiable got to succ := 28

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:136:25: warning: use location
  136 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 23: foo (p_45);
test.c:136:25: warning: use location
  136 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start foo (p_45);
_11 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:136:25: warning: use location
  136 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:125:25: warning: use location
  125 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 18: foo (p_45);
test.c:125:25: warning: use location
  125 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start foo (p_45);
_11 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:125:25: warning: use location
  125 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:121:33: warning: use location
  121 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 17: foo (p_45);
test.c:121:33: warning: use location
  121 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start foo (p_45);
_11 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:121:33: warning: use location
  121 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:118:33: warning: use location
  118 |                                 foo(p);
      |                                 ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 16: foo (p_45);
test.c:118:33: warning: use location
  118 |                                 foo(p);
      |                                 ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start foo (p_45);
_11 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:118:33: warning: use location
  118 |                                 foo(p);
      |                                 ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:115:25: warning: use location
  115 |                         foo(p);
      |                         ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 15: foo (p_45);
test.c:115:25: warning: use location
  115 |                         foo(p);
      |                         ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start foo (p_45);
_11 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:115:25: warning: use location
  115 |                         foo(p);
      |                         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_14 = p_45 + _13;
test.c:81:23: warning: use location
   81 |                 free(p[i].f);
      |                       ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _14 = p_45 + _13;
test.c:81:23: warning: use location
   81 |                 free(p[i].f);
      |                       ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _14 = p_45 + _13;
_11 = malloc (1);
dot graph stmt end

dot graph stmt start _14 = p_45 + _13;
test.c:81:23: warning: use location
   81 |                 free(p[i].f);
      |                       ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_15 = _14->f;
test.c:81:26: warning: use location
   81 |                 free(p[i].f);
      |                          ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _15 = _14->f;
test.c:81:26: warning: use location
   81 |                 free(p[i].f);
      |                          ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _15 = _14->f;
_11 = malloc (1);
dot graph stmt end

dot graph stmt start _15 = _14->f;
test.c:81:26: warning: use location
   81 |                 free(p[i].f);
      |                          ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

free (_15);
test.c:81:17: warning: use location
   81 |                 free(p[i].f);
      |                 ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: free (_15);
test.c:81:17: warning: use location
   81 |                 free(p[i].f);
      |                 ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start free (_15);
_11 = malloc (1);
dot graph stmt end

dot graph stmt start free (_15);
test.c:81:17: warning: use location
   81 |                 free(p[i].f);
      |                 ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (_15);
test.c:81:17: warning: use location
[40;32m    HAS FREE STMT count:0 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_118 = VDEF <.MEM_117>
_9->f = _10;
bb index := 3
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 28

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _9->f = _10;
_11 = malloc (1);
dot graph stmt end

dot graph stmt start _9->f = _10;
test.c:71:24: warning: use location
   71 |                 p[i].f = malloc(1);
      |                        ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_100 = VDEF <.MEM_99>
foo (p_45);
bb index := 5
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 28

======================================================================
dot graph entry main
dot graph target entry end

foo (p_45);
test.c:73:9: warning: use location
   73 |         foo(p);
      |         ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 5: foo (p_45);
test.c:73:9: warning: use location
   73 |         foo(p);
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start foo (p_45);
_11 = malloc (1);
dot graph stmt end

dot graph stmt start foo (p_45);
test.c:73:9: warning: use location
   73 |         foo(p);
      |         ^
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
dot graph entry main
dot graph target entry end

MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_45 + 48B].f = _6;
_11 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(struct st *)p_45 + 48B].f = _6;
_11 = malloc (1);
dot graph stmt end

dot graph stmt start MEM[(struct st *)p_45 + 48B].f = _6;
test.c:69:16: warning: use location
   69 |         p[3].f = malloc(1);
      |                ^
dot graph stmt end


======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
bb index := 5
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
beacuse in succ := 28 have return or exit
# VUSE <.MEM_85>
return _23;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 28

======================================================================
dot graph entry main
dot graph target entry end

_11 = malloc (1);
test.c:72:18: warning: use location
   72 |         p[2].f = malloc(1);
      |                  ^
dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: _11 = malloc (1);
test.c:72:18: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_98 = VDEF <.MEM_78>
_11 = malloc (1);
test.c:72:18: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start _11 = malloc (1);
_11 = malloc (1);
dot graph stmt end

dot graph stmt start _11 = malloc (1);
test.c:72:18: warning: use location
dot graph stmt end

this stmt is child function---malloc-----

 ================== trace ================== 
dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph arrowsubgraph cluster_1192747384 dot graph subgraph  foo (p_45);
p_45 = malloc (10);
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_107 = VDEF <.MEM_82>
foo (p_45);
test.c:141:17: warning: use location
  141 |                 foo(p);
      |                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_114 = VDEF <.MEM_84>
foo (p_45);
test.c:136:25: warning: use location
  136 |                         foo(p);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_108 = VDEF <.MEM_82>
foo (p_45);
test.c:125:25: warning: use location
  125 |                         foo(p);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_112 = VDEF <.MEM_111>
foo (p_45);
test.c:121:33: warning: use location
  121 |                                 foo(p);
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_113 = VDEF <.MEM_111>
foo (p_45);
test.c:118:33: warning: use location
  118 |                                 foo(p);
      |                                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_115 = VDEF <.MEM_79>
free (_15);
test.c:81:17: warning: Use after free error!: free location 
   81 |                 free(p[i].f);
      |                 ^
# .MEM_111 = VDEF <.MEM_82>
foo (p_45);
test.c:115:25: warning: use location
  115 |                         foo(p);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa91e3e6060 type <integer_type 0x7fa91e3d7c78 size_t> constant 100>

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa91e3e60d8 type <integer_type 0x7fa91e3d7c78 size_t> constant 0>

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa91e3e60f0 type <integer_type 0x7fa91e3d7c78 size_t> constant 1>

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa91e3e6120 type <integer_type 0x7fa91e3d7c78 size_t> constant 10>

dot graph START

======================================================================
 <ssa_name 0x7fa91e8b6e10
    type <pointer_type 0x7fa91e8ca9d8
        type <integer_type 0x7fa91e8c35e8 int public SI
            size <integer_cst 0x7fa91e8aedf8 constant 32>
            unit-size <integer_cst 0x7fa91e8aee10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa91e8c35e8 precision:32 min <integer_cst 0x7fa91e8aedb0 -2147483648> max <integer_cst 0x7fa91e8aedc8 2147483647>
            pointer_to_this <pointer_type 0x7fa91e8ca9d8>>
        public unsigned DI
        size <integer_cst 0x7fa91e8aebb8 constant 64>
        unit-size <integer_cst 0x7fa91e8aebd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa91f156f30 p5>
    def_stmt GIMPLE_NOP
    version:52>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo
# .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
test.c:92:9: warning: use location
   92 |         foo(p5);
      |         ^
# .MEM_109 = VDEF <.MEM_108>
foo (p5_52(D));
test.c:131:33: warning: use location
  131 |                                 foo(p5);
      |                                 ^
=======================Path Constaint===========================

=succs:= 18
if (test_51(D) < test2_59(D))
test.c:126:28: warning: use location
  126 |                         if (test < test2)
      |                            ^
	relate logic:= 0
=succs:= 14
if (test_51(D) > test2_59(D))
test.c:113:20: warning: use location
  113 |                 if (test > test2)
      |                    ^
	relate logic:= 1
=succs:= 13
if (test_51(D) != 0)
test.c:107:12: warning: use location
  107 |         if (test)
      |            ^
	relate logic:= 0
=succs:= 7
if (i_22 <= 9)
test.c:79:27: warning: use location
   79 |         for (int i = 0; i < 10; i++)
      |                           ^
	relate logic:= 0
=succs:= 5
if (test_51(D) != 0)
test.c:76:12: warning: use location
   76 |         if (test)
      |            ^
	relate logic:= 0
=succs:= 4
if (i_21 <= 9)
test.c:70:27: warning: use location
   70 |         for (int i = 0; i < 10; i++)
      |                           ^
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

=======================Path Constaint===========================


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo
# .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
test.c:92:9: warning: use location
   92 |         foo(p5);
      |         ^
# .MEM_105 = VDEF <.MEM_102>
foo (p5_52(D));
test.c:104:17: warning: use location
  104 |                 foo(p5);
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo
# .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
test.c:92:9: warning: use location
   92 |         foo(p5);
      |         ^
# .MEM_103 = VDEF <.MEM_102>
foo (p5_52(D));
test.c:101:17: warning: use location
  101 |                 foo(p5);
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo
# .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
test.c:92:9: warning: use location
   92 |         foo(p5);
      |         ^
# .MEM_104 = VDEF <.MEM_102>
foo (p5_52(D));
test.c:98:17: warning: use location
   98 |                 foo(p5);
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo
# .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
test.c:92:9: warning: use location
   92 |         foo(p5);
      |         ^
# .MEM_102 = VDEF <.MEM_81>
foo (p5_52(D));
test.c:94:9: warning: use location
   94 |         foo(p5);
      |         ^
=======================Path Constaint===========================

succs:= 21
// predicted unlikely by goto predictor.
test.c:132:25: warning: use location
  132 |                         goto label3;
      |                         ^
	relate logic:= 1
succs:= 14
if (test_51(D) > test2_59(D))
test.c:113:20: warning: use location
  113 |                 if (test > test2)
      |                    ^
	relate logic:= 1
succs:= 13
if (test_51(D) != 0)
test.c:107:12: warning: use location
  107 |         if (test)
      |            ^
	relate logic:= 0
succs:= 7
if (i_22 <= 9)
test.c:79:27: warning: use location
   79 |         for (int i = 0; i < 10; i++)
      |                           ^
	relate logic:= 0
succs:= 5
if (test_51(D) != 0)
test.c:76:12: warning: use location
   76 |         if (test)
      |            ^
	relate logic:= 0
succs:= 4
if (i_21 <= 9)
test.c:70:27: warning: use location
   70 |         for (int i = 0; i < 10; i++)
      |                           ^
	relate logic:= 1
=======================Path Constaint===========================


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
dot graph entry main
dot graph target entry end

foo (p5_52(D));
test.c:92:9: warning: use location
   92 |         foo(p5);
      |         ^
dot graph target loc start # .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
test.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 8: foo (p5_52(D));
test.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
test.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start foo (p5_52(D));
foo (p5_52(D));
dot graph stmt end

dot graph stmt start foo (p5_52(D));
test.c:92:9: warning: use location
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 150707351
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1117895324 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1117895324 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
dot graph entry main
dot graph target entry end

foo (p5_52(D));
test.c:92:9: warning: use location
   92 |         foo(p5);
      |         ^
dot graph target loc start # .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
test.c:92:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 8: foo (p5_52(D));
test.c:92:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
test.c:92:9: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start foo (p5_52(D));
foo (p5_52(D));
dot graph stmt end

dot graph stmt start foo (p5_52(D));
test.c:92:9: warning: use location
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 892457226
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1896810746 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1896810746 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph arrowsubgraph cluster_1021225432 dot graph subgraph  foo (p5_52(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph arrowsubgraph cluster_379670672 dot graph subgraph  foo (p5_52(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa91e8b6e10
    type <pointer_type 0x7fa91e8ca9d8
        type <integer_type 0x7fa91e8c35e8 int public SI
            size <integer_cst 0x7fa91e8aedf8 constant 32>
            unit-size <integer_cst 0x7fa91e8aee10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa91e8c35e8 precision:32 min <integer_cst 0x7fa91e8aedb0 -2147483648> max <integer_cst 0x7fa91e8aedc8 2147483647>
            pointer_to_this <pointer_type 0x7fa91e8ca9d8>>
        public unsigned DI
        size <integer_cst 0x7fa91e8aebb8 constant 64>
        unit-size <integer_cst 0x7fa91e8aebd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa91f156f30 p5>
    def_stmt GIMPLE_NOP
    version:52>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo
# .MEM_102 = VDEF <.MEM_81>
foo (p5_52(D));
test.c:94:9: warning: use location
   94 |         foo(p5);
      |         ^
# .MEM_109 = VDEF <.MEM_108>
foo (p5_52(D));
test.c:131:33: warning: use location
  131 |                                 foo(p5);
      |                                 ^
=======================Path Constaint===========================

=succs:= 18
if (test_51(D) < test2_59(D))
test.c:126:28: warning: use location
  126 |                         if (test < test2)
      |                            ^
	relate logic:= 0
=succs:= 14
if (test_51(D) > test2_59(D))
test.c:113:20: warning: use location
  113 |                 if (test > test2)
      |                    ^
	relate logic:= 1
=succs:= 13
if (test_51(D) != 0)
test.c:107:12: warning: use location
  107 |         if (test)
      |            ^
	relate logic:= 0
=succs:= 7
if (i_22 <= 9)
test.c:79:27: warning: use location
   79 |         for (int i = 0; i < 10; i++)
      |                           ^
	relate logic:= 0
=succs:= 5
if (test_51(D) != 0)
test.c:76:12: warning: use location
   76 |         if (test)
      |            ^
	relate logic:= 0
=succs:= 4
if (i_21 <= 9)
test.c:70:27: warning: use location
   70 |         for (int i = 0; i < 10; i++)
      |                           ^
	relate logic:= 1
=======================Path Constaint===========================

=======================Path Constaint===========================

=======================Path Constaint===========================


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo
# .MEM_102 = VDEF <.MEM_81>
foo (p5_52(D));
test.c:94:9: warning: use location
   94 |         foo(p5);
      |         ^
# .MEM_105 = VDEF <.MEM_102>
foo (p5_52(D));
test.c:104:17: warning: use location
  104 |                 foo(p5);
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo
# .MEM_102 = VDEF <.MEM_81>
foo (p5_52(D));
test.c:94:9: warning: use location
   94 |         foo(p5);
      |         ^
# .MEM_103 = VDEF <.MEM_102>
foo (p5_52(D));
test.c:101:17: warning: use location
  101 |                 foo(p5);
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo
# .MEM_102 = VDEF <.MEM_81>
foo (p5_52(D));
test.c:94:9: warning: use location
   94 |         foo(p5);
      |         ^
# .MEM_104 = VDEF <.MEM_102>
foo (p5_52(D));
test.c:98:17: warning: use location
   98 |                 foo(p5);
      |                 ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_102 = VDEF <.MEM_81>
foo (p5_52(D));
dot graph entry main
dot graph target entry end

foo (p5_52(D));
test.c:94:9: warning: use location
   94 |         foo(p5);
      |         ^
dot graph target loc start # .MEM_102 = VDEF <.MEM_81>
foo (p5_52(D));
test.c:94:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 9: foo (p5_52(D));
test.c:94:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_102 = VDEF <.MEM_81>
foo (p5_52(D));
test.c:94:9: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 9dot graph target basicblock en1

dot graph stmt start foo (p5_52(D));
foo (p5_52(D));
dot graph stmt end

dot graph stmt start foo (p5_52(D));
test.c:94:9: warning: use location
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 1682873740
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1600124265 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1600124265 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo
# .MEM_102 = VDEF <.MEM_81>
foo (p5_52(D));
test.c:94:9: warning: use location
   94 |         foo(p5);
      |         ^
# .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
test.c:92:9: warning: use location
   92 |         foo(p5);
      |         ^
=======================Path Constaint===========================

succs:= 23
// predicted unlikely by goto predictor.
test.c:137:25: warning: use location
  137 |                         goto label2;
      |                         ^
	relate logic:= 1
succs:= 22
if (test3_70(D) != 0)
test.c:134:20: warning: use location
  134 |                 if (test3)
      |                    ^
	relate logic:= 1
succs:= 21
// predicted unlikely by goto predictor.
test.c:132:25: warning: use location
  132 |                         goto label3;
      |                         ^
	relate logic:= 0
succs:= 14
if (test_51(D) > test2_59(D))
test.c:113:20: warning: use location
  113 |                 if (test > test2)
      |                    ^
	relate logic:= 1
succs:= 13
if (test_51(D) != 0)
test.c:107:12: warning: use location
  107 |         if (test)
      |            ^
	relate logic:= 0
succs:= 7
if (i_22 <= 9)
test.c:79:27: warning: use location
   79 |         for (int i = 0; i < 10; i++)
      |                           ^
	relate logic:= 0
succs:= 5
if (test_51(D) != 0)
test.c:76:12: warning: use location
   76 |         if (test)
      |            ^
	relate logic:= 0
succs:= 4
if (i_21 <= 9)
test.c:70:27: warning: use location
   70 |         for (int i = 0; i < 10; i++)
      |                           ^
	relate logic:= 1
=======================Path Constaint===========================


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================

 Expand conflict 
 The same function may have multiple branches :foo
# .MEM_102 = VDEF <.MEM_81>
foo (p5_52(D));
test.c:94:9: warning: use location
   94 |         foo(p5);
      |         ^
# .MEM_101 = VDEF <.MEM_80>
foo (p5_52(D));
test.c:92:9: warning: use location
   92 |         foo(p5);
      |         ^
=======================Path Constaint===========================

succs:= 23
// predicted unlikely by goto predictor.
test.c:137:25: warning: use location
  137 |                         goto label2;
      |                         ^
	relate logic:= 1
succs:= 22
if (test3_70(D) != 0)
test.c:134:20: warning: use location
  134 |                 if (test3)
      |                    ^
	relate logic:= 1
succs:= 21
// predicted unlikely by goto predictor.
test.c:132:25: warning: use location
  132 |                         goto label3;
      |                         ^
	relate logic:= 0
succs:= 14
if (test_51(D) > test2_59(D))
test.c:113:20: warning: use location
  113 |                 if (test > test2)
      |                    ^
	relate logic:= 1
succs:= 13
if (test_51(D) != 0)
test.c:107:12: warning: use location
  107 |         if (test)
      |            ^
	relate logic:= 0
succs:= 7
if (i_22 <= 9)
test.c:79:27: warning: use location
   79 |         for (int i = 0; i < 10; i++)
      |                           ^
	relate logic:= 0
succs:= 5
if (test_51(D) != 0)
test.c:76:12: warning: use location
   76 |         if (test)
      |            ^
	relate logic:= 0
succs:= 4
if (i_21 <= 9)
test.c:70:27: warning: use location
   70 |         for (int i = 0; i < 10; i++)
      |                           ^
	relate logic:= 1
=======================Path Constaint===========================

dot graph target basicblock start from main basic block 9dot graph target basicblock en1

dot graph arrowsubgraph cluster_997033781 dot graph subgraph  foo (p5_52(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7fa91e8b6f30
    type <pointer_type 0x7fa91e8ca9d8
        type <integer_type 0x7fa91e8c35e8 int public SI
            size <integer_cst 0x7fa91e8aedf8 constant 32>
            unit-size <integer_cst 0x7fa91e8aee10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa91e8c35e8 precision:32 min <integer_cst 0x7fa91e8aedb0 -2147483648> max <integer_cst 0x7fa91e8aedc8 2147483647>
            pointer_to_this <pointer_type 0x7fa91e8ca9d8>>
        public unsigned DI
        size <integer_cst 0x7fa91e8aebb8 constant 64>
        unit-size <integer_cst 0x7fa91e8aebd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa91e3e1090 p3>
    def_stmt GIMPLE_NOP
    version:65>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_110 = VDEF <.MEM_108>
foo (p3_65(D));
dot graph entry main
dot graph target entry end

foo (p3_65(D));
test.c:128:33: warning: use location
  128 |                                 foo(p3);
      |                                 ^
dot graph target loc start # .MEM_110 = VDEF <.MEM_108>
foo (p3_65(D));
test.c:128:33: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 19: foo (p3_65(D));
test.c:128:33: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_110 = VDEF <.MEM_108>
foo (p3_65(D));
test.c:128:33: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 19dot graph target basicblock en1

dot graph stmt start foo (p3_65(D));
foo (p3_65(D));
dot graph stmt end

dot graph stmt start foo (p3_65(D));
test.c:128:33: warning: use location
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 1362814364
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1179904644 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1179904644 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_110 = VDEF <.MEM_108>
foo (p3_65(D));
dot graph entry main
dot graph target entry end

foo (p3_65(D));
test.c:128:33: warning: use location
  128 |                                 foo(p3);
      |                                 ^
dot graph target loc start # .MEM_110 = VDEF <.MEM_108>
foo (p3_65(D));
test.c:128:33: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 19: foo (p3_65(D));
test.c:128:33: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_110 = VDEF <.MEM_108>
foo (p3_65(D));
test.c:128:33: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 19dot graph target basicblock en1

dot graph stmt start foo (p3_65(D));
foo (p3_65(D));
dot graph stmt end

dot graph stmt start foo (p3_65(D));
test.c:128:33: warning: use location
dot graph stmt end

this stmt is child function---foo-----

 ================== trace ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_4 = VDEF <.MEM_3(D)>
free (z_2(D));
test.c:29:9: warning: use location
   29 |         free(z);
      |         ^
dot graph start relate form ID : 2143136389
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1483668375 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1483668375 stmt(free) :free (z_2(D));
test.c:29:9: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
dot graph target basicblock start from main basic block 19dot graph target basicblock en1

dot graph arrowsubgraph cluster_560767856 dot graph subgraph  foo (p3_65(D));
GIMPLE_NOP
dot graph subgrapend

dot graph target basicblock start from main basic block 19dot graph target basicblock en1

dot graph arrowsubgraph cluster_489255472 dot graph subgraph  foo (p3_65(D));
GIMPLE_NOP
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa91e8b6ee8
    type <pointer_type 0x7fa91e8ca9d8
        type <integer_type 0x7fa91e8c35e8 int public SI
            size <integer_cst 0x7fa91e8aedf8 constant 32>
            unit-size <integer_cst 0x7fa91e8aee10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa91e8c35e8 precision:32 min <integer_cst 0x7fa91e8aedb0 -2147483648> max <integer_cst 0x7fa91e8aedc8 2147483647>
            pointer_to_this <pointer_type 0x7fa91e8ca9d8>>
        public unsigned DI
        size <integer_cst 0x7fa91e8aebb8 constant 64>
        unit-size <integer_cst 0x7fa91e8aebd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fa91e3e1000 p4>
    def_stmt GIMPLE_NOP
    version:60>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:foo========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path foo  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======start_check_funciton:foo========= [0m
[40;33m =======POP node_fun stack:foo========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 79362820]:
p6_34 = malloc (100);
p6_36 = realloc (p6_34, 100);
_1 = (long int) "0";
_2 = (int) _1;
*p6_34 = _2;
_3 = (long int) "0";
_4 = (int) _3;
MEM[(int *)p6_34 + 4B] = _4;
p9_40 = malloc (0);
_5 = malloc (1);
MEM[(struct st *)p9_40 + 48B].f = _5;
free (p9_40);
p_45 = malloc (10);
_6 = malloc (1);
MEM[(struct st *)p_45 + 48B].f = _6;
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 793715543]:
_7 = (long unsigned int) i_21;
_8 = _7 * 16;
_9 = p_45 + _8;
_10 = malloc (1);
_9->f = _10;
i_77 = i_21 + 1;

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 873078363]:
# i_21 = PHI <0(2), i_77(3)>
if (i_21 <= 9)
  goto <bb 3>; [90.91%]
else
  goto <bb 5>; [9.09%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 79362820]:
_11 = malloc (1);
MEM[(struct st *)p_45 + 32B].f = _11;
foo (p_45);
if (test_51(D) != 0)
  goto <bb 28>; [21.72%]
else
  goto <bb 30>; [78.28%]

=======is loop:0=========

 bb index 30 
<bb 30> [local count: 62125215]:
goto <bb 7>; [100.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 621320524]:
_12 = (long unsigned int) i_22;
_13 = _12 * 16;
_14 = p_45 + _13;
_15 = _14->f;
free (_15);
_16 = (long unsigned int) i_22;
_17 = _16 * 16;
_18 = p9_40 + _17;
_19 = _18->f;
free (_19);
i_74 = i_22 + 1;

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 683445740]:
# i_22 = PHI <0(30), i_74(6)>
if (i_22 <= 9)
  goto <bb 6>; [90.91%]
else
  goto <bb 29>; [9.09%]

=======is loop:0=========

 bb index 29 
<bb 29> [local count: 62125215]:

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 114863521]:
label2:
foo (p5_52(D));

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 1073741815]:
label3:
foo (p5_52(D));
_20 = test5_55(D) / 10;
switch (_20) <default: <L4> [33.33%], case 5: <L2> [33.33%], case 10: <L3> [33.33%]>

=======is loop:1=========

 bb index 10 
<bb 10> [local count: 357913941]:
<L2>:
foo (p5_52(D));
goto <bb 13>; [100.00%]

=======is loop:1=========

 bb index 11 
<bb 11> [local count: 357913941]:
<L3>:
foo (p5_52(D));
goto <bb 13>; [100.00%]

=======is loop:1=========

 bb index 12 
<bb 12> [local count: 357913941]:
<L4>:
foo (p5_52(D));

=======is loop:1=========

 bb index 13 
<bb 13> [local count: 1073741824]:
if (test_51(D) != 0)
  goto <bb 14>; [94.50%]
else
  goto <bb 24>; [5.50%]

=======is loop:1=========

 bb index 14 
<bb 14> [local count: 1014686024]:
if (test_51(D) > test2_59(D))
  goto <bb 15>; [5.50%]
else
  goto <bb 18>; [94.50%]

=======is loop:1=========

 bb index 15 
<bb 15> [local count: 55807731]:
foo (p_45);
if (test_51(D) < test2_59(D))
  goto <bb 16>; [50.00%]
else
  goto <bb 17>; [50.00%]

=======is loop:1=========

 bb index 16 
<bb 16> [local count: 27903866]:
foo (p_45);
goto <bb 22>; [100.00%]

=======is loop:1=========

 bb index 17 
<bb 17> [local count: 27903866]:
foo (p_45);
goto <bb 22>; [100.00%]

=======is loop:1=========

 bb index 18 
<bb 18> [local count: 958878293]:
foo (p_45);
if (test_51(D) < test2_59(D))
  goto <bb 19>; [50.00%]
else
  goto <bb 20>; [50.00%]

=======is loop:1=========

 bb index 19 
<bb 19> [local count: 479439146]:
foo (p3_65(D));
goto <bb 21>; [100.00%]

=======is loop:1=========

 bb index 20 
<bb 20> [local count: 479439146]:
foo (p5_52(D));

=======is loop:1=========

 bb index 21 
<bb 21> [local count: 958878293]:
// predicted unlikely by goto predictor.
goto <bb 9>; [100.00%]

=======is loop:1=========

 bb index 22 
<bb 22> [local count: 55807731]:
if (test3_70(D) != 0)
  goto <bb 23>; [94.50%]
else
  goto <bb 28>; [5.50%]

=======is loop:1=========

 bb index 23 
<bb 23> [local count: 52738306]:
foo (p_45);
// predicted unlikely by goto predictor.
goto <bb 8>; [100.00%]

=======is loop:0=========

 bb index 24 
<bb 24> [local count: 59055800]:
if (test_51(D) == test2_59(D))
  goto <bb 25>; [20.24%]
else
  goto <bb 26>; [79.76%]

=======is loop:0=========

 bb index 25 
<bb 25> [local count: 11952894]:
foo (p_45);
goto <bb 28>; [100.00%]

=======is loop:0=========

 bb index 26 
<bb 26> [local count: 47102906]:
if (test_51(D) > test2_59(D))
  goto <bb 27>; [33.00%]
else
  goto <bb 28>; [67.00%]

=======is loop:0=========

 bb index 27 
<bb 27> [local count: 15543959]:
foo (p4_60(D));

=======is loop:0=========

 bb index 28 
<bb 28> [local count: 79362830]:
# _23 = PHI <200(5), 0(22), 0(25), 0(26), 0(27)>
return _23;

=======Mapping node_fun:foo=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
free (z_2(D));
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 10 [0m
[40;34m    used_stmt array stack totalsize of : 0.001536 mb[0m
[40;34m    collect time: : 0.000224 s [0m
[40;34m    algorithm time: 0.028870 s [0m
[40;34m    gimple stmt count : : 71 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cp                   ------------|      |      |      |      |          |          |
inline               ------------|      |      |      |      |          |          |
fixup_cfg            ------------|      |      |      |      |          |          |
adjust_alignment     ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
backprop             ------------|      |      |      |      |          |          |
phiprop              ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
alias                ------------|      |      |      |      |          |          |
retslot              ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
stdarg               ------------|      |      |      |      |          |          |
cdce                 ------------|      |      |      |      |          |          |
cselim               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
ifcombine            ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ch                               |      |      |      |      |          |     -0.1%|
cplxlower                        |      |    +2|      |      |          |     -0.1%|
sra                  ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |    -11.6%|    -18.0%|
copyprop                         |      |    +6|      |      |    -13.1%|    -21.9%|
reassoc              ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
sincos               ------------|      |      |      |      |          |          |
laddress             ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
walloca              ------------|      |      |      |      |          |          |
sink                 ------------|      |      |      |      |          |          |
fix_loops            ------------|      |      |      |      |          |          |
loop                 ------------|      |      |      |      |          |          |
loopinit                         |      |      |      |      |     -3.6%|    -19.0%|
sccp                 ------------|      |      |      |      |          |          |
ivcanon                          |      |      |      |      |     +1.2%|     +1.2%|
copyprop                         |      |      |      |      |     +1.2%|     +1.2%|
cunroll              ------------|      |      |      |      |          |          |
ivopts                           |      |      |      |      |     -3.0%|     -3.9%|
lim                              |      |      |      |      |     -3.1%|     -4.0%|
loopdone             ------------|      |      |      |      |          |          |
no_loop                          |      |      |      |      |     +3.9%|    +24.9%|
veclower2            ------------|      |      |      |      |          |          |
switchlower                      |      |      |      |      |     -1.2%|     +0.2%|
reassoc                          |      |    +1|      |      |     -1.3%|     +0.2%|
slsr                 ------------|      |      |      |      |          |          |
dom                  ------------|      |      |      |      |          |          |
strlen               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
wrestrict            ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
fab                  ------------|      |      |      |      |          |          |
crited               ------------|      |      |      |      |          |          |
uncprop              ------------|      |      |      |      |          |          |
local-pure-const     ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
nrv                  ------------|      |      |      |      |          |          |
isel                 ------------|      |      |      |      |          |          |
optimized            ------------|      |      |      |      |          |          |
expand                           |      |      |      |      |----------|----------|
vregs                            |      |      |      |      |    +74.2%|    +32.4%|
into_cfglayout                   |      |      |      |      |     -1.9%|     -1.2%|
jump                             |      |      |      |      |     -2.3%|     -1.3%|
subreg1                          |      |      |      |      |     -0.4%|     -0.1%|
dfinit               ------------|      |      |      |      |          |          |
cse1                 ------------|      |      |      |      |          |          |
fwprop1                          |      |      |      |      |     -3.6%|     -2.1%|
ce1                              |      |      |      |      |     -3.7%|     -2.2%|
reginfo              ------------|      |      |      |      |          |          |
loop2                ------------|      |      |      |      |          |          |
loop2_init           ------------|      |      |      |      |          |          |
loop2_invariant      ------------|      |      |      |      |          |          |
loop2_done           ------------|      |      |      |      |          |          |
dse1                 ------------|      |      |      |      |          |          |
fwprop2              ------------|      |      |      |      |          |          |
init-regs                        |      |      |      |      |     +3.9%|     +3.9%|
combine                          |      |      |      |      |    -13.0%|    -11.5%|
ce2                              |      |    -5|      |      |    -19.2%|    -17.3%|
outof_cfglayout      ------------|      |      |      |      |          |          |
split1               ------------|      |      |      |      |          |          |
subreg3              ------------|      |      |      |      |          |          |
mode_sw              ------------|      |      |      |      |          |          |
asmcons              ------------|      |      |      |      |          |          |
ira                              |      |      |      |      |     -0.6%|     -0.2%|
reload                           |      |      |      |      |     -8.3%|    -14.2%|
postreload                       |      |      |      |      |     -9.0%|    -16.6%|
split2                           |      |      |      |      |     -0.7%|     -0.3%|
cmpelim              ------------|      |      |      |      |          |          |
pro_and_epilogue                 |      |      |      |      |    +11.4%|    +10.3%|
dse2                             |      |      |      |      |    +10.3%|     +9.3%|
csa                  ------------|      |      |      |      |          |          |
jump2                ------------|      |      |      |      |          |          |
ce3                  ------------|      |      |      |      |          |          |
cprop_hardreg        ------------|      |      |      |      |          |          |
rtl_dce              ------------|      |      |      |      |          |          |
bbro                 ------------|      |      |      |      |          |          |
split4               ------------|      |      |      |      |          |          |
stack                ------------|      |      |      |      |          |          |
zero_call_used_regs  ------------|      |      |      |      |          |          |
alignments           ------------|      |      |      |      |          |          |
