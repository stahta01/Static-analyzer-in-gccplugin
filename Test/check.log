test.c: In function â€˜foo3â€™:
test.c:57:6: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
   *z = malloc(1);
      ^
test.c:63:11: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("%d", p2);
          ~^
          %ls
test.c: In function â€˜foo4â€™:
test.c:111:5: warning: assignment from incompatible pointer type [-Wincompatible-pointer-types]
  p2 = &b;
     ^
test.c: In function â€˜childâ€™:
test.c:175:16: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("asdda%d\n", a99);
               ~^
               %ls
test.c:185:7: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
  data = 10;
       ^
test.c:192:9: warning: passing argument 1 of â€˜child4â€™ from incompatible pointer type [-Wincompatible-pointer-types]
  child4(&data);
         ^
test.c:24:7: note: expected â€˜int *â€™ but argument is of type â€˜void **â€™
 void *child4(int *data) __attribute__((noinline));
       ^~~~~~
test.c: In function â€˜child4â€™:
test.c:218:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c:219:14: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *test = &data;
              ^
test.c:238:16: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("asdda%d\n", pData);
               ~^
               %ls
test.c: In function â€˜child3â€™:
test.c:252:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c:263:16: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("asdda%d\n", pData);
               ~^
               %ls
test.c: In function â€˜child5â€™:
test.c:294:17: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
   printf("asdda%d\n", pData);
                ~^
                %ls
test.c: In function â€˜child6â€™:
test.c:330:17: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
   printf("asdda%d\n", pData);
                ~^
                %ls
test.c: In function â€˜child7â€™:
test.c:367:17: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
   printf("asdda%d\n", pData);
                ~^
                %ls
test.c: In function â€˜child2â€™:
test.c:390:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c: In function â€˜mainâ€™:
test.c:501:37: warning: passing argument 4 of â€˜pthread_createâ€™ makes pointer from integer without a cast [-Wint-conversion]
  pthread_create(&t, &attr2, child2, input2);
                                     ^~~~~~
In file included from test.c:3:0:
/usr/include/pthread.h:200:12: note: expected â€˜void * restrictâ€™ but argument is of type â€˜intâ€™
 extern int pthread_create (pthread_t *__restrict __newthread,
            ^~~~~~~~~~~~~~
test.c:559:5: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
  p4 = 1;
     ^
test.c:562:14: warning: passing argument 1 of â€˜child7â€™ makes pointer from integer without a cast [-Wint-conversion]
  p4 = child7(test, p4);
              ^~~~
test.c:349:6: note: expected â€˜void *â€™ but argument is of type â€˜intâ€™
 int *child7(void *data, void *test)
      ^~~~~~
=======ipa_pta=========
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
 <var_decl 0x7fbbb97eeea0 pData
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    addressable unsigned DI file test.c line 179 col 7 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
    align 64 context <function_decl 0x7fbbb97c5d00 child> chain <var_decl 0x7fbbb97eee10 pData2>>
 <var_decl 0x7fbbbaa06b40 p98
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    static unsigned DI file test.c line 12 col 13 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
    align 64 context <translation_unit_decl 0x7fbbb9c7c168 test.c>>
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
=======print_function_var -1163892048   11========
=======print_function_var -1182835328   2========
if (_27 != 0)
if (data_73 == 0B)
=======print_function_var -1163891904   12========
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
=======================================================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 12 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path child  function_call count: 10 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;33m =======POP node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;44m =======print_function_path boo  function_call count: 3 level :2========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;44m =======print_function_path test22  function_call count: 2 level :3========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:test22========= [0m
[40;42m =======start_check_funciton:test22========= [0m
 <function_decl 0x7fbbb97c5e00 test22
    type <function_type 0x7fbbb97c4930
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3a78 value <pointer_type 0x7fbbb9c8ca80>
            chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>
        pointer_to_this <pointer_type 0x7fbbb97d19d8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 433 col 6 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dcba0>
    result <result_decl 0x7fbbb9c7c690 D.4086 type <void_type 0x7fbbb9c85f18 void>
        ignored VOID file test.c line 433 col 6
        align 8 context <function_decl 0x7fbbb97c5e00 test22>>
    arguments <parm_decl 0x7fbbb97d3d00 k
        type <pointer_type 0x7fbbb9c8ca80 type <integer_type 0x7fbbb9c855e8 int>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97d1738>>
        unsigned DI file test.c line 433 col 18 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97c5e00 test22> arg-type <pointer_type 0x7fbbb9c8ca80>>
    struct-function 0x7fbbb97dd630>
 <ssa_name 0x7fbbb9c79870
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97ee7e0 w>
    def_stmt w_10 = malloc (5);
    version 10
    ptr-info 0x7fbbb97f75d0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry test22
dot graph target entry end

free (w_10);
In function â€˜mainâ€™:
test.c:442:2: warning: use location
  free(w);
  ^
dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
w_10 = malloc (5);
test.c:441:7: warning: use location
  int *w = malloc(5);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: free (w_10);
test.c:442:2: warning: use location
  free(w);
  ^
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
w_10 = malloc (5);
test.c:441:7: warning: use location
  int *w = malloc(5);
       ^
dot graph target loc end

dot graph target basicblock start from test22 basic block 2dot graph target basicblock en1

dot graph stmt start free (w_10);
w_10 = malloc (5);
dot graph stmt end

dot graph stmt start free (w_10);
test.c:442:2: warning: use location
  free(w);
  ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (w_10);
test.c:442:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

====================================zzz=================================
 <ssa_name 0x7fbbb9c79870
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97ee7e0 w>
    def_stmt w_10 = malloc (5);
    version 10
    ptr-info 0x7fbbb97f75d0>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

[40;33m =======POP node_fun stack:test22========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:boo========= [0m
[40;42m =======start_check_funciton:boo========= [0m
[40;33m =======POP node_fun stack:boo========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;44m =======print_function_path child5  function_call count: 4 level :2========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;33m =======POP node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;33m =======POP node_fun stack:pthread_self========= [0m
[40;42m =======pre_check_funciton:child5========= [0m
[40;42m =======start_check_funciton:child5========= [0m
[40;33m =======POP node_fun stack:child5========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;44m =======print_function_path child3  function_call count: 4 level :2========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;33m =======POP node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;33m =======POP node_fun stack:pthread_self========= [0m
[40;42m =======pre_check_funciton:child3========= [0m
[40;42m =======start_check_funciton:child3========= [0m
[40;33m =======POP node_fun stack:child3========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;44m =======print_function_path child4  function_call count: 1 level :2========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre_check_funciton:child4========= [0m
[40;42m =======start_check_funciton:child4========= [0m
[40;33m =======POP node_fun stack:child4========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path foo  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:foo2========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path foo2  function_call count: 4 level :3========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;44m =======print_function_path foo3  function_call count: 2 level :4========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:foo3========= [0m
[40;42m =======start_check_funciton:foo3========= [0m
 <function_decl 0x7fbbb97ca600 foo3
    type <function_type 0x7fbbb97c4930
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3a78 value <pointer_type 0x7fbbb9c8ca80>
            chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>
        pointer_to_this <pointer_type 0x7fbbb97d19d8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 47 col 6 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dc2a0>
    result <result_decl 0x7fbbb9c7c2d0 D.4050 type <void_type 0x7fbbb9c85f18 void>
        ignored VOID file test.c line 47 col 6
        align 8 context <function_decl 0x7fbbb97ca600 foo3>>
    arguments <parm_decl 0x7fbbb97d3680 z
        type <pointer_type 0x7fbbb9c8ca80 type <integer_type 0x7fbbb9c855e8 int>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97d1738>>
        unsigned DI file test.c line 47 col 16 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97ca600 foo3> arg-type <pointer_type 0x7fbbb9c8ca80>>
    struct-function 0x7fbbb97dd0b0>
 <ssa_name 0x7fbbb9c79dc8
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _1 = malloc (1);
    version 1
    ptr-info 0x7fbbb97f72d0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo3
dot graph target entry end

_2 = (long int) _1;
test.c:57:6: warning: use location
   *z = malloc(1);
      ^
dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:57:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = (long int) _1;
test.c:57:6: warning: use location
   *z = malloc(1);
      ^
dot graph target line desend

dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:57:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc end

dot graph target basicblock start from foo3 basic block 3dot graph target basicblock en1

dot graph stmt start _2 = (long int) _1;
_1 = malloc (1);
dot graph stmt end

dot graph stmt start _2 = (long int) _1;
test.c:57:6: warning: use location
   *z = malloc(1);
      ^
dot graph stmt end

dot graph entry foo3
dot graph target entry end

_3 = (int) _2;
test.c:57:6: warning: use location
dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:57:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _3 = (int) _2;
test.c:57:6: warning: use location
   *z = malloc(1);
      ^
dot graph target line desend

dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:57:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc end

dot graph target basicblock start from foo3 basic block 3dot graph target basicblock en1

dot graph stmt start _3 = (int) _2;
_1 = malloc (1);
dot graph stmt end

dot graph stmt start _3 = (int) _2;
test.c:57:6: warning: use location
   *z = malloc(1);
      ^
dot graph stmt end

dot graph entry foo3
dot graph target entry end

*z_11(D) = _3;
test.c:57:6: warning: use location
dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:57:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: *z_11(D) = _3;
test.c:57:6: warning: use location
   *z = malloc(1);
      ^
dot graph target line desend

dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:57:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc end

dot graph target basicblock start from foo3 basic block 3dot graph target basicblock en1

dot graph stmt start *z_11(D) = _3;
_1 = malloc (1);
dot graph stmt end

dot graph stmt start *z_11(D) = _3;
test.c:57:6: warning: use location
   *z = malloc(1);
      ^
dot graph stmt end


====================================zzz=================================
 <ssa_name 0x7fbbb9c79dc8
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _1 = malloc (1);
    version 1
    ptr-info 0x7fbbb97f72d0>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7fbbb97ca600 foo3
    type <function_type 0x7fbbb97c4930
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3a78 value <pointer_type 0x7fbbb9c8ca80>
            chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>
        pointer_to_this <pointer_type 0x7fbbb97d19d8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 47 col 6 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dc2a0>
    result <result_decl 0x7fbbb9c7c2d0 D.4050 type <void_type 0x7fbbb9c85f18 void>
        ignored VOID file test.c line 47 col 6
        align 8 context <function_decl 0x7fbbb97ca600 foo3>>
    arguments <parm_decl 0x7fbbb97d3680 z
        type <pointer_type 0x7fbbb9c8ca80 type <integer_type 0x7fbbb9c855e8 int>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97d1738>>
        unsigned DI file test.c line 47 col 16 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97ca600 foo3> arg-type <pointer_type 0x7fbbb9c8ca80>>
    struct-function 0x7fbbb97dd0b0>
 <ssa_name 0x7fbbb9c79f30
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97e2090 p2>
    def_stmt p2_9 = malloc (2);
    version 9
    ptr-info 0x7fbbb97f7300>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo3
dot graph target entry end

p2_4 = PHI <p2_13(D)(3), p2_9(4)>
lto1: warning: use location
dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:60:6: warning: use location
   p2 = malloc(2);
      ^
dot graph target loc en1

dot graph target line desc form basic block 5: p2_4 = PHI <p2_13(D)(3), p2_9(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:60:6: warning: use location
dot graph target loc end

dot graph target basicblock start from foo3 basic block 5dot graph target basicblock en1

dot graph stmt start p2_4 = PHI <p2_13(D)(3), p2_9(4)>
p2_9 = malloc (2);
dot graph stmt end

dot graph stmt start p2_4 = PHI <p2_13(D)(3), p2_9(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry foo3
dot graph target entry end

_15 = __printf_chk (1, "%d", p2_4);
dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:60:6: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: _15 = __printf_chk (1, "%d", p2_4);
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:60:6: warning: use location
dot graph target loc end

dot graph target basicblock start from foo3 basic block 5dot graph target basicblock en1

dot graph stmt start _15 = __printf_chk (1, "%d", p2_4);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7fbbb9c79f30
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97e2090 p2>
    def_stmt p2_9 = malloc (2);
    version 9
    ptr-info 0x7fbbb97f7300>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry foo3
dot graph target entry end

*p2_4 = 10;
test.c:62:8: warning: use location
  p2[0] = 10;
        ^
dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:60:6: warning: use location
   p2 = malloc(2);
      ^
dot graph target loc en1

dot graph target line desc form basic block 5: *p2_4 = 10;
test.c:62:8: warning: use location
  p2[0] = 10;
        ^
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:60:6: warning: use location
   p2 = malloc(2);
      ^
dot graph target loc end

dot graph target basicblock start from foo3 basic block 5dot graph target basicblock en1

dot graph stmt start *p2_4 = 10;
p2_9 = malloc (2);
dot graph stmt end

dot graph stmt start *p2_4 = 10;
test.c:62:8: warning: use location
  p2[0] = 10;
        ^
dot graph stmt end


====================================zzz=================================
 <ssa_name 0x7fbbb9c79f30
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97e2090 p2>
    def_stmt p2_9 = malloc (2);
    version 9
    ptr-info 0x7fbbb97f7300>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:foo3========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;33m =======POP node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:foo2========= [0m
[40;42m =======start_check_funciton:foo2========= [0m
 <function_decl 0x7fbbb97ca500 foo2
    type <function_type 0x7fbbb97c4b28
        type <pointer_type 0x7fbbb9c8ca80 type <integer_type 0x7fbbb9c855e8 int>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97d1738>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3bb8 value <integer_type 0x7fbbb9c855e8 int>
            chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>
        pointer_to_this <pointer_type 0x7fbbb97d1930>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 65 col 6 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dc3c0>
    result <result_decl 0x7fbbb9c7c348 D.4055 type <pointer_type 0x7fbbb9c8ca80>
        unsigned ignored DI file test.c line 65 col 6 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97ca500 foo2>>
    arguments <parm_decl 0x7fbbb97d3700 z
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        SI file test.c line 65 col 15 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97ca500 foo2> arg-type <integer_type 0x7fbbb9c855e8 int>>
    struct-function 0x7fbbb97dd160>
 <ssa_name 0x7fbbb97e5480
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97e2480 a2>
    def_stmt a2_13 = malloc (_1);
    version 13
    ptr-info 0x7fbbb97f73c0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

====================================zzz=================================
 <ssa_name 0x7fbbb97e5480
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97e2480 a2>
    def_stmt a2_13 = malloc (_1);
    version 13
    ptr-info 0x7fbbb97f73c0>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:68:7: warning: use location
  int *a2 = malloc(z);
       ^

======================================================================
 <function_decl 0x7fbbb97ca500 foo2
    type <function_type 0x7fbbb97c4b28
        type <pointer_type 0x7fbbb9c8ca80 type <integer_type 0x7fbbb9c855e8 int>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97d1738>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3bb8 value <integer_type 0x7fbbb9c855e8 int>
            chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>
        pointer_to_this <pointer_type 0x7fbbb97d1930>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 65 col 6 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dc3c0>
    result <result_decl 0x7fbbb9c7c348 D.4055 type <pointer_type 0x7fbbb9c8ca80>
        unsigned ignored DI file test.c line 65 col 6 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97ca500 foo2>>
    arguments <parm_decl 0x7fbbb97d3700 z
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        SI file test.c line 65 col 15 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97ca500 foo2> arg-type <integer_type 0x7fbbb9c855e8 int>>
    struct-function 0x7fbbb97dd160>
 <ssa_name 0x7fbbb97e54c8
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97e23f0 p3>
    def_stmt p3_15 = malloc (_2);
    version 15
    ptr-info 0x7fbbb97f73d8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo2
dot graph target entry end

_8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:69:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 5: _8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:69:7: warning: use location
dot graph target loc end

dot graph target basicblock start from foo2 basic block 5dot graph target basicblock en1

dot graph stmt start _8 = PHI <p3_15(3), p4_17(4)>
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start _8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry foo2
dot graph target entry end

_33 = p3_15;
test.c:88:10: warning: use location
   return p3;
          ^
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:69:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 3: _33 = p3_15;
test.c:88:10: warning: use location
   return p3;
          ^
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:69:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

dot graph stmt start _33 = p3_15;
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start _33 = p3_15;
test.c:88:10: warning: use location
   return p3;
          ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

free (p3_15);
test.c:87:3: warning: use location
   free(p3);
   ^
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:69:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 3: free (p3_15);
test.c:87:3: warning: use location
   free(p3);
   ^
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:69:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

dot graph stmt start free (p3_15);
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start free (p3_15);
test.c:87:3: warning: use location
   free(p3);
   ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (p3_15);
test.c:87:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry foo2
dot graph target entry end

*p3_15 = 10;
test.c:86:9: warning: use location
   p3[0] = 10;
         ^
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:69:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 3: *p3_15 = 10;
test.c:86:9: warning: use location
   p3[0] = 10;
         ^
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:69:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

dot graph stmt start *p3_15 = 10;
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start *p3_15 = 10;
test.c:86:9: warning: use location
   p3[0] = 10;
         ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

foo3 (p3_15);
test.c:81:2: warning: use location
  foo3(p3);
  ^
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:69:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: foo3 (p3_15);
test.c:81:2: warning: use location
  foo3(p3);
  ^
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:69:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph stmt start foo3 (p3_15);
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start foo3 (p3_15);
test.c:81:2: warning: use location
  foo3(p3);
  ^
dot graph stmt end

this stmt is child function---foo3-----

 ================== trace ================== 
 <ssa_name 0x7fbbb97e54c8
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97e23f0 p3>
    def_stmt p3_15 = malloc (_2);
    version 15
    ptr-info 0x7fbbb97f73d8>
trace fucntion name:foo3 
[40;44m =======trace_function_path foo3  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with p3 ========= [0m
[40;36m ======= relate stmt argument:p3 ========= [0m
[40;36m ======= relate node_fun argument222:p3========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph start relate formID : 1000459799
from foo3 basic block 5dot graph end relate end

In function â€˜foo3â€™:
test.c:62:8: warning: use location
  p2[0] = 10;
        ^
dot graph relate stmt start ID : 1201491168 stmt(LHS) :*p2_4 = 10;
test.c:62:8: warning: use location
*p2_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 

====================================ffff=================================
 <ssa_name 0x7fbbb97e54c8
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97e23f0 p3>
    def_stmt p3_15 = malloc (_2);
    version 15
    ptr-info 0x7fbbb97f73d8>
# .MEM_21 = VDEF <.MEM_16>
*p2_4 = 10;
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 

====================================zzz=================================
 <ssa_name 0x7fbbb97e54c8
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97e23f0 p3>
    def_stmt p3_15 = malloc (_2);
    version 15
    ptr-info 0x7fbbb97f73d8>
dot graph start relate for1ID : 1000459799
from foo3 basic block 5dot graph end relate end

subgraph cluster_229585305 dot graph subgraph  start ID : 1201491168 stmt(relate) ï¼Œ Tree ID : 1000459799 : *p2_4 = 10;
In function â€˜mainâ€™:
test.c:62:8: warning: use location
dot graph subgrapend


 ================== Start Use after free Check ================== 
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
test.c:87:3: warning: Use after free error!: free location 
   free(p3);
   ^
_8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
test.c:87:3: warning: Use after free error!: free location 
_33 = p3_15;
test.c:88:10: warning: use location
   return p3;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================

 <function_decl 0x7fbbb97ca500 foo2
    type <function_type 0x7fbbb97c4b28
        type <pointer_type 0x7fbbb9c8ca80 type <integer_type 0x7fbbb9c855e8 int>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97d1738>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3bb8 value <integer_type 0x7fbbb9c855e8 int>
            chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>
        pointer_to_this <pointer_type 0x7fbbb97d1930>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 65 col 6 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dc3c0>
    result <result_decl 0x7fbbb9c7c348 D.4055 type <pointer_type 0x7fbbb9c8ca80>
        unsigned ignored DI file test.c line 65 col 6 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97ca500 foo2>>
    arguments <parm_decl 0x7fbbb97d3700 z
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        SI file test.c line 65 col 15 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97ca500 foo2> arg-type <integer_type 0x7fbbb9c855e8 int>>
    struct-function 0x7fbbb97dd160>
 <ssa_name 0x7fbbb97e5510
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97e2360 p4>
    def_stmt p4_17 = malloc (_3);
    version 17
    ptr-info 0x7fbbb97f73f0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo2
dot graph target entry end

_8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:70:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 5: _8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:70:7: warning: use location
dot graph target loc end

dot graph target basicblock start from foo2 basic block 5dot graph target basicblock en1

dot graph stmt start _8 = PHI <p3_15(3), p4_17(4)>
p4_17 = malloc (_3);
dot graph stmt end

dot graph stmt start _8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry foo2
dot graph target entry end

_29 = p4_17;
test.c:95:10: warning: use location
   return p4;
          ^
dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:70:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 4: _29 = p4_17;
test.c:95:10: warning: use location
   return p4;
          ^
dot graph target line desend

dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:70:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 4dot graph target basicblock en1

dot graph stmt start _29 = p4_17;
p4_17 = malloc (_3);
dot graph stmt end

dot graph stmt start _29 = p4_17;
test.c:95:10: warning: use location
   return p4;
          ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

free (p4_17);
test.c:94:3: warning: use location
   free(p4);
   ^
dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:70:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 4: free (p4_17);
test.c:94:3: warning: use location
   free(p4);
   ^
dot graph target line desend

dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:70:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 4dot graph target basicblock en1

dot graph stmt start free (p4_17);
p4_17 = malloc (_3);
dot graph stmt end

dot graph stmt start free (p4_17);
test.c:94:3: warning: use location
   free(p4);
   ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (p4_17);
test.c:94:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry foo2
dot graph target entry end

*p4_17 = 10;
test.c:92:9: warning: use location
   p4[0] = 10;
         ^
dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:70:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 4: *p4_17 = 10;
test.c:92:9: warning: use location
   p4[0] = 10;
         ^
dot graph target line desend

dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:70:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 4dot graph target basicblock en1

dot graph stmt start *p4_17 = 10;
p4_17 = malloc (_3);
dot graph stmt end

dot graph stmt start *p4_17 = 10;
test.c:92:9: warning: use location
   p4[0] = 10;
         ^
dot graph stmt end


====================================zzz=================================
 <ssa_name 0x7fbbb97e5510
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97e2360 p4>
    def_stmt p4_17 = malloc (_3);
    version 17
    ptr-info 0x7fbbb97f73f0>

 ================== Start Use after free Check ================== 
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:94:3: warning: Use after free error!: free location 
   free(p4);
   ^
_8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:94:3: warning: Use after free error!: free location 
_29 = p4_17;
test.c:95:10: warning: use location
   return p4;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================

 <function_decl 0x7fbbb97ca500 foo2
    type <function_type 0x7fbbb97c4b28
        type <pointer_type 0x7fbbb9c8ca80 type <integer_type 0x7fbbb9c855e8 int>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97d1738>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3bb8 value <integer_type 0x7fbbb9c855e8 int>
            chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>
        pointer_to_this <pointer_type 0x7fbbb97d1930>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 65 col 6 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dc3c0>
    result <result_decl 0x7fbbb9c7c348 D.4055 type <pointer_type 0x7fbbb9c8ca80>
        unsigned ignored DI file test.c line 65 col 6 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97ca500 foo2>>
    arguments <parm_decl 0x7fbbb97d3700 z
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        SI file test.c line 65 col 15 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97ca500 foo2> arg-type <integer_type 0x7fbbb9c855e8 int>>
    struct-function 0x7fbbb97dd160>
 <ssa_name 0x7fbbb97e52d0
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _4 = malloc (200);
    version 4
    ptr-info 0x7fbbb97f7348>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo2
dot graph target entry end

p99 = _4;
test.c:71:6: warning: use location
  p99 = malloc(200);
      ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: p99 = _4;
test.c:71:6: warning: use location
  p99 = malloc(200);
      ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph stmt start p99 = _4;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start p99 = _4;
test.c:71:6: warning: use location
  p99 = malloc(200);
      ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_5 = p99;
test.c:72:5: warning: use location
  p99[0] = 99;
     ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = p99;
test.c:72:5: warning: use location
  p99[0] = 99;
     ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph stmt start _5 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start _5 = p99;
test.c:72:5: warning: use location
  p99[0] = 99;
     ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

*_5 = 99;
test.c:72:9: warning: use location
  p99[0] = 99;
         ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: *_5 = 99;
test.c:72:9: warning: use location
  p99[0] = 99;
         ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph stmt start *_5 = 99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start *_5 = 99;
test.c:72:9: warning: use location
  p99[0] = 99;
         ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_6 = p99;
test.c:73:5: warning: use location
  p99[1] = 100;
     ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _6 = p99;
test.c:73:5: warning: use location
  p99[1] = 100;
     ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph stmt start _6 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start _6 = p99;
test.c:73:5: warning: use location
  p99[1] = 100;
     ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

MEM[(int *)_6 + 4B] = 100;
test.c:73:9: warning: use location
  p99[1] = 100;
         ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)_6 + 4B] = 100;
test.c:73:9: warning: use location
  p99[1] = 100;
         ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(int *)_6 + 4B] = 100;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start MEM[(int *)_6 + 4B] = 100;
test.c:73:9: warning: use location
  p99[1] = 100;
         ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_7 = p99;
test.c:84:6: warning: use location
   p99[1] = 200;
      ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _7 = p99;
test.c:84:6: warning: use location
   p99[1] = 200;
      ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

dot graph stmt start _7 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start _7 = p99;
test.c:84:6: warning: use location
   p99[1] = 200;
      ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

MEM[(int *)_7 + 4B] = 200;
test.c:84:10: warning: use location
   p99[1] = 200;
          ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: MEM[(int *)_7 + 4B] = 200;
test.c:84:10: warning: use location
   p99[1] = 200;
          ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

dot graph stmt start MEM[(int *)_7 + 4B] = 200;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start MEM[(int *)_7 + 4B] = 200;
test.c:84:10: warning: use location
   p99[1] = 200;
          ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_1 = p99;
test.c:126:6: warning: use location
   p99[1] = 1000;
      ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = p99;
test.c:126:6: warning: use location
   p99[1] = 1000;
      ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start _1 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start _1 = p99;
test.c:126:6: warning: use location
   p99[1] = 1000;
      ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

MEM[(int *)_1 + 4B] = 1000;
test.c:126:10: warning: use location
   p99[1] = 1000;
          ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)_1 + 4B] = 1000;
test.c:126:10: warning: use location
   p99[1] = 1000;
          ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start MEM[(int *)_1 + 4B] = 1000;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start MEM[(int *)_1 + 4B] = 1000;
test.c:126:10: warning: use location
   p99[1] = 1000;
          ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_2 = p99;
test.c:127:6: warning: use location
   p99[2] = 200;
      ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = p99;
test.c:127:6: warning: use location
   p99[2] = 200;
      ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start _2 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start _2 = p99;
test.c:127:6: warning: use location
   p99[2] = 200;
      ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

MEM[(int *)_2 + 8B] = 200;
test.c:127:10: warning: use location
   p99[2] = 200;
          ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)_2 + 8B] = 200;
test.c:127:10: warning: use location
   p99[2] = 200;
          ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:71:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start MEM[(int *)_2 + 8B] = 200;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start MEM[(int *)_2 + 8B] = 200;
test.c:127:10: warning: use location
   p99[2] = 200;
          ^
dot graph stmt end


====================================zzz=================================
 <ssa_name 0x7fbbb97e52d0
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _4 = malloc (200);
    version 4
    ptr-info 0x7fbbb97f7348>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:foo2========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======thread job funciton:foo========= [0m
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_40 = VDEF <.MEM_39(D)>
pthread_mutex_lock (&mLock);
test.c:171:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_41 = VDEF <.MEM_40>
pthread_mutex_lock (&mLock);
test.c:172:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_61 = VDEF <.MEM_60>
pthread_mutex_unlock (&mLock);
test.c:200:2: warning: use location
  pthread_mutex_unlock(&mLock);
  ^
[40;42m =======thread job funciton lock count :3========= [0m
[40;42m =======start_check_funciton:foo========= [0m
 <function_decl 0x7fbbb97ca400 foo
    type <function_type 0x7fbbb97c4b28
        type <pointer_type 0x7fbbb9c8ca80 type <integer_type 0x7fbbb9c855e8 int>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97d1738>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3bb8 value <integer_type 0x7fbbb9c855e8 int>
            chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>
        pointer_to_this <pointer_type 0x7fbbb97d1930>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 121 col 6 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dc420>
    result <result_decl 0x7fbbb9c7c3c0 D.4062 type <pointer_type 0x7fbbb9c8ca80>
        unsigned ignored DI file test.c line 121 col 6 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97ca400 foo>>
    arguments <parm_decl 0x7fbbb97d3800 z
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        SI file test.c line 121 col 14 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97ca400 foo> arg-type <integer_type 0x7fbbb9c855e8 int>>
    struct-function 0x7fbbb97dd210>
 <ssa_name 0x7fbbb97e5c18
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97e2b40 p2>
    def_stmt p2_5 = malloc (1);
    version 5
    ptr-info 0x7fbbb97f7468>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo
dot graph target entry end

*p2_5 = 1;
test.c:125:8: warning: use location
  p2[0] = 1;
        ^
dot graph target loc start # .MEM_13 = VDEF <.MEM_12(D)>
p2_5 = malloc (1);
test.c:124:7: warning: use location
  int *p2 = malloc(1);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p2_5 = 1;
test.c:125:8: warning: use location
  p2[0] = 1;
        ^
dot graph target line desend

dot graph target loc start # .MEM_13 = VDEF <.MEM_12(D)>
p2_5 = malloc (1);
test.c:124:7: warning: use location
  int *p2 = malloc(1);
       ^
dot graph target loc end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph stmt start *p2_5 = 1;
p2_5 = malloc (1);
dot graph stmt end

dot graph stmt start *p2_5 = 1;
test.c:125:8: warning: use location
  p2[0] = 1;
        ^
dot graph stmt end

 
 LOCAL VARIBALE  
# .MEM_14 = VDEF <.MEM_13>
*p2_5 = 1;
test.c:125:8: warning: use location
 
 LOCAL VARIBALE  

====================================zzz=================================
 <ssa_name 0x7fbbb97e5c18
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97e2b40 p2>
    def_stmt p2_5 = malloc (1);
    version 5
    ptr-info 0x7fbbb97f7468>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7fbbb97ca400 foo
    type <function_type 0x7fbbb97c4b28
        type <pointer_type 0x7fbbb9c8ca80 type <integer_type 0x7fbbb9c855e8 int>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97d1738>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3bb8 value <integer_type 0x7fbbb9c855e8 int>
            chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>
        pointer_to_this <pointer_type 0x7fbbb97d1930>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 121 col 6 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dc420>
    result <result_decl 0x7fbbb9c7c3c0 D.4062 type <pointer_type 0x7fbbb9c8ca80>
        unsigned ignored DI file test.c line 121 col 6 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97ca400 foo>>
    arguments <parm_decl 0x7fbbb97d3800 z
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        SI file test.c line 121 col 14 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97ca400 foo> arg-type <integer_type 0x7fbbb9c855e8 int>>
    struct-function 0x7fbbb97dd210>
 <ssa_name 0x7fbbb97e5ca8
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _11 = foo2 (z_9(D));
    version 11
    ptr-info 0x7fbbb97f7480>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:foo2 
[40;44m =======trace_function_path foo2  function_call count: 4 level :-100========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :-100========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---foo2-----
this other function ------foo2-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo
dot graph target entry end

return _11;
test.c:142:9: warning: use location
  return foo2(z);
         ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_11 = foo2 (z_9(D));
test.c:142:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: return _11;
test.c:142:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_11 = foo2 (z_9(D));
test.c:142:9: warning: use location
dot graph target loc end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph stmt start return _11;
_11 = foo2 (z_9(D));
dot graph stmt end

dot graph stmt start return _11;
test.c:142:9: warning: use location
dot graph stmt end


====================================zzz=================================
 <ssa_name 0x7fbbb97e5ca8
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _11 = foo2 (z_9(D));
    version 11
    ptr-info 0x7fbbb97f7480>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:foo========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;33m =======POP node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre_check_funciton:child========= [0m
[40;42m =======thread job funciton:child========= [0m
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_40 = VDEF <.MEM_39(D)>
pthread_mutex_lock (&mLock);
test.c:171:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_41 = VDEF <.MEM_40>
pthread_mutex_lock (&mLock);
test.c:172:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_61 = VDEF <.MEM_60>
pthread_mutex_unlock (&mLock);
test.c:200:2: warning: use location
  pthread_mutex_unlock(&mLock);
  ^
[40;42m =======thread job funciton lock count :3========= [0m
[40;42m =======start_check_funciton:child========= [0m
 <function_decl 0x7fbbb97c5d00 child
    type <function_type 0x7fbbb97c4888
        type <pointer_type 0x7fbbb9c8c0a8 type <void_type 0x7fbbb9c85f18 void>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97c4348>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3a00 value <pointer_type 0x7fbbb9c8c0a8>
            chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>
        pointer_to_this <pointer_type 0x7fbbb97c45e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 144 col 7 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dcc00>
    result <result_decl 0x7fbbb9c7c708 D.4090 type <pointer_type 0x7fbbb9c8c0a8>
        unsigned ignored DI file test.c line 144 col 7 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97c5d00 child>>
    arguments <parm_decl 0x7fbbb97d3d80 data type <pointer_type 0x7fbbb9c8c0a8>
        addressable unsigned DI file test.c line 144 col 19 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97c5d00 child> arg-type <pointer_type 0x7fbbb9c8c0a8>>
    struct-function 0x7fbbb97dd6e0>
 <ssa_name 0x7fbbb97f4510
    type <pointer_type 0x7fbbb97d1738
        type <pointer_type 0x7fbbb9c8ca80 type <integer_type 0x7fbbb9c855e8 int>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97d1738>>
        public unsigned DI size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7fbbb97eef30 ppData>
    def_stmt ppData_18 = malloc (10);
    version 18
    ptr-info 0x7fbbb97f76d8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

====================================zzz=================================
 <ssa_name 0x7fbbb97f4510
    type <pointer_type 0x7fbbb97d1738
        type <pointer_type 0x7fbbb9c8ca80 type <integer_type 0x7fbbb9c855e8 int>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97d1738>>
        public unsigned DI size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7fbbb97eef30 ppData>
    def_stmt ppData_18 = malloc (10);
    version 18
    ptr-info 0x7fbbb97f76d8>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:178:8: warning: use location
  int **ppData = malloc(10);
        ^

======================================================================
 <function_decl 0x7fbbb97c5d00 child
    type <function_type 0x7fbbb97c4888
        type <pointer_type 0x7fbbb9c8c0a8 type <void_type 0x7fbbb9c85f18 void>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97c4348>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3a00 value <pointer_type 0x7fbbb9c8c0a8>
            chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>
        pointer_to_this <pointer_type 0x7fbbb97c45e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 144 col 7 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dcc00>
    result <result_decl 0x7fbbb9c7c708 D.4090 type <pointer_type 0x7fbbb9c8c0a8>
        unsigned ignored DI file test.c line 144 col 7 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97c5d00 child>>
    arguments <parm_decl 0x7fbbb97d3d80 data type <pointer_type 0x7fbbb9c8c0a8>
        addressable unsigned DI file test.c line 144 col 19 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97c5d00 child> arg-type <pointer_type 0x7fbbb9c8c0a8>>
    struct-function 0x7fbbb97dd6e0>
 <ssa_name 0x7fbbb97f4558
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97eee10 pData2>
    def_stmt pData2_21 = malloc (10);
    version 21
    ptr-info 0x7fbbb97f76f0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child
dot graph target entry end

child5 (pData2_21);
test.c:194:2: warning: use location
  child5(pData2);
  ^
dot graph target loc start # .MEM_46 = VDEF <.MEM_45>
pData2_21 = malloc (10);
test.c:180:7: warning: use location
  int *pData2 = malloc(10);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: child5 (pData2_21);
test.c:194:2: warning: use location
  child5(pData2);
  ^
dot graph target line desend

dot graph target loc start # .MEM_46 = VDEF <.MEM_45>
pData2_21 = malloc (10);
test.c:180:7: warning: use location
  int *pData2 = malloc(10);
       ^
dot graph target loc end

dot graph target basicblock start from child basic block 2dot graph target basicblock en1

dot graph stmt start child5 (pData2_21);
pData2_21 = malloc (10);
dot graph stmt end

dot graph stmt start child5 (pData2_21);
test.c:194:2: warning: use location
  child5(pData2);
  ^
dot graph stmt end

this stmt is child function---child5-----

 ================== trace ================== 
 <ssa_name 0x7fbbb97f4558
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97eee10 pData2>
    def_stmt pData2_21 = malloc (10);
    version 21
    ptr-info 0x7fbbb97f76f0>
trace fucntion name:child5 
[40;44m =======trace_function_path child5  function_call count: 4 level :0========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
test.c:299:3: warning: use location
   free(pData);
   ^
[40;36m ======= node_fun:child5========= [0m
[40;36m ======= find relate stmt with pData2 ========= [0m
[40;36m ======= relate stmt argument:pData2 ========= [0m
[40;36m ======= relate node_fun argument222:pData2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 1695141213
from child5 basic block 2dot graph end relate end

In function â€˜child5â€™:
test.c:282:8: warning: use location
  pData = pData + 1;
        ^
dot graph relate stmt start ID : 534077249 stmt(LHS) :pData_6 = data_5(D) + 4;
test.c:282:8: warning: use location
pData_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate formID : 1695141213
from child5 basic block 4dot graph end relate end

dot graph relate stmt start ID : 1642510221 stmt(call) :free (pData_6);
test.c:299:3: warning: use location
   free(pData);
   ^
pData_6
dot graph relate end


====================================ffff=================================
 <ssa_name 0x7fbbb97f4558
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97eee10 pData2>
    def_stmt pData2_21 = malloc (10);
    version 21
    ptr-info 0x7fbbb97f76f0>
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m

 ================== trace ================== 

====================================zzz=================================
 <ssa_name 0x7fbbb97f4558
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97eee10 pData2>
    def_stmt pData2_21 = malloc (10);
    version 21
    ptr-info 0x7fbbb97f76f0>
dot graph start relate for1ID : 1695141213
from child5 basic block 4dot graph end relate end

subgraph cluster_479437686 dot graph subgraph  start ID : 1642510221 stmt(relate) ï¼Œ Tree ID : 1695141213 : free (pData_6);
In function â€˜mainâ€™:
test.c:299:3: warning: use location
dot graph subgrapend


 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

 <function_decl 0x7fbbb97c5d00 child
    type <function_type 0x7fbbb97c4888
        type <pointer_type 0x7fbbb9c8c0a8 type <void_type 0x7fbbb9c85f18 void>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97c4348>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3a00 value <pointer_type 0x7fbbb9c8c0a8>
            chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>
        pointer_to_this <pointer_type 0x7fbbb97c45e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 144 col 7 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dcc00>
    result <result_decl 0x7fbbb9c7c708 D.4090 type <pointer_type 0x7fbbb9c8c0a8>
        unsigned ignored DI file test.c line 144 col 7 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97c5d00 child>>
    arguments <parm_decl 0x7fbbb97d3d80 data type <pointer_type 0x7fbbb9c8c0a8>
        addressable unsigned DI file test.c line 144 col 19 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97c5d00 child> arg-type <pointer_type 0x7fbbb9c8c0a8>>
    struct-function 0x7fbbb97dd6e0>
 <ssa_name 0x7fbbb97f44c8
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5000 a99>
    def_stmt a99_16 = foo (20);
    version 16
    ptr-info 0x7fbbb97f76c0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 2 level :-100========  [0m
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :-100========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :-100========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
this is fucntion return value is heap-object 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---foo-----
this other function ------foo-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child
dot graph target entry end

_38 = __printf_chk (1, "asdda%d\n", a99_16);
dot graph target loc start # .MEM_42 = VDEF <.MEM_41>
a99_16 = foo (20);
test.c:174:7: warning: use location
  int *a99 = foo(20);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: _38 = __printf_chk (1, "asdda%d\n", a99_16);
dot graph target line desend

dot graph target loc start # .MEM_42 = VDEF <.MEM_41>
a99_16 = foo (20);
test.c:174:7: warning: use location
dot graph target loc end

dot graph target basicblock start from child basic block 2dot graph target basicblock en1

dot graph stmt start _38 = __printf_chk (1, "asdda%d\n", a99_16);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7fbbb97f44c8
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5000 a99>
    def_stmt a99_16 = foo (20);
    version 16
    ptr-info 0x7fbbb97f76c0>
trace fucntion name:__printf_chk 

 ================== trace ================== 

====================================zzz=================================
 <ssa_name 0x7fbbb97f44c8
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5000 a99>
    def_stmt a99_16 = foo (20);
    version 16
    ptr-info 0x7fbbb97f76c0>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:child========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:child7========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path child7  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;33m =======POP node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;33m =======POP node_fun stack:pthread_self========= [0m
[40;42m =======pre_check_funciton:child7========= [0m
[40;42m =======start_check_funciton:child7========= [0m
 <function_decl 0x7fbbb97ca000 child7
    type <function_type 0x7fbbb97c49d8
        type <pointer_type 0x7fbbb9c8ca80 type <integer_type 0x7fbbb9c855e8 int>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97d1738>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3af0 value <pointer_type 0x7fbbb9c8c0a8>
            chain <tree_list 0x7fbbb97c3a00 value <pointer_type 0x7fbbb9c8c0a8>
                chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>>
        pointer_to_this <pointer_type 0x7fbbb97d1690>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 349 col 6 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dc960>
    result <result_decl 0x7fbbb9c7c5a0 D.4078 type <pointer_type 0x7fbbb9c8ca80>
        unsigned ignored DI file test.c line 349 col 6 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97ca000 child7>>
    arguments <parm_decl 0x7fbbb97d3b00 data
        type <pointer_type 0x7fbbb9c8c0a8 type <void_type 0x7fbbb9c85f18 void>
            public unsigned DI size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97c4348>>
        unsigned DI file test.c line 349 col 19 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97ca000 child7> arg-type <pointer_type 0x7fbbb9c8c0a8>
        chain <parm_decl 0x7fbbb97d3b80 test type <pointer_type 0x7fbbb9c8c0a8>
            unsigned DI file test.c line 349 col 31 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
            align 64 context <function_decl 0x7fbbb97ca000 child7> arg-type <pointer_type 0x7fbbb9c8c0a8>>>
    struct-function 0x7fbbb97dd4d0>
 <ssa_name 0x7fbbb97eba20
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _15 = malloc (10);
    version 15
    ptr-info 0x7fbbb97f7588>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child7
dot graph target entry end

_4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph target loc start # .MEM_24 = VDEF <.MEM_23>
_15 = malloc (10);
test.c:366:10: warning: use location
   return malloc(10);
          ^
dot graph target loc en1

dot graph target line desc form basic block 5: _4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_24 = VDEF <.MEM_23>
_15 = malloc (10);
test.c:366:10: warning: use location
dot graph target loc end

dot graph target basicblock start from child7 basic block 5dot graph target basicblock en1

dot graph stmt start _4 = PHI <_15(3), _12(4)>
_15 = malloc (10);
dot graph stmt end

dot graph stmt start _4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----

====================================zzz=================================
 <ssa_name 0x7fbbb97eba20
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _15 = malloc (10);
    version 15
    ptr-info 0x7fbbb97f7588>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7fbbb97ca000 child7
    type <function_type 0x7fbbb97c49d8
        type <pointer_type 0x7fbbb9c8ca80 type <integer_type 0x7fbbb9c855e8 int>
            public unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97d1738>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7fbbb97c3af0 value <pointer_type 0x7fbbb9c8c0a8>
            chain <tree_list 0x7fbbb97c3a00 value <pointer_type 0x7fbbb9c8c0a8>
                chain <tree_list 0x7fbbb9c84ac8 value <void_type 0x7fbbb9c85f18 void>>>>
        pointer_to_this <pointer_type 0x7fbbb97d1690>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 349 col 6 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> attributes <tree_list 0x7fbbb97c39d8> initial <block 0x7fbbb97dc960>
    result <result_decl 0x7fbbb9c7c5a0 D.4078 type <pointer_type 0x7fbbb9c8ca80>
        unsigned ignored DI file test.c line 349 col 6 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97ca000 child7>>
    arguments <parm_decl 0x7fbbb97d3b00 data
        type <pointer_type 0x7fbbb9c8c0a8 type <void_type 0x7fbbb9c85f18 void>
            public unsigned DI size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb97c4348>>
        unsigned DI file test.c line 349 col 19 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97ca000 child7> arg-type <pointer_type 0x7fbbb9c8c0a8>
        chain <parm_decl 0x7fbbb97d3b80 test type <pointer_type 0x7fbbb9c8c0a8>
            unsigned DI file test.c line 349 col 31 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
            align 64 context <function_decl 0x7fbbb97ca000 child7> arg-type <pointer_type 0x7fbbb9c8c0a8>>>
    struct-function 0x7fbbb97dd4d0>
 <ssa_name 0x7fbbb97eb9d8
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _12 = malloc (30);
    version 12
    ptr-info 0x7fbbb97f7570>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child7
dot graph target entry end

_4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph target loc start # .MEM_22 = VDEF <.MEM_21>
_12 = malloc (30);
test.c:374:10: warning: use location
   return malloc(30);
          ^
dot graph target loc en1

dot graph target line desc form basic block 5: _4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_22 = VDEF <.MEM_21>
_12 = malloc (30);
test.c:374:10: warning: use location
dot graph target loc end

dot graph target basicblock start from child7 basic block 5dot graph target basicblock en1

dot graph stmt start _4 = PHI <_15(3), _12(4)>
_12 = malloc (30);
dot graph stmt end

dot graph stmt start _4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----

====================================zzz=================================
 <ssa_name 0x7fbbb97eb9d8
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _12 = malloc (30);
    version 12
    ptr-info 0x7fbbb97f7570>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:child7========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;44m =======print_function_path child4  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre_check_funciton:child4========= [0m
[40;42m =======start_check_funciton:child4========= [0m
[40;33m =======POP node_fun stack:child4========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo5========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path foo5  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre_check_funciton:foo5========= [0m
[40;42m =======start_check_funciton:foo5========= [0m
[40;33m =======POP node_fun stack:foo5========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:pthread_join========= [0m
[40;33m =======POP node_fun stack:pthread_join========= [0m
[40;42m =======pre add _ fucntion:pthread_create========= [0m
[40;33m =======POP node_fun stack:pthread_create========= [0m
[40;42m =======pre add _ fucntion:pthread_attr_setdetachstate========= [0m
[40;33m =======POP node_fun stack:pthread_attr_setdetachstate========= [0m
[40;42m =======pre add _ fucntion:pthread_attr_init========= [0m
[40;33m =======POP node_fun stack:pthread_attr_init========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m
 <function_decl 0x7fbbb97c5b00 main
    type <function_type 0x7fbbb97c47e0
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 452 col 5 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> initial <block 0x7fbbb97dcd80>
    result <result_decl 0x7fbbb9c7c7f8 D.4101 type <integer_type 0x7fbbb9c855e8 int>
        ignored SI file test.c line 452 col 5 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97c5b00 main>>
    struct-function 0x7fbbb97dd840>
 <ssa_name 0x7fbbb97ffb40
    type <pointer_type 0x7fbbb97d03f0
        type <record_type 0x7fbbb97d0348 adresse TI
            size <integer_cst 0x7fbbb9c71c30 constant 128>
            unit size <integer_cst 0x7fbbb9c71c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7fbbb97d0348 fields <field_decl 0x7fbbb97ce130 name> context <translation_unit_decl 0x7fbbb9c7c168 test.c>
            pointer_to_this <pointer_type 0x7fbbb97d03f0> chain <type_decl 0x7fbbb97ce1c8 D.4043>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7fbbb97fa120 a>
    def_stmt a_51 = malloc (32);
    version 51
    ptr-info 0x7fbbb97f7888>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_17 = a_51 + _16;
test.c:469:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^
dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _17 = a_51 + _16;
test.c:469:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^
dot graph target line desend

dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _17 = a_51 + _16;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _17 = a_51 + _16;
test.c:469:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_18 = _17->name;
test.c:469:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _18 = _17->name;
test.c:469:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target line desend

dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _18 = _17->name;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _18 = _17->name;
test.c:469:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_91 = __printf_chk (1, "%s, %d\n", _18, _14);
dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _91 = __printf_chk (1, "%s, %d\n", _18, _14);
dot graph target line desend

dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _91 = __printf_chk (1, "%s, %d\n", _18, _14);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7fbbb97ffb40
    type <pointer_type 0x7fbbb97d03f0
        type <record_type 0x7fbbb97d0348 adresse TI
            size <integer_cst 0x7fbbb9c71c30 constant 128>
            unit size <integer_cst 0x7fbbb9c71c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7fbbb97d0348 fields <field_decl 0x7fbbb97ce130 name> context <translation_unit_decl 0x7fbbb9c7c168 test.c>
            pointer_to_this <pointer_type 0x7fbbb97d03f0> chain <type_decl 0x7fbbb97ce1c8 D.4043>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7fbbb97fa120 a>
    def_stmt a_51 = malloc (32);
    version 51
    ptr-info 0x7fbbb97f7888>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_13 = a_51 + _12;
test.c:469:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^
dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _13 = a_51 + _12;
test.c:469:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^
dot graph target line desend

dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _13 = a_51 + _12;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _13 = a_51 + _12;
test.c:469:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_14 = _13->nummer;
test.c:469:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _14 = _13->nummer;
test.c:469:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target line desend

dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _14 = _13->nummer;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _14 = _13->nummer;
test.c:469:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free (a_51);
test.c:466:2: warning: use location
  free(a);
  ^
dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 5: free (a_51);
test.c:466:2: warning: use location
  free(a);
  ^
dot graph target line desend

dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start free (a_51);
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start free (a_51);
test.c:466:2: warning: use location
  free(a);
  ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (a_51);
test.c:466:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

_9 = a_51 + _8;
test.c:464:4: warning: use location
   a[i].nummer = 123;
    ^
dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _9 = a_51 + _8;
test.c:464:4: warning: use location
   a[i].nummer = 123;
    ^
dot graph target line desend

dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _9 = a_51 + _8;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _9 = a_51 + _8;
test.c:464:4: warning: use location
   a[i].nummer = 123;
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_9->nummer = 123;
test.c:464:15: warning: use location
   a[i].nummer = 123;
               ^
dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _9->nummer = 123;
test.c:464:15: warning: use location
   a[i].nummer = 123;
               ^
dot graph target line desend

dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _9->nummer = 123;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _9->nummer = 123;
test.c:464:15: warning: use location
   a[i].nummer = 123;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_6 = a_51 + _5;
test.c:463:4: warning: use location
   a[i].name = "Testname";
    ^
dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _6 = a_51 + _5;
test.c:463:4: warning: use location
   a[i].name = "Testname";
    ^
dot graph target line desend

dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _6 = a_51 + _5;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _6 = a_51 + _5;
test.c:463:4: warning: use location
   a[i].name = "Testname";
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_6->name = "Testname";
test.c:463:13: warning: use location
   a[i].name = "Testname";
             ^
dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _6->name = "Testname";
test.c:463:13: warning: use location
   a[i].name = "Testname";
             ^
dot graph target line desend

dot graph target loc start # .MEM_116 = VDEF <.MEM_115(D)>
a_51 = malloc (32);
test.c:459:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _6->name = "Testname";
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _6->name = "Testname";
test.c:463:13: warning: use location
   a[i].name = "Testname";
             ^
dot graph stmt end


====================================zzz=================================
 <ssa_name 0x7fbbb97ffb40
    type <pointer_type 0x7fbbb97d03f0
        type <record_type 0x7fbbb97d0348 adresse TI
            size <integer_cst 0x7fbbb9c71c30 constant 128>
            unit size <integer_cst 0x7fbbb9c71c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7fbbb97d0348 fields <field_decl 0x7fbbb97ce130 name> context <translation_unit_decl 0x7fbbb9c7c168 test.c>
            pointer_to_this <pointer_type 0x7fbbb97d03f0> chain <type_decl 0x7fbbb97ce1c8 D.4043>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7fbbb97fa120 a>
    def_stmt a_51 = malloc (32);
    version 51
    ptr-info 0x7fbbb97f7888>

 ================== Start Use after free Check ================== 
# .MEM_117 = VDEF <.MEM_108>
free (a_51);
test.c:466:2: warning: Use after free error!: free location 
  free(a);
  ^
_17 = a_51 + _16;
test.c:469:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_117 = VDEF <.MEM_108>
free (a_51);
test.c:466:2: warning: Use after free error!: free location 
  free(a);
  ^
# VUSE <.MEM_109>
_18 = _17->name;
test.c:469:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_117 = VDEF <.MEM_108>
free (a_51);
test.c:466:2: warning: Use after free error!: free location 
  free(a);
  ^
# .MEM_155 = VDEF <.MEM_109>
_91 = __printf_chk (1, "%s, %d\n", _18, _14);

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_117 = VDEF <.MEM_108>
free (a_51);
test.c:466:2: warning: Use after free error!: free location 
_13 = a_51 + _12;
test.c:469:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_117 = VDEF <.MEM_108>
free (a_51);
test.c:466:2: warning: Use after free error!: free location 
  free(a);
  ^
# VUSE <.MEM_109>
_14 = _13->nummer;
test.c:469:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

 <function_decl 0x7fbbb97c5b00 main
    type <function_type 0x7fbbb97c47e0
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 452 col 5 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> initial <block 0x7fbbb97dcd80>
    result <result_decl 0x7fbbb9c7c7f8 D.4101 type <integer_type 0x7fbbb9c855e8 int>
        ignored SI file test.c line 452 col 5 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97c5b00 main>>
    struct-function 0x7fbbb97dd840>
 <addr_expr 0x7fbbb97ede00
    type <pointer_type 0x7fbbb97cd3f0
        type <integer_type 0x7fbbb97c43f0 pthread_t unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 canonical type 0x7fbbb9c85738 precision 64 min <integer_cst 0x7fbbb9c71eb8 0> max <integer_cst 0x7fbbb9c73500 18446744073709551615> context <translation_unit_decl 0x7fbbb9c7c168 test.c>
            pointer_to_this <pointer_type 0x7fbbb97cd3f0>>
        unsigned DI size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7fbbb97f5e10 t type <integer_type 0x7fbbb97c43f0 pthread_t>
        addressable unsigned DI file test.c line 500 col 12 size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 context <function_decl 0x7fbbb97c5b00 main>
        chain <var_decl 0x7fbbb97f5d80 t2 type <array_type 0x7fbbb97d00a8>
            addressable BLK file test.c line 500 col 15
            size <integer_cst 0x7fbbb9c8d0a8 constant 192>
            unit size <integer_cst 0x7fbbb9c8d078 constant 24>
            align 128 context <function_decl 0x7fbbb97c5b00 main> chain <var_decl 0x7fbbb97f5cf0 q>>>
    test.c:501:2 start: test.c:501:2 finish: test.c:501:2>

dot graph START

======================================================================

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:501:2: warning: use location
  pthread_create(&t, &attr2, child2, input2);
  ^

======================================================================
 <function_decl 0x7fbbb97c5b00 main
    type <function_type 0x7fbbb97c47e0
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 452 col 5 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> initial <block 0x7fbbb97dcd80>
    result <result_decl 0x7fbbb9c7c7f8 D.4101 type <integer_type 0x7fbbb9c855e8 int>
        ignored SI file test.c line 452 col 5 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97c5b00 main>>
    struct-function 0x7fbbb97dd840>
 <ssa_name 0x7fbbb97ff5a0
    type <pointer_type 0x7fbbb97cd3f0
        type <integer_type 0x7fbbb97c43f0 pthread_t unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 canonical type 0x7fbbb9c85738 precision 64 min <integer_cst 0x7fbbb9c71eb8 0> max <integer_cst 0x7fbbb9c73500 18446744073709551615> context <translation_unit_decl 0x7fbbb9c7c168 test.c>
            pointer_to_this <pointer_type 0x7fbbb97cd3f0>>
        unsigned DI size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _23 = &t2[i_39];
    version 23
    ptr-info 0x7fbbb97f77f8>

dot graph START

======================================================================

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start is Pthread Job Collect  

======================================================================
dot graph entry main
dot graph target entry end

_24 = t2[i_39];
test.c:510:3: warning: use location
   printf("%ld\n", t2[i]);
   ^
dot graph target loc start # .MEM_153 = VDEF <.MEM_110>
err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc en1

dot graph target line desc form basic block 9: _24 = t2[i_39];
test.c:510:3: warning: use location
   printf("%ld\n", t2[i]);
   ^
dot graph target line desend

dot graph target loc start # .MEM_153 = VDEF <.MEM_110>
err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 9dot graph target basicblock en1

dot graph stmt start _24 = t2[i_39];
err_99 = pthread_create (_23, &attr2, child, 0B);
dot graph stmt end

dot graph stmt start _24 = t2[i_39];
test.c:510:3: warning: use location
   printf("%ld\n", t2[i]);
   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_105 = __printf_chk (1, "%ld\n", _24);
dot graph target loc start # .MEM_153 = VDEF <.MEM_110>
err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc en1

dot graph target line desc form basic block 9: _105 = __printf_chk (1, "%ld\n", _24);
dot graph target line desend

dot graph target loc start # .MEM_153 = VDEF <.MEM_110>
err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 9dot graph target basicblock en1

dot graph stmt start _105 = __printf_chk (1, "%ld\n", _24);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7fbbb97ff5a0
    type <pointer_type 0x7fbbb97cd3f0
        type <integer_type 0x7fbbb97c43f0 pthread_t unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 canonical type 0x7fbbb9c85738 precision 64 min <integer_cst 0x7fbbb9c71eb8 0> max <integer_cst 0x7fbbb9c73500 18446744073709551615> context <translation_unit_decl 0x7fbbb9c7c168 test.c>
            pointer_to_this <pointer_type 0x7fbbb97cd3f0>>
        unsigned DI size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _23 = &t2[i_39];
    version 23
    ptr-info 0x7fbbb97f77f8>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_28 = t2[i_40];
test.c:535:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph target loc start # .MEM_153 = VDEF <.MEM_110>
err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc en1

dot graph target line desc form basic block 15: _28 = t2[i_40];
test.c:535:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph target line desend

dot graph target loc start # .MEM_153 = VDEF <.MEM_110>
err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start _28 = t2[i_40];
err_99 = pthread_create (_23, &attr2, child, 0B);
dot graph stmt end

dot graph stmt start _28 = t2[i_40];
test.c:535:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

pthread_join (_28, 0B);
test.c:535:3: warning: use location
dot graph target loc start # .MEM_153 = VDEF <.MEM_110>
err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc en1

dot graph target line desc form basic block 15: pthread_join (_28, 0B);
test.c:535:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph target line desend

dot graph target loc start # .MEM_153 = VDEF <.MEM_110>
err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start pthread_join (_28, 0B);
err_99 = pthread_create (_23, &attr2, child, 0B);
dot graph stmt end

dot graph stmt start pthread_join (_28, 0B);
test.c:535:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph stmt end

this stmt is child function---pthread_join-----
[40;32m    FIND PTHREAD_JOIN [0m
dot graph entry main
dot graph target entry end

err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc start # .MEM_153 = VDEF <.MEM_110>
err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 9: err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_153 = VDEF <.MEM_110>
err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 9dot graph target basicblock en1

dot graph stmt start err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
dot graph stmt end

this stmt is child function---pthread_create-----

 ================== find ================== 
err_99 = pthread_create (_23, &attr2, child, 0B);
test.c:508:7: warning: use location
[40;32m    FIND PTHREAD_CREATED STMT  [0m

 ================== pre_pthread_detched ================== 
[40;44m =======trace_function_path child  function_call count: 10 level :-1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :-1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :-1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :-1========  [0m
[40;31m  find pthread_detched stmt  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
pthread_detach (_1);
test.c:279:2: warning: use location
  pthread_detach(pthread_self());
  ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :-1========  [0m
[40;31m  find pthread_detched stmt  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
pthread_detach (_1);
test.c:251:2: warning: use location
  pthread_detach(pthread_self());
  ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :-1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :-1========  [0m
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :-1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :-1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m

 ================== pre_pthread_detched end ================== 
[40;44m =======trace_function_path child  function_call count: 10 level :0========  [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
test.c:196:2: warning: use location
  free(pData);
  ^
# .MEM_58 = VDEF <.MEM_57>
free (_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_10);
test.c:197:2: warning: use location
  free(data);
  ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :1========  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
test.c:419:2: warning: use location
  free(b);
  ^
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:420:2: warning: use location
  free(b);
  ^
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :2========  [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
test.c:435:2: warning: use location
  free(k);
  ^
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:438:2: warning: use location
  free(k);
  ^
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:439:2: warning: use location
  free(k);
  ^
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:440:2: warning: use location
  free(k);
  ^
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
test.c:442:2: warning: use location
  free(w);
  ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :1========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
test.c:299:3: warning: use location
   free(pData);
   ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :1========  [0m
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :2========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
[40;31m  find free stmt free same pointer [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
test.c:87:3: warning: use location
   free(p3);
   ^
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;31m  find free stmt free same pointer [0m
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:94:3: warning: use location
   free(p4);
   ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :3========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;32m    FIND PTHREAD_CREATED TYPE is CREATE_DETACHED  [0m

 ================== find ================== 

====================================zzz=================================
 <ssa_name 0x7fbbb97ff5a0
    type <pointer_type 0x7fbbb97cd3f0
        type <integer_type 0x7fbbb97c43f0 pthread_t unsigned DI
            size <integer_cst 0x7fbbb9c71be8 constant 64>
            unit size <integer_cst 0x7fbbb9c71c00 constant 8>
            align 64 symtab 0 alias set -1 canonical type 0x7fbbb9c85738 precision 64 min <integer_cst 0x7fbbb9c71eb8 0> max <integer_cst 0x7fbbb9c73500 18446744073709551615> context <translation_unit_decl 0x7fbbb9c7c168 test.c>
            pointer_to_this <pointer_type 0x7fbbb97cd3f0>>
        unsigned DI size <integer_cst 0x7fbbb9c71be8 64> unit size <integer_cst 0x7fbbb9c71c00 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _23 = &t2[i_39];
    version 23
    ptr-info 0x7fbbb97f77f8>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m    pthread is DETACHED and no memory leak  [0m

======================================================================

======================================================================
[40;31m  	possible double free :14 [0m

======================================================================
 <function_decl 0x7fbbb97c5b00 main
    type <function_type 0x7fbbb97c47e0
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 452 col 5 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> initial <block 0x7fbbb97dcd80>
    result <result_decl 0x7fbbb9c7c7f8 D.4101 type <integer_type 0x7fbbb9c855e8 int>
        ignored SI file test.c line 452 col 5 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97c5b00 main>>
    struct-function 0x7fbbb97dd840>
 <ssa_name 0x7fbbb97ffbd0
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5cf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7fbbb97f78a0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_31 = foo5 (q_63, q_63);
test.c:555:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 23: _31 = foo5 (q_63, q_63);
test.c:555:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target line desend

dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start _31 = foo5 (q_63, q_63);
test.c:555:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph stmt end

this stmt is child function---foo5-----

 ================== trace ================== 
 <ssa_name 0x7fbbb97ffbd0
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5cf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7fbbb97f78a0>
trace fucntion name:foo5 
[40;44m =======trace_function_path foo5  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:foo5========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m

====================================ffff=================================
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

*q_63 = 20;
test.c:527:8: warning: use location
   q[0] = 20;
        ^
dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 14: *q_63 = 20;
test.c:527:8: warning: use location
   q[0] = 20;
        ^
dot graph target line desend

dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start *q_63 = 20;
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start *q_63 = 20;
test.c:527:8: warning: use location
   q[0] = 20;
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free (q_63);
test.c:523:3: warning: use location
   free(q);
   ^
dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 12: free (q_63);
test.c:523:3: warning: use location
   free(q);
   ^
dot graph target line desend

dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 12dot graph target basicblock en1

dot graph stmt start free (q_63);
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start free (q_63);
test.c:523:3: warning: use location
   free(q);
   ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (q_63);
test.c:523:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

*q_63 = 10;
test.c:522:8: warning: use location
   q[0] = 10;
        ^
dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 12: *q_63 = 10;
test.c:522:8: warning: use location
   q[0] = 10;
        ^
dot graph target line desend

dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 12dot graph target basicblock en1

dot graph stmt start *q_63 = 10;
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start *q_63 = 10;
test.c:522:8: warning: use location
   q[0] = 10;
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

child (q_63);
test.c:519:3: warning: use location
   child(q);
   ^
dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 12: child (q_63);
test.c:519:3: warning: use location
   child(q);
   ^
dot graph target line desend

dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 12dot graph target basicblock en1

dot graph stmt start child (q_63);
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start child (q_63);
test.c:519:3: warning: use location
   child(q);
   ^
dot graph stmt end

this stmt is child function---child-----

 ================== trace ================== 
 <ssa_name 0x7fbbb97ffbd0
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5cf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7fbbb97f78a0>
trace fucntion name:child 
[40;44m =======trace_function_path child  function_call count: 10 level :0========  [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
test.c:196:2: warning: use location
  free(pData);
  ^
# .MEM_58 = VDEF <.MEM_57>
free (_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_10);
test.c:197:2: warning: use location
  free(data);
  ^
[40;36m ======= node_fun:child========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 1248249205
from child basic block 2dot graph end relate end

In function â€˜childâ€™:
test.c:179:7: warning: use location
  int *pData = data;
       ^
dot graph relate stmt start ID : 741600514 stmt(LHS) :_1 = data;
test.c:179:7: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1248249205
from child basic block 2dot graph end relate end

test.c:181:9: warning: use location
  *pData += 1;
         ^
dot graph relate stmt start ID : 980811535 stmt(LHS) :_2 = pData;
test.c:181:9: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1248249205
from child basic block 2dot graph end relate end

test.c:181:9: warning: use location
dot graph relate stmt start ID : 992935354 stmt(LHS) :_4 = pData;
test.c:181:9: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1248249205
from child basic block 2dot graph end relate end

test.c:188:9: warning: use location
  *ppData[0] = 10;
         ^
dot graph relate stmt start ID : 261277092 stmt(LHS) :_6 = pData;
test.c:188:9: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1248249205
from child basic block 2dot graph end relate end

test.c:191:3: warning: use location
  **ppData = 12;
   ^
dot graph relate stmt start ID : 528469100 stmt(LHS) :_7 = pData;
test.c:191:3: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1248249205
from child basic block 2dot graph end relate end

test.c:196:2: warning: use location
  free(pData);
  ^
dot graph relate stmt start ID : 1527012603 stmt(LHS) :_9 = pData;
test.c:196:2: warning: use location
_9
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 1248249205
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1903787313 stmt(call) :free (_9);
test.c:196:2: warning: use location
_9
dot graph relate end

[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1248249205
from child basic block 2dot graph end relate end

test.c:197:2: warning: use location
  free(data);
  ^
dot graph relate stmt start ID : 1007906786 stmt(LHS) :_10 = data;
test.c:197:2: warning: use location
_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 1248249205
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1271619161 stmt(call) :free (_10);
test.c:197:2: warning: use location
_10
dot graph relate end

[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1248249205
from child basic block 2dot graph end relate end

test.c:198:2: warning: use location
  boo(data);
  ^
dot graph relate stmt start ID : 1662848697 stmt(LHS) :_11 = data;
test.c:198:2: warning: use location
_11
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 1248249205
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 307820680 stmt(call) :boo (_11);
test.c:198:2: warning: use location
_11
dot graph relate end


====================================ffff=================================
 <ssa_name 0x7fbbb97ffbd0
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5cf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7fbbb97f78a0>
# .MEM_59 = VDEF <.MEM_58>
boo (_11);
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :1========  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
In function â€˜mainâ€™:
test.c:419:2: warning: use location
  free(b);
  ^
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:420:2: warning: use location
  free(b);
  ^
[40;36m ======= node_fun:boo========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
dot graph start relate formID : 1550791618
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1531009292 stmt(call) :free (b_2(D));
In function â€˜booâ€™:
test.c:419:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph start relate for1ID : 1550791618
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 137847703 stmt(call) :free (b_2(D));
test.c:420:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph start relate for1ID : 1550791618
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 272474475 stmt(call) :test22 (b_2(D));
test.c:421:2: warning: use location
  test22(b);
  ^
b_2(D)
dot graph relate end


====================================ffff=================================
 <ssa_name 0x7fbbb97ffbd0
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5cf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7fbbb97f78a0>
# .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :2========  [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
In function â€˜mainâ€™:
test.c:435:2: warning: use location
  free(k);
  ^
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:438:2: warning: use location
  free(k);
  ^
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:439:2: warning: use location
  free(k);
  ^
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:440:2: warning: use location
  free(k);
  ^
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
dot graph start relate formID : 1201855133
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 47280515 stmt(call) :free (k_2(D));
In function â€˜test22â€™:
test.c:435:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1201855133
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1124460240 stmt(call) :free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1201855133
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 73381322 stmt(call) :free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1201855133
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 193882223 stmt(call) :free (k_2(D));
test.c:438:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1201855133
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1424946357 stmt(call) :free (k_2(D));
test.c:439:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1201855133
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1947363021 stmt(call) :free (k_2(D));
test.c:440:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end


====================================ffff=================================
 <ssa_name 0x7fbbb97ffbd0
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5cf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7fbbb97f78a0>
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :1========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;36m ======= node_fun:child5========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m

====================================ffff=================================
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :1========  [0m
[40;36m ======= node_fun:child3========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m

====================================ffff=================================
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:child4========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 556609216
from child4 basic block 3dot graph end relate end

In function â€˜child4â€™:
test.c:223:11: warning: use location
   *data = *data + 1;
           ^
dot graph relate stmt start ID : 2042815423 stmt(LHS) :_1 = data;
test.c:223:11: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 556609216
from child4 basic block 3dot graph end relate end

test.c:223:3: warning: use location
   *data = *data + 1;
   ^
dot graph relate stmt start ID : 566361886 stmt(LHS) :_3 = data;
test.c:223:3: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 556609216
from child4 basic block 4dot graph end relate end

test.c:226:3: warning: use location
   *data = 2;
   ^
dot graph relate stmt start ID : 804398621 stmt(LHS) :_5 = data;
test.c:226:3: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 

====================================ffff=================================
 <ssa_name 0x7fbbb97ffbd0
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5cf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7fbbb97f78a0>
# VUSE <.MEM_13(D)>
_5 = data;
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph start relate formID : 1582924769
from foo basic block 2dot graph end relate end

In function â€˜fooâ€™:
test.c:125:8: warning: use location
  p2[0] = 1;
        ^
dot graph relate stmt start ID : 1317588117 stmt(LHS) :*p2_5 = 1;
test.c:125:8: warning: use location
*p2_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 

====================================ffff=================================
 <ssa_name 0x7fbbb97ffbd0
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5cf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7fbbb97f78a0>
# .MEM_14 = VDEF <.MEM_13>
*p2_5 = 1;
fucntion collect path finsh
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :2========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;36m ======= node_fun:foo2========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph start relate formID : 2052647826
from foo2 basic block 3dot graph end relate end

In function â€˜foo2â€™:
test.c:86:9: warning: use location
   p3[0] = 10;
         ^
dot graph relate stmt start ID : 177041635 stmt(LHS) :*p3_15 = 10;
test.c:86:9: warning: use location
*p3_15
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph start relate formID : 2052647826
from foo2 basic block 4dot graph end relate end

test.c:92:9: warning: use location
   p4[0] = 10;
         ^
dot graph relate stmt start ID : 150916004 stmt(LHS) :*p4_17 = 10;
test.c:92:9: warning: use location
*p4_17
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 

====================================ffff=================================
 <ssa_name 0x7fbbb97ffbd0
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5cf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7fbbb97f78a0>
# .MEM_47 = VDEF <.MEM_46>
*p4_17 = 10;
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph start relate formID : 898099533
from foo3 basic block 5dot graph end relate end

In function â€˜foo3â€™:
test.c:62:8: warning: use location
  p2[0] = 10;
        ^
dot graph relate stmt start ID : 438318727 stmt(LHS) :*p2_4 = 10;
test.c:62:8: warning: use location
*p2_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 

====================================ffff=================================
 <ssa_name 0x7fbbb97ffbd0
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5cf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7fbbb97f78a0>
# .MEM_21 = VDEF <.MEM_16>
*p2_4 = 10;
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_25 = q_63 != 0B;
In function â€˜mainâ€™:
test.c:516:9: warning: use location
  if ((q != NULL) && test)
         ^
dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 11: _25 = q_63 != 0B;
test.c:516:9: warning: use location
  if ((q != NULL) && test)
         ^
dot graph target line desend

dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start _25 = q_63 != 0B;
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start _25 = q_63 != 0B;
test.c:516:9: warning: use location
  if ((q != NULL) && test)
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_27 = _25 & _26;
test.c:516:18: warning: use location
  if ((q != NULL) && test)
                  ^
dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 11: _27 = _25 & _26;
test.c:516:18: warning: use location
  if ((q != NULL) && test)
                  ^
dot graph target line desend

dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start _27 = _25 & _26;
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start _27 = _25 & _26;
test.c:516:18: warning: use location
  if ((q != NULL) && test)
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_27 != 0)
test.c:516:5: warning: use location
  if ((q != NULL) && test)
     ^
dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 11: if (_27 != 0)
test.c:516:5: warning: use location
  if ((q != NULL) && test)
     ^
dot graph target line desend

dot graph target loc start # .MEM_126 = VDEF <.MEM_110>
q_63 = malloc (70);
test.c:512:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start if (_27 != 0)
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start if (_27 != 0)
test.c:516:5: warning: use location
  if ((q != NULL) && test)
     ^
dot graph stmt end

if (_27 != 0)

 ================== find cond branch ================= 
if (_27 != 0)
Cond in fucntion main basic block 11
 ================== possiable direct basic block ================= 
from main basic block 12
 ================== possiable direct basic block ================= 
from main basic block 14
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

====================================zzz=================================
 <ssa_name 0x7fbbb97ffbd0
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5cf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7fbbb97f78a0>
dot graph start relate for1ID : 1248249205
from child basic block 2dot graph end relate end

subgraph cluster_679385105 dot graph subgraph  start ID : 307820680 stmt(relate) ï¼Œ Tree ID : 1248249205 : boo (_11);
test.c:198:2: warning: use location
  boo(data);
  ^
dot graph subgrapend

dot graph start relate for1ID : 1550791618
from boo basic block 2dot graph end relate end

subgraph cluster_277628488 dot graph subgraph  start ID : 272474475 stmt(relate) ï¼Œ Tree ID : 1550791618 : test22 (b_2(D));
test.c:421:2: warning: use location
  test22(b);
  ^
dot graph subgrapend

dot graph start relate for1ID : 1201855133
from test22 basic block 2dot graph end relate end

subgraph cluster_194622393 dot graph subgraph  start ID : 1947363021 stmt(relate) ï¼Œ Tree ID : 1201855133 : free (k_2(D));
test.c:440:2: warning: use location
  free(k);
  ^
dot graph subgrapend

dot graph start relate for1ID : 556609216
from child4 basic block 4dot graph end relate end

subgraph cluster_1687291891 dot graph subgraph  start ID : 804398621 stmt(relate) ï¼Œ Tree ID : 556609216 : _5 = data;
test.c:226:3: warning: use location
   *data = 2;
   ^
dot graph subgrapend

dot graph start relate for1ID : 1582924769
from foo basic block 2dot graph end relate end

subgraph cluster_1549247649 dot graph subgraph  start ID : 1317588117 stmt(relate) ï¼Œ Tree ID : 1582924769 : *p2_5 = 1;
test.c:125:8: warning: use location
  p2[0] = 1;
        ^
dot graph subgrapend

dot graph start relate for1ID : 2052647826
from foo2 basic block 4dot graph end relate end

subgraph cluster_1857471090 dot graph subgraph  start ID : 150916004 stmt(relate) ï¼Œ Tree ID : 2052647826 : *p4_17 = 10;
test.c:92:9: warning: use location
   p4[0] = 10;
         ^
dot graph subgrapend

dot graph start relate for1ID : 898099533
from foo3 basic block 5dot graph end relate end

subgraph cluster_1995112572 dot graph subgraph  start ID : 438318727 stmt(relate) ï¼Œ Tree ID : 898099533 : *p2_4 = 10;
test.c:62:8: warning: use location
  p2[0] = 10;
        ^
dot graph subgrapend


 ================== Start Use after free Check ================== 
# .MEM_132 = VDEF <.MEM_131>
free (q_63);
test.c:523:3: warning: Use after free error!: free location 
   free(q);
   ^
# .MEM_137 = VDEF <.MEM_113>
_31 = foo5 (q_63, q_63);
test.c:555:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_130 = VDEF <.MEM_127>
child (q_63);
test.c:519:3: warning: Use after free error!: free location 
   child(q);
   ^
# .MEM_137 = VDEF <.MEM_113>
_31 = foo5 (q_63, q_63);
test.c:555:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_132 = VDEF <.MEM_131>
free (q_63);
test.c:523:3: warning: Use after free error!: free location 
   free(q);
   ^
# .MEM_128 = VDEF <.MEM_127>
*q_63 = 20;
test.c:527:8: warning: use location
   q[0] = 20;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_130 = VDEF <.MEM_127>
child (q_63);
test.c:519:3: warning: Use after free error!: free location 
   child(q);
   ^
# .MEM_128 = VDEF <.MEM_127>
*q_63 = 20;
test.c:527:8: warning: use location
   q[0] = 20;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_130 = VDEF <.MEM_127>
child (q_63);
test.c:519:3: warning: Use after free error!: free location 
   child(q);
   ^
# .MEM_132 = VDEF <.MEM_131>
free (q_63);
test.c:523:3: warning: use location
   free(q);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_130 = VDEF <.MEM_127>
child (q_63);
test.c:519:3: warning: Use after free error!: free location 
   child(q);
   ^
# .MEM_131 = VDEF <.MEM_130>
*q_63 = 10;
test.c:522:8: warning: use location
   q[0] = 10;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :11 [0m

======================================================================
 <function_decl 0x7fbbb97c5b00 main
    type <function_type 0x7fbbb97c47e0
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 452 col 5 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> initial <block 0x7fbbb97dcd80>
    result <result_decl 0x7fbbb9c7c7f8 D.4101 type <integer_type 0x7fbbb9c855e8 int>
        ignored SI file test.c line 452 col 5 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97c5b00 main>>
    struct-function 0x7fbbb97dd840>
 <ssa_name 0x7fbbb97ffc18
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5c60 q2>
    def_stmt q2_65 = malloc (20);
    version 65
    ptr-info 0x7fbbb97f78b8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

====================================zzz=================================
 <ssa_name 0x7fbbb97ffc18
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5c60 q2>
    def_stmt q2_65 = malloc (20);
    version 65
    ptr-info 0x7fbbb97f78b8>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:513:7: warning: use location
  int *q2 = malloc(20);
       ^

======================================================================
 <function_decl 0x7fbbb97c5b00 main
    type <function_type 0x7fbbb97c47e0
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 452 col 5 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> initial <block 0x7fbbb97dcd80>
    result <result_decl 0x7fbbb9c7c7f8 D.4101 type <integer_type 0x7fbbb9c855e8 int>
        ignored SI file test.c line 452 col 5 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97c5b00 main>>
    struct-function 0x7fbbb97dd840>
 <ssa_name 0x7fbbb97ffcf0
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5b40 data>
    def_stmt data_73 = malloc (400);
    version 73
    ptr-info 0x7fbbb97f78d0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

data_41 = PHI <0B(17), data_73(20)>
lto1: warning: use location
dot graph target loc start # .MEM_133 = VDEF <.MEM_114>
data_73 = malloc (400);
test.c:542:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc en1

dot graph target line desc form basic block 21: data_41 = PHI <0B(17), data_73(20)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_133 = VDEF <.MEM_114>
data_73 = malloc (400);
test.c:542:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 21dot graph target basicblock en1

dot graph stmt start data_41 = PHI <0B(17), data_73(20)>
data_73 = malloc (400);
dot graph stmt end

dot graph stmt start data_41 = PHI <0B(17), data_73(20)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

free (data_41);
test.c:553:3: warning: use location
   free(data);
   ^
dot graph target loc start # .MEM_133 = VDEF <.MEM_114>
data_73 = malloc (400);
test.c:542:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc en1

dot graph target line desc form basic block 22: free (data_41);
test.c:553:3: warning: use location
   free(data);
   ^
dot graph target line desend

dot graph target loc start # .MEM_133 = VDEF <.MEM_114>
data_73 = malloc (400);
test.c:542:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

dot graph stmt start free (data_41);
data_73 = malloc (400);
dot graph stmt end

dot graph stmt start free (data_41);
test.c:553:3: warning: use location
   free(data);
   ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (data_41);
test.c:553:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

free (data_73);
test.c:548:3: warning: use location
   free(data);
   ^
dot graph target loc start # .MEM_133 = VDEF <.MEM_114>
data_73 = malloc (400);
test.c:542:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc en1

dot graph target line desc form basic block 20: free (data_73);
test.c:548:3: warning: use location
   free(data);
   ^
dot graph target line desend

dot graph target loc start # .MEM_133 = VDEF <.MEM_114>
data_73 = malloc (400);
test.c:542:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start free (data_73);
data_73 = malloc (400);
dot graph stmt end

dot graph stmt start free (data_73);
test.c:548:3: warning: use location
   free(data);
   ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (data_73);
test.c:548:3: warning: use location
[40;32m    HAS FREE STMT count:2 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

if (data_73 == 0B)
test.c:543:6: warning: use location
   if (data == NULL)
      ^
dot graph target loc start # .MEM_133 = VDEF <.MEM_114>
data_73 = malloc (400);
test.c:542:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc en1

dot graph target line desc form basic block 18: if (data_73 == 0B)
test.c:543:6: warning: use location
   if (data == NULL)
      ^
dot graph target line desend

dot graph target loc start # .MEM_133 = VDEF <.MEM_114>
data_73 = malloc (400);
test.c:542:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start if (data_73 == 0B)
data_73 = malloc (400);
dot graph stmt end

dot graph stmt start if (data_73 == 0B)
test.c:543:6: warning: use location
   if (data == NULL)
      ^
dot graph stmt end

if (data_73 == 0B)

 ================== find cond branch ================= 
if (data_73 == 0B)
Cond in fucntion main basic block 18
 ================== possiable direct basic block ================= 
from main basic block 19
 ================== possiable direct basic block ================= 
from main basic block 20
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

====================================zzz=================================
 <ssa_name 0x7fbbb97ffcf0
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5b40 data>
    def_stmt data_73 = malloc (400);
    version 73
    ptr-info 0x7fbbb97f78d0>

 ================== Start Use after free Check ================== 
# .MEM_136 = VDEF <.MEM_112>
free (data_41);
test.c:553:3: warning: Use after free error!: free location 
   free(data);
   ^
data_41 = PHI <0B(17), data_73(20)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_134 = VDEF <.MEM_133>
free (data_73);
test.c:548:3: warning: Use after free error!: free location 
   free(data);
   ^
data_41 = PHI <0B(17), data_73(20)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_134 = VDEF <.MEM_133>
free (data_73);
test.c:548:3: warning: Use after free error!: free location 
# .MEM_136 = VDEF <.MEM_112>
free (data_41);
test.c:553:3: warning: use location
   free(data);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================
 <function_decl 0x7fbbb97c5b00 main
    type <function_type 0x7fbbb97c47e0
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 452 col 5 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> initial <block 0x7fbbb97dcd80>
    result <result_decl 0x7fbbb9c7c7f8 D.4101 type <integer_type 0x7fbbb9c855e8 int>
        ignored SI file test.c line 452 col 5 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97c5b00 main>>
    struct-function 0x7fbbb97dd840>
 <ssa_name 0x7fbbb97ffd80
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5ab0 p4>
    def_stmt p4_80 = malloc (10);
    version 80
    ptr-info 0x7fbbb97f78e8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

====================================zzz=================================
 <ssa_name 0x7fbbb97ffd80
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5ab0 p4>
    def_stmt p4_80 = malloc (10);
    version 80
    ptr-info 0x7fbbb97f78e8>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:557:7: warning: use location
  int *p4 = malloc(10);
       ^

======================================================================
 <function_decl 0x7fbbb97c5b00 main
    type <function_type 0x7fbbb97c47e0
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 452 col 5 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> initial <block 0x7fbbb97dcd80>
    result <result_decl 0x7fbbb9c7c7f8 D.4101 type <integer_type 0x7fbbb9c855e8 int>
        ignored SI file test.c line 452 col 5 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97c5b00 main>>
    struct-function 0x7fbbb97dd840>
 <ssa_name 0x7fbbb97ff8b8
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _34 = malloc (201);
    version 34
    ptr-info 0x7fbbb97f7828>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

p98 = _34;
test.c:564:6: warning: use location
  p98 = malloc(201);
      ^
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 23: p98 = _34;
test.c:564:6: warning: use location
  p98 = malloc(201);
      ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start p98 = _34;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start p98 = _34;
test.c:564:6: warning: use location
  p98 = malloc(201);
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_2 = p98;
test.c:365:5: warning: use location
  p98[3] = 300;
     ^
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = p98;
test.c:365:5: warning: use location
  p98[3] = 300;
     ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from child7 basic block 3dot graph target basicblock end

dot graph stmt start _2 = p98;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start _2 = p98;
test.c:365:5: warning: use location
  p98[3] = 300;
     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(int *)_2 + 12B] = 300;
test.c:365:9: warning: use location
  p98[3] = 300;
         ^
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: MEM[(int *)_2 + 12B] = 300;
test.c:365:9: warning: use location
  p98[3] = 300;
         ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from child7 basic block 3dot graph target basicblock end

dot graph stmt start MEM[(int *)_2 + 12B] = 300;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start MEM[(int *)_2 + 12B] = 300;
test.c:365:9: warning: use location
  p98[3] = 300;
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_3 = p98;
test.c:371:6: warning: use location
   p98[2] = 300;
      ^
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 4: _3 = p98;
test.c:371:6: warning: use location
   p98[2] = 300;
      ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph target basicblock star1 from child7 basic block 4dot graph target basicblock end

dot graph stmt start _3 = p98;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start _3 = p98;
test.c:371:6: warning: use location
   p98[2] = 300;
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(int *)_3 + 8B] = 300;
test.c:371:10: warning: use location
   p98[2] = 300;
          ^
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 4: MEM[(int *)_3 + 8B] = 300;
test.c:371:10: warning: use location
   p98[2] = 300;
          ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph target basicblock star1 from child7 basic block 4dot graph target basicblock end

dot graph stmt start MEM[(int *)_3 + 8B] = 300;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start MEM[(int *)_3 + 8B] = 300;
test.c:371:10: warning: use location
   p98[2] = 300;
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_8 = p98;
test.c:195:5: warning: use location
  p98[0] = 98;
     ^
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _8 = p98;
test.c:195:5: warning: use location
  p98[0] = 98;
     ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from child basic block 2dot graph target basicblock end

dot graph stmt start _8 = p98;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start _8 = p98;
test.c:195:5: warning: use location
  p98[0] = 98;
     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

*_8 = 98;
test.c:195:9: warning: use location
  p98[0] = 98;
         ^
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: *_8 = 98;
test.c:195:9: warning: use location
  p98[0] = 98;
         ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from child basic block 2dot graph target basicblock end

dot graph stmt start *_8 = 98;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start *_8 = 98;
test.c:195:9: warning: use location
  p98[0] = 98;
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_1 = p98;
test.c:391:4: warning: use location
 p98[1] = 99;
    ^
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = p98;
test.c:391:4: warning: use location
 p98[1] = 99;
    ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from child2 basic block 2dot graph target basicblock end

dot graph stmt start _1 = p98;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start _1 = p98;
test.c:391:4: warning: use location
 p98[1] = 99;
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(int *)_1 + 4B] = 99;
test.c:391:8: warning: use location
 p98[1] = 99;
        ^
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)_1 + 4B] = 99;
test.c:391:8: warning: use location
 p98[1] = 99;
        ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from child2 basic block 2dot graph target basicblock end

dot graph stmt start MEM[(int *)_1 + 4B] = 99;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start MEM[(int *)_1 + 4B] = 99;
test.c:391:8: warning: use location
 p98[1] = 99;
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_35 = p98;
test.c:565:2: warning: use location
  child(p98);
  ^
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 23: _35 = p98;
test.c:565:2: warning: use location
  child(p98);
  ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start _35 = p98;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start _35 = p98;
test.c:565:2: warning: use location
  child(p98);
  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

child (_35);
test.c:565:2: warning: use location
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 23: child (_35);
test.c:565:2: warning: use location
  child(p98);
  ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start child (_35);
_34 = malloc (201);
dot graph stmt end

dot graph stmt start child (_35);
test.c:565:2: warning: use location
  child(p98);
  ^
dot graph stmt end

this stmt is child function---child-----

 ================== trace ================== 
 <ssa_name 0x7fbbb97ff8b8
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _34 = malloc (201);
    version 34
    ptr-info 0x7fbbb97f7828>
trace fucntion name:child 
[40;44m =======trace_function_path child  function_call count: 10 level :0========  [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
test.c:196:2: warning: use location
  free(pData);
  ^
# .MEM_58 = VDEF <.MEM_57>
free (_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_10);
test.c:197:2: warning: use location
  free(data);
  ^
[40;36m ======= node_fun:child========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 952555619
from child basic block 2dot graph end relate end

In function â€˜childâ€™:
test.c:179:7: warning: use location
  int *pData = data;
       ^
dot graph relate stmt start ID : 1240996734 stmt(LHS) :_1 = data;
test.c:179:7: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 952555619
from child basic block 2dot graph end relate end

test.c:181:9: warning: use location
  *pData += 1;
         ^
dot graph relate stmt start ID : 2132960275 stmt(LHS) :_2 = pData;
test.c:181:9: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 952555619
from child basic block 2dot graph end relate end

test.c:181:9: warning: use location
dot graph relate stmt start ID : 1225030094 stmt(LHS) :_4 = pData;
test.c:181:9: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 952555619
from child basic block 2dot graph end relate end

test.c:188:9: warning: use location
  *ppData[0] = 10;
         ^
dot graph relate stmt start ID : 295368219 stmt(LHS) :_6 = pData;
test.c:188:9: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 952555619
from child basic block 2dot graph end relate end

test.c:191:3: warning: use location
  **ppData = 12;
   ^
dot graph relate stmt start ID : 32757142 stmt(LHS) :_7 = pData;
test.c:191:3: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 952555619
from child basic block 2dot graph end relate end

test.c:196:2: warning: use location
  free(pData);
  ^
dot graph relate stmt start ID : 202006686 stmt(LHS) :_9 = pData;
test.c:196:2: warning: use location
_9
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 952555619
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 368749541 stmt(call) :free (_9);
test.c:196:2: warning: use location
_9
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 952555619
from child basic block 2dot graph end relate end

test.c:197:2: warning: use location
  free(data);
  ^
dot graph relate stmt start ID : 226639366 stmt(LHS) :_10 = data;
test.c:197:2: warning: use location
_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 952555619
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1626953044 stmt(call) :free (_10);
test.c:197:2: warning: use location
_10
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 952555619
from child basic block 2dot graph end relate end

test.c:198:2: warning: use location
  boo(data);
  ^
dot graph relate stmt start ID : 168628915 stmt(LHS) :_11 = data;
test.c:198:2: warning: use location
_11
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 952555619
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 132609715 stmt(call) :boo (_11);
test.c:198:2: warning: use location
_11
dot graph relate end


====================================ffff=================================
 <ssa_name 0x7fbbb97ff8b8
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _34 = malloc (201);
    version 34
    ptr-info 0x7fbbb97f7828>
# .MEM_59 = VDEF <.MEM_58>
boo (_11);
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :1========  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
In function â€˜mainâ€™:
test.c:419:2: warning: use location
  free(b);
  ^
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:420:2: warning: use location
  free(b);
  ^
[40;36m ======= node_fun:boo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph start relate formID : 689606444
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 725238131 stmt(call) :free (b_2(D));
In function â€˜booâ€™:
test.c:419:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph start relate for1ID : 689606444
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 27941490 stmt(call) :free (b_2(D));
test.c:420:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph start relate for1ID : 689606444
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1255968330 stmt(call) :test22 (b_2(D));
test.c:421:2: warning: use location
  test22(b);
  ^
b_2(D)
dot graph relate end


====================================ffff=================================
 <ssa_name 0x7fbbb97ff8b8
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _34 = malloc (201);
    version 34
    ptr-info 0x7fbbb97f7828>
# .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :2========  [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
In function â€˜mainâ€™:
test.c:435:2: warning: use location
  free(k);
  ^
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:438:2: warning: use location
  free(k);
  ^
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:439:2: warning: use location
  free(k);
  ^
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:440:2: warning: use location
  free(k);
  ^
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph start relate formID : 1529636752
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1610866259 stmt(call) :free (k_2(D));
In function â€˜test22â€™:
test.c:435:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1529636752
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 426072799 stmt(call) :free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1529636752
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1434800931 stmt(call) :free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1529636752
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1787907894 stmt(call) :free (k_2(D));
test.c:438:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1529636752
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 576988804 stmt(call) :free (k_2(D));
test.c:439:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1529636752
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 185416816 stmt(call) :free (k_2(D));
test.c:440:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end


====================================ffff=================================
 <ssa_name 0x7fbbb97ff8b8
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _34 = malloc (201);
    version 34
    ptr-info 0x7fbbb97f7828>
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :1========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;36m ======= node_fun:child5========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m

====================================ffff=================================
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :1========  [0m
[40;36m ======= node_fun:child3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m

====================================ffff=================================
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:child4========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 463045304
from child4 basic block 3dot graph end relate end

In function â€˜child4â€™:
test.c:223:11: warning: use location
   *data = *data + 1;
           ^
dot graph relate stmt start ID : 273365366 stmt(LHS) :_1 = data;
test.c:223:11: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 463045304
from child4 basic block 3dot graph end relate end

test.c:223:3: warning: use location
   *data = *data + 1;
   ^
dot graph relate stmt start ID : 796182152 stmt(LHS) :_3 = data;
test.c:223:3: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 463045304
from child4 basic block 4dot graph end relate end

test.c:226:3: warning: use location
   *data = 2;
   ^
dot graph relate stmt start ID : 2012292954 stmt(LHS) :_5 = data;
test.c:226:3: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 

====================================ffff=================================
 <ssa_name 0x7fbbb97ff8b8
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _34 = malloc (201);
    version 34
    ptr-info 0x7fbbb97f7828>
# VUSE <.MEM_13(D)>
_5 = data;
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph start relate formID : 2130836456
from foo basic block 2dot graph end relate end

In function â€˜fooâ€™:
test.c:125:8: warning: use location
  p2[0] = 1;
        ^
dot graph relate stmt start ID : 643811076 stmt(LHS) :*p2_5 = 1;
test.c:125:8: warning: use location
*p2_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 

====================================ffff=================================
 <ssa_name 0x7fbbb97ff8b8
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _34 = malloc (201);
    version 34
    ptr-info 0x7fbbb97f7828>
# .MEM_14 = VDEF <.MEM_13>
*p2_5 = 1;
fucntion collect path finsh
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :2========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;36m ======= node_fun:foo2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph start relate formID : 817364925
from foo2 basic block 3dot graph end relate end

In function â€˜foo2â€™:
test.c:86:9: warning: use location
   p3[0] = 10;
         ^
dot graph relate stmt start ID : 1224349542 stmt(LHS) :*p3_15 = 10;
test.c:86:9: warning: use location
*p3_15
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph start relate formID : 817364925
from foo2 basic block 4dot graph end relate end

test.c:92:9: warning: use location
   p4[0] = 10;
         ^
dot graph relate stmt start ID : 629287704 stmt(LHS) :*p4_17 = 10;
test.c:92:9: warning: use location
*p4_17
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 

====================================ffff=================================
 <ssa_name 0x7fbbb97ff8b8
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _34 = malloc (201);
    version 34
    ptr-info 0x7fbbb97f7828>
# .MEM_47 = VDEF <.MEM_46>
*p4_17 = 10;
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph start relate formID : 2042395020
from foo3 basic block 5dot graph end relate end

In function â€˜foo3â€™:
test.c:62:8: warning: use location
  p2[0] = 10;
        ^
dot graph relate stmt start ID : 1519717762 stmt(LHS) :*p2_4 = 10;
test.c:62:8: warning: use location
*p2_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 

====================================ffff=================================
 <ssa_name 0x7fbbb97ff8b8
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _34 = malloc (201);
    version 34
    ptr-info 0x7fbbb97f7828>
# .MEM_21 = VDEF <.MEM_16>
*p2_4 = 10;
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_36 = p98;
In function â€˜mainâ€™:
test.c:566:2: warning: use location
  free(p98);
  ^
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 23: _36 = p98;
test.c:566:2: warning: use location
  free(p98);
  ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start _36 = p98;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start _36 = p98;
test.c:566:2: warning: use location
  free(p98);
  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free (_36);
test.c:566:2: warning: use location
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 23: free (_36);
test.c:566:2: warning: use location
  free(p98);
  ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
_34 = malloc (201);
test.c:564:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start free (_36);
_34 = malloc (201);
dot graph stmt end

dot graph stmt start free (_36);
test.c:566:2: warning: use location
  free(p98);
  ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (_36);
test.c:566:2: warning: use location
[40;32m    HAS FREE STMT count:11 name:free [0m

 ================== find ================== 

====================================zzz=================================
 <ssa_name 0x7fbbb97ff8b8
    type <pointer_type 0x7fbbb9c8c0a8
        type <void_type 0x7fbbb9c85f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7fbbb9c8c0a8>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97c4348>>
   
    def_stmt _34 = malloc (201);
    version 34
    ptr-info 0x7fbbb97f7828>
dot graph start relate for1ID : 952555619
from child basic block 2dot graph end relate end

subgraph cluster_662044846 dot graph subgraph  start ID : 132609715 stmt(relate) ï¼Œ Tree ID : 952555619 : boo (_11);
test.c:198:2: warning: use location
  boo(data);
  ^
dot graph subgrapend

dot graph start relate for1ID : 689606444
from boo basic block 2dot graph end relate end

subgraph cluster_96918058 dot graph subgraph  start ID : 1255968330 stmt(relate) ï¼Œ Tree ID : 689606444 : test22 (b_2(D));
test.c:421:2: warning: use location
  test22(b);
  ^
dot graph subgrapend

dot graph start relate for1ID : 1529636752
from test22 basic block 2dot graph end relate end

subgraph cluster_1888467303 dot graph subgraph  start ID : 185416816 stmt(relate) ï¼Œ Tree ID : 1529636752 : free (k_2(D));
test.c:440:2: warning: use location
  free(k);
  ^
dot graph subgrapend

dot graph start relate for1ID : 463045304
from child4 basic block 4dot graph end relate end

subgraph cluster_888684212 dot graph subgraph  start ID : 2012292954 stmt(relate) ï¼Œ Tree ID : 463045304 : _5 = data;
test.c:226:3: warning: use location
   *data = 2;
   ^
dot graph subgrapend

dot graph start relate for1ID : 2130836456
from foo basic block 2dot graph end relate end

subgraph cluster_1723871102 dot graph subgraph  start ID : 643811076 stmt(relate) ï¼Œ Tree ID : 2130836456 : *p2_5 = 1;
test.c:125:8: warning: use location
  p2[0] = 1;
        ^
dot graph subgrapend

dot graph start relate for1ID : 817364925
from foo2 basic block 4dot graph end relate end

subgraph cluster_2057096218 dot graph subgraph  start ID : 629287704 stmt(relate) ï¼Œ Tree ID : 817364925 : *p4_17 = 10;
test.c:92:9: warning: use location
   p4[0] = 10;
         ^
dot graph subgrapend

dot graph start relate for1ID : 2042395020
from foo3 basic block 5dot graph end relate end

subgraph cluster_1021293927 dot graph subgraph  start ID : 1519717762 stmt(relate) ï¼Œ Tree ID : 2042395020 : *p2_4 = 10;
test.c:62:8: warning: use location
  p2[0] = 10;
        ^
dot graph subgrapend


 ================== Start Use after free Check ================== 
# .MEM_145 = VDEF <.MEM_144>
child (_35);
test.c:565:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_19>
_2 = p98;
test.c:365:5: warning: use location
  p98[3] = 300;
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_146 = VDEF <.MEM_145>
free (_36);
test.c:566:2: warning: Use after free error!: free location 
  free(p98);
  ^
# VUSE <.MEM_19>
_2 = p98;
test.c:365:5: warning: use location
  p98[3] = 300;
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_145 = VDEF <.MEM_144>
child (_35);
test.c:565:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_23 = VDEF <.MEM_19>
MEM[(int *)_2 + 12B] = 300;
test.c:365:9: warning: use location
  p98[3] = 300;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_146 = VDEF <.MEM_145>
free (_36);
test.c:566:2: warning: Use after free error!: free location 
  free(p98);
  ^
# .MEM_23 = VDEF <.MEM_19>
MEM[(int *)_2 + 12B] = 300;
test.c:365:9: warning: use location
  p98[3] = 300;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_145 = VDEF <.MEM_144>
child (_35);
test.c:565:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_19>
_3 = p98;
test.c:371:6: warning: use location
   p98[2] = 300;
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_146 = VDEF <.MEM_145>
free (_36);
test.c:566:2: warning: Use after free error!: free location 
  free(p98);
  ^
# VUSE <.MEM_19>
_3 = p98;
test.c:371:6: warning: use location
   p98[2] = 300;
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_145 = VDEF <.MEM_144>
child (_35);
test.c:565:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_20 = VDEF <.MEM_19>
MEM[(int *)_3 + 8B] = 300;
test.c:371:10: warning: use location
   p98[2] = 300;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_146 = VDEF <.MEM_145>
free (_36);
test.c:566:2: warning: Use after free error!: free location 
  free(p98);
  ^
# .MEM_20 = VDEF <.MEM_19>
MEM[(int *)_3 + 8B] = 300;
test.c:371:10: warning: use location
   p98[2] = 300;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_145 = VDEF <.MEM_144>
child (_35);
test.c:565:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_55>
_8 = p98;
test.c:195:5: warning: use location
  p98[0] = 98;
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_146 = VDEF <.MEM_145>
free (_36);
test.c:566:2: warning: Use after free error!: free location 
  free(p98);
  ^
# VUSE <.MEM_55>
_8 = p98;
test.c:195:5: warning: use location
  p98[0] = 98;
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_145 = VDEF <.MEM_144>
child (_35);
test.c:565:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_56 = VDEF <.MEM_55>
*_8 = 98;
test.c:195:9: warning: use location
  p98[0] = 98;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_146 = VDEF <.MEM_145>
free (_36);
test.c:566:2: warning: Use after free error!: free location 
  free(p98);
  ^
# .MEM_56 = VDEF <.MEM_55>
*_8 = 98;
test.c:195:9: warning: use location
  p98[0] = 98;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_145 = VDEF <.MEM_144>
child (_35);
test.c:565:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_9(D)>
_1 = p98;
test.c:391:4: warning: use location
 p98[1] = 99;
    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_146 = VDEF <.MEM_145>
free (_36);
test.c:566:2: warning: Use after free error!: free location 
  free(p98);
  ^
# VUSE <.MEM_9(D)>
_1 = p98;
test.c:391:4: warning: use location
 p98[1] = 99;
    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_145 = VDEF <.MEM_144>
child (_35);
test.c:565:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_10 = VDEF <.MEM_9(D)>
MEM[(int *)_1 + 4B] = 99;
test.c:391:8: warning: use location
 p98[1] = 99;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_146 = VDEF <.MEM_145>
free (_36);
test.c:566:2: warning: Use after free error!: free location 
  free(p98);
  ^
# .MEM_10 = VDEF <.MEM_9(D)>
MEM[(int *)_1 + 4B] = 99;
test.c:391:8: warning: use location
 p98[1] = 99;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_145 = VDEF <.MEM_144>
child (_35);
test.c:565:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_145>
_36 = p98;
test.c:566:2: warning: use location
  free(p98);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_145 = VDEF <.MEM_144>
child (_35);
test.c:565:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_146 = VDEF <.MEM_145>
free (_36);
test.c:566:2: warning: use location
  free(p98);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :11 [0m

======================================================================
 <function_decl 0x7fbbb97c5b00 main
    type <function_type 0x7fbbb97c47e0
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 452 col 5 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> initial <block 0x7fbbb97dcd80>
    result <result_decl 0x7fbbb9c7c7f8 D.4101 type <integer_type 0x7fbbb9c855e8 int>
        ignored SI file test.c line 452 col 5 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97c5b00 main>>
    struct-function 0x7fbbb97dd840>
 <ssa_name 0x7fbbb97ff7e0
    type <integer_type 0x7fbbb9c855e8 int public SI
        size <integer_cst 0x7fbbb9c71e28 constant 32>
        unit size <integer_cst 0x7fbbb9c71e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
        pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
   
    def_stmt _31 = foo5 (q_63, q_63);
    version 31>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:foo5 
[40;44m =======trace_function_path foo5  function_call count: 1 level :-100========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---foo5-----
this other function ------foo5-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_107 = __printf_chk (1, "123%d\n", _31);
dot graph target loc start # .MEM_137 = VDEF <.MEM_113>
_31 = foo5 (q_63, q_63);
test.c:555:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target loc en1

dot graph target line desc form basic block 23: _107 = __printf_chk (1, "123%d\n", _31);
dot graph target line desend

dot graph target loc start # .MEM_137 = VDEF <.MEM_113>
_31 = foo5 (q_63, q_63);
test.c:555:2: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start _107 = __printf_chk (1, "123%d\n", _31);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7fbbb97ff7e0
    type <integer_type 0x7fbbb9c855e8 int public SI
        size <integer_cst 0x7fbbb9c71e28 constant 32>
        unit size <integer_cst 0x7fbbb9c71e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
        pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
   
    def_stmt _31 = foo5 (q_63, q_63);
    version 31>
trace fucntion name:__printf_chk 

 ================== trace ================== 

====================================zzz=================================
 <ssa_name 0x7fbbb97ff7e0
    type <integer_type 0x7fbbb9c855e8 int public SI
        size <integer_cst 0x7fbbb9c71e28 constant 32>
        unit size <integer_cst 0x7fbbb9c71e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
        pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
   
    def_stmt _31 = foo5 (q_63, q_63);
    version 31>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7fbbb97c5b00 main
    type <function_type 0x7fbbb97c47e0
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 452 col 5 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> initial <block 0x7fbbb97dcd80>
    result <result_decl 0x7fbbb9c7c7f8 D.4101 type <integer_type 0x7fbbb9c855e8 int>
        ignored SI file test.c line 452 col 5 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97c5b00 main>>
    struct-function 0x7fbbb97dd840>
 <ssa_name 0x7fbbb97ffdc8
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5ab0 p4>
    def_stmt p4_83 = child7 (_33, 1B);
    version 83
    ptr-info 0x7fbbb97f7900>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:child7 
[40;44m =======trace_function_path child7  function_call count: 4 level :-100========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---child7-----
this other function ------child7-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

free (p4_83);
test.c:563:2: warning: use location
  free(p4);
  ^
dot graph target loc start # .MEM_141 = VDEF <.MEM_140>
p4_83 = child7 (_33, 1B);
test.c:562:5: warning: use location
  p4 = child7(test, p4);
     ^
dot graph target loc en1

dot graph target line desc form basic block 23: free (p4_83);
test.c:563:2: warning: use location
  free(p4);
  ^
dot graph target line desend

dot graph target loc start # .MEM_141 = VDEF <.MEM_140>
p4_83 = child7 (_33, 1B);
test.c:562:5: warning: use location
  p4 = child7(test, p4);
     ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start free (p4_83);
p4_83 = child7 (_33, 1B);
dot graph stmt end

dot graph stmt start free (p4_83);
test.c:563:2: warning: use location
  free(p4);
  ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (p4_83);
test.c:563:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

====================================zzz=================================
 <ssa_name 0x7fbbb97ffdc8
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
    var <var_decl 0x7fbbb97f5ab0 p4>
    def_stmt p4_83 = child7 (_33, 1B);
    version 83
    ptr-info 0x7fbbb97f7900>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

 <function_decl 0x7fbbb97c5b00 main
    type <function_type 0x7fbbb97c47e0
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        QI
        size <integer_cst 0x7fbbb9c71cd8 constant 8>
        unit size <integer_cst 0x7fbbb9c71cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 452 col 5 align 8 context <translation_unit_decl 0x7fbbb9c7c168 test.c> initial <block 0x7fbbb97dcd80>
    result <result_decl 0x7fbbb9c7c7f8 D.4101 type <integer_type 0x7fbbb9c855e8 int>
        ignored SI file test.c line 452 col 5 size <integer_cst 0x7fbbb9c71e28 32> unit size <integer_cst 0x7fbbb9c71e40 4>
        align 32 context <function_decl 0x7fbbb97c5b00 main>>
    struct-function 0x7fbbb97dd840>
 <ssa_name 0x7fbbb97ff900
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _35 = p98;
    version 35
    ptr-info 0x7fbbb97f7840>

dot graph START

======================================================================

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

child (_35);
test.c:565:2: warning: use location
  child(p98);
  ^
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
child (_35);
test.c:565:2: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 23: child (_35);
test.c:565:2: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
child (_35);
test.c:565:2: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start child (_35);
child (_35);
dot graph stmt end

dot graph stmt start child (_35);
test.c:565:2: warning: use location
dot graph stmt end

this stmt is child function---child-----

 ================== trace ================== 
 <ssa_name 0x7fbbb97ff900
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _35 = p98;
    version 35
    ptr-info 0x7fbbb97f7840>
trace fucntion name:child 
[40;44m =======trace_function_path child  function_call count: 10 level :0========  [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
test.c:196:2: warning: use location
  free(pData);
  ^
# .MEM_58 = VDEF <.MEM_57>
free (_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_10);
test.c:197:2: warning: use location
  free(data);
  ^
[40;36m ======= node_fun:child========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 1049235417
from child basic block 2dot graph end relate end

In function â€˜childâ€™:
test.c:179:7: warning: use location
  int *pData = data;
       ^
dot graph relate stmt start ID : 1521962229 stmt(LHS) :_1 = data;
test.c:179:7: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

test.c:181:9: warning: use location
  *pData += 1;
         ^
dot graph relate stmt start ID : 17003806 stmt(LHS) :_2 = pData;
test.c:181:9: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

test.c:181:9: warning: use location
dot graph relate stmt start ID : 512618028 stmt(LHS) :_4 = pData;
test.c:181:9: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

test.c:188:9: warning: use location
  *ppData[0] = 10;
         ^
dot graph relate stmt start ID : 1948035028 stmt(LHS) :_6 = pData;
test.c:188:9: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

test.c:191:3: warning: use location
  **ppData = 12;
   ^
dot graph relate stmt start ID : 1451804737 stmt(LHS) :_7 = pData;
test.c:191:3: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 153042274 stmt(call) :child4 (&data);
test.c:192:2: warning: use location
  child4(&data);
  ^
&data
dot graph relate end

dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 377540184 stmt(call) :child3 (&data);
test.c:193:2: warning: use location
  child3(&data);
  ^
&data
dot graph relate end

dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1637221553 stmt(call) :child5 (pData2_21);
test.c:194:2: warning: use location
  child5(pData2);
  ^
pData2_21
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

test.c:196:2: warning: use location
  free(pData);
  ^
dot graph relate stmt start ID : 231785248 stmt(LHS) :_9 = pData;
test.c:196:2: warning: use location
_9
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1633914093 stmt(call) :free (_9);
test.c:196:2: warning: use location
_9
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

test.c:197:2: warning: use location
  free(data);
  ^
dot graph relate stmt start ID : 2100266857 stmt(LHS) :_10 = data;
test.c:197:2: warning: use location
_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 505150614 stmt(call) :free (_10);
test.c:197:2: warning: use location
_10
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

test.c:198:2: warning: use location
  boo(data);
  ^
dot graph relate stmt start ID : 282612598 stmt(LHS) :_11 = data;
test.c:198:2: warning: use location
_11
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1965076163 stmt(call) :boo (_11);
test.c:198:2: warning: use location
_11
dot graph relate end


====================================ffff=================================
 <ssa_name 0x7fbbb97ff900
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _35 = p98;
    version 35
    ptr-info 0x7fbbb97f7840>
# .MEM_59 = VDEF <.MEM_58>
boo (_11);
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :1========  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
In function â€˜mainâ€™:
test.c:419:2: warning: use location
  free(b);
  ^
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:420:2: warning: use location
  free(b);
  ^
[40;36m ======= node_fun:boo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph start relate formID : 488503423
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 926423674 stmt(call) :free (b_2(D));
In function â€˜booâ€™:
test.c:419:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph start relate for1ID : 488503423
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 634957441 stmt(call) :free (b_2(D));
test.c:420:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph start relate for1ID : 488503423
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1712852965 stmt(call) :test22 (b_2(D));
test.c:421:2: warning: use location
  test22(b);
  ^
b_2(D)
dot graph relate end


====================================ffff=================================
 <ssa_name 0x7fbbb97ff900
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _35 = p98;
    version 35
    ptr-info 0x7fbbb97f7840>
# .MEM_10 = VDEF <.MEM_9>
test22 (b_2(D));
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :2========  [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
In function â€˜mainâ€™:
test.c:435:2: warning: use location
  free(k);
  ^
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:438:2: warning: use location
  free(k);
  ^
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:439:2: warning: use location
  free(k);
  ^
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:440:2: warning: use location
  free(k);
  ^
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
test.c:442:2: warning: use location
  free(w);
  ^
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph start relate formID : 1555711378
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 529868813 stmt(call) :free (k_2(D));
In function â€˜test22â€™:
test.c:435:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1555711378
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1085087079 stmt(call) :free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1555711378
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 70272577 stmt(call) :free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1555711378
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 626786871 stmt(call) :free (k_2(D));
test.c:438:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1555711378
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 826070735 stmt(call) :free (k_2(D));
test.c:439:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1555711378
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 958956789 stmt(call) :free (k_2(D));
test.c:440:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 1555711378
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 203174326 stmt(call) :free (w_10);
test.c:442:2: warning: use location
  free(w);
  ^
w_10
dot graph relate end


====================================ffff=================================
 <ssa_name 0x7fbbb97ff900
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _35 = p98;
    version 35
    ptr-info 0x7fbbb97f7840>
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :1========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
In function â€˜mainâ€™:
test.c:299:3: warning: use location
   free(pData);
   ^
[40;36m ======= node_fun:child5========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 735683305
from child5 basic block 2dot graph end relate end

In function â€˜child5â€™:
test.c:282:8: warning: use location
  pData = pData + 1;
        ^
dot graph relate stmt start ID : 1980250717 stmt(LHS) :pData_6 = data_5(D) + 4;
test.c:282:8: warning: use location
pData_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate formID : 735683305
from child5 basic block 4dot graph end relate end

dot graph relate stmt start ID : 469168224 stmt(call) :free (pData_6);
test.c:299:3: warning: use location
   free(pData);
   ^
pData_6
dot graph relate end


====================================ffff=================================
 <ssa_name 0x7fbbb97ff900
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _35 = p98;
    version 35
    ptr-info 0x7fbbb97f7840>
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :1========  [0m
[40;36m ======= node_fun:child3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m

====================================ffff=================================
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:child4========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 882002486
from child4 basic block 3dot graph end relate end

In function â€˜child4â€™:
test.c:223:11: warning: use location
   *data = *data + 1;
           ^
dot graph relate stmt start ID : 1991130453 stmt(LHS) :_1 = data;
test.c:223:11: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 882002486
from child4 basic block 3dot graph end relate end

test.c:223:3: warning: use location
   *data = *data + 1;
   ^
dot graph relate stmt start ID : 1387537813 stmt(LHS) :_3 = data;
test.c:223:3: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 882002486
from child4 basic block 4dot graph end relate end

test.c:226:3: warning: use location
   *data = 2;
   ^
dot graph relate stmt start ID : 1394620515 stmt(LHS) :_5 = data;
test.c:226:3: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 

====================================ffff=================================
 <ssa_name 0x7fbbb97ff900
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _35 = p98;
    version 35
    ptr-info 0x7fbbb97f7840>
# VUSE <.MEM_13(D)>
_5 = data;
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m

====================================ffff=================================
fucntion collect path finsh
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :2========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
[40;31m  find free stmt free same pointer [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
In function â€˜mainâ€™:
test.c:87:3: warning: use location
   free(p3);
   ^
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;31m  find free stmt free same pointer [0m
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:94:3: warning: use location
   free(p4);
   ^
[40;36m ======= node_fun:foo2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph start relate formID : 691858902
from foo2 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1547662789 stmt(call) :foo3 (p3_15);
In function â€˜foo2â€™:
test.c:81:2: warning: use location
  foo3(p3);
  ^
p3_15
dot graph relate end

dot graph start relate formID : 691858902
from foo2 basic block 3dot graph end relate end

dot graph relate stmt start ID : 21738370 stmt(call) :free (p3_15);
test.c:87:3: warning: use location
   free(p3);
   ^
p3_15
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 691858902
from foo2 basic block 3dot graph end relate end

test.c:88:10: warning: use location
   return p3;
          ^
dot graph relate stmt start ID : 181596807 stmt(LHS) :_33 = p3_15;
test.c:88:10: warning: use location
_33
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate formID : 691858902
from foo2 basic block 4dot graph end relate end

dot graph relate stmt start ID : 1779448037 stmt(call) :free (p4_17);
test.c:94:3: warning: use location
   free(p4);
   ^
p4_17
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 691858902
from foo2 basic block 4dot graph end relate end

test.c:95:10: warning: use location
   return p4;
          ^
dot graph relate stmt start ID : 1655652464 stmt(LHS) :_29 = p4_17;
test.c:95:10: warning: use location
_29
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 

====================================ffff=================================
 <ssa_name 0x7fbbb97ff900
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _35 = p98;
    version 35
    ptr-info 0x7fbbb97f7840>
_29 = p4_17;
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m

====================================ffff=================================
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m

 ================== trace ================== 

====================================zzz=================================
 <ssa_name 0x7fbbb97ff900
    type <pointer_type 0x7fbbb9c8ca80
        type <integer_type 0x7fbbb9c855e8 int public SI
            size <integer_cst 0x7fbbb9c71e28 constant 32>
            unit size <integer_cst 0x7fbbb9c71e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7fbbb9c855e8 precision 32 min <integer_cst 0x7fbbb9c71de0 -2147483648> max <integer_cst 0x7fbbb9c71df8 2147483647>
            pointer_to_this <pointer_type 0x7fbbb9c8ca80>>
        public unsigned DI
        size <integer_cst 0x7fbbb9c71be8 constant 64>
        unit size <integer_cst 0x7fbbb9c71c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7fbbb97d1738>>
   
    def_stmt _35 = p98;
    version 35
    ptr-info 0x7fbbb97f7840>
dot graph start relate for1ID : 1049235417
from child basic block 2dot graph end relate end

subgraph cluster_137115004 dot graph subgraph  start ID : 1965076163 stmt(relate) ï¼Œ Tree ID : 1049235417 : boo (_11);
In function â€˜mainâ€™:
test.c:198:2: warning: use location
  boo(data);
  ^
dot graph subgrapend

dot graph start relate for1ID : 488503423
from boo basic block 2dot graph end relate end

subgraph cluster_1938265062 dot graph subgraph  start ID : 1712852965 stmt(relate) ï¼Œ Tree ID : 488503423 : test22 (b_2(D));
test.c:421:2: warning: use location
  test22(b);
  ^
dot graph subgrapend

dot graph start relate for1ID : 1555711378
from test22 basic block 2dot graph end relate end

subgraph cluster_2099456180 dot graph subgraph  start ID : 203174326 stmt(relate) ï¼Œ Tree ID : 1555711378 : free (w_10);
test.c:442:2: warning: use location
  free(w);
  ^
dot graph subgrapend

dot graph start relate for1ID : 735683305
from child5 basic block 4dot graph end relate end

subgraph cluster_625618427 dot graph subgraph  start ID : 469168224 stmt(relate) ï¼Œ Tree ID : 735683305 : free (pData_6);
test.c:299:3: warning: use location
   free(pData);
   ^
dot graph subgrapend

dot graph start relate for1ID : 882002486
from child4 basic block 4dot graph end relate end

subgraph cluster_717205088 dot graph subgraph  start ID : 1394620515 stmt(relate) ï¼Œ Tree ID : 882002486 : _5 = data;
test.c:226:3: warning: use location
   *data = 2;
   ^
dot graph subgrapend

dot graph start relate for1ID : 691858902
from foo2 basic block 4dot graph end relate end

subgraph cluster_586929973 dot graph subgraph  start ID : 1655652464 stmt(relate) ï¼Œ Tree ID : 691858902 : _29 = p4_17;
test.c:95:10: warning: use location
   return p4;
          ^
dot graph subgrapend


 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :14 [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 24
 [0m
[40;34m    used_stmt array stack totalsize of : 648
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
algorithm time: 0.098928 s
=======Mapping node_fun:foo5=========
<bb 2> [100.00%]:
_1 = *z_4(D);
_8 = __printf_chk (1, "test1%d\n", _1);
_2 = *y_5(D);
_7 = __printf_chk (1, "test2%d\n", _2);
_6 = __printf_chk (1, "test3%d\n", 10);
return 10;

=======is loop:0=========
=======Mapping node_fun:foo3=========
<bb 2> [100.00%]:
if (test_6(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_1 = malloc (1);
_2 = (long int) _1;
_3 = (int) _2;
*z_11(D) = _3;
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
p2_9 = malloc (2);

=======is loop:0=========
<bb 5> [100.00%]:
# p2_4 = PHI <p2_13(D)(3), p2_9(4)>
*p2_4 = 10;
_15 = __printf_chk (1, "%d", p2_4);
return;

=======is loop:0=========
=======Mapping node_fun:foo2=========
<bb 2> [100.00%]:
_1 = (long unsigned int) z_10(D);
a2_13 = malloc (_1);
_2 = (long unsigned int) z_10(D);
p3_15 = malloc (_2);
_3 = (long unsigned int) z_10(D);
p4_17 = malloc (_3);
_4 = malloc (200);
p99 = _4;
_5 = p99;
*_5 = 99;
_6 = p99;
MEM[(int *)_6 + 4B] = 100;
pthread_mutex_lock (&mLock);
pthread_mutex_lock (&mLock2);
pthread_mutex_lock (&mLock3);
foo3 (p3_15);
if (tmp_26(D) > 10)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_7 = p99;
MEM[(int *)_7 + 4B] = 200;
*p3_15 = 10;
free (p3_15);
_33 = p3_15;
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
*p4_17 = 10;
free (p4_17);
_29 = p4_17;

=======is loop:0=========
<bb 5> [100.00%]:
# _8 = PHI <p3_15(3), p4_17(4)>
return _8;

=======is loop:0=========
=======Mapping node_fun:foo=========
<bb 2> [100.00%]:
p2_5 = malloc (1);
*p2_5 = 1;
_1 = p99;
MEM[(int *)_1 + 4B] = 1000;
_2 = p99;
MEM[(int *)_2 + 8B] = 200;
_11 = foo2 (z_9(D));
return _11;

=======is loop:0=========
=======Mapping node_fun:child4=========
<bb 2> [100.00%]:
if (t_7(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_1 = data;
_2 = *_1;
_3 = data;
_4 = _2 + 1;
*_3 = _4;
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
_5 = data;
*_5 = 2;

=======is loop:0=========
<bb 5> [100.00%]:
_11 = __printf_chk (1, "asdda%d\n", &data);
return;

=======is loop:0=========
=======Mapping node_fun:child3=========
<bb 2> [100.00%]:
_1 = pthread_self ();
pthread_detach (_1);
_6 = __printf_chk (1, "asdda%d\n", &MEM[(void *)&data + 4B]);
_5 = __printf_chk (1, "asdda%d\n", 10);
free (&data);
return;

=======is loop:0=========
=======Mapping node_fun:child5=========
<bb 2> [100.00%]:
_1 = pthread_self ();
pthread_detach (_1);
pData_6 = data_5(D) + 4;
if (c_7(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_9 = __printf_chk (1, "asdda%d\n", pData_6);
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
_10 = __printf_chk (1, "asdda%d\n", c_7(D));
free (pData_6);

=======is loop:0=========
<bb 5> [100.00%]:
return;

=======is loop:0=========
=======Mapping node_fun:child7=========
<bb 2> [100.00%]:
_1 = pthread_self ();
pthread_detach (_1);
if (c_9(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_2 = p98;
MEM[(int *)_2 + 12B] = 300;
_15 = malloc (10);
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
_3 = p98;
MEM[(int *)_3 + 8B] = 300;
_16 = __printf_chk (1, "asdda%d\n", c_9(D));
_12 = malloc (30);

=======is loop:0=========
<bb 5> [100.00%]:
# _4 = PHI <_15(3), _12(4)>
return _4;

=======is loop:0=========
=======Mapping node_fun:boo=========
<bb 2> [100.00%]:
free (b_2(D));
free (b_2(D));
test22 (b_2(D));
_6 = __printf_chk (1, "asdda\n");
return;

=======is loop:0=========
=======Mapping node_fun:test22=========
<bb 2> [100.00%]:
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
w_10 = malloc (5);
free (w_10);
return;

=======is loop:0=========
=======Mapping node_fun:child=========
<bb 2> [100.00%]:
pthread_mutex_lock (&mLock);
pthread_mutex_lock (&mLock);
a99_16 = foo (20);
_38 = __printf_chk (1, "asdda%d\n", a99_16);
ppData_18 = malloc (10);
_1 = data;
pData = _1;
pData2_21 = malloc (10);
_2 = pData;
_3 = *_2;
_4 = pData;
_5 = _3 + 1;
*_4 = _5;
data2 = 0;
data = 10B;
pData = &data2;
_6 = pData;
*_6 = 10;
_7 = pData;
*_7 = 12;
child4 (&data);
child3 (&data);
child5 (pData2_21);
_8 = p98;
*_8 = 98;
_9 = pData;
free (_9);
_10 = data;
free (_10);
_11 = data;
boo (_11);
free (&pData);
pthread_mutex_unlock (&mLock);
free (&pData);
pData ={v} {CLOBBER};
data2 ={v} {CLOBBER};
return;

=======is loop:0=========
=======Mapping node_fun:child2=========
<bb 2> [100.00%]:
_1 = p98;
MEM[(int *)_1 + 4B] = 99;
_2 = data_8(D);
child3 (_2);
_3 = data_8(D);
free (_3);
return;

=======is loop:0=========
=======Mapping node_fun:main=========
<bb 2> [25.00%]:
size_78 = 2;
_1 = 2;
_2 = 2;
_3 = 32;
a_51 = malloc (32);
goto <bb 4>; [100.00%]

=======is loop:0=========
<bb 3> [50.01%]:
_4 = (long unsigned int) i_37;
_5 = _4 * 16;
_6 = a_51 + _5;
_6->name = "Testname";
_7 = (long unsigned int) i_37;
_8 = _7 * 16;
_9 = a_51 + _8;
_9->nummer = 123;
i_104 = i_37 + 1;

=======is loop:1=========
<bb 4> [75.01%]:
# i_37 = PHI <0(2), i_104(3)>
_10 = 2;
if (i_37 <= 1)
  goto <bb 3>; [66.67%]
else
  goto <bb 5>; [33.33%]

=======is loop:1=========
<bb 5> [25.00%]:
free (a_51);
goto <bb 7>; [100.00%]

=======is loop:0=========
<bb 6> [50.01%]:
_11 = (long unsigned int) i_38;
_12 = _11 * 16;
_13 = a_51 + _12;
_14 = _13->nummer;
_15 = (long unsigned int) i_38;
_16 = _15 * 16;
_17 = a_51 + _16;
_18 = _17->name;
_91 = __printf_chk (1, "%s, %d\n", _18, _14);
i_101 = i_38 + 1;

=======is loop:1=========
<bb 7> [75.01%]:
# i_38 = PHI <0(5), i_101(6)>
_19 = 2;
if (i_38 <= 1)
  goto <bb 6>; [66.67%]
else
  goto <bb 8>; [33.33%]

=======is loop:1=========
<bb 8> [25.00%]:
input[0] = 1;
input[1] = 2;
pthread_attr_init (&attr);
pthread_attr_init (&attr2);
pthread_attr_setdetachstate (&attr, 1);
pthread_attr_setdetachstate (&attr2, 0);
_20 = (long int) input2_59(D);
_21 = (void *) _20;
pthread_create (&t, &attr2, child2, _21);
_22 = t;
pthread_join (_22, 0B);
goto <bb 10>; [100.00%]

=======is loop:0=========
<bb 9> [75.00%]:
_23 = &t2[i_39];
err_99 = pthread_create (_23, &attr2, child, 0B);
_24 = t2[i_39];
_105 = __printf_chk (1, "%ld\n", _24);
i_100 = i_39 + 1;

=======is loop:1=========
<bb 10> [100.00%]:
# i_39 = PHI <0(8), i_100(9)>
if (i_39 <= 2)
  goto <bb 9>; [75.00%]
else
  goto <bb 11>; [25.00%]

=======is loop:1=========
<bb 11> [25.00%]:
q_63 = malloc (70);
q2_65 = malloc (20);
_25 = q_63 != 0B;
_26 = test_66(D) != 0;
_27 = _25 & _26;
if (_27 != 0)
  goto <bb 12>; [50.00%]
else
  goto <bb 14>; [50.00%]

=======is loop:0=========
<bb 12> [12.50%]:
child (q_63);
*q_63 = 10;
free (q_63);

=======is loop:0=========
<bb 13> [25.00%]:
# i_45 = PHI <0(12), 0(14)>
goto <bb 16>; [100.00%]

=======is loop:0=========
<bb 14> [12.50%]:
*q_63 = 20;
_106 = __printf_chk (1, "test\n");
goto <bb 13>; [100.00%]

=======is loop:0=========
<bb 15> [75.00%]:
_28 = t2[i_40];
pthread_join (_28, 0B);
i_97 = i_40 + 1;

=======is loop:1=========
<bb 16> [100.00%]:
# i_40 = PHI <i_45(13), i_97(15)>
if (i_40 <= 2)
  goto <bb 15>; [75.00%]
else
  goto <bb 17>; [25.00%]

=======is loop:1=========
<bb 17> [25.00%]:
_29 = staticTrue;
if (_29 != 0)
  goto <bb 18>; [33.00%]
else
  goto <bb 21>; [67.00%]

=======is loop:0=========
<bb 18> [8.25%]:
data_73 = malloc (400);
if (data_73 == 0B)
  goto <bb 19>; [0.04%]
else
  goto <bb 20>; [99.96%]

=======is loop:0=========
<bb 19> [0.00%]:
exit (-1);

=======is loop:0=========
<bb 20> [8.25%]:
free (data_73);

=======is loop:0=========
<bb 21> [25.00%]:
# data_41 = PHI <0B(17), data_73(20)>
_30 = staticTrue;
if (_30 != 0)
  goto <bb 22>; [36.64%]
else
  goto <bb 23>; [63.36%]

=======is loop:0=========
<bb 22> [9.16%]:
free (data_41);

=======is loop:0=========
<bb 23> [25.00%]:
_31 = foo5 (q_63, q_63);
_107 = __printf_chk (1, "123%d\n", _31);
p4_80 = malloc (10);
child4 (1B);
_32 = (long int) test_66(D);
_33 = (void *) _32;
p4_83 = child7 (_33, 1B);
free (p4_83);
_34 = malloc (201);
p98 = _34;
_35 = p98;
child (_35);
_36 = p98;
free (_36);
input ={v} {CLOBBER};
attr ={v} {CLOBBER};
attr2 ={v} {CLOBBER};
t ={v} {CLOBBER};
t2 ={v} {CLOBBER};
return 0;

=======is loop:0=========
time: 0.102597 s
test.c: In function â€˜child3â€™:
test.c:265:2: warning: attempt to free a non-heap object â€˜dataâ€™ [-Wfree-nonheap-object]
  free(&data);
  ^
test.c: In function â€˜childâ€™:
test.c:196:2: warning: attempt to free a non-heap object â€˜data2â€™ [-Wfree-nonheap-object]
  free(pData);
  ^
test.c:199:2: warning: attempt to free a non-heap object â€˜pDataâ€™ [-Wfree-nonheap-object]
  free(ppData);
  ^
test.c:201:2: warning: attempt to free a non-heap object â€˜pDataâ€™ [-Wfree-nonheap-object]
  free(ppData);
  ^
