test.c: In function â€˜mainâ€™:
test.c:53:7: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
  q[0] = "0";
       ^
test.c:54:7: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
  q[1] = "0";
       ^
test.c:73:6: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  foo(p);
      ^
test.c:27:5: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
 int foo(int *z)
     ^~~
test.c:124:8: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
    foo(p);
        ^
test.c:27:5: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
 int foo(int *z)
     ^~~
test.c:127:9: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
     foo(p);
         ^
test.c:27:5: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
 int foo(int *z)
     ^~~
test.c:130:9: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
     foo(p);
         ^
test.c:27:5: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
 int foo(int *z)
     ^~~
test.c:134:8: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
    foo(p);
        ^
test.c:27:5: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
 int foo(int *z)
     ^~~
test.c:145:8: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
    foo(p);
        ^
test.c:27:5: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
 int foo(int *z)
     ^~~
test.c:150:7: warning: passing argument 1 of â€˜fooâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
   foo(p);
       ^
test.c:27:5: note: expected â€˜int *â€™ but argument is of type â€˜struct st *â€™
 int foo(int *z)
     ^~~
==============breakpoint=========
/root/x21321219/new_gccplugin/Test/test.c 50
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
# .MEM_98 = VDEF <.MEM_97(D)>
p6_36 = malloc (100);
set breakpoint /root/x21321219/new_gccplugin/Test/test.c 50
--------GIMPLE Cond -------
succs:= 4
--------GIMPLE Cond -------
succs:= 5
--------GIMPLE Cond -------
succs:= 7
--------GIMPLE Cond -------
succs:= 8
succs:= 8
--------GIMPLE_SWITCH -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
succs:= 16
succs:= 17
--------GIMPLE Cond -------
succs:= 18
succs:= 18
succs:= 17
--------GIMPLE Cond -------
succs:= 21
succs:= 21
--------GIMPLE Cond -------
succs:= 24
--------GIMPLE Cond -------
succs:= 16
succs:= 26
--------GIMPLE Cond -------
succs:= 26
succs:= 28
succs:= 5
succs:= 24
succs:= 28
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 0 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_98 = VDEF <.MEM_97(D)>
p6_36 = malloc (100);
# .MEM_98 = VDEF <.MEM_97(D)>
p6_36 = malloc (100);
set breakpoint /root/x21321219/new_gccplugin/Test/test.c 50
# .MEM_103 = VDEF <.MEM_102>
p9_44 = malloc (0);
# .MEM_104 = VDEF <.MEM_103>
_5 = malloc (1);
# .MEM_107 = VDEF <.MEM_106>
p_49 = malloc (10);
# .MEM_108 = VDEF <.MEM_107>
_6 = malloc (1);
# .MEM_133 = VDEF <.MEM_88>
_10 = malloc (1);
# .MEM_110 = VDEF <.MEM_88>
_11 = malloc (1);
# .MEM_112 = VDEF <.MEM_111>
foo (p_49);
# .MEM_113 = VDEF <.MEM_89>
p100_57 = malloc (1);
# .MEM_114 = VDEF <.MEM_113>
p100_59 = malloc (2);
# .MEM_117 = VDEF <.MEM_91>
foo (p5_62(D));
# .MEM_118 = VDEF <.MEM_96>
foo (p5_62(D));
# .MEM_120 = VDEF <.MEM_118>
foo (p5_62(D));
# .MEM_119 = VDEF <.MEM_118>
foo (p5_62(D));
# .MEM_121 = VDEF <.MEM_118>
foo (p5_62(D));
# .MEM_127 = VDEF <.MEM_93>
foo (p_49);
# .MEM_129 = VDEF <.MEM_127>
foo (p_49);
# .MEM_128 = VDEF <.MEM_127>
foo (p_49);
# .MEM_124 = VDEF <.MEM_93>
foo (p_49);
# .MEM_126 = VDEF <.MEM_124>
foo (p3_75(D));
# .MEM_125 = VDEF <.MEM_124>
foo (p5_62(D));
# .MEM_130 = VDEF <.MEM_94>
foo (p_49);
# .MEM_123 = VDEF <.MEM_93>
foo (p_49);
# .MEM_122 = VDEF <.MEM_93>
foo (p4_70(D));
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================

=============== The third stage : Start detection  =================
[40;44m =======node_fun:foo========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path foo  function_call count: 1 level :0========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======start_check_funciton:foo========= [0m
[40;33m =======POP node_fun stack:foo========= [0m
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;44m =======print_function_path foo  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======start_check_funciton:foo========= [0m
[40;33m =======POP node_fun stack:foo========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7ff847e60f30
    type <pointer_type 0x7ff847e73a80
        type <integer_type 0x7ff847e6c5e8 int public SI
            size <integer_cst 0x7ff847e58e28 constant 32>
            unit size <integer_cst 0x7ff847e58e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7ff847e6c5e8 precision 32 min <integer_cst 0x7ff847e58de0 -2147483648> max <integer_cst 0x7ff847e58df8 2147483647>
            pointer_to_this <pointer_type 0x7ff847e73a80>>
        public unsigned DI
        size <integer_cst 0x7ff847e58be8 constant 64>
        unit size <integer_cst 0x7ff847e58c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7ff848bedd80 p6>
    def_stmt p6_36 = malloc (100);
    version 36
    ptr-info 0x7ff847987d80>
# .MEM_98 = VDEF <.MEM_97(D)>
p6_36 = malloc (100);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
p6_39 = realloc (p6_36, 100);
In function â€˜mainâ€™:
test.c:52:5: warning: use location
  p6 = realloc(p6, 100);
     ^
this stmt is child function---realloc-----

 ================== find ================== 
p6_39 = realloc (p6_36, 100);
test.c:52:5: warning: use location
[40;32m    FIND realloc STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 
free (p6_39);
test.c:55:2: warning: use location
  free(p6);
  ^
this stmt is child function---free-----

 ================== find ================== 
free (p6_39);
test.c:55:2: warning: use location
[40;32m    HAS FREE STMT count:2 name:free [0m

 ================== find ================== 
q_37 = p6_36;
test.c:51:4: warning: use location
  q = p6;
    ^
MEM[(int *)q_37 + 4B] = _4;
test.c:54:7: warning: use location
  q[1] = "0";
       ^
MEM[(int *)q_37 + 4B] = _4;
test.c:54:7: warning: use location
*q_37 = _2;
test.c:53:7: warning: use location
  q[0] = "0";
       ^
*q_37 = _2;
test.c:53:7: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7ff847e60f30
    type <pointer_type 0x7ff847e73a80
        type <integer_type 0x7ff847e6c5e8 int public SI
            size <integer_cst 0x7ff847e58e28 constant 32>
            unit size <integer_cst 0x7ff847e58e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7ff847e6c5e8 precision 32 min <integer_cst 0x7ff847e58de0 -2147483648> max <integer_cst 0x7ff847e58df8 2147483647>
            pointer_to_this <pointer_type 0x7ff847e73a80>>
        public unsigned DI
        size <integer_cst 0x7ff847e58be8 constant 64>
        unit size <integer_cst 0x7ff847e58c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7ff848bedd80 p6>
    def_stmt p6_36 = malloc (100);
    version 36
    ptr-info 0x7ff847987d80>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_99 = VDEF <.MEM_98>
p6_39 = realloc (p6_36, 100);
test.c:52:5: warning: use location
  p6 = realloc(p6, 100);
     ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_102 = VDEF <.MEM_101>
free (p6_39);
test.c:55:2: warning: use location
  free(p6);
  ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_99 = VDEF <.MEM_98>
p6_39 = realloc (p6_36, 100);
test.c:52:5: warning: Use after free error!: free location 
  p6 = realloc(p6, 100);
     ^
# .MEM_102 = VDEF <.MEM_101>
free (p6_39);
test.c:55:2: warning: use location
  free(p6);
  ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_99 = VDEF <.MEM_98>
p6_39 = realloc (p6_36, 100);
test.c:52:5: warning: Use after free error!: free location 
  p6 = realloc(p6, 100);
     ^
# .MEM_101 = VDEF <.MEM_100>
MEM[(int *)q_37 + 4B] = _4;
test.c:54:7: warning: use location
  q[1] = "0";
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_99 = VDEF <.MEM_98>
p6_39 = realloc (p6_36, 100);
test.c:52:5: warning: Use after free error!: free location 
  p6 = realloc(p6, 100);
     ^
# .MEM_101 = VDEF <.MEM_100>
MEM[(int *)q_37 + 4B] = _4;
test.c:54:7: warning: use location
  q[1] = "0";
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_99 = VDEF <.MEM_98>
p6_39 = realloc (p6_36, 100);
test.c:52:5: warning: Use after free error!: free location 
  p6 = realloc(p6, 100);
     ^
# .MEM_100 = VDEF <.MEM_99>
*q_37 = _2;
test.c:53:7: warning: use location
  q[0] = "0";
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_99 = VDEF <.MEM_98>
p6_39 = realloc (p6_36, 100);
test.c:52:5: warning: Use after free error!: free location 
  p6 = realloc(p6, 100);
     ^
# .MEM_100 = VDEF <.MEM_99>
*q_37 = _2;
test.c:53:7: warning: use location
  q[0] = "0";
       ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================

======================================================================
[40;35m  	Looserules free count:2 [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7ff847987af8 type <integer_type 0x7ff8479849d8 size_t> constant 100>
[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:foo=========
=======is loop:0=========

 bb index 2 
<bb 2> [100.00%]:
free (z_2(D));
return;

=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [9.09%]:
p6_36 = malloc (100);
q_37 = p6_36;
p6_39 = realloc (p6_36, 100);
_1 = (long int) "0";
_2 = (int) _1;
*q_37 = _2;
_3 = (long int) "0";
_4 = (int) _3;
MEM[(int *)q_37 + 4B] = _4;
free (p6_39);
p9_44 = malloc (0);
_5 = malloc (1);
MEM[(struct st *)p9_44 + 48B].f = _5;
free (p9_44);
p_49 = malloc (10);
_6 = malloc (1);
MEM[(struct st *)p_49 + 48B].f = _6;
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [90.91%]:
_7 = (long unsigned int) i_21;
_8 = _7 * 16;
_9 = p_49 + _8;
_10 = malloc (1);
_9->f = _10;
i_87 = i_21 + 1;

=======is loop:1=========

 bb index 4 
<bb 4> [100.00%]:
# i_21 = PHI <0(2), i_87(3)>
if (i_21 <= 9)
  goto <bb 3>; [90.91%]
else
  goto <bb 5>; [9.09%]

=======is loop:0=========

 bb index 5 
<bb 5> [9.09%]:
_11 = malloc (1);
MEM[(struct st *)p_49 + 32B].f = _11;
foo (p_49);
if (test_55(D) != 0)
  goto <bb 31>; [31.00%]
else
  goto <bb 33>; [69.00%]

=======is loop:0=========

 bb index 33 
<bb 33> [6.27%]:
goto <bb 7>; [100.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [62.73%]:
_12 = (long unsigned int) i_22;
_13 = _12 * 16;
_14 = p_49 + _13;
_15 = _14->f;
free (_15);
_16 = (long unsigned int) i_22;
_17 = _16 * 16;
_18 = p9_44 + _17;
_19 = _18->f;
free (_19);
i_84 = i_22 + 1;

=======is loop:1=========

 bb index 7 
<bb 7> [69.00%]:
# i_22 = PHI <0(33), i_84(6)>
if (i_22 <= 9)
  goto <bb 6>; [90.91%]
else
  goto <bb 8>; [9.09%]

=======is loop:0=========

 bb index 8 
<bb 8> [6.27%]:
p100_57 = malloc (1);
if (test_55(D) != 0)
  goto <bb 9>; [33.00%]
else
  goto <bb 10>; [67.00%]

=======is loop:0=========

 bb index 9 
<bb 9> [2.07%]:
p100_59 = malloc (2);
free (p100_59);

=======is loop:0=========

 bb index 10 
<bb 10> [6.27%]:
# p100_23 = PHI <p100_57(8), p100_59(9)>
free (p100_23);

=======is loop:1=========

 bb index 11 
label2 [11.28%]:
foo (p5_62(D));
goto <bb 32>; [100.00%]

=======is loop:1=========

 bb index 12 
label3 [66.83%]:

=======is loop:1=========

 bb index 32 
<bb 32> [78.11%]:
foo (p5_62(D));
_20 = test5_65(D) / 10;
switch (_20) <default: <L4> [33.33%], case 5: <L2> [33.33%], case 10: <L3> [33.33%]>

=======is loop:1=========

 bb index 13 
<L2> [26.04%]:
foo (p5_62(D));
goto <bb 16>; [100.00%]

=======is loop:1=========

 bb index 14 
<L3> [26.04%]:
foo (p5_62(D));
goto <bb 16>; [100.00%]

=======is loop:1=========

 bb index 15 
<L4> [26.04%]:
foo (p5_62(D));

=======is loop:1=========

 bb index 16 
<bb 16> [78.11%]:
if (test_55(D) != 0)
  goto <bb 17>; [92.50%]
else
  goto <bb 26>; [7.50%]

=======is loop:1=========

 bb index 17 
<bb 17> [72.25%]:
if (test_55(D) > test2_69(D))
  goto <bb 18>; [7.50%]
else
  goto <bb 21>; [92.50%]

=======is loop:1=========

 bb index 18 
<bb 18> [5.42%]:
foo (p_49);
if (test_55(D) < test2_69(D))
  goto <bb 19>; [50.00%]
else
  goto <bb 20>; [50.00%]

=======is loop:1=========

 bb index 19 
<bb 19> [2.71%]:
foo (p_49);
goto <bb 24>; [100.00%]

=======is loop:1=========

 bb index 20 
<bb 20> [2.71%]:
foo (p_49);
goto <bb 24>; [100.00%]

=======is loop:1=========

 bb index 21 
<bb 21> [66.83%]:
foo (p_49);
if (test_55(D) < test2_69(D))
  goto <bb 22>; [50.00%]
else
  goto <bb 23>; [50.00%]

=======is loop:1=========

 bb index 22 
<bb 22> [33.41%]:
foo (p3_75(D));
goto <bb 12> (label3); [100.00%]

=======is loop:1=========

 bb index 23 
<bb 23> [33.41%]:
foo (p5_62(D));
goto <bb 12> (label3); [100.00%]

=======is loop:1=========

 bb index 24 
<bb 24> [5.42%]:
if (test3_80(D) != 0)
  goto <bb 25>; [92.50%]
else
  goto <bb 31>; [7.50%]

=======is loop:1=========

 bb index 25 
<bb 25> [5.01%]:
foo (p_49);
goto <bb 11> (label2); [100.00%]

=======is loop:0=========

 bb index 26 
<bb 26> [5.86%]:
if (test_55(D) == test2_69(D))
  goto <bb 27>; [17.77%]
else
  goto <bb 28>; [82.23%]

=======is loop:0=========

 bb index 27 
<bb 27> [1.04%]:
foo (p_49);
goto <bb 31>; [100.00%]

=======is loop:0=========

 bb index 28 
<bb 28> [4.82%]:
if (test_55(D) > test2_69(D))
  goto <bb 29>; [36.64%]
else
  goto <bb 31>; [63.36%]

=======is loop:0=========

 bb index 29 
<bb 29> [1.76%]:
foo (p4_70(D));

=======is loop:0=========

 bb index 31 
<bb 31> [9.08%]:
# _24 = PHI <200(5), 0(24), 0(27), 0(28), 0(29)>
return _24;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 1 [0m
[40;34m    used_stmt array stack totalsize of : 128 [0m
[40;34m    collect time: : 0.000072 s [0m
[40;34m    algorithm time: 0.001223 s [0m
[40;34m    gimple stmt count : : 76 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
