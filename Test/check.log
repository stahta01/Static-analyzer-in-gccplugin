test.c: In function â€˜foo3â€™:
test.c:56:6: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
   *z = malloc(1);
      ^
test.c:61:11: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("%d", p2);
          ~^
          %ls
test.c: In function â€˜foo4â€™:
test.c:108:5: warning: assignment from incompatible pointer type [-Wincompatible-pointer-types]
  p2 = &b;
     ^
test.c: In function â€˜childâ€™:
test.c:172:16: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("asdda%d\n", a99);
               ~^
               %ls
test.c:182:7: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
  data = 10;
       ^
test.c:189:9: warning: passing argument 1 of â€˜child4â€™ from incompatible pointer type [-Wincompatible-pointer-types]
  child4(&data);
         ^
test.c:24:7: note: expected â€˜int *â€™ but argument is of type â€˜void **â€™
 void *child4(int *data) __attribute__((noinline));
       ^~~~~~
test.c: In function â€˜child4â€™:
test.c:215:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c:216:14: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *test = &data;
              ^
test.c:235:16: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("asdda%d\n", pData);
               ~^
               %ls
test.c: In function â€˜child3â€™:
test.c:249:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c:260:16: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("asdda%d\n", pData);
               ~^
               %ls
test.c: In function â€˜child5â€™:
test.c:291:17: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
   printf("asdda%d\n", pData);
                ~^
                %ls
test.c: In function â€˜child6â€™:
test.c:327:17: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
   printf("asdda%d\n", pData);
                ~^
                %ls
test.c: In function â€˜child7â€™:
test.c:364:17: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
   printf("asdda%d\n", pData);
                ~^
                %ls
test.c: In function â€˜child2â€™:
test.c:387:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c: In function â€˜mainâ€™:
test.c:498:37: warning: passing argument 4 of â€˜pthread_createâ€™ makes pointer from integer without a cast [-Wint-conversion]
  pthread_create(&t, &attr2, child2, input2);
                                     ^~~~~~
In file included from test.c:3:0:
/usr/include/pthread.h:198:12: note: expected â€˜void * restrictâ€™ but argument is of type â€˜intâ€™
 extern int pthread_create (pthread_t *__restrict __newthread,
            ^~~~~~~~~~~~~~
test.c:556:5: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
  p4 = 1;
     ^
test.c:559:14: warning: passing argument 1 of â€˜child7â€™ makes pointer from integer without a cast [-Wint-conversion]
  p4 = child7(test, p4);
              ^~~~
test.c:346:6: note: expected â€˜void *â€™ but argument is of type â€˜intâ€™
 int *child7(void *data, void *test)
      ^~~~~~
=======ipa_pta=========
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
 <var_decl 0x7f5ef1188ea0 pData
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    addressable unsigned DI file test.c line 176 col 7 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
    align 64 context <function_decl 0x7f5ef115fd00 child> chain <var_decl 0x7f5ef1188e10 pData2>>
 <var_decl 0x7f5ef2351b40 p98
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    static unsigned DI file test.c line 12 col 13 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
    align 64 context <translation_unit_decl 0x7f5ef15dd168 test.c>>
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
=======print_function_var -231400784   11========
=======print_function_var -250020480   2========
if (_27 != 0)
if (data_74 == 0B)
=======print_function_var -231400640   12========
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
=======================================================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 12 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path child  function_call count: 10 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;33m =======POP node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;44m =======print_function_path boo  function_call count: 3 level :2========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;44m =======print_function_path test22  function_call count: 2 level :3========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:test22========= [0m
[40;42m =======start_check_funciton:test22========= [0m
 <function_decl 0x7f5ef115fe00 test22
    type <function_type 0x7f5ef115e930
        type <void_type 0x7f5ef15e6f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef15ed0a8>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115da78 value <pointer_type 0x7f5ef15eda80>
            chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>
        pointer_to_this <pointer_type 0x7f5ef116b9d8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 430 col 6 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef1176ba0>
    result <result_decl 0x7f5ef15dd690 D.4086 type <void_type 0x7f5ef15e6f18 void>
        ignored VOID file test.c line 430 col 6
        align 8 context <function_decl 0x7f5ef115fe00 test22>>
    arguments <parm_decl 0x7f5ef116dd00 k
        type <pointer_type 0x7f5ef15eda80 type <integer_type 0x7f5ef15e65e8 int>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef116b738>>
        unsigned DI file test.c line 430 col 18 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef115fe00 test22> arg-type <pointer_type 0x7f5ef15eda80>>
    struct-function 0x7f5ef1177630>
 <ssa_name 0x7f5ef15da870
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef11887e0 w>
    def_stmt w_10 = malloc (5);
    version 10
    ptr-info 0x7f5ef11915d0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry test22
dot graph target entry end

free (w_10);
In function â€˜mainâ€™:
test.c:439:2: warning: use location
  free(w);
  ^
dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
w_10 = malloc (5);
test.c:438:7: warning: use location
  int *w = malloc(5);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: free (w_10);
test.c:439:2: warning: use location
  free(w);
  ^
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
w_10 = malloc (5);
test.c:438:7: warning: use location
  int *w = malloc(5);
       ^
dot graph target loc end

dot graph target basicblock start from test22 basic block 2dot graph target basicblock en1

w_10, points-to NULL, points-to vars: { D.4131 } (nonlocal)
dot graph stmt start free (w_10);
w_10 = malloc (5);
dot graph stmt end

dot graph stmt start free (w_10);
test.c:439:2: warning: use location
  free(w);
  ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (w_10);
test.c:439:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

[40;33m =======POP node_fun stack:test22========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:boo========= [0m
[40;42m =======start_check_funciton:boo========= [0m
[40;33m =======POP node_fun stack:boo========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;44m =======print_function_path child5  function_call count: 4 level :2========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;33m =======POP node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;33m =======POP node_fun stack:pthread_self========= [0m
[40;42m =======pre_check_funciton:child5========= [0m
[40;42m =======start_check_funciton:child5========= [0m
[40;33m =======POP node_fun stack:child5========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;44m =======print_function_path child3  function_call count: 4 level :2========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;33m =======POP node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;33m =======POP node_fun stack:pthread_self========= [0m
[40;42m =======pre_check_funciton:child3========= [0m
[40;42m =======start_check_funciton:child3========= [0m
[40;33m =======POP node_fun stack:child3========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;44m =======print_function_path child4  function_call count: 1 level :2========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre_check_funciton:child4========= [0m
[40;42m =======start_check_funciton:child4========= [0m
[40;33m =======POP node_fun stack:child4========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path foo  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:foo2========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path foo2  function_call count: 4 level :3========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;44m =======print_function_path foo3  function_call count: 2 level :4========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:foo3========= [0m
[40;42m =======start_check_funciton:foo3========= [0m
 <function_decl 0x7f5ef1164600 foo3
    type <function_type 0x7f5ef115e930
        type <void_type 0x7f5ef15e6f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef15ed0a8>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115da78 value <pointer_type 0x7f5ef15eda80>
            chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>
        pointer_to_this <pointer_type 0x7f5ef116b9d8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 47 col 6 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef11762a0>
    result <result_decl 0x7f5ef15dd2d0 D.4050 type <void_type 0x7f5ef15e6f18 void>
        ignored VOID file test.c line 47 col 6
        align 8 context <function_decl 0x7f5ef1164600 foo3>>
    arguments <parm_decl 0x7f5ef116d680 z
        type <pointer_type 0x7f5ef15eda80 type <integer_type 0x7f5ef15e65e8 int>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef116b738>>
        unsigned DI file test.c line 47 col 16 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef1164600 foo3> arg-type <pointer_type 0x7f5ef15eda80>>
    struct-function 0x7f5ef11770b0>
 <ssa_name 0x7f5ef15dadc8
    type <pointer_type 0x7f5ef15ed0a8
        type <void_type 0x7f5ef15e6f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef15ed0a8>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef115e348>>
   
    def_stmt _1 = malloc (1);
    version 1
    ptr-info 0x7f5ef11912d0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo3
dot graph target entry end

_2 = (long int) _1;
test.c:56:6: warning: use location
   *z = malloc(1);
      ^
dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:56:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = (long int) _1;
test.c:56:6: warning: use location
   *z = malloc(1);
      ^
dot graph target line desend

dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:56:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc end

dot graph target basicblock start from foo3 basic block 3dot graph target basicblock en1

_1, points-to NULL, points-to vars: { D.4122 } (nonlocal, escaped, escaped heap)
dot graph stmt start _2 = (long int) _1;
_1 = malloc (1);
dot graph stmt end

dot graph stmt start _2 = (long int) _1;
test.c:56:6: warning: use location
   *z = malloc(1);
      ^
dot graph stmt end

dot graph entry foo3
dot graph target entry end

_3 = (int) _2;
test.c:56:6: warning: use location
dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:56:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _3 = (int) _2;
test.c:56:6: warning: use location
   *z = malloc(1);
      ^
dot graph target line desend

dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:56:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc end

dot graph target basicblock start from foo3 basic block 3dot graph target basicblock en1

_1, points-to NULL, points-to vars: { D.4122 } (nonlocal, escaped, escaped heap)
dot graph stmt start _3 = (int) _2;
_1 = malloc (1);
dot graph stmt end

dot graph stmt start _3 = (int) _2;
test.c:56:6: warning: use location
   *z = malloc(1);
      ^
dot graph stmt end

dot graph entry foo3
dot graph target entry end

*z_11(D) = _3;
test.c:56:6: warning: use location
dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:56:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: *z_11(D) = _3;
test.c:56:6: warning: use location
   *z = malloc(1);
      ^
dot graph target line desend

dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:56:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc end

dot graph target basicblock start from foo3 basic block 3dot graph target basicblock en1

_1, points-to NULL, points-to vars: { D.4122 } (nonlocal, escaped, escaped heap)
dot graph stmt start *z_11(D) = _3;
_1 = malloc (1);
dot graph stmt end

dot graph stmt start *z_11(D) = _3;
test.c:56:6: warning: use location
   *z = malloc(1);
      ^
dot graph stmt end


 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f5ef1164600 foo3
    type <function_type 0x7f5ef115e930
        type <void_type 0x7f5ef15e6f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef15ed0a8>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115da78 value <pointer_type 0x7f5ef15eda80>
            chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>
        pointer_to_this <pointer_type 0x7f5ef116b9d8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 47 col 6 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef11762a0>
    result <result_decl 0x7f5ef15dd2d0 D.4050 type <void_type 0x7f5ef15e6f18 void>
        ignored VOID file test.c line 47 col 6
        align 8 context <function_decl 0x7f5ef1164600 foo3>>
    arguments <parm_decl 0x7f5ef116d680 z
        type <pointer_type 0x7f5ef15eda80 type <integer_type 0x7f5ef15e65e8 int>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef116b738>>
        unsigned DI file test.c line 47 col 16 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef1164600 foo3> arg-type <pointer_type 0x7f5ef15eda80>>
    struct-function 0x7f5ef11770b0>
 <ssa_name 0x7f5ef15daf30
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef117c090 p2>
    def_stmt p2_9 = malloc (2);
    version 9
    ptr-info 0x7f5ef1191300>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo3
dot graph target entry end

p2_4 = PHI <p2_13(D)(3), p2_9(4)>
lto1: warning: use location
dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:59:6: warning: use location
   p2 = malloc(2);
      ^
dot graph target loc en1

dot graph target line desc form basic block 5: p2_4 = PHI <p2_13(D)(3), p2_9(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:59:6: warning: use location
dot graph target loc end

dot graph target basicblock start from foo3 basic block 5dot graph target basicblock en1

p2_9, points-to NULL, points-to vars: { D.4123 } (nonlocal, escaped, escaped heap)
dot graph stmt start p2_4 = PHI <p2_13(D)(3), p2_9(4)>
p2_9 = malloc (2);
dot graph stmt end

dot graph stmt start p2_4 = PHI <p2_13(D)(3), p2_9(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry foo3
dot graph target entry end

_15 = __printf_chk (1, "%d", p2_4);
dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:59:6: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: _15 = __printf_chk (1, "%d", p2_4);
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:59:6: warning: use location
dot graph target loc end

dot graph target basicblock start from foo3 basic block 5dot graph target basicblock en1

p2_9, points-to NULL, points-to vars: { D.4123 } (nonlocal, escaped, escaped heap)
dot graph stmt start _15 = __printf_chk (1, "%d", p2_4);
p2_9 = malloc (2);
dot graph stmt end

dot graph stmt start _15 = __printf_chk (1, "%d", p2_4);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f5ef15daf30
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef117c090 p2>
    def_stmt p2_9 = malloc (2);
    version 9
    ptr-info 0x7f5ef1191300>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry foo3
dot graph target entry end

*p2_4 = 10;
test.c:60:8: warning: use location
  p2[0] = 10;
        ^
dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:59:6: warning: use location
   p2 = malloc(2);
      ^
dot graph target loc en1

dot graph target line desc form basic block 5: *p2_4 = 10;
test.c:60:8: warning: use location
  p2[0] = 10;
        ^
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:59:6: warning: use location
   p2 = malloc(2);
      ^
dot graph target loc end

dot graph target basicblock start from foo3 basic block 5dot graph target basicblock en1

p2_9, points-to NULL, points-to vars: { D.4123 } (nonlocal, escaped, escaped heap)
dot graph stmt start *p2_4 = 10;
p2_9 = malloc (2);
dot graph stmt end

dot graph stmt start *p2_4 = 10;
test.c:60:8: warning: use location
  p2[0] = 10;
        ^
dot graph stmt end


 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:foo3========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;33m =======POP node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:foo2========= [0m
[40;42m =======start_check_funciton:foo2========= [0m
 <function_decl 0x7f5ef1164500 foo2
    type <function_type 0x7f5ef115eb28
        type <pointer_type 0x7f5ef15eda80 type <integer_type 0x7f5ef15e65e8 int>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef116b738>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115dbb8 value <integer_type 0x7f5ef15e65e8 int>
            chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>
        pointer_to_this <pointer_type 0x7f5ef116b930>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 63 col 6 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef11763c0>
    result <result_decl 0x7f5ef15dd348 D.4055 type <pointer_type 0x7f5ef15eda80>
        unsigned ignored DI file test.c line 63 col 6 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef1164500 foo2>>
    arguments <parm_decl 0x7f5ef116d700 z
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        SI file test.c line 63 col 15 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef1164500 foo2> arg-type <integer_type 0x7f5ef15e65e8 int>>
    struct-function 0x7f5ef1177160>
 <ssa_name 0x7f5ef117f480
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef117c480 a2>
    def_stmt a2_13 = malloc (_1);
    version 13
    ptr-info 0x7f5ef11913c0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:66:7: warning: use location
  int *a2 = malloc(z);
       ^

======================================================================
 <function_decl 0x7f5ef1164500 foo2
    type <function_type 0x7f5ef115eb28
        type <pointer_type 0x7f5ef15eda80 type <integer_type 0x7f5ef15e65e8 int>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef116b738>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115dbb8 value <integer_type 0x7f5ef15e65e8 int>
            chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>
        pointer_to_this <pointer_type 0x7f5ef116b930>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 63 col 6 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef11763c0>
    result <result_decl 0x7f5ef15dd348 D.4055 type <pointer_type 0x7f5ef15eda80>
        unsigned ignored DI file test.c line 63 col 6 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef1164500 foo2>>
    arguments <parm_decl 0x7f5ef116d700 z
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        SI file test.c line 63 col 15 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef1164500 foo2> arg-type <integer_type 0x7f5ef15e65e8 int>>
    struct-function 0x7f5ef1177160>
 <ssa_name 0x7f5ef117f4c8
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef117c3f0 p3>
    def_stmt p3_15 = malloc (_2);
    version 15
    ptr-info 0x7f5ef11913d8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo2
dot graph target entry end

_8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:67:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 5: _8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:67:7: warning: use location
dot graph target loc end

dot graph target basicblock start from foo2 basic block 5dot graph target basicblock en1

p3_15, points-to NULL, points-to vars: { D.4125 } (nonlocal, escaped, escaped heap)
dot graph stmt start _8 = PHI <p3_15(3), p4_17(4)>
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start _8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry foo2
dot graph target entry end

_33 = p3_15;
test.c:86:10: warning: use location
   return p3;
          ^
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:67:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 3: _33 = p3_15;
test.c:86:10: warning: use location
   return p3;
          ^
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:67:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

p3_15, points-to NULL, points-to vars: { D.4125 } (nonlocal, escaped, escaped heap)
dot graph stmt start _33 = p3_15;
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start _33 = p3_15;
test.c:86:10: warning: use location
   return p3;
          ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

free (p3_15);
test.c:85:3: warning: use location
   free(p3);
   ^
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:67:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 3: free (p3_15);
test.c:85:3: warning: use location
   free(p3);
   ^
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:67:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

p3_15, points-to NULL, points-to vars: { D.4125 } (nonlocal, escaped, escaped heap)
dot graph stmt start free (p3_15);
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start free (p3_15);
test.c:85:3: warning: use location
   free(p3);
   ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (p3_15);
test.c:85:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry foo2
dot graph target entry end

*p3_15 = 10;
test.c:84:9: warning: use location
   p3[0] = 10;
         ^
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:67:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 3: *p3_15 = 10;
test.c:84:9: warning: use location
   p3[0] = 10;
         ^
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:67:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

p3_15, points-to NULL, points-to vars: { D.4125 } (nonlocal, escaped, escaped heap)
dot graph stmt start *p3_15 = 10;
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start *p3_15 = 10;
test.c:84:9: warning: use location
   p3[0] = 10;
         ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

foo3 (p3_15);
test.c:79:2: warning: use location
  foo3(p3);
  ^
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:67:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: foo3 (p3_15);
test.c:79:2: warning: use location
  foo3(p3);
  ^
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:67:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

p3_15, points-to NULL, points-to vars: { D.4125 } (nonlocal, escaped, escaped heap)
dot graph stmt start foo3 (p3_15);
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start foo3 (p3_15);
test.c:79:2: warning: use location
  foo3(p3);
  ^
dot graph stmt end

this stmt is child function---foo3-----

 ================== trace ================== 
 <ssa_name 0x7f5ef117f4c8
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef117c3f0 p3>
    def_stmt p3_15 = malloc (_2);
    version 15
    ptr-info 0x7f5ef11913d8>
trace fucntion name:foo3 
[40;44m =======trace_function_path foo3  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with p3 ========= [0m
[40;36m ======= relate stmt argument:p3 ========= [0m
[40;36m ======= relate node_fun argument222:p3========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1309665437
from foo3 basic block 5dot graph end relate end

In function â€˜foo3â€™:
test.c:60:8: warning: use location
  p2[0] = 10;
        ^
dot graph relate stmt start ID : 1028316405 stmt(LHS) :*p2_4 = 10;
test.c:60:8: warning: use location
*p2_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 

 ================== Start Use after free Check ================== 
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
In function â€˜mainâ€™:
test.c:85:3: warning: Use after free error!: free location 
   free(p3);
   ^
_8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
test.c:85:3: warning: Use after free error!: free location 
_33 = p3_15;
test.c:86:10: warning: use location
   return p3;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================

 <function_decl 0x7f5ef1164500 foo2
    type <function_type 0x7f5ef115eb28
        type <pointer_type 0x7f5ef15eda80 type <integer_type 0x7f5ef15e65e8 int>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef116b738>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115dbb8 value <integer_type 0x7f5ef15e65e8 int>
            chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>
        pointer_to_this <pointer_type 0x7f5ef116b930>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 63 col 6 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef11763c0>
    result <result_decl 0x7f5ef15dd348 D.4055 type <pointer_type 0x7f5ef15eda80>
        unsigned ignored DI file test.c line 63 col 6 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef1164500 foo2>>
    arguments <parm_decl 0x7f5ef116d700 z
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        SI file test.c line 63 col 15 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef1164500 foo2> arg-type <integer_type 0x7f5ef15e65e8 int>>
    struct-function 0x7f5ef1177160>
 <ssa_name 0x7f5ef117f510
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef117c360 p4>
    def_stmt p4_17 = malloc (_3);
    version 17
    ptr-info 0x7f5ef11913f0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo2
dot graph target entry end

_8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:68:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 5: _8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:68:7: warning: use location
dot graph target loc end

dot graph target basicblock start from foo2 basic block 5dot graph target basicblock en1

p4_17, points-to NULL, points-to vars: { D.4126 } (nonlocal, escaped, escaped heap)
dot graph stmt start _8 = PHI <p3_15(3), p4_17(4)>
p4_17 = malloc (_3);
dot graph stmt end

dot graph stmt start _8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry foo2
dot graph target entry end

_29 = p4_17;
test.c:92:10: warning: use location
   return p4;
          ^
dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:68:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 4: _29 = p4_17;
test.c:92:10: warning: use location
   return p4;
          ^
dot graph target line desend

dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:68:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 4dot graph target basicblock en1

p4_17, points-to NULL, points-to vars: { D.4126 } (nonlocal, escaped, escaped heap)
dot graph stmt start _29 = p4_17;
p4_17 = malloc (_3);
dot graph stmt end

dot graph stmt start _29 = p4_17;
test.c:92:10: warning: use location
   return p4;
          ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

free (p4_17);
test.c:91:3: warning: use location
   free(p4);
   ^
dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:68:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 4: free (p4_17);
test.c:91:3: warning: use location
   free(p4);
   ^
dot graph target line desend

dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:68:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 4dot graph target basicblock en1

p4_17, points-to NULL, points-to vars: { D.4126 } (nonlocal, escaped, escaped heap)
dot graph stmt start free (p4_17);
p4_17 = malloc (_3);
dot graph stmt end

dot graph stmt start free (p4_17);
test.c:91:3: warning: use location
   free(p4);
   ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (p4_17);
test.c:91:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry foo2
dot graph target entry end

*p4_17 = 10;
test.c:90:9: warning: use location
   p4[0] = 10;
         ^
dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:68:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 4: *p4_17 = 10;
test.c:90:9: warning: use location
   p4[0] = 10;
         ^
dot graph target line desend

dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:68:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 4dot graph target basicblock en1

p4_17, points-to NULL, points-to vars: { D.4126 } (nonlocal, escaped, escaped heap)
dot graph stmt start *p4_17 = 10;
p4_17 = malloc (_3);
dot graph stmt end

dot graph stmt start *p4_17 = 10;
test.c:90:9: warning: use location
   p4[0] = 10;
         ^
dot graph stmt end


 ================== Start Use after free Check ================== 
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:91:3: warning: Use after free error!: free location 
   free(p4);
   ^
_8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:91:3: warning: Use after free error!: free location 
_29 = p4_17;
test.c:92:10: warning: use location
   return p4;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================

 <function_decl 0x7f5ef1164500 foo2
    type <function_type 0x7f5ef115eb28
        type <pointer_type 0x7f5ef15eda80 type <integer_type 0x7f5ef15e65e8 int>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef116b738>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115dbb8 value <integer_type 0x7f5ef15e65e8 int>
            chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>
        pointer_to_this <pointer_type 0x7f5ef116b930>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 63 col 6 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef11763c0>
    result <result_decl 0x7f5ef15dd348 D.4055 type <pointer_type 0x7f5ef15eda80>
        unsigned ignored DI file test.c line 63 col 6 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef1164500 foo2>>
    arguments <parm_decl 0x7f5ef116d700 z
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        SI file test.c line 63 col 15 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef1164500 foo2> arg-type <integer_type 0x7f5ef15e65e8 int>>
    struct-function 0x7f5ef1177160>
 <ssa_name 0x7f5ef117f2d0
    type <pointer_type 0x7f5ef15ed0a8
        type <void_type 0x7f5ef15e6f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef15ed0a8>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef115e348>>
   
    def_stmt _4 = malloc (200);
    version 4
    ptr-info 0x7f5ef1191348>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo2
dot graph target entry end

p99 = _4;
test.c:69:6: warning: use location
  p99 = malloc(200);
      ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: p99 = _4;
test.c:69:6: warning: use location
  p99 = malloc(200);
      ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

_4, points-to NULL, points-to vars: { D.4127 } (nonlocal, escaped, escaped heap)
dot graph stmt start p99 = _4;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start p99 = _4;
test.c:69:6: warning: use location
  p99 = malloc(200);
      ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_5 = p99;
test.c:70:5: warning: use location
  p99[0] = 99;
     ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = p99;
test.c:70:5: warning: use location
  p99[0] = 99;
     ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

_4, points-to NULL, points-to vars: { D.4127 } (nonlocal, escaped, escaped heap)
dot graph stmt start _5 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start _5 = p99;
test.c:70:5: warning: use location
  p99[0] = 99;
     ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

*_5 = 99;
test.c:70:9: warning: use location
  p99[0] = 99;
         ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: *_5 = 99;
test.c:70:9: warning: use location
  p99[0] = 99;
         ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

_4, points-to NULL, points-to vars: { D.4127 } (nonlocal, escaped, escaped heap)
dot graph stmt start *_5 = 99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start *_5 = 99;
test.c:70:9: warning: use location
  p99[0] = 99;
         ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_6 = p99;
test.c:71:5: warning: use location
  p99[1] = 100;
     ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _6 = p99;
test.c:71:5: warning: use location
  p99[1] = 100;
     ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

_4, points-to NULL, points-to vars: { D.4127 } (nonlocal, escaped, escaped heap)
dot graph stmt start _6 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start _6 = p99;
test.c:71:5: warning: use location
  p99[1] = 100;
     ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

MEM[(int *)_6 + 4B] = 100;
test.c:71:9: warning: use location
  p99[1] = 100;
         ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)_6 + 4B] = 100;
test.c:71:9: warning: use location
  p99[1] = 100;
         ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

_4, points-to NULL, points-to vars: { D.4127 } (nonlocal, escaped, escaped heap)
dot graph stmt start MEM[(int *)_6 + 4B] = 100;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start MEM[(int *)_6 + 4B] = 100;
test.c:71:9: warning: use location
  p99[1] = 100;
         ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_7 = p99;
test.c:82:6: warning: use location
   p99[1] = 200;
      ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _7 = p99;
test.c:82:6: warning: use location
   p99[1] = 200;
      ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

_4, points-to NULL, points-to vars: { D.4127 } (nonlocal, escaped, escaped heap)
dot graph stmt start _7 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start _7 = p99;
test.c:82:6: warning: use location
   p99[1] = 200;
      ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

MEM[(int *)_7 + 4B] = 200;
test.c:82:10: warning: use location
   p99[1] = 200;
          ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: MEM[(int *)_7 + 4B] = 200;
test.c:82:10: warning: use location
   p99[1] = 200;
          ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

_4, points-to NULL, points-to vars: { D.4127 } (nonlocal, escaped, escaped heap)
dot graph stmt start MEM[(int *)_7 + 4B] = 200;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start MEM[(int *)_7 + 4B] = 200;
test.c:82:10: warning: use location
   p99[1] = 200;
          ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_1 = p99;
test.c:123:6: warning: use location
   p99[1] = 1000;
      ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = p99;
test.c:123:6: warning: use location
   p99[1] = 1000;
      ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

_4, points-to NULL, points-to vars: { D.4127 } (nonlocal, escaped, escaped heap)
dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start _1 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start _1 = p99;
test.c:123:6: warning: use location
   p99[1] = 1000;
      ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

MEM[(int *)_1 + 4B] = 1000;
test.c:123:10: warning: use location
   p99[1] = 1000;
          ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)_1 + 4B] = 1000;
test.c:123:10: warning: use location
   p99[1] = 1000;
          ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

_4, points-to NULL, points-to vars: { D.4127 } (nonlocal, escaped, escaped heap)
dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start MEM[(int *)_1 + 4B] = 1000;
_4 = malloc (200);
dot graph stmt end

dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start MEM[(int *)_1 + 4B] = 1000;
test.c:123:10: warning: use location
   p99[1] = 1000;
          ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_2 = p99;
test.c:124:6: warning: use location
   p99[2] = 200;
      ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = p99;
test.c:124:6: warning: use location
   p99[2] = 200;
      ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

_4, points-to NULL, points-to vars: { D.4127 } (nonlocal, escaped, escaped heap)
dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start _2 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start _2 = p99;
test.c:124:6: warning: use location
   p99[2] = 200;
      ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

MEM[(int *)_2 + 8B] = 200;
test.c:124:10: warning: use location
   p99[2] = 200;
          ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)_2 + 8B] = 200;
test.c:124:10: warning: use location
   p99[2] = 200;
          ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:69:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

_4, points-to NULL, points-to vars: { D.4127 } (nonlocal, escaped, escaped heap)
dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start MEM[(int *)_2 + 8B] = 200;
_4 = malloc (200);
dot graph stmt end

dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start MEM[(int *)_2 + 8B] = 200;
test.c:124:10: warning: use location
   p99[2] = 200;
          ^
dot graph stmt end


 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:foo2========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======thread job funciton:foo========= [0m
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_40 = VDEF <.MEM_39(D)>
pthread_mutex_lock (&mLock);
test.c:168:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_41 = VDEF <.MEM_40>
pthread_mutex_lock (&mLock);
test.c:169:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_61 = VDEF <.MEM_60>
pthread_mutex_unlock (&mLock);
test.c:197:2: warning: use location
  pthread_mutex_unlock(&mLock);
  ^
[40;42m =======thread job funciton lock count :3========= [0m
[40;42m =======start_check_funciton:foo========= [0m
 <function_decl 0x7f5ef1164400 foo
    type <function_type 0x7f5ef115eb28
        type <pointer_type 0x7f5ef15eda80 type <integer_type 0x7f5ef15e65e8 int>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef116b738>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115dbb8 value <integer_type 0x7f5ef15e65e8 int>
            chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>
        pointer_to_this <pointer_type 0x7f5ef116b930>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 118 col 6 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef1176420>
    result <result_decl 0x7f5ef15dd3c0 D.4062 type <pointer_type 0x7f5ef15eda80>
        unsigned ignored DI file test.c line 118 col 6 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef1164400 foo>>
    arguments <parm_decl 0x7f5ef116d800 z
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        SI file test.c line 118 col 14 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef1164400 foo> arg-type <integer_type 0x7f5ef15e65e8 int>>
    struct-function 0x7f5ef1177210>
 <ssa_name 0x7f5ef117fc18
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef117cb40 p2>
    def_stmt p2_5 = malloc (1);
    version 5
    ptr-info 0x7f5ef1191468>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo
dot graph target entry end

*p2_5 = 1;
test.c:122:8: warning: use location
  p2[0] = 1;
        ^
dot graph target loc start # .MEM_13 = VDEF <.MEM_12(D)>
p2_5 = malloc (1);
test.c:121:7: warning: use location
  int *p2 = malloc(1);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p2_5 = 1;
test.c:122:8: warning: use location
  p2[0] = 1;
        ^
dot graph target line desend

dot graph target loc start # .MEM_13 = VDEF <.MEM_12(D)>
p2_5 = malloc (1);
test.c:121:7: warning: use location
  int *p2 = malloc(1);
       ^
dot graph target loc end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

p2_5, points-to NULL, points-to vars: { D.4128 } (nonlocal, escaped, escaped heap)
dot graph stmt start *p2_5 = 1;
p2_5 = malloc (1);
dot graph stmt end

dot graph stmt start *p2_5 = 1;
test.c:122:8: warning: use location
  p2[0] = 1;
        ^
dot graph stmt end

 
 LOCAL VARIBALE  
# .MEM_14 = VDEF <.MEM_13>
*p2_5 = 1;
test.c:122:8: warning: use location
 
 LOCAL VARIBALE  

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
 <function_decl 0x7f5ef1164400 foo
    type <function_type 0x7f5ef115eb28
        type <pointer_type 0x7f5ef15eda80 type <integer_type 0x7f5ef15e65e8 int>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef116b738>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115dbb8 value <integer_type 0x7f5ef15e65e8 int>
            chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>
        pointer_to_this <pointer_type 0x7f5ef116b930>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 118 col 6 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef1176420>
    result <result_decl 0x7f5ef15dd3c0 D.4062 type <pointer_type 0x7f5ef15eda80>
        unsigned ignored DI file test.c line 118 col 6 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef1164400 foo>>
    arguments <parm_decl 0x7f5ef116d800 z
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        SI file test.c line 118 col 14 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef1164400 foo> arg-type <integer_type 0x7f5ef15e65e8 int>>
    struct-function 0x7f5ef1177210>
 <ssa_name 0x7f5ef117fca8
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
   
    def_stmt _11 = foo2 (z_9(D));
    version 11
    ptr-info 0x7f5ef1191480>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:foo2 
[40;44m =======trace_function_path foo2  function_call count: 4 level :-100========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_34>
return _8;
lto1: warning: use location
dot graph start relate form ID : 1316715363
from foo2 basic block 5dot graph end relate end

dot graph relate stmt start ID : 1208333943 stmt(return) :return _8;
lto1: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :-100========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---foo2-----
this other function ------foo2-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo
dot graph target entry end

return _11;
test.c:139:9: warning: use location
  return foo2(z);
         ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_11 = foo2 (z_9(D));
test.c:139:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: return _11;
test.c:139:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_11 = foo2 (z_9(D));
test.c:139:9: warning: use location
dot graph target loc end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

_11, points-to NULL, points-to vars: { D.4125 D.4126 } (nonlocal, escaped, escaped heap)
dot graph stmt start return _11;
_11 = foo2 (z_9(D));
dot graph stmt end

[40;44m =======trace_function_path foo2  function_call count: 4 level :0========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
[40;31m  find free stmt free same pointer [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
test.c:85:3: warning: use location
   free(p3);
   ^
dot graph start relate form ID : 1090617441
from foo2 basic block 3dot graph end relate end

dot graph relate stmt start ID : 685759639 stmt(free) :free (p3_15);
test.c:85:3: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 685759639 stmt(free) :free (p3_15);
test.c:85:3: warning: use location
dot graph relate end

# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;31m  find free stmt free same pointer [0m
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:91:3: warning: use location
   free(p4);
   ^
dot graph start relate form ID : 1090617441
from foo2 basic block 4dot graph end relate end

dot graph relate stmt start ID : 1621687839 stmt(free) :free (p4_17);
test.c:91:3: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1621687839 stmt(free) :free (p4_17);
test.c:91:3: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1090617441
from foo2 basic block 2dot graph end relate end

dot graph relate stmt start ID : 217277325 stmt(call) :foo3 (p3_15);
In function â€˜foo2â€™:
test.c:79:2: warning: use location
  foo3(p3);
  ^
p3_15
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1090617441
from foo2 basic block 3dot graph end relate end

test.c:84:9: warning: use location
   p3[0] = 10;
         ^
dot graph relate stmt start ID : 1768519750 stmt(LHS) :*p3_15 = 10;
test.c:84:9: warning: use location
*p3_15
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1090617441
from foo2 basic block 3dot graph end relate end

dot graph relate stmt start ID : 1980360472 stmt(call) :free (p3_15);
test.c:85:3: warning: use location
   free(p3);
   ^
p3_15
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1090617441
from foo2 basic block 3dot graph end relate end

test.c:86:10: warning: use location
   return p3;
          ^
dot graph relate stmt start ID : 618461165 stmt(LHS) :_33 = p3_15;
test.c:86:10: warning: use location
_33
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1090617441
from foo2 basic block 4dot graph end relate end

test.c:90:9: warning: use location
   p4[0] = 10;
         ^
dot graph relate stmt start ID : 1070603700 stmt(LHS) :*p4_17 = 10;
test.c:90:9: warning: use location
*p4_17
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1090617441
from foo2 basic block 4dot graph end relate end

dot graph relate stmt start ID : 1179840941 stmt(call) :free (p4_17);
test.c:91:3: warning: use location
   free(p4);
   ^
p4_17
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1090617441
from foo2 basic block 4dot graph end relate end

test.c:92:10: warning: use location
   return p4;
          ^
dot graph relate stmt start ID : 1471113594 stmt(LHS) :_29 = p4_17;
test.c:92:10: warning: use location
_29
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1910239883
from foo3 basic block 5dot graph end relate end

In function â€˜foo3â€™:
test.c:60:8: warning: use location
  p2[0] = 10;
        ^
dot graph relate stmt start ID : 1286257616 stmt(LHS) :*p2_4 = 10;
test.c:60:8: warning: use location
*p2_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
dot graph stmt start return _11;
In function â€˜mainâ€™:
test.c:139:9: warning: use location
  return foo2(z);
         ^
dot graph stmt end


 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:foo========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;33m =======POP node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre_check_funciton:child========= [0m
[40;42m =======thread job funciton:child========= [0m
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_40 = VDEF <.MEM_39(D)>
pthread_mutex_lock (&mLock);
test.c:168:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_41 = VDEF <.MEM_40>
pthread_mutex_lock (&mLock);
test.c:169:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_61 = VDEF <.MEM_60>
pthread_mutex_unlock (&mLock);
test.c:197:2: warning: use location
  pthread_mutex_unlock(&mLock);
  ^
[40;42m =======thread job funciton lock count :3========= [0m
[40;42m =======start_check_funciton:child========= [0m
 <function_decl 0x7f5ef115fd00 child
    type <function_type 0x7f5ef115e888
        type <pointer_type 0x7f5ef15ed0a8 type <void_type 0x7f5ef15e6f18 void>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef115e348>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115da00 value <pointer_type 0x7f5ef15ed0a8>
            chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>
        pointer_to_this <pointer_type 0x7f5ef115e5e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 141 col 7 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef1176c00>
    result <result_decl 0x7f5ef15dd708 D.4090 type <pointer_type 0x7f5ef15ed0a8>
        unsigned ignored DI file test.c line 141 col 7 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef115fd00 child>>
    arguments <parm_decl 0x7f5ef116dd80 data type <pointer_type 0x7f5ef15ed0a8>
        addressable unsigned DI file test.c line 141 col 19 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef115fd00 child> arg-type <pointer_type 0x7f5ef15ed0a8>>
    struct-function 0x7f5ef11776e0>
 <ssa_name 0x7f5ef118e510
    type <pointer_type 0x7f5ef116b738
        type <pointer_type 0x7f5ef15eda80 type <integer_type 0x7f5ef15e65e8 int>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef116b738>>
        public unsigned DI size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f5ef1188f30 ppData>
    def_stmt ppData_18 = malloc (10);
    version 18
    ptr-info 0x7f5ef11916d8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:175:8: warning: use location
  int **ppData = malloc(10);
        ^

======================================================================
 <function_decl 0x7f5ef115fd00 child
    type <function_type 0x7f5ef115e888
        type <pointer_type 0x7f5ef15ed0a8 type <void_type 0x7f5ef15e6f18 void>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef115e348>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115da00 value <pointer_type 0x7f5ef15ed0a8>
            chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>
        pointer_to_this <pointer_type 0x7f5ef115e5e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 141 col 7 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef1176c00>
    result <result_decl 0x7f5ef15dd708 D.4090 type <pointer_type 0x7f5ef15ed0a8>
        unsigned ignored DI file test.c line 141 col 7 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef115fd00 child>>
    arguments <parm_decl 0x7f5ef116dd80 data type <pointer_type 0x7f5ef15ed0a8>
        addressable unsigned DI file test.c line 141 col 19 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef115fd00 child> arg-type <pointer_type 0x7f5ef15ed0a8>>
    struct-function 0x7f5ef11776e0>
 <ssa_name 0x7f5ef118e558
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef1188e10 pData2>
    def_stmt pData2_21 = malloc (10);
    version 21
    ptr-info 0x7f5ef11916f0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child
dot graph target entry end

child5 (pData2_21);
test.c:191:2: warning: use location
  child5(pData2);
  ^
dot graph target loc start # .MEM_46 = VDEF <.MEM_45>
pData2_21 = malloc (10);
test.c:177:7: warning: use location
  int *pData2 = malloc(10);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: child5 (pData2_21);
test.c:191:2: warning: use location
  child5(pData2);
  ^
dot graph target line desend

dot graph target loc start # .MEM_46 = VDEF <.MEM_45>
pData2_21 = malloc (10);
test.c:177:7: warning: use location
  int *pData2 = malloc(10);
       ^
dot graph target loc end

dot graph target basicblock start from child basic block 2dot graph target basicblock en1

pData2_21, points-to NULL, points-to vars: { D.4133 } (nonlocal, escaped, escaped heap)
dot graph stmt start child5 (pData2_21);
pData2_21 = malloc (10);
dot graph stmt end

dot graph stmt start child5 (pData2_21);
test.c:191:2: warning: use location
  child5(pData2);
  ^
dot graph stmt end

this stmt is child function---child5-----

 ================== trace ================== 
 <ssa_name 0x7f5ef118e558
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef1188e10 pData2>
    def_stmt pData2_21 = malloc (10);
    version 21
    ptr-info 0x7f5ef11916f0>
trace fucntion name:child5 
[40;44m =======trace_function_path child5  function_call count: 4 level :0========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
test.c:296:3: warning: use location
   free(pData);
   ^
dot graph start relate form ID : 554142355
from child5 basic block 4dot graph end relate end

dot graph relate stmt start ID : 950538526 stmt(free) :free (pData_6);
test.c:296:3: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 950538526 stmt(free) :free (pData_6);
test.c:296:3: warning: use location
dot graph relate end

[40;36m ======= node_fun:child5========= [0m
[40;36m ======= find relate stmt with pData2 ========= [0m
[40;36m ======= relate stmt argument:pData2 ========= [0m
[40;36m ======= relate node_fun argument222:pData2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 554142355
from child5 basic block 2dot graph end relate end

In function â€˜child5â€™:
test.c:279:8: warning: use location
  pData = pData + 1;
        ^
dot graph relate stmt start ID : 1846580639 stmt(LHS) :pData_6 = data_5(D) + 4;
test.c:279:8: warning: use location
pData_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 554142355
from child5 basic block 4dot graph end relate end

dot graph relate stmt start ID : 1589494165 stmt(call) :free (pData_6);
test.c:296:3: warning: use location
   free(pData);
   ^
pData_6
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m

 ================== trace ================== 

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

 <function_decl 0x7f5ef115fd00 child
    type <function_type 0x7f5ef115e888
        type <pointer_type 0x7f5ef15ed0a8 type <void_type 0x7f5ef15e6f18 void>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef115e348>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115da00 value <pointer_type 0x7f5ef15ed0a8>
            chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>
        pointer_to_this <pointer_type 0x7f5ef115e5e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 141 col 7 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef1176c00>
    result <result_decl 0x7f5ef15dd708 D.4090 type <pointer_type 0x7f5ef15ed0a8>
        unsigned ignored DI file test.c line 141 col 7 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef115fd00 child>>
    arguments <parm_decl 0x7f5ef116dd80 data type <pointer_type 0x7f5ef15ed0a8>
        addressable unsigned DI file test.c line 141 col 19 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef115fd00 child> arg-type <pointer_type 0x7f5ef15ed0a8>>
    struct-function 0x7f5ef11776e0>
 <ssa_name 0x7f5ef118e4c8
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef118f000 a99>
    def_stmt a99_16 = foo (20);
    version 16
    ptr-info 0x7f5ef11916c0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 2 level :-100========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_17>
return _11;
In function â€˜mainâ€™:
test.c:139:9: warning: use location
  return foo2(z);
         ^
dot graph start relate form ID : 367492010
from foo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1519219252 stmt(return) :return _11;
test.c:139:9: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :-100========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_34>
return _8;
lto1: warning: use location
dot graph start relate form ID : 164663101
from foo2 basic block 5dot graph end relate end

dot graph relate stmt start ID : 834208752 stmt(return) :return _8;
lto1: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :-100========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
this is fucntion return value is heap-object 100

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---foo-----
this other function ------foo-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child
dot graph target entry end

_38 = __printf_chk (1, "asdda%d\n", a99_16);
dot graph target loc start # .MEM_42 = VDEF <.MEM_41>
a99_16 = foo (20);
test.c:171:7: warning: use location
  int *a99 = foo(20);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: _38 = __printf_chk (1, "asdda%d\n", a99_16);
dot graph target line desend

dot graph target loc start # .MEM_42 = VDEF <.MEM_41>
a99_16 = foo (20);
test.c:171:7: warning: use location
dot graph target loc end

dot graph target basicblock start from child basic block 2dot graph target basicblock en1

a99_16, points-to NULL, points-to vars: { D.4125 D.4126 } (nonlocal, escaped, escaped heap)
dot graph stmt start _38 = __printf_chk (1, "asdda%d\n", a99_16);
a99_16 = foo (20);
dot graph stmt end

[40;44m =======trace_function_path foo  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with a99 ========= [0m
[40;36m ======= relate stmt argument:a99 ========= [0m
[40;36m ======= relate node_fun argument222:a99========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1117233806
from foo basic block 2dot graph end relate end

In function â€˜fooâ€™:
test.c:122:8: warning: use location
  p2[0] = 1;
        ^
dot graph relate stmt start ID : 624508217 stmt(LHS) :*p2_5 = 1;
test.c:122:8: warning: use location
*p2_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :1========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
[40;31m  find free stmt free same pointer [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
In function â€˜mainâ€™:
test.c:85:3: warning: use location
   free(p3);
   ^
dot graph start relate form ID : 1130890326
from foo2 basic block 3dot graph end relate end

dot graph relate stmt start ID : 1797965926 stmt(free) :free (p3_15);
test.c:85:3: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1797965926 stmt(free) :free (p3_15);
test.c:85:3: warning: use location
dot graph relate end

# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;31m  find free stmt free same pointer [0m
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:91:3: warning: use location
   free(p4);
   ^
dot graph start relate form ID : 1130890326
from foo2 basic block 4dot graph end relate end

dot graph relate stmt start ID : 294981955 stmt(free) :free (p4_17);
test.c:91:3: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 294981955 stmt(free) :free (p4_17);
test.c:91:3: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo2========= [0m
[40;36m ======= find relate stmt with a99 ========= [0m
[40;36m ======= relate stmt argument:a99 ========= [0m
dot graph arrowdot graph start relate for1ID : 1130890326
from foo2 basic block 2dot graph end relate end

dot graph relate stmt start ID : 293072115 stmt(call) :foo3 (p3_15);
In function â€˜foo2â€™:
test.c:79:2: warning: use location
  foo3(p3);
  ^
p3_15
dot graph relate end

[40;36m ======= relate node_fun argument222:a99========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1130890326
from foo2 basic block 3dot graph end relate end

test.c:84:9: warning: use location
   p3[0] = 10;
         ^
dot graph relate stmt start ID : 678798683 stmt(LHS) :*p3_15 = 10;
test.c:84:9: warning: use location
*p3_15
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1130890326
from foo2 basic block 3dot graph end relate end

dot graph relate stmt start ID : 1611697318 stmt(call) :free (p3_15);
test.c:85:3: warning: use location
   free(p3);
   ^
p3_15
dot graph relate end

[40;36m ======= relate node_fun argument222:a99========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1130890326
from foo2 basic block 3dot graph end relate end

test.c:86:10: warning: use location
   return p3;
          ^
dot graph relate stmt start ID : 1501406059 stmt(LHS) :_33 = p3_15;
test.c:86:10: warning: use location
_33
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:a99========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1130890326
from foo2 basic block 4dot graph end relate end

test.c:90:9: warning: use location
   p4[0] = 10;
         ^
dot graph relate stmt start ID : 307990769 stmt(LHS) :*p4_17 = 10;
test.c:90:9: warning: use location
*p4_17
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1130890326
from foo2 basic block 4dot graph end relate end

dot graph relate stmt start ID : 554831111 stmt(call) :free (p4_17);
test.c:91:3: warning: use location
   free(p4);
   ^
p4_17
dot graph relate end

[40;36m ======= relate node_fun argument222:a99========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1130890326
from foo2 basic block 4dot graph end relate end

test.c:92:10: warning: use location
   return p4;
          ^
dot graph relate stmt start ID : 39682050 stmt(LHS) :_29 = p4_17;
test.c:92:10: warning: use location
_29
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with a99 ========= [0m
[40;36m ======= relate stmt argument:a99 ========= [0m
[40;36m ======= relate node_fun argument222:a99========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1929678608
from foo3 basic block 5dot graph end relate end

In function â€˜foo3â€™:
test.c:60:8: warning: use location
  p2[0] = 10;
        ^
dot graph relate stmt start ID : 772108437 stmt(LHS) :*p2_4 = 10;
test.c:60:8: warning: use location
*p2_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
dot graph stmt start _38 = __printf_chk (1, "asdda%d\n", a99_16);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f5ef118e4c8
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef118f000 a99>
    def_stmt a99_16 = foo (20);
    version 16
    ptr-info 0x7f5ef11916c0>
trace fucntion name:__printf_chk 

 ================== trace ================== 

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================
[40;33m =======POP node_fun stack:child========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:child7========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path child7  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;33m =======POP node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;33m =======POP node_fun stack:pthread_self========= [0m
[40;42m =======pre_check_funciton:child7========= [0m
[40;42m =======start_check_funciton:child7========= [0m
 <function_decl 0x7f5ef1164000 child7
    type <function_type 0x7f5ef115e9d8
        type <pointer_type 0x7f5ef15eda80 type <integer_type 0x7f5ef15e65e8 int>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef116b738>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115daf0 value <pointer_type 0x7f5ef15ed0a8>
            chain <tree_list 0x7f5ef115da00 value <pointer_type 0x7f5ef15ed0a8>
                chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>>
        pointer_to_this <pointer_type 0x7f5ef116b690>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 346 col 6 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef1176960>
    result <result_decl 0x7f5ef15dd5a0 D.4078 type <pointer_type 0x7f5ef15eda80>
        unsigned ignored DI file test.c line 346 col 6 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef1164000 child7>>
    arguments <parm_decl 0x7f5ef116db00 data
        type <pointer_type 0x7f5ef15ed0a8 type <void_type 0x7f5ef15e6f18 void>
            public unsigned DI size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef115e348>>
        unsigned DI file test.c line 346 col 19 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef1164000 child7> arg-type <pointer_type 0x7f5ef15ed0a8>
        chain <parm_decl 0x7f5ef116db80 test type <pointer_type 0x7f5ef15ed0a8>
            unsigned DI file test.c line 346 col 31 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
            align 64 context <function_decl 0x7f5ef1164000 child7> arg-type <pointer_type 0x7f5ef15ed0a8>>>
    struct-function 0x7f5ef11774d0>
 <ssa_name 0x7f5ef1185a20
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
   
    def_stmt _15 = malloc (10);
    version 15
    ptr-info 0x7f5ef1191588>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child7
dot graph target entry end

_4 = PHI <_15(3), _12(4)>
In function â€˜mainâ€™:
lto1: warning: use location
dot graph target loc start # .MEM_24 = VDEF <.MEM_23>
_15 = malloc (10);
test.c:363:10: warning: use location
   return malloc(10);
          ^
dot graph target loc en1

dot graph target line desc form basic block 5: _4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_24 = VDEF <.MEM_23>
_15 = malloc (10);
test.c:363:10: warning: use location
dot graph target loc end

dot graph target basicblock start from child7 basic block 5dot graph target basicblock en1

_15, points-to NULL, points-to vars: { D.4129 } (nonlocal)
dot graph stmt start _4 = PHI <_15(3), _12(4)>
_15 = malloc (10);
dot graph stmt end

dot graph stmt start _4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f5ef1164000 child7
    type <function_type 0x7f5ef115e9d8
        type <pointer_type 0x7f5ef15eda80 type <integer_type 0x7f5ef15e65e8 int>
            public unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef116b738>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f5ef115daf0 value <pointer_type 0x7f5ef15ed0a8>
            chain <tree_list 0x7f5ef115da00 value <pointer_type 0x7f5ef15ed0a8>
                chain <tree_list 0x7f5ef15e5ac8 value <void_type 0x7f5ef15e6f18 void>>>>
        pointer_to_this <pointer_type 0x7f5ef116b690>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 346 col 6 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> attributes <tree_list 0x7f5ef115d9d8> initial <block 0x7f5ef1176960>
    result <result_decl 0x7f5ef15dd5a0 D.4078 type <pointer_type 0x7f5ef15eda80>
        unsigned ignored DI file test.c line 346 col 6 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef1164000 child7>>
    arguments <parm_decl 0x7f5ef116db00 data
        type <pointer_type 0x7f5ef15ed0a8 type <void_type 0x7f5ef15e6f18 void>
            public unsigned DI size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef115e348>>
        unsigned DI file test.c line 346 col 19 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef1164000 child7> arg-type <pointer_type 0x7f5ef15ed0a8>
        chain <parm_decl 0x7f5ef116db80 test type <pointer_type 0x7f5ef15ed0a8>
            unsigned DI file test.c line 346 col 31 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
            align 64 context <function_decl 0x7f5ef1164000 child7> arg-type <pointer_type 0x7f5ef15ed0a8>>>
    struct-function 0x7f5ef11774d0>
 <ssa_name 0x7f5ef11859d8
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
   
    def_stmt _12 = malloc (30);
    version 12
    ptr-info 0x7f5ef1191570>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child7
dot graph target entry end

_4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph target loc start # .MEM_22 = VDEF <.MEM_21>
_12 = malloc (30);
test.c:371:10: warning: use location
   return malloc(30);
          ^
dot graph target loc en1

dot graph target line desc form basic block 5: _4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_22 = VDEF <.MEM_21>
_12 = malloc (30);
test.c:371:10: warning: use location
dot graph target loc end

dot graph target basicblock start from child7 basic block 5dot graph target basicblock en1

_12, points-to NULL, points-to vars: { D.4130 } (nonlocal)
dot graph stmt start _4 = PHI <_15(3), _12(4)>
_12 = malloc (30);
dot graph stmt end

dot graph stmt start _4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:child7========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;44m =======print_function_path child4  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre_check_funciton:child4========= [0m
[40;42m =======start_check_funciton:child4========= [0m
[40;33m =======POP node_fun stack:child4========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo5========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path foo5  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre_check_funciton:foo5========= [0m
[40;42m =======start_check_funciton:foo5========= [0m
[40;33m =======POP node_fun stack:foo5========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:pthread_join========= [0m
[40;33m =======POP node_fun stack:pthread_join========= [0m
[40;42m =======pre add _ fucntion:pthread_create========= [0m
[40;33m =======POP node_fun stack:pthread_create========= [0m
[40;42m =======pre add _ fucntion:pthread_attr_setdetachstate========= [0m
[40;33m =======POP node_fun stack:pthread_attr_setdetachstate========= [0m
[40;42m =======pre add _ fucntion:pthread_attr_init========= [0m
[40;33m =======POP node_fun stack:pthread_attr_init========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m
 <function_decl 0x7f5ef115fb00 main
    type <function_type 0x7f5ef115e7e0
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 449 col 5 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> initial <block 0x7f5ef1176d80>
    result <result_decl 0x7f5ef15dd7f8 D.4101 type <integer_type 0x7f5ef15e65e8 int>
        ignored SI file test.c line 449 col 5 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef115fb00 main>>
    struct-function 0x7f5ef1177840>
 <ssa_name 0x7f5ef1199b40
    type <pointer_type 0x7f5ef116a3f0
        type <record_type 0x7f5ef116a348 adresse TI
            size <integer_cst 0x7f5ef15d2c30 constant 128>
            unit size <integer_cst 0x7f5ef15d2c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5ef116a348 fields <field_decl 0x7f5ef1168130 name> context <translation_unit_decl 0x7f5ef15dd168 test.c>
            pointer_to_this <pointer_type 0x7f5ef116a3f0> chain <type_decl 0x7f5ef11681c8 D.4043>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f5ef1194120 a>
    def_stmt a_51 = malloc (32);
    version 51
    ptr-info 0x7f5ef1191888>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_17 = a_51 + _16;
test.c:466:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _17 = a_51 + _16;
test.c:466:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

a_51, points-to NULL, points-to vars: { D.4134 } (nonlocal)
dot graph stmt start _17 = a_51 + _16;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _17 = a_51 + _16;
test.c:466:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_18 = _17->name;
test.c:466:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _18 = _17->name;
test.c:466:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

a_51, points-to NULL, points-to vars: { D.4134 } (nonlocal)
dot graph stmt start _18 = _17->name;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _18 = _17->name;
test.c:466:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_92 = __printf_chk (1, "%s, %d\n", _18, _14);
dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _92 = __printf_chk (1, "%s, %d\n", _18, _14);
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

a_51, points-to NULL, points-to vars: { D.4134 } (nonlocal)
dot graph stmt start _92 = __printf_chk (1, "%s, %d\n", _18, _14);
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _92 = __printf_chk (1, "%s, %d\n", _18, _14);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f5ef1199b40
    type <pointer_type 0x7f5ef116a3f0
        type <record_type 0x7f5ef116a348 adresse TI
            size <integer_cst 0x7f5ef15d2c30 constant 128>
            unit size <integer_cst 0x7f5ef15d2c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5ef116a348 fields <field_decl 0x7f5ef1168130 name> context <translation_unit_decl 0x7f5ef15dd168 test.c>
            pointer_to_this <pointer_type 0x7f5ef116a3f0> chain <type_decl 0x7f5ef11681c8 D.4043>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f5ef1194120 a>
    def_stmt a_51 = malloc (32);
    version 51
    ptr-info 0x7f5ef1191888>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_13 = a_51 + _12;
test.c:466:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _13 = a_51 + _12;
test.c:466:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

a_51, points-to NULL, points-to vars: { D.4134 } (nonlocal)
dot graph stmt start _13 = a_51 + _12;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _13 = a_51 + _12;
test.c:466:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_14 = _13->nummer;
test.c:466:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _14 = _13->nummer;
test.c:466:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

a_51, points-to NULL, points-to vars: { D.4134 } (nonlocal)
dot graph stmt start _14 = _13->nummer;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _14 = _13->nummer;
test.c:466:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free (a_51);
test.c:463:2: warning: use location
  free(a);
  ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 5: free (a_51);
test.c:463:2: warning: use location
  free(a);
  ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

a_51, points-to NULL, points-to vars: { D.4134 } (nonlocal)
dot graph stmt start free (a_51);
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start free (a_51);
test.c:463:2: warning: use location
  free(a);
  ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (a_51);
test.c:463:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

_9 = a_51 + _8;
test.c:461:4: warning: use location
   a[i].nummer = 123;
    ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _9 = a_51 + _8;
test.c:461:4: warning: use location
   a[i].nummer = 123;
    ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

a_51, points-to NULL, points-to vars: { D.4134 } (nonlocal)
dot graph stmt start _9 = a_51 + _8;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _9 = a_51 + _8;
test.c:461:4: warning: use location
   a[i].nummer = 123;
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_9->nummer = 123;
test.c:461:15: warning: use location
   a[i].nummer = 123;
               ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _9->nummer = 123;
test.c:461:15: warning: use location
   a[i].nummer = 123;
               ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

a_51, points-to NULL, points-to vars: { D.4134 } (nonlocal)
dot graph stmt start _9->nummer = 123;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _9->nummer = 123;
test.c:461:15: warning: use location
   a[i].nummer = 123;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_6 = a_51 + _5;
test.c:460:4: warning: use location
   a[i].name = "Testname";
    ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _6 = a_51 + _5;
test.c:460:4: warning: use location
   a[i].name = "Testname";
    ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

a_51, points-to NULL, points-to vars: { D.4134 } (nonlocal)
dot graph stmt start _6 = a_51 + _5;
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _6 = a_51 + _5;
test.c:460:4: warning: use location
   a[i].name = "Testname";
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_6->name = "Testname";
test.c:460:13: warning: use location
   a[i].name = "Testname";
             ^
dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _6->name = "Testname";
test.c:460:13: warning: use location
   a[i].name = "Testname";
             ^
dot graph target line desend

dot graph target loc start # .MEM_117 = VDEF <.MEM_116(D)>
a_51 = malloc (32);
test.c:456:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

a_51, points-to NULL, points-to vars: { D.4134 } (nonlocal)
dot graph stmt start _6->name = "Testname";
a_51 = malloc (32);
dot graph stmt end

dot graph stmt start _6->name = "Testname";
test.c:460:13: warning: use location
   a[i].name = "Testname";
             ^
dot graph stmt end


 ================== Start Use after free Check ================== 
# .MEM_118 = VDEF <.MEM_109>
free (a_51);
test.c:463:2: warning: Use after free error!: free location 
  free(a);
  ^
_17 = a_51 + _16;
test.c:466:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_118 = VDEF <.MEM_109>
free (a_51);
test.c:463:2: warning: Use after free error!: free location 
  free(a);
  ^
# VUSE <.MEM_110>
_18 = _17->name;
test.c:466:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_118 = VDEF <.MEM_109>
free (a_51);
test.c:463:2: warning: Use after free error!: free location 
  free(a);
  ^
# .MEM_157 = VDEF <.MEM_110>
_92 = __printf_chk (1, "%s, %d\n", _18, _14);

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_118 = VDEF <.MEM_109>
free (a_51);
test.c:463:2: warning: Use after free error!: free location 
_13 = a_51 + _12;
test.c:466:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_118 = VDEF <.MEM_109>
free (a_51);
test.c:463:2: warning: Use after free error!: free location 
  free(a);
  ^
# VUSE <.MEM_110>
_14 = _13->nummer;
test.c:466:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

 <function_decl 0x7f5ef115fb00 main
    type <function_type 0x7f5ef115e7e0
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 449 col 5 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> initial <block 0x7f5ef1176d80>
    result <result_decl 0x7f5ef15dd7f8 D.4101 type <integer_type 0x7f5ef15e65e8 int>
        ignored SI file test.c line 449 col 5 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef115fb00 main>>
    struct-function 0x7f5ef1177840>
 <addr_expr 0x7f5ef1187e00
    type <pointer_type 0x7f5ef11673f0
        type <integer_type 0x7f5ef115e3f0 pthread_t unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 canonical type 0x7f5ef15e6738 precision 64 min <integer_cst 0x7f5ef15d2eb8 0> max <integer_cst 0x7f5ef15d4500 18446744073709551615> context <translation_unit_decl 0x7f5ef15dd168 test.c>
            pointer_to_this <pointer_type 0x7f5ef11673f0>>
        unsigned DI size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f5ef118fe10 t type <integer_type 0x7f5ef115e3f0 pthread_t>
        addressable unsigned DI file test.c line 497 col 12 size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 context <function_decl 0x7f5ef115fb00 main>
        chain <var_decl 0x7f5ef118fd80 t2 type <array_type 0x7f5ef116a0a8>
            addressable BLK file test.c line 497 col 15
            size <integer_cst 0x7f5ef15ee0a8 constant 192>
            unit size <integer_cst 0x7f5ef15ee078 constant 24>
            align 128 context <function_decl 0x7f5ef115fb00 main> chain <var_decl 0x7f5ef118fcf0 q>>>
    test.c:498:2 start: test.c:498:2 finish: test.c:498:2>

dot graph START

======================================================================

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:498:2: warning: use location
  pthread_create(&t, &attr2, child2, input2);
  ^

======================================================================
 <function_decl 0x7f5ef115fb00 main
    type <function_type 0x7f5ef115e7e0
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 449 col 5 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> initial <block 0x7f5ef1176d80>
    result <result_decl 0x7f5ef15dd7f8 D.4101 type <integer_type 0x7f5ef15e65e8 int>
        ignored SI file test.c line 449 col 5 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef115fb00 main>>
    struct-function 0x7f5ef1177840>
 <ssa_name 0x7f5ef11995a0
    type <pointer_type 0x7f5ef11673f0
        type <integer_type 0x7f5ef115e3f0 pthread_t unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 canonical type 0x7f5ef15e6738 precision 64 min <integer_cst 0x7f5ef15d2eb8 0> max <integer_cst 0x7f5ef15d4500 18446744073709551615> context <translation_unit_decl 0x7f5ef15dd168 test.c>
            pointer_to_this <pointer_type 0x7f5ef11673f0>>
        unsigned DI size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _23 = &t2[i_39];
    version 23
    ptr-info 0x7f5ef11917f8>

dot graph START

======================================================================

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start is Pthread Job Collect  

======================================================================
dot graph entry main
dot graph target entry end

_24 = t2[i_39];
test.c:507:3: warning: use location
   printf("%ld\n", t2[i]);
   ^
dot graph target loc start # .MEM_155 = VDEF <.MEM_111>
err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc en1

dot graph target line desc form basic block 9: _24 = t2[i_39];
test.c:507:3: warning: use location
   printf("%ld\n", t2[i]);
   ^
dot graph target line desend

dot graph target loc start # .MEM_155 = VDEF <.MEM_111>
err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 9dot graph target basicblock en1

dot graph stmt start _24 = t2[i_39];
test.c:507:3: warning: use location
   printf("%ld\n", t2[i]);
   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_106 = __printf_chk (1, "%ld\n", _24);
dot graph target loc start # .MEM_155 = VDEF <.MEM_111>
err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc en1

dot graph target line desc form basic block 9: _106 = __printf_chk (1, "%ld\n", _24);
dot graph target line desend

dot graph target loc start # .MEM_155 = VDEF <.MEM_111>
err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 9dot graph target basicblock en1

dot graph stmt start _106 = __printf_chk (1, "%ld\n", _24);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f5ef11995a0
    type <pointer_type 0x7f5ef11673f0
        type <integer_type 0x7f5ef115e3f0 pthread_t unsigned DI
            size <integer_cst 0x7f5ef15d2be8 constant 64>
            unit size <integer_cst 0x7f5ef15d2c00 constant 8>
            align 64 symtab 0 alias set -1 canonical type 0x7f5ef15e6738 precision 64 min <integer_cst 0x7f5ef15d2eb8 0> max <integer_cst 0x7f5ef15d4500 18446744073709551615> context <translation_unit_decl 0x7f5ef15dd168 test.c>
            pointer_to_this <pointer_type 0x7f5ef11673f0>>
        unsigned DI size <integer_cst 0x7f5ef15d2be8 64> unit size <integer_cst 0x7f5ef15d2c00 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _23 = &t2[i_39];
    version 23
    ptr-info 0x7f5ef11917f8>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_28 = t2[i_40];
test.c:532:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph target loc start # .MEM_155 = VDEF <.MEM_111>
err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc en1

dot graph target line desc form basic block 15: _28 = t2[i_40];
test.c:532:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph target line desend

dot graph target loc start # .MEM_155 = VDEF <.MEM_111>
err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start _28 = t2[i_40];
test.c:532:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

pthread_join (_28, 0B);
test.c:532:3: warning: use location
dot graph target loc start # .MEM_155 = VDEF <.MEM_111>
err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc en1

dot graph target line desc form basic block 15: pthread_join (_28, 0B);
test.c:532:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph target line desend

dot graph target loc start # .MEM_155 = VDEF <.MEM_111>
err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start pthread_join (_28, 0B);
test.c:532:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph stmt end

this stmt is child function---pthread_join-----
[40;32m    FIND PTHREAD_JOIN [0m
dot graph entry main
dot graph target entry end

err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc start # .MEM_155 = VDEF <.MEM_111>
err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 9: err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_155 = VDEF <.MEM_111>
err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 9dot graph target basicblock en1

dot graph stmt start err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
dot graph stmt end

this stmt is child function---pthread_create-----

 ================== find ================== 
err_100 = pthread_create (_23, &attr2, child, 0B);
test.c:505:7: warning: use location
[40;32m    FIND PTHREAD_CREATED STMT  [0m

 ================== pre_pthread_detched ================== 
[40;44m =======trace_function_path child  function_call count: 10 level :-1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :-1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :-1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :-1========  [0m
[40;31m  find pthread_detched stmt  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
pthread_detach (_1);
test.c:276:2: warning: use location
  pthread_detach(pthread_self());
  ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :-1========  [0m
[40;31m  find pthread_detched stmt  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
pthread_detach (_1);
test.c:248:2: warning: use location
  pthread_detach(pthread_self());
  ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :-1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :-1========  [0m
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :-1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :-1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m

 ================== pre_pthread_detched end ================== 
[40;44m =======trace_function_path child  function_call count: 10 level :0========  [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
test.c:193:2: warning: use location
  free(pData);
  ^
dot graph start relate form ID : 1444616613
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1780267333 stmt(free) :free (_9);
test.c:193:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1780267333 stmt(free) :free (_9);
test.c:193:2: warning: use location
dot graph relate end

# .MEM_58 = VDEF <.MEM_57>
free (_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_10);
test.c:194:2: warning: use location
  free(data);
  ^
dot graph start relate form ID : 1444616613
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 710352421 stmt(free) :free (_10);
test.c:194:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 710352421 stmt(free) :free (_10);
test.c:194:2: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :1========  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
test.c:416:2: warning: use location
  free(b);
  ^
dot graph start relate form ID : 1812108624
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1152002937 stmt(free) :free (b_2(D));
test.c:416:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1152002937 stmt(free) :free (b_2(D));
test.c:416:2: warning: use location
dot graph relate end

# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:417:2: warning: use location
  free(b);
  ^
dot graph start relate form ID : 1812108624
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 875015523 stmt(free) :free (b_2(D));
test.c:417:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 875015523 stmt(free) :free (b_2(D));
test.c:417:2: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :2========  [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
test.c:432:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 498833728
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1946138699 stmt(free) :free (k_2(D));
test.c:432:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1946138699 stmt(free) :free (k_2(D));
test.c:432:2: warning: use location
dot graph relate end

# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:433:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 498833728
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1992249329 stmt(free) :free (k_2(D));
test.c:433:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1992249329 stmt(free) :free (k_2(D));
test.c:433:2: warning: use location
dot graph relate end

# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:434:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 498833728
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1123341945 stmt(free) :free (k_2(D));
test.c:434:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1123341945 stmt(free) :free (k_2(D));
test.c:434:2: warning: use location
dot graph relate end

# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:435:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 498833728
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 929545377 stmt(free) :free (k_2(D));
test.c:435:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 929545377 stmt(free) :free (k_2(D));
test.c:435:2: warning: use location
dot graph relate end

# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 498833728
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1642731607 stmt(free) :free (k_2(D));
test.c:436:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1642731607 stmt(free) :free (k_2(D));
test.c:436:2: warning: use location
dot graph relate end

# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 498833728
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1418323901 stmt(free) :free (k_2(D));
test.c:437:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1418323901 stmt(free) :free (k_2(D));
test.c:437:2: warning: use location
dot graph relate end

# .MEM_19 = VDEF <.MEM_18>
free (w_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
test.c:439:2: warning: use location
  free(w);
  ^
dot graph start relate form ID : 498833728
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1222617492 stmt(free) :free (w_10);
test.c:439:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1222617492 stmt(free) :free (w_10);
test.c:439:2: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :1========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
test.c:296:3: warning: use location
   free(pData);
   ^
dot graph start relate form ID : 174046643
from child5 basic block 4dot graph end relate end

dot graph relate stmt start ID : 882537571 stmt(free) :free (pData_6);
test.c:296:3: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 882537571 stmt(free) :free (pData_6);
test.c:296:3: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :1========  [0m
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :2========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
[40;31m  find free stmt free same pointer [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
test.c:85:3: warning: use location
   free(p3);
   ^
dot graph start relate form ID : 616221953
from foo2 basic block 3dot graph end relate end

dot graph relate stmt start ID : 264232373 stmt(free) :free (p3_15);
test.c:85:3: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 264232373 stmt(free) :free (p3_15);
test.c:85:3: warning: use location
dot graph relate end

# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;31m  find free stmt free same pointer [0m
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:91:3: warning: use location
   free(p4);
   ^
dot graph start relate form ID : 616221953
from foo2 basic block 4dot graph end relate end

dot graph relate stmt start ID : 61993472 stmt(free) :free (p4_17);
test.c:91:3: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 61993472 stmt(free) :free (p4_17);
test.c:91:3: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :3========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;32m    FIND PTHREAD_CREATED TYPE is CREATE_DETACHED  [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m    pthread is DETACHED and no memory leak  [0m

======================================================================

======================================================================
[40;31m  	possible double free :14 [0m

======================================================================
 <function_decl 0x7f5ef115fb00 main
    type <function_type 0x7f5ef115e7e0
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 449 col 5 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> initial <block 0x7f5ef1176d80>
    result <result_decl 0x7f5ef15dd7f8 D.4101 type <integer_type 0x7f5ef15e65e8 int>
        ignored SI file test.c line 449 col 5 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef115fb00 main>>
    struct-function 0x7f5ef1177840>
 <ssa_name 0x7f5ef1199bd0
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef118fcf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7f5ef11918a0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_31 = foo5 (q_63, q_63);
test.c:552:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 23: _31 = foo5 (q_63, q_63);
test.c:552:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

q_63, points-to NULL, points-to vars: { D.4135 } (nonlocal, escaped, escaped heap)
dot graph stmt start _31 = foo5 (q_63, q_63);
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start _31 = foo5 (q_63, q_63);
test.c:552:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph stmt end

this stmt is child function---foo5-----

 ================== trace ================== 
 <ssa_name 0x7f5ef1199bd0
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef118fcf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7f5ef11918a0>
trace fucntion name:foo5 
[40;44m =======trace_function_path foo5  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:foo5========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

*q_63 = 20;
test.c:524:8: warning: use location
   q[0] = 20;
        ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 14: *q_63 = 20;
test.c:524:8: warning: use location
   q[0] = 20;
        ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

q_63, points-to NULL, points-to vars: { D.4135 } (nonlocal, escaped, escaped heap)
dot graph stmt start *q_63 = 20;
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start *q_63 = 20;
test.c:524:8: warning: use location
   q[0] = 20;
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

*q_63 = 10;
test.c:520:8: warning: use location
   q[0] = 10;
        ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 12: *q_63 = 10;
test.c:520:8: warning: use location
   q[0] = 10;
        ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 12dot graph target basicblock en1

q_63, points-to NULL, points-to vars: { D.4135 } (nonlocal, escaped, escaped heap)
dot graph stmt start *q_63 = 10;
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start *q_63 = 10;
test.c:520:8: warning: use location
   q[0] = 10;
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free (q_63);
test.c:519:3: warning: use location
   free(q);
   ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 12: free (q_63);
test.c:519:3: warning: use location
   free(q);
   ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 12dot graph target basicblock en1

q_63, points-to NULL, points-to vars: { D.4135 } (nonlocal, escaped, escaped heap)
dot graph stmt start free (q_63);
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start free (q_63);
test.c:519:3: warning: use location
   free(q);
   ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (q_63);
test.c:519:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

child (q_63);
test.c:516:3: warning: use location
   child(q);
   ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 12: child (q_63);
test.c:516:3: warning: use location
   child(q);
   ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 12dot graph target basicblock en1

q_63, points-to NULL, points-to vars: { D.4135 } (nonlocal, escaped, escaped heap)
dot graph stmt start child (q_63);
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start child (q_63);
test.c:516:3: warning: use location
   child(q);
   ^
dot graph stmt end

this stmt is child function---child-----

 ================== trace ================== 
 <ssa_name 0x7f5ef1199bd0
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef118fcf0 q>
    def_stmt q_63 = malloc (70);
    version 63
    ptr-info 0x7f5ef11918a0>
trace fucntion name:child 
[40;44m =======trace_function_path child  function_call count: 10 level :0========  [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
test.c:193:2: warning: use location
  free(pData);
  ^
dot graph start relate form ID : 1452563074
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1008261957 stmt(free) :free (_9);
test.c:193:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1008261957 stmt(free) :free (_9);
test.c:193:2: warning: use location
dot graph relate end

# .MEM_58 = VDEF <.MEM_57>
free (_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_10);
test.c:194:2: warning: use location
  free(data);
  ^
dot graph start relate form ID : 1452563074
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 674216883 stmt(free) :free (_10);
test.c:194:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 674216883 stmt(free) :free (_10);
test.c:194:2: warning: use location
dot graph relate end

[40;36m ======= node_fun:child========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1452563074
from child basic block 2dot graph end relate end

In function â€˜childâ€™:
test.c:176:7: warning: use location
  int *pData = data;
       ^
dot graph relate stmt start ID : 19278975 stmt(LHS) :_1 = data;
test.c:176:7: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1452563074
from child basic block 2dot graph end relate end

test.c:178:9: warning: use location
  *pData += 1;
         ^
dot graph relate stmt start ID : 1502340044 stmt(LHS) :_2 = pData;
test.c:178:9: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1452563074
from child basic block 2dot graph end relate end

test.c:178:9: warning: use location
dot graph relate stmt start ID : 607903577 stmt(LHS) :_4 = pData;
test.c:178:9: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1452563074
from child basic block 2dot graph end relate end

test.c:185:9: warning: use location
  *ppData[0] = 10;
         ^
dot graph relate stmt start ID : 1287620879 stmt(LHS) :_6 = pData;
test.c:185:9: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1452563074
from child basic block 2dot graph end relate end

test.c:188:3: warning: use location
  **ppData = 12;
   ^
dot graph relate stmt start ID : 799473010 stmt(LHS) :_7 = pData;
test.c:188:3: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1452563074
from child basic block 2dot graph end relate end

test.c:193:2: warning: use location
  free(pData);
  ^
dot graph relate stmt start ID : 240687262 stmt(LHS) :_9 = pData;
test.c:193:2: warning: use location
_9
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1452563074
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1997973300 stmt(call) :free (_9);
test.c:193:2: warning: use location
_9
dot graph relate end

[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1452563074
from child basic block 2dot graph end relate end

test.c:194:2: warning: use location
  free(data);
  ^
dot graph relate stmt start ID : 464097986 stmt(LHS) :_10 = data;
test.c:194:2: warning: use location
_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1452563074
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1392690199 stmt(call) :free (_10);
test.c:194:2: warning: use location
_10
dot graph relate end

[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1452563074
from child basic block 2dot graph end relate end

test.c:195:2: warning: use location
  boo(data);
  ^
dot graph relate stmt start ID : 725505175 stmt(LHS) :_11 = data;
test.c:195:2: warning: use location
_11
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1452563074
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 962931714 stmt(call) :boo (_11);
test.c:195:2: warning: use location
_11
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :1========  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
In function â€˜mainâ€™:
test.c:416:2: warning: use location
  free(b);
  ^
dot graph start relate form ID : 1191345250
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 570270856 stmt(free) :free (b_2(D));
test.c:416:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 570270856 stmt(free) :free (b_2(D));
test.c:416:2: warning: use location
dot graph relate end

# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:417:2: warning: use location
  free(b);
  ^
dot graph start relate form ID : 1191345250
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 2086273660 stmt(free) :free (b_2(D));
test.c:417:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2086273660 stmt(free) :free (b_2(D));
test.c:417:2: warning: use location
dot graph relate end

[40;36m ======= node_fun:boo========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
dot graph arrowdot graph start relate for1ID : 1191345250
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 2120890627 stmt(call) :free (b_2(D));
In function â€˜booâ€™:
test.c:416:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1191345250
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 65518816 stmt(call) :free (b_2(D));
test.c:417:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1191345250
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1357113913 stmt(call) :test22 (b_2(D));
test.c:418:2: warning: use location
  test22(b);
  ^
b_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :2========  [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
In function â€˜mainâ€™:
test.c:432:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 1196024471
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 239565459 stmt(free) :free (k_2(D));
test.c:432:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 239565459 stmt(free) :free (k_2(D));
test.c:432:2: warning: use location
dot graph relate end

# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:433:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 1196024471
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 92167836 stmt(free) :free (k_2(D));
test.c:433:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 92167836 stmt(free) :free (k_2(D));
test.c:433:2: warning: use location
dot graph relate end

# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:434:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 1196024471
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1772564375 stmt(free) :free (k_2(D));
test.c:434:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1772564375 stmt(free) :free (k_2(D));
test.c:434:2: warning: use location
dot graph relate end

# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:435:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 1196024471
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 721602871 stmt(free) :free (k_2(D));
test.c:435:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 721602871 stmt(free) :free (k_2(D));
test.c:435:2: warning: use location
dot graph relate end

# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 1196024471
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1529536519 stmt(free) :free (k_2(D));
test.c:436:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1529536519 stmt(free) :free (k_2(D));
test.c:436:2: warning: use location
dot graph relate end

# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 1196024471
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 241302680 stmt(free) :free (k_2(D));
test.c:437:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 241302680 stmt(free) :free (k_2(D));
test.c:437:2: warning: use location
dot graph relate end

# .MEM_19 = VDEF <.MEM_18>
free (w_10);
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
dot graph arrowdot graph start relate for1ID : 1196024471
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 985835244 stmt(call) :free (k_2(D));
In function â€˜test22â€™:
test.c:432:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1196024471
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1591529991 stmt(call) :free (k_2(D));
test.c:433:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1196024471
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 518242786 stmt(call) :free (k_2(D));
test.c:434:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1196024471
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 865139402 stmt(call) :free (k_2(D));
test.c:435:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1196024471
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 896609418 stmt(call) :free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1196024471
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1526504743 stmt(call) :free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :1========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;36m ======= node_fun:child5========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :1========  [0m
[40;36m ======= node_fun:child3========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:child4========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 881361140
from child4 basic block 3dot graph end relate end

In function â€˜child4â€™:
test.c:220:11: warning: use location
   *data = *data + 1;
           ^
dot graph relate stmt start ID : 2147259862 stmt(LHS) :_1 = data;
test.c:220:11: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 881361140
from child4 basic block 3dot graph end relate end

test.c:220:3: warning: use location
   *data = *data + 1;
   ^
dot graph relate stmt start ID : 56025624 stmt(LHS) :_3 = data;
test.c:220:3: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 881361140
from child4 basic block 4dot graph end relate end

test.c:223:3: warning: use location
   *data = 2;
   ^
dot graph relate stmt start ID : 1680834150 stmt(LHS) :_5 = data;
test.c:223:3: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 240463476
from foo basic block 2dot graph end relate end

In function â€˜fooâ€™:
test.c:122:8: warning: use location
  p2[0] = 1;
        ^
dot graph relate stmt start ID : 2053998924 stmt(LHS) :*p2_5 = 1;
test.c:122:8: warning: use location
*p2_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :2========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;36m ======= node_fun:foo2========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 2144932136
from foo2 basic block 3dot graph end relate end

In function â€˜foo2â€™:
test.c:84:9: warning: use location
   p3[0] = 10;
         ^
dot graph relate stmt start ID : 1633153675 stmt(LHS) :*p3_15 = 10;
test.c:84:9: warning: use location
*p3_15
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 2144932136
from foo2 basic block 4dot graph end relate end

test.c:90:9: warning: use location
   p4[0] = 10;
         ^
dot graph relate stmt start ID : 632020452 stmt(LHS) :*p4_17 = 10;
test.c:90:9: warning: use location
*p4_17
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
[40;36m ======= relate node_fun argument222:q========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 960380202
from foo3 basic block 5dot graph end relate end

In function â€˜foo3â€™:
test.c:60:8: warning: use location
  p2[0] = 10;
        ^
dot graph relate stmt start ID : 677015277 stmt(LHS) :*p2_4 = 10;
test.c:60:8: warning: use location
*p2_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_25 = q_63 != 0B;
In function â€˜mainâ€™:
test.c:513:9: warning: use location
  if ((q != NULL) && test)
         ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 11: _25 = q_63 != 0B;
test.c:513:9: warning: use location
  if ((q != NULL) && test)
         ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

q_63, points-to NULL, points-to vars: { D.4135 } (nonlocal, escaped, escaped heap)
dot graph stmt start _25 = q_63 != 0B;
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start _25 = q_63 != 0B;
test.c:513:9: warning: use location
  if ((q != NULL) && test)
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_27 = _25 & _26;
test.c:513:18: warning: use location
  if ((q != NULL) && test)
                  ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 11: _27 = _25 & _26;
test.c:513:18: warning: use location
  if ((q != NULL) && test)
                  ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

q_63, points-to NULL, points-to vars: { D.4135 } (nonlocal, escaped, escaped heap)
dot graph stmt start _27 = _25 & _26;
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start _27 = _25 & _26;
test.c:513:18: warning: use location
  if ((q != NULL) && test)
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_27 != 0)
test.c:513:5: warning: use location
  if ((q != NULL) && test)
     ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 11: if (_27 != 0)
test.c:513:5: warning: use location
  if ((q != NULL) && test)
     ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_111>
q_63 = malloc (70);
test.c:509:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

q_63, points-to NULL, points-to vars: { D.4135 } (nonlocal, escaped, escaped heap)
dot graph stmt start if (_27 != 0)
q_63 = malloc (70);
dot graph stmt end

dot graph stmt start if (_27 != 0)
test.c:513:5: warning: use location
  if ((q != NULL) && test)
     ^
dot graph stmt end

if (_27 != 0)

 ================== find cond branch ================= 
if (_27 != 0)
Cond in fucntion main basic block 11
 ================== possiable direct basic block ================= 
from main basic block 12
 ================== possiable direct basic block ================= 
from main basic block 14
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Use after free Check ================== 
# .MEM_133 = VDEF <.MEM_132>
free (q_63);
test.c:519:3: warning: Use after free error!: free location 
   free(q);
   ^
# .MEM_139 = VDEF <.MEM_114>
_31 = foo5 (q_63, q_63);
test.c:552:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_132 = VDEF <.MEM_128>
child (q_63);
test.c:516:3: warning: Use after free error!: free location 
   child(q);
   ^
# .MEM_139 = VDEF <.MEM_114>
_31 = foo5 (q_63, q_63);
test.c:552:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_133 = VDEF <.MEM_132>
free (q_63);
test.c:519:3: warning: Use after free error!: free location 
   free(q);
   ^
# .MEM_129 = VDEF <.MEM_128>
*q_63 = 20;
test.c:524:8: warning: use location
   q[0] = 20;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_132 = VDEF <.MEM_128>
child (q_63);
test.c:516:3: warning: Use after free error!: free location 
   child(q);
   ^
# .MEM_129 = VDEF <.MEM_128>
*q_63 = 20;
test.c:524:8: warning: use location
   q[0] = 20;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_133 = VDEF <.MEM_132>
free (q_63);
test.c:519:3: warning: Use after free error!: free location 
   free(q);
   ^
# .MEM_134 = VDEF <.MEM_133>
*q_63 = 10;
test.c:520:8: warning: use location
   q[0] = 10;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_132 = VDEF <.MEM_128>
child (q_63);
test.c:516:3: warning: Use after free error!: free location 
   child(q);
   ^
# .MEM_134 = VDEF <.MEM_133>
*q_63 = 10;
test.c:520:8: warning: use location
   q[0] = 10;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_132 = VDEF <.MEM_128>
child (q_63);
test.c:516:3: warning: Use after free error!: free location 
   child(q);
   ^
# .MEM_133 = VDEF <.MEM_132>
free (q_63);
test.c:519:3: warning: use location
   free(q);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :11 [0m

======================================================================
 <function_decl 0x7f5ef115fb00 main
    type <function_type 0x7f5ef115e7e0
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 449 col 5 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> initial <block 0x7f5ef1176d80>
    result <result_decl 0x7f5ef15dd7f8 D.4101 type <integer_type 0x7f5ef15e65e8 int>
        ignored SI file test.c line 449 col 5 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef115fb00 main>>
    struct-function 0x7f5ef1177840>
 <ssa_name 0x7f5ef1199c18
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef118fc60 q2>
    def_stmt q2_65 = malloc (20);
    version 65
    ptr-info 0x7f5ef11918b8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

child (q2_65);
test.c:525:3: warning: use location
   child(q2);
   ^
dot graph target loc start # .MEM_128 = VDEF <.MEM_127>
q2_65 = malloc (20);
test.c:510:7: warning: use location
  int *q2 = malloc(20);
       ^
dot graph target loc en1

dot graph target line desc form basic block 14: child (q2_65);
test.c:525:3: warning: use location
   child(q2);
   ^
dot graph target line desend

dot graph target loc start # .MEM_128 = VDEF <.MEM_127>
q2_65 = malloc (20);
test.c:510:7: warning: use location
  int *q2 = malloc(20);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

q2_65, points-to NULL, points-to vars: { D.4136 } (nonlocal, escaped, escaped heap)
dot graph stmt start child (q2_65);
q2_65 = malloc (20);
dot graph stmt end

dot graph stmt start child (q2_65);
test.c:525:3: warning: use location
   child(q2);
   ^
dot graph stmt end

this stmt is child function---child-----

 ================== trace ================== 
 <ssa_name 0x7f5ef1199c18
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef118fc60 q2>
    def_stmt q2_65 = malloc (20);
    version 65
    ptr-info 0x7f5ef11918b8>
trace fucntion name:child 
[40;44m =======trace_function_path child  function_call count: 10 level :0========  [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
test.c:193:2: warning: use location
  free(pData);
  ^
dot graph start relate form ID : 1202291308
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 899170214 stmt(free) :free (_9);
test.c:193:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 899170214 stmt(free) :free (_9);
test.c:193:2: warning: use location
dot graph relate end

# .MEM_58 = VDEF <.MEM_57>
free (_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_10);
test.c:194:2: warning: use location
  free(data);
  ^
dot graph start relate form ID : 1202291308
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 650422256 stmt(free) :free (_10);
test.c:194:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 650422256 stmt(free) :free (_10);
test.c:194:2: warning: use location
dot graph relate end

[40;36m ======= node_fun:child========= [0m
[40;36m ======= find relate stmt with q2 ========= [0m
[40;36m ======= relate stmt argument:q2 ========= [0m
[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1202291308
from child basic block 2dot graph end relate end

In function â€˜childâ€™:
test.c:176:7: warning: use location
  int *pData = data;
       ^
dot graph relate stmt start ID : 1267810124 stmt(LHS) :_1 = data;
test.c:176:7: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1202291308
from child basic block 2dot graph end relate end

test.c:178:9: warning: use location
  *pData += 1;
         ^
dot graph relate stmt start ID : 108800479 stmt(LHS) :_2 = pData;
test.c:178:9: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1202291308
from child basic block 2dot graph end relate end

test.c:178:9: warning: use location
dot graph relate stmt start ID : 1846446727 stmt(LHS) :_4 = pData;
test.c:178:9: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1202291308
from child basic block 2dot graph end relate end

test.c:185:9: warning: use location
  *ppData[0] = 10;
         ^
dot graph relate stmt start ID : 1507375583 stmt(LHS) :_6 = pData;
test.c:185:9: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1202291308
from child basic block 2dot graph end relate end

test.c:188:3: warning: use location
  **ppData = 12;
   ^
dot graph relate stmt start ID : 200968316 stmt(LHS) :_7 = pData;
test.c:188:3: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1202291308
from child basic block 2dot graph end relate end

test.c:193:2: warning: use location
  free(pData);
  ^
dot graph relate stmt start ID : 1471527454 stmt(LHS) :_9 = pData;
test.c:193:2: warning: use location
_9
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1202291308
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 81494807 stmt(call) :free (_9);
test.c:193:2: warning: use location
_9
dot graph relate end

[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1202291308
from child basic block 2dot graph end relate end

test.c:194:2: warning: use location
  free(data);
  ^
dot graph relate stmt start ID : 1730504835 stmt(LHS) :_10 = data;
test.c:194:2: warning: use location
_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1202291308
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1712830135 stmt(call) :free (_10);
test.c:194:2: warning: use location
_10
dot graph relate end

[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1202291308
from child basic block 2dot graph end relate end

test.c:195:2: warning: use location
  boo(data);
  ^
dot graph relate stmt start ID : 1067330051 stmt(LHS) :_11 = data;
test.c:195:2: warning: use location
_11
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1202291308
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1174551179 stmt(call) :boo (_11);
test.c:195:2: warning: use location
_11
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :1========  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
In function â€˜mainâ€™:
test.c:416:2: warning: use location
  free(b);
  ^
dot graph start relate form ID : 83589273
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1932469453 stmt(free) :free (b_2(D));
test.c:416:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1932469453 stmt(free) :free (b_2(D));
test.c:416:2: warning: use location
dot graph relate end

# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:417:2: warning: use location
  free(b);
  ^
dot graph start relate form ID : 83589273
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 2071160597 stmt(free) :free (b_2(D));
test.c:417:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2071160597 stmt(free) :free (b_2(D));
test.c:417:2: warning: use location
dot graph relate end

[40;36m ======= node_fun:boo========= [0m
[40;36m ======= find relate stmt with q2 ========= [0m
[40;36m ======= relate stmt argument:q2 ========= [0m
dot graph arrowdot graph start relate for1ID : 83589273
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1610094016 stmt(call) :free (b_2(D));
In function â€˜booâ€™:
test.c:416:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 83589273
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1324342090 stmt(call) :free (b_2(D));
test.c:417:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 83589273
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 839565342 stmt(call) :test22 (b_2(D));
test.c:418:2: warning: use location
  test22(b);
  ^
b_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :2========  [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
In function â€˜mainâ€™:
test.c:432:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 343971508
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1324118304 stmt(free) :free (k_2(D));
test.c:432:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1324118304 stmt(free) :free (k_2(D));
test.c:432:2: warning: use location
dot graph relate end

# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:433:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 343971508
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 895590966 stmt(free) :free (k_2(D));
test.c:433:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 895590966 stmt(free) :free (k_2(D));
test.c:433:2: warning: use location
dot graph relate end

# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:434:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 343971508
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 2024805658 stmt(free) :free (k_2(D));
test.c:434:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2024805658 stmt(free) :free (k_2(D));
test.c:434:2: warning: use location
dot graph relate end

# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:435:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 343971508
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1564581780 stmt(free) :free (k_2(D));
test.c:435:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1564581780 stmt(free) :free (k_2(D));
test.c:435:2: warning: use location
dot graph relate end

# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 343971508
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 802106242 stmt(free) :free (k_2(D));
test.c:436:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 802106242 stmt(free) :free (k_2(D));
test.c:436:2: warning: use location
dot graph relate end

# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 343971508
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 2022254146 stmt(free) :free (k_2(D));
test.c:437:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2022254146 stmt(free) :free (k_2(D));
test.c:437:2: warning: use location
dot graph relate end

# .MEM_19 = VDEF <.MEM_18>
free (w_10);
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with q2 ========= [0m
[40;36m ======= relate stmt argument:q2 ========= [0m
dot graph arrowdot graph start relate for1ID : 343971508
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1050251807 stmt(call) :free (k_2(D));
In function â€˜test22â€™:
test.c:432:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 343971508
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1434126694 stmt(call) :free (k_2(D));
test.c:433:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 343971508
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 835150701 stmt(call) :free (k_2(D));
test.c:434:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 343971508
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1727267084 stmt(call) :free (k_2(D));
test.c:435:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 343971508
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 488934355 stmt(call) :free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 343971508
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1734320915 stmt(call) :free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :1========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;36m ======= node_fun:child5========= [0m
[40;36m ======= find relate stmt with q2 ========= [0m
[40;36m ======= relate stmt argument:q2 ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :1========  [0m
[40;36m ======= node_fun:child3========= [0m
[40;36m ======= find relate stmt with q2 ========= [0m
[40;36m ======= relate stmt argument:q2 ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:child4========= [0m
[40;36m ======= find relate stmt with q2 ========= [0m
[40;36m ======= relate stmt argument:q2 ========= [0m
[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1843121395
from child4 basic block 3dot graph end relate end

In function â€˜child4â€™:
test.c:220:11: warning: use location
   *data = *data + 1;
           ^
dot graph relate stmt start ID : 2076652420 stmt(LHS) :_1 = data;
test.c:220:11: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1843121395
from child4 basic block 3dot graph end relate end

test.c:220:3: warning: use location
   *data = *data + 1;
   ^
dot graph relate stmt start ID : 1116636415 stmt(LHS) :_3 = data;
test.c:220:3: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1843121395
from child4 basic block 4dot graph end relate end

test.c:223:3: warning: use location
   *data = 2;
   ^
dot graph relate stmt start ID : 2044089711 stmt(LHS) :_5 = data;
test.c:223:3: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with q2 ========= [0m
[40;36m ======= relate stmt argument:q2 ========= [0m
[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1400696226
from foo basic block 2dot graph end relate end

In function â€˜fooâ€™:
test.c:122:8: warning: use location
  p2[0] = 1;
        ^
dot graph relate stmt start ID : 1198131222 stmt(LHS) :*p2_5 = 1;
test.c:122:8: warning: use location
*p2_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :2========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;36m ======= node_fun:foo2========= [0m
[40;36m ======= find relate stmt with q2 ========= [0m
[40;36m ======= relate stmt argument:q2 ========= [0m
[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1627110898
from foo2 basic block 3dot graph end relate end

In function â€˜foo2â€™:
test.c:84:9: warning: use location
   p3[0] = 10;
         ^
dot graph relate stmt start ID : 966042713 stmt(LHS) :*p3_15 = 10;
test.c:84:9: warning: use location
*p3_15
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1627110898
from foo2 basic block 4dot graph end relate end

test.c:90:9: warning: use location
   p4[0] = 10;
         ^
dot graph relate stmt start ID : 117977625 stmt(LHS) :*p4_17 = 10;
test.c:90:9: warning: use location
*p4_17
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with q2 ========= [0m
[40;36m ======= relate stmt argument:q2 ========= [0m
[40;36m ======= relate node_fun argument222:q2========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 654178429
from foo3 basic block 5dot graph end relate end

In function â€˜foo3â€™:
test.c:60:8: warning: use location
  p2[0] = 10;
        ^
dot graph relate stmt start ID : 1049631986 stmt(LHS) :*p2_4 = 10;
test.c:60:8: warning: use location
*p2_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m

 ================== trace ================== 

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :10 [0m

======================================================================
 <function_decl 0x7f5ef115fb00 main
    type <function_type 0x7f5ef115e7e0
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 449 col 5 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> initial <block 0x7f5ef1176d80>
    result <result_decl 0x7f5ef15dd7f8 D.4101 type <integer_type 0x7f5ef15e65e8 int>
        ignored SI file test.c line 449 col 5 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef115fb00 main>>
    struct-function 0x7f5ef1177840>
 <ssa_name 0x7f5ef1199cf0
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef118fb40 data>
    def_stmt data_74 = malloc (400);
    version 74
    ptr-info 0x7f5ef11918d0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

data_41 = PHI <0B(17), data_74(20)>
In function â€˜mainâ€™:
lto1: warning: use location
dot graph target loc start # .MEM_135 = VDEF <.MEM_115>
data_74 = malloc (400);
test.c:539:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc en1

dot graph target line desc form basic block 21: data_41 = PHI <0B(17), data_74(20)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_135 = VDEF <.MEM_115>
data_74 = malloc (400);
test.c:539:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 21dot graph target basicblock en1

data_74, points-to NULL, points-to vars: { D.4137 } (nonlocal)
dot graph stmt start data_41 = PHI <0B(17), data_74(20)>
data_74 = malloc (400);
dot graph stmt end

dot graph stmt start data_41 = PHI <0B(17), data_74(20)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

free (data_41);
test.c:550:3: warning: use location
   free(data);
   ^
dot graph target loc start # .MEM_135 = VDEF <.MEM_115>
data_74 = malloc (400);
test.c:539:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc en1

dot graph target line desc form basic block 22: free (data_41);
test.c:550:3: warning: use location
   free(data);
   ^
dot graph target line desend

dot graph target loc start # .MEM_135 = VDEF <.MEM_115>
data_74 = malloc (400);
test.c:539:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

data_74, points-to NULL, points-to vars: { D.4137 } (nonlocal)
dot graph stmt start free (data_41);
data_74 = malloc (400);
dot graph stmt end

dot graph stmt start free (data_41);
test.c:550:3: warning: use location
   free(data);
   ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (data_41);
test.c:550:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

free (data_74);
test.c:545:3: warning: use location
   free(data);
   ^
dot graph target loc start # .MEM_135 = VDEF <.MEM_115>
data_74 = malloc (400);
test.c:539:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc en1

dot graph target line desc form basic block 20: free (data_74);
test.c:545:3: warning: use location
   free(data);
   ^
dot graph target line desend

dot graph target loc start # .MEM_135 = VDEF <.MEM_115>
data_74 = malloc (400);
test.c:539:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

data_74, points-to NULL, points-to vars: { D.4137 } (nonlocal)
dot graph stmt start free (data_74);
data_74 = malloc (400);
dot graph stmt end

dot graph stmt start free (data_74);
test.c:545:3: warning: use location
   free(data);
   ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (data_74);
test.c:545:3: warning: use location
[40;32m    HAS FREE STMT count:2 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

if (data_74 == 0B)
test.c:540:6: warning: use location
   if (data == NULL)
      ^
dot graph target loc start # .MEM_135 = VDEF <.MEM_115>
data_74 = malloc (400);
test.c:539:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc en1

dot graph target line desc form basic block 18: if (data_74 == 0B)
test.c:540:6: warning: use location
   if (data == NULL)
      ^
dot graph target line desend

dot graph target loc start # .MEM_135 = VDEF <.MEM_115>
data_74 = malloc (400);
test.c:539:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

data_74, points-to NULL, points-to vars: { D.4137 } (nonlocal)
dot graph stmt start if (data_74 == 0B)
data_74 = malloc (400);
dot graph stmt end

dot graph stmt start if (data_74 == 0B)
test.c:540:6: warning: use location
   if (data == NULL)
      ^
dot graph stmt end

if (data_74 == 0B)

 ================== find cond branch ================= 
if (data_74 == 0B)
Cond in fucntion main basic block 18
 ================== possiable direct basic block ================= 
from main basic block 19
 ================== possiable direct basic block ================= 
from main basic block 20
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Use after free Check ================== 
# .MEM_138 = VDEF <.MEM_113>
free (data_41);
test.c:550:3: warning: Use after free error!: free location 
   free(data);
   ^
data_41 = PHI <0B(17), data_74(20)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_136 = VDEF <.MEM_135>
free (data_74);
test.c:545:3: warning: Use after free error!: free location 
   free(data);
   ^
data_41 = PHI <0B(17), data_74(20)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_136 = VDEF <.MEM_135>
free (data_74);
test.c:545:3: warning: Use after free error!: free location 
# .MEM_138 = VDEF <.MEM_113>
free (data_41);
test.c:550:3: warning: use location
   free(data);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================
 <function_decl 0x7f5ef115fb00 main
    type <function_type 0x7f5ef115e7e0
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 449 col 5 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> initial <block 0x7f5ef1176d80>
    result <result_decl 0x7f5ef15dd7f8 D.4101 type <integer_type 0x7f5ef15e65e8 int>
        ignored SI file test.c line 449 col 5 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef115fb00 main>>
    struct-function 0x7f5ef1177840>
 <ssa_name 0x7f5ef1199d80
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef118fab0 p4>
    def_stmt p4_81 = malloc (10);
    version 81
    ptr-info 0x7f5ef11918e8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:554:7: warning: use location
  int *p4 = malloc(10);
       ^

======================================================================
 <function_decl 0x7f5ef115fb00 main
    type <function_type 0x7f5ef115e7e0
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 449 col 5 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> initial <block 0x7f5ef1176d80>
    result <result_decl 0x7f5ef15dd7f8 D.4101 type <integer_type 0x7f5ef15e65e8 int>
        ignored SI file test.c line 449 col 5 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef115fb00 main>>
    struct-function 0x7f5ef1177840>
 <ssa_name 0x7f5ef11998b8
    type <pointer_type 0x7f5ef15ed0a8
        type <void_type 0x7f5ef15e6f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef15ed0a8>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef115e348>>
   
    def_stmt _34 = malloc (201);
    version 34
    ptr-info 0x7f5ef1191828>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

p98 = _34;
test.c:561:6: warning: use location
  p98 = malloc(201);
      ^
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 23: p98 = _34;
test.c:561:6: warning: use location
  p98 = malloc(201);
      ^
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

_34, points-to NULL, points-to vars: { D.4139 } (nonlocal, escaped, escaped heap)
dot graph stmt start p98 = _34;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start p98 = _34;
test.c:561:6: warning: use location
  p98 = malloc(201);
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_2 = p98;
test.c:362:5: warning: use location
  p98[3] = 300;
     ^
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = p98;
test.c:362:5: warning: use location
  p98[3] = 300;
     ^
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

_34, points-to NULL, points-to vars: { D.4139 } (nonlocal, escaped, escaped heap)
dot graph target basicblock star1 from child7 basic block 3dot graph target basicblock end

dot graph stmt start _2 = p98;
_34 = malloc (201);
dot graph stmt end

dot graph target basicblock star1 from child7 basic block 3dot graph target basicblock end

dot graph stmt start _2 = p98;
test.c:362:5: warning: use location
  p98[3] = 300;
     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(int *)_2 + 12B] = 300;
test.c:362:9: warning: use location
  p98[3] = 300;
         ^
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: MEM[(int *)_2 + 12B] = 300;
test.c:362:9: warning: use location
  p98[3] = 300;
         ^
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

_34, points-to NULL, points-to vars: { D.4139 } (nonlocal, escaped, escaped heap)
dot graph target basicblock star1 from child7 basic block 3dot graph target basicblock end

dot graph stmt start MEM[(int *)_2 + 12B] = 300;
_34 = malloc (201);
dot graph stmt end

dot graph target basicblock star1 from child7 basic block 3dot graph target basicblock end

dot graph stmt start MEM[(int *)_2 + 12B] = 300;
test.c:362:9: warning: use location
  p98[3] = 300;
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_3 = p98;
test.c:368:6: warning: use location
   p98[2] = 300;
      ^
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 4: _3 = p98;
test.c:368:6: warning: use location
   p98[2] = 300;
      ^
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

_34, points-to NULL, points-to vars: { D.4139 } (nonlocal, escaped, escaped heap)
dot graph target basicblock star1 from child7 basic block 4dot graph target basicblock end

dot graph stmt start _3 = p98;
_34 = malloc (201);
dot graph stmt end

dot graph target basicblock star1 from child7 basic block 4dot graph target basicblock end

dot graph stmt start _3 = p98;
test.c:368:6: warning: use location
   p98[2] = 300;
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(int *)_3 + 8B] = 300;
test.c:368:10: warning: use location
   p98[2] = 300;
          ^
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 4: MEM[(int *)_3 + 8B] = 300;
test.c:368:10: warning: use location
   p98[2] = 300;
          ^
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

_34, points-to NULL, points-to vars: { D.4139 } (nonlocal, escaped, escaped heap)
dot graph target basicblock star1 from child7 basic block 4dot graph target basicblock end

dot graph stmt start MEM[(int *)_3 + 8B] = 300;
_34 = malloc (201);
dot graph stmt end

dot graph target basicblock star1 from child7 basic block 4dot graph target basicblock end

dot graph stmt start MEM[(int *)_3 + 8B] = 300;
test.c:368:10: warning: use location
   p98[2] = 300;
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_8 = p98;
test.c:192:5: warning: use location
  p98[0] = 98;
     ^
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _8 = p98;
test.c:192:5: warning: use location
  p98[0] = 98;
     ^
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

_34, points-to NULL, points-to vars: { D.4139 } (nonlocal, escaped, escaped heap)
dot graph target basicblock star1 from child basic block 2dot graph target basicblock end

dot graph stmt start _8 = p98;
_34 = malloc (201);
dot graph stmt end

dot graph target basicblock star1 from child basic block 2dot graph target basicblock end

dot graph stmt start _8 = p98;
test.c:192:5: warning: use location
  p98[0] = 98;
     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

*_8 = 98;
test.c:192:9: warning: use location
  p98[0] = 98;
         ^
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: *_8 = 98;
test.c:192:9: warning: use location
  p98[0] = 98;
         ^
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

_34, points-to NULL, points-to vars: { D.4139 } (nonlocal, escaped, escaped heap)
dot graph target basicblock star1 from child basic block 2dot graph target basicblock end

dot graph stmt start *_8 = 98;
_34 = malloc (201);
dot graph stmt end

dot graph target basicblock star1 from child basic block 2dot graph target basicblock end

dot graph stmt start *_8 = 98;
test.c:192:9: warning: use location
  p98[0] = 98;
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_1 = p98;
test.c:388:4: warning: use location
 p98[1] = 99;
    ^
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = p98;
test.c:388:4: warning: use location
 p98[1] = 99;
    ^
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

_34, points-to NULL, points-to vars: { D.4139 } (nonlocal, escaped, escaped heap)
dot graph target basicblock star1 from child2 basic block 2dot graph target basicblock end

dot graph stmt start _1 = p98;
_34 = malloc (201);
dot graph stmt end

dot graph target basicblock star1 from child2 basic block 2dot graph target basicblock end

dot graph stmt start _1 = p98;
test.c:388:4: warning: use location
 p98[1] = 99;
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(int *)_1 + 4B] = 99;
test.c:388:8: warning: use location
 p98[1] = 99;
        ^
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)_1 + 4B] = 99;
test.c:388:8: warning: use location
 p98[1] = 99;
        ^
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

_34, points-to NULL, points-to vars: { D.4139 } (nonlocal, escaped, escaped heap)
dot graph target basicblock star1 from child2 basic block 2dot graph target basicblock end

dot graph stmt start MEM[(int *)_1 + 4B] = 99;
_34 = malloc (201);
dot graph stmt end

dot graph target basicblock star1 from child2 basic block 2dot graph target basicblock end

dot graph stmt start MEM[(int *)_1 + 4B] = 99;
test.c:388:8: warning: use location
 p98[1] = 99;
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_35 = p98;
test.c:562:2: warning: use location
  child(p98);
  ^
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 23: _35 = p98;
test.c:562:2: warning: use location
  child(p98);
  ^
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

_34, points-to NULL, points-to vars: { D.4139 } (nonlocal, escaped, escaped heap)
dot graph stmt start _35 = p98;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start _35 = p98;
test.c:562:2: warning: use location
  child(p98);
  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

child (_35);
test.c:562:2: warning: use location
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 23: child (_35);
test.c:562:2: warning: use location
  child(p98);
  ^
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

_34, points-to NULL, points-to vars: { D.4139 } (nonlocal, escaped, escaped heap)
dot graph stmt start child (_35);
_34 = malloc (201);
dot graph stmt end

dot graph stmt start child (_35);
test.c:562:2: warning: use location
  child(p98);
  ^
dot graph stmt end

this stmt is child function---child-----

 ================== trace ================== 
 <ssa_name 0x7f5ef11998b8
    type <pointer_type 0x7f5ef15ed0a8
        type <void_type 0x7f5ef15e6f18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5ef15ed0a8>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef115e348>>
   
    def_stmt _34 = malloc (201);
    version 34
    ptr-info 0x7f5ef1191828>
trace fucntion name:child 
[40;44m =======trace_function_path child  function_call count: 10 level :0========  [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
test.c:193:2: warning: use location
  free(pData);
  ^
dot graph start relate form ID : 2050447079
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 577855378 stmt(free) :free (_9);
test.c:193:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 577855378 stmt(free) :free (_9);
test.c:193:2: warning: use location
dot graph relate end

# .MEM_58 = VDEF <.MEM_57>
free (_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_10);
test.c:194:2: warning: use location
  free(data);
  ^
dot graph start relate form ID : 2050447079
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 512242355 stmt(free) :free (_10);
test.c:194:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 512242355 stmt(free) :free (_10);
test.c:194:2: warning: use location
dot graph relate end

[40;36m ======= node_fun:child========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 2050447079
from child basic block 2dot graph end relate end

In function â€˜childâ€™:
test.c:176:7: warning: use location
  int *pData = data;
       ^
dot graph relate stmt start ID : 1227305521 stmt(LHS) :_1 = data;
test.c:176:7: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 2050447079
from child basic block 2dot graph end relate end

test.c:178:9: warning: use location
  *pData += 1;
         ^
dot graph relate stmt start ID : 1417420720 stmt(LHS) :_2 = pData;
test.c:178:9: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 2050447079
from child basic block 2dot graph end relate end

test.c:178:9: warning: use location
dot graph relate stmt start ID : 856213863 stmt(LHS) :_4 = pData;
test.c:178:9: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 2050447079
from child basic block 2dot graph end relate end

test.c:185:9: warning: use location
  *ppData[0] = 10;
         ^
dot graph relate stmt start ID : 403940178 stmt(LHS) :_6 = pData;
test.c:185:9: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 2050447079
from child basic block 2dot graph end relate end

test.c:188:3: warning: use location
  **ppData = 12;
   ^
dot graph relate stmt start ID : 165528038 stmt(LHS) :_7 = pData;
test.c:188:3: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 2050447079
from child basic block 2dot graph end relate end

test.c:193:2: warning: use location
  free(pData);
  ^
dot graph relate stmt start ID : 733535874 stmt(LHS) :_9 = pData;
test.c:193:2: warning: use location
_9
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 2050447079
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1968521958 stmt(call) :free (_9);
test.c:193:2: warning: use location
_9
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 2050447079
from child basic block 2dot graph end relate end

test.c:194:2: warning: use location
  free(data);
  ^
dot graph relate stmt start ID : 967634281 stmt(LHS) :_10 = data;
test.c:194:2: warning: use location
_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 2050447079
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 608306372 stmt(call) :free (_10);
test.c:194:2: warning: use location
_10
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 2050447079
from child basic block 2dot graph end relate end

test.c:195:2: warning: use location
  boo(data);
  ^
dot graph relate stmt start ID : 871290118 stmt(LHS) :_11 = data;
test.c:195:2: warning: use location
_11
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 2050447079
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 254277327 stmt(call) :boo (_11);
test.c:195:2: warning: use location
_11
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :1========  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
In function â€˜mainâ€™:
test.c:416:2: warning: use location
  free(b);
  ^
dot graph start relate form ID : 1443457073
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 451073554 stmt(free) :free (b_2(D));
test.c:416:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 451073554 stmt(free) :free (b_2(D));
test.c:416:2: warning: use location
dot graph relate end

# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:417:2: warning: use location
  free(b);
  ^
dot graph start relate form ID : 1443457073
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 743211682 stmt(free) :free (b_2(D));
test.c:417:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 743211682 stmt(free) :free (b_2(D));
test.c:417:2: warning: use location
dot graph relate end

[40;36m ======= node_fun:boo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1443457073
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1030294341 stmt(call) :free (b_2(D));
In function â€˜booâ€™:
test.c:416:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1443457073
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 681279247 stmt(call) :free (b_2(D));
test.c:417:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1443457073
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 352472514 stmt(call) :test22 (b_2(D));
test.c:418:2: warning: use location
  test22(b);
  ^
b_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :2========  [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
In function â€˜mainâ€™:
test.c:432:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 725932088
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 610448019 stmt(free) :free (k_2(D));
test.c:432:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 610448019 stmt(free) :free (k_2(D));
test.c:432:2: warning: use location
dot graph relate end

# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:433:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 725932088
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1469108929 stmt(free) :free (k_2(D));
test.c:433:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1469108929 stmt(free) :free (k_2(D));
test.c:433:2: warning: use location
dot graph relate end

# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:434:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 725932088
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 622538151 stmt(free) :free (k_2(D));
test.c:434:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 622538151 stmt(free) :free (k_2(D));
test.c:434:2: warning: use location
dot graph relate end

# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:435:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 725932088
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 2011144245 stmt(free) :free (k_2(D));
test.c:435:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 2011144245 stmt(free) :free (k_2(D));
test.c:435:2: warning: use location
dot graph relate end

# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 725932088
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 519756503 stmt(free) :free (k_2(D));
test.c:436:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 519756503 stmt(free) :free (k_2(D));
test.c:436:2: warning: use location
dot graph relate end

# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 725932088
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 102165401 stmt(free) :free (k_2(D));
test.c:437:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 102165401 stmt(free) :free (k_2(D));
test.c:437:2: warning: use location
dot graph relate end

# .MEM_19 = VDEF <.MEM_18>
free (w_10);
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph arrowdot graph start relate for1ID : 725932088
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 829703311 stmt(call) :free (k_2(D));
In function â€˜test22â€™:
test.c:432:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 725932088
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 637734128 stmt(call) :free (k_2(D));
test.c:433:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 725932088
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 756343831 stmt(call) :free (k_2(D));
test.c:434:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 725932088
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1879335297 stmt(call) :free (k_2(D));
test.c:435:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 725932088
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 540697559 stmt(call) :free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 725932088
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1334199209 stmt(call) :free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :1========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;36m ======= node_fun:child5========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :1========  [0m
[40;36m ======= node_fun:child3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:child4========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 604136282
from child4 basic block 3dot graph end relate end

In function â€˜child4â€™:
test.c:220:11: warning: use location
   *data = *data + 1;
           ^
dot graph relate stmt start ID : 1100307868 stmt(LHS) :_1 = data;
test.c:220:11: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 604136282
from child4 basic block 3dot graph end relate end

test.c:220:3: warning: use location
   *data = *data + 1;
   ^
dot graph relate stmt start ID : 24459611 stmt(LHS) :_3 = data;
test.c:220:3: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 604136282
from child4 basic block 4dot graph end relate end

test.c:223:3: warning: use location
   *data = 2;
   ^
dot graph relate stmt start ID : 769664320 stmt(LHS) :_5 = data;
test.c:223:3: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1833843742
from foo basic block 2dot graph end relate end

In function â€˜fooâ€™:
test.c:122:8: warning: use location
  p2[0] = 1;
        ^
dot graph relate stmt start ID : 1992981569 stmt(LHS) :*p2_5 = 1;
test.c:122:8: warning: use location
*p2_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :2========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;36m ======= node_fun:foo2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1737298601
from foo2 basic block 3dot graph end relate end

In function â€˜foo2â€™:
test.c:84:9: warning: use location
   p3[0] = 10;
         ^
dot graph relate stmt start ID : 294666466 stmt(LHS) :*p3_15 = 10;
test.c:84:9: warning: use location
*p3_15
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1737298601
from foo2 basic block 4dot graph end relate end

test.c:90:9: warning: use location
   p4[0] = 10;
         ^
dot graph relate stmt start ID : 716788039 stmt(LHS) :*p4_17 = 10;
test.c:90:9: warning: use location
*p4_17
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph arrowdot graph start relate for1ID : 1991575929
from foo3 basic block 5dot graph end relate end

In function â€˜foo3â€™:
test.c:60:8: warning: use location
  p2[0] = 10;
        ^
dot graph relate stmt start ID : 1738123540 stmt(LHS) :*p2_4 = 10;
test.c:60:8: warning: use location
*p2_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_36 = p98;
In function â€˜mainâ€™:
test.c:563:2: warning: use location
  free(p98);
  ^
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 23: _36 = p98;
test.c:563:2: warning: use location
  free(p98);
  ^
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

_34, points-to NULL, points-to vars: { D.4139 } (nonlocal, escaped, escaped heap)
dot graph stmt start _36 = p98;
_34 = malloc (201);
dot graph stmt end

dot graph stmt start _36 = p98;
test.c:563:2: warning: use location
  free(p98);
  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free (_36);
test.c:563:2: warning: use location
dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 23: free (_36);
test.c:563:2: warning: use location
  free(p98);
  ^
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_144>
_34 = malloc (201);
test.c:561:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

_34, points-to NULL, points-to vars: { D.4139 } (nonlocal, escaped, escaped heap)
dot graph stmt start free (_36);
_34 = malloc (201);
dot graph stmt end

dot graph stmt start free (_36);
test.c:563:2: warning: use location
  free(p98);
  ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (_36);
test.c:563:2: warning: use location
[40;32m    HAS FREE STMT count:11 name:free [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 
# .MEM_147 = VDEF <.MEM_146>
child (_35);
test.c:562:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_19>
_2 = p98;
test.c:362:5: warning: use location
  p98[3] = 300;
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_148 = VDEF <.MEM_147>
free (_36);
test.c:563:2: warning: Use after free error!: free location 
  free(p98);
  ^
# VUSE <.MEM_19>
_2 = p98;
test.c:362:5: warning: use location
  p98[3] = 300;
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_147 = VDEF <.MEM_146>
child (_35);
test.c:562:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_23 = VDEF <.MEM_19>
MEM[(int *)_2 + 12B] = 300;
test.c:362:9: warning: use location
  p98[3] = 300;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_148 = VDEF <.MEM_147>
free (_36);
test.c:563:2: warning: Use after free error!: free location 
  free(p98);
  ^
# .MEM_23 = VDEF <.MEM_19>
MEM[(int *)_2 + 12B] = 300;
test.c:362:9: warning: use location
  p98[3] = 300;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_147 = VDEF <.MEM_146>
child (_35);
test.c:562:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_19>
_3 = p98;
test.c:368:6: warning: use location
   p98[2] = 300;
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_148 = VDEF <.MEM_147>
free (_36);
test.c:563:2: warning: Use after free error!: free location 
  free(p98);
  ^
# VUSE <.MEM_19>
_3 = p98;
test.c:368:6: warning: use location
   p98[2] = 300;
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_147 = VDEF <.MEM_146>
child (_35);
test.c:562:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_20 = VDEF <.MEM_19>
MEM[(int *)_3 + 8B] = 300;
test.c:368:10: warning: use location
   p98[2] = 300;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_148 = VDEF <.MEM_147>
free (_36);
test.c:563:2: warning: Use after free error!: free location 
  free(p98);
  ^
# .MEM_20 = VDEF <.MEM_19>
MEM[(int *)_3 + 8B] = 300;
test.c:368:10: warning: use location
   p98[2] = 300;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_147 = VDEF <.MEM_146>
child (_35);
test.c:562:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_55>
_8 = p98;
test.c:192:5: warning: use location
  p98[0] = 98;
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_148 = VDEF <.MEM_147>
free (_36);
test.c:563:2: warning: Use after free error!: free location 
  free(p98);
  ^
# VUSE <.MEM_55>
_8 = p98;
test.c:192:5: warning: use location
  p98[0] = 98;
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_147 = VDEF <.MEM_146>
child (_35);
test.c:562:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_56 = VDEF <.MEM_55>
*_8 = 98;
test.c:192:9: warning: use location
  p98[0] = 98;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_148 = VDEF <.MEM_147>
free (_36);
test.c:563:2: warning: Use after free error!: free location 
  free(p98);
  ^
# .MEM_56 = VDEF <.MEM_55>
*_8 = 98;
test.c:192:9: warning: use location
  p98[0] = 98;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_147 = VDEF <.MEM_146>
child (_35);
test.c:562:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_9(D)>
_1 = p98;
test.c:388:4: warning: use location
 p98[1] = 99;
    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_148 = VDEF <.MEM_147>
free (_36);
test.c:563:2: warning: Use after free error!: free location 
  free(p98);
  ^
# VUSE <.MEM_9(D)>
_1 = p98;
test.c:388:4: warning: use location
 p98[1] = 99;
    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_147 = VDEF <.MEM_146>
child (_35);
test.c:562:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_10 = VDEF <.MEM_9(D)>
MEM[(int *)_1 + 4B] = 99;
test.c:388:8: warning: use location
 p98[1] = 99;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_148 = VDEF <.MEM_147>
free (_36);
test.c:563:2: warning: Use after free error!: free location 
  free(p98);
  ^
# .MEM_10 = VDEF <.MEM_9(D)>
MEM[(int *)_1 + 4B] = 99;
test.c:388:8: warning: use location
 p98[1] = 99;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_147 = VDEF <.MEM_146>
child (_35);
test.c:562:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_147>
_36 = p98;
test.c:563:2: warning: use location
  free(p98);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_147 = VDEF <.MEM_146>
child (_35);
test.c:562:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_148 = VDEF <.MEM_147>
free (_36);
test.c:563:2: warning: use location
  free(p98);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :11 [0m

======================================================================
 <function_decl 0x7f5ef115fb00 main
    type <function_type 0x7f5ef115e7e0
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 449 col 5 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> initial <block 0x7f5ef1176d80>
    result <result_decl 0x7f5ef15dd7f8 D.4101 type <integer_type 0x7f5ef15e65e8 int>
        ignored SI file test.c line 449 col 5 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef115fb00 main>>
    struct-function 0x7f5ef1177840>
 <ssa_name 0x7f5ef11997e0
    type <integer_type 0x7f5ef15e65e8 int public SI
        size <integer_cst 0x7f5ef15d2e28 constant 32>
        unit size <integer_cst 0x7f5ef15d2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
        pointer_to_this <pointer_type 0x7f5ef15eda80>>
   
    def_stmt _31 = foo5 (q_63, q_63);
    version 31>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:foo5 
[40;44m =======trace_function_path foo5  function_call count: 1 level :-100========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---foo5-----
this other function ------foo5-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_108 = __printf_chk (1, "123%d\n", _31);
dot graph target loc start # .MEM_139 = VDEF <.MEM_114>
_31 = foo5 (q_63, q_63);
test.c:552:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target loc en1

dot graph target line desc form basic block 23: _108 = __printf_chk (1, "123%d\n", _31);
dot graph target line desend

dot graph target loc start # .MEM_139 = VDEF <.MEM_114>
_31 = foo5 (q_63, q_63);
test.c:552:2: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

_31, points-to anything
dot graph stmt start _108 = __printf_chk (1, "123%d\n", _31);
_31 = foo5 (q_63, q_63);
dot graph stmt end

[40;44m =======trace_function_path foo5  function_call count: 1 level :0========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
dot graph stmt start _108 = __printf_chk (1, "123%d\n", _31);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f5ef11997e0
    type <integer_type 0x7f5ef15e65e8 int public SI
        size <integer_cst 0x7f5ef15d2e28 constant 32>
        unit size <integer_cst 0x7f5ef15d2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
        pointer_to_this <pointer_type 0x7f5ef15eda80>>
   
    def_stmt _31 = foo5 (q_63, q_63);
    version 31>
trace fucntion name:__printf_chk 

 ================== trace ================== 

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f5ef115fb00 main
    type <function_type 0x7f5ef115e7e0
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 449 col 5 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> initial <block 0x7f5ef1176d80>
    result <result_decl 0x7f5ef15dd7f8 D.4101 type <integer_type 0x7f5ef15e65e8 int>
        ignored SI file test.c line 449 col 5 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef115fb00 main>>
    struct-function 0x7f5ef1177840>
 <ssa_name 0x7f5ef1199dc8
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
    var <var_decl 0x7f5ef118fab0 p4>
    def_stmt p4_84 = child7 (_33, 1B);
    version 84
    ptr-info 0x7f5ef1191900>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:child7 
[40;44m =======trace_function_path child7  function_call count: 4 level :-100========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_17>
return _4;
lto1: warning: use location
dot graph start relate form ID : 620934233
from child7 basic block 5dot graph end relate end

dot graph relate stmt start ID : 1849140841 stmt(return) :return _4;
lto1: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---child7-----
this other function ------child7-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

free (p4_84);
test.c:560:2: warning: use location
  free(p4);
  ^
dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
p4_84 = child7 (_33, 1B);
test.c:559:5: warning: use location
  p4 = child7(test, p4);
     ^
dot graph target loc en1

dot graph target line desc form basic block 23: free (p4_84);
test.c:560:2: warning: use location
  free(p4);
  ^
dot graph target line desend

dot graph target loc start # .MEM_143 = VDEF <.MEM_142>
p4_84 = child7 (_33, 1B);
test.c:559:5: warning: use location
  p4 = child7(test, p4);
     ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

p4_84, points-to NULL, points-to vars: { D.4129 D.4130 } (nonlocal)
dot graph stmt start free (p4_84);
p4_84 = child7 (_33, 1B);
dot graph stmt end

[40;44m =======trace_function_path child7  function_call count: 4 level :0========  [0m
[40;36m ======= node_fun:child7========= [0m
[40;36m ======= find relate stmt with p4 ========= [0m
[40;36m ======= relate stmt argument:p4 ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
dot graph stmt start free (p4_84);
test.c:560:2: warning: use location
  free(p4);
  ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (p4_84);
test.c:560:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

 <function_decl 0x7f5ef115fb00 main
    type <function_type 0x7f5ef115e7e0
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        QI
        size <integer_cst 0x7f5ef15d2cd8 constant 8>
        unit size <integer_cst 0x7f5ef15d2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 449 col 5 align 8 context <translation_unit_decl 0x7f5ef15dd168 test.c> initial <block 0x7f5ef1176d80>
    result <result_decl 0x7f5ef15dd7f8 D.4101 type <integer_type 0x7f5ef15e65e8 int>
        ignored SI file test.c line 449 col 5 size <integer_cst 0x7f5ef15d2e28 32> unit size <integer_cst 0x7f5ef15d2e40 4>
        align 32 context <function_decl 0x7f5ef115fb00 main>>
    struct-function 0x7f5ef1177840>
 <ssa_name 0x7f5ef1199900
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
   
    def_stmt _35 = p98;
    version 35
    ptr-info 0x7f5ef1191840>

dot graph START

======================================================================

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

child (_35);
test.c:562:2: warning: use location
  child(p98);
  ^
dot graph target loc start # .MEM_147 = VDEF <.MEM_146>
child (_35);
test.c:562:2: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 23: child (_35);
test.c:562:2: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_147 = VDEF <.MEM_146>
child (_35);
test.c:562:2: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start child (_35);
test.c:562:2: warning: use location
dot graph stmt end

this stmt is child function---child-----

 ================== trace ================== 
 <ssa_name 0x7f5ef1199900
    type <pointer_type 0x7f5ef15eda80
        type <integer_type 0x7f5ef15e65e8 int public SI
            size <integer_cst 0x7f5ef15d2e28 constant 32>
            unit size <integer_cst 0x7f5ef15d2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f5ef15e65e8 precision 32 min <integer_cst 0x7f5ef15d2de0 -2147483648> max <integer_cst 0x7f5ef15d2df8 2147483647>
            pointer_to_this <pointer_type 0x7f5ef15eda80>>
        public unsigned DI
        size <integer_cst 0x7f5ef15d2be8 constant 64>
        unit size <integer_cst 0x7f5ef15d2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5ef116b738>>
   
    def_stmt _35 = p98;
    version 35
    ptr-info 0x7f5ef1191840>
trace fucntion name:child 
[40;44m =======trace_function_path child  function_call count: 10 level :0========  [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
test.c:193:2: warning: use location
  free(pData);
  ^
dot graph start relate form ID : 1346866321
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 312105212 stmt(free) :free (_9);
test.c:193:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 312105212 stmt(free) :free (_9);
test.c:193:2: warning: use location
dot graph relate end

# .MEM_58 = VDEF <.MEM_57>
free (_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_10);
test.c:194:2: warning: use location
  free(data);
  ^
dot graph start relate form ID : 1346866321
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 261401758 stmt(free) :free (_10);
test.c:194:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 261401758 stmt(free) :free (_10);
test.c:194:2: warning: use location
dot graph relate end

[40;36m ======= node_fun:child========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

In function â€˜childâ€™:
test.c:176:7: warning: use location
  int *pData = data;
       ^
dot graph relate stmt start ID : 1969404472 stmt(LHS) :_1 = data;
test.c:176:7: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

test.c:178:9: warning: use location
  *pData += 1;
         ^
dot graph relate stmt start ID : 175765809 stmt(LHS) :_2 = pData;
test.c:178:9: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

test.c:178:9: warning: use location
dot graph relate stmt start ID : 781158261 stmt(LHS) :_4 = pData;
test.c:178:9: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

test.c:185:9: warning: use location
  *ppData[0] = 10;
         ^
dot graph relate stmt start ID : 2071569873 stmt(LHS) :_6 = pData;
test.c:185:9: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

test.c:188:3: warning: use location
  **ppData = 12;
   ^
dot graph relate stmt start ID : 1005469120 stmt(LHS) :_7 = pData;
test.c:188:3: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1418892390 stmt(call) :child4 (&data);
test.c:189:2: warning: use location
  child4(&data);
  ^
&data
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 680430056 stmt(call) :child3 (&data);
test.c:190:2: warning: use location
  child3(&data);
  ^
&data
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 737320770 stmt(call) :child5 (pData2_21);
test.c:191:2: warning: use location
  child5(pData2);
  ^
pData2_21
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

test.c:193:2: warning: use location
  free(pData);
  ^
dot graph relate stmt start ID : 1959589949 stmt(LHS) :_9 = pData;
test.c:193:2: warning: use location
_9
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 2014629266 stmt(call) :free (_9);
test.c:193:2: warning: use location
_9
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

test.c:194:2: warning: use location
  free(data);
  ^
dot graph relate stmt start ID : 981414774 stmt(LHS) :_10 = data;
test.c:194:2: warning: use location
_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1580109382 stmt(call) :free (_10);
test.c:194:2: warning: use location
_10
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

test.c:195:2: warning: use location
  boo(data);
  ^
dot graph relate stmt start ID : 471281900 stmt(LHS) :_11 = data;
test.c:195:2: warning: use location
_11
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1346866321
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 2081722642 stmt(call) :boo (_11);
test.c:195:2: warning: use location
_11
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :1========  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
In function â€˜mainâ€™:
test.c:416:2: warning: use location
  free(b);
  ^
dot graph start relate form ID : 1604568993
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1240946220 stmt(free) :free (b_2(D));
test.c:416:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1240946220 stmt(free) :free (b_2(D));
test.c:416:2: warning: use location
dot graph relate end

# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:417:2: warning: use location
  free(b);
  ^
dot graph start relate form ID : 1604568993
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1768082736 stmt(free) :free (b_2(D));
test.c:417:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1768082736 stmt(free) :free (b_2(D));
test.c:417:2: warning: use location
dot graph relate end

[40;36m ======= node_fun:boo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1604568993
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1450066915 stmt(call) :free (b_2(D));
In function â€˜booâ€™:
test.c:416:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1604568993
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 830761174 stmt(call) :free (b_2(D));
test.c:417:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1604568993
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 2062749203 stmt(call) :test22 (b_2(D));
test.c:418:2: warning: use location
  test22(b);
  ^
b_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :2========  [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
In function â€˜mainâ€™:
test.c:432:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 674853455 stmt(free) :free (k_2(D));
test.c:432:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 674853455 stmt(free) :free (k_2(D));
test.c:432:2: warning: use location
dot graph relate end

# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:433:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1653389095 stmt(free) :free (k_2(D));
test.c:433:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1653389095 stmt(free) :free (k_2(D));
test.c:433:2: warning: use location
dot graph relate end

# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:434:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1187232900 stmt(free) :free (k_2(D));
test.c:434:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1187232900 stmt(free) :free (k_2(D));
test.c:434:2: warning: use location
dot graph relate end

# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:435:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1262157418 stmt(free) :free (k_2(D));
test.c:435:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1262157418 stmt(free) :free (k_2(D));
test.c:435:2: warning: use location
dot graph relate end

# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 126839680 stmt(free) :free (k_2(D));
test.c:436:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 126839680 stmt(free) :free (k_2(D));
test.c:436:2: warning: use location
dot graph relate end

# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
dot graph start relate form ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 888890093 stmt(free) :free (k_2(D));
test.c:437:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 888890093 stmt(free) :free (k_2(D));
test.c:437:2: warning: use location
dot graph relate end

# .MEM_19 = VDEF <.MEM_18>
free (w_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
test.c:439:2: warning: use location
  free(w);
  ^
dot graph start relate form ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 54450248 stmt(free) :free (w_10);
test.c:439:2: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 54450248 stmt(free) :free (w_10);
test.c:439:2: warning: use location
dot graph relate end

[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph arrowdot graph start relate for1ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1473706001 stmt(call) :free (k_2(D));
In function â€˜test22â€™:
test.c:432:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1200995305 stmt(call) :free (k_2(D));
test.c:433:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 315852006 stmt(call) :free (k_2(D));
test.c:434:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1295626825 stmt(call) :free (k_2(D));
test.c:435:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1376761115 stmt(call) :free (k_2(D));
test.c:436:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1097010268 stmt(call) :free (k_2(D));
test.c:437:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph arrowdot graph start relate for1ID : 19371306
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1219713050 stmt(call) :free (w_10);
test.c:439:2: warning: use location
  free(w);
  ^
w_10
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :1========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
In function â€˜mainâ€™:
test.c:296:3: warning: use location
   free(pData);
   ^
dot graph start relate form ID : 234746587
from child5 basic block 4dot graph end relate end

dot graph relate stmt start ID : 368419010 stmt(free) :free (pData_6);
test.c:296:3: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 368419010 stmt(free) :free (pData_6);
test.c:296:3: warning: use location
dot graph relate end

[40;36m ======= node_fun:child5========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 234746587
from child5 basic block 2dot graph end relate end

In function â€˜child5â€™:
test.c:279:8: warning: use location
  pData = pData + 1;
        ^
dot graph relate stmt start ID : 1900143107 stmt(LHS) :pData_6 = data_5(D) + 4;
test.c:279:8: warning: use location
pData_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 234746587
from child5 basic block 4dot graph end relate end

dot graph relate stmt start ID : 972067357 stmt(call) :free (pData_6);
test.c:296:3: warning: use location
   free(pData);
   ^
pData_6
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :1========  [0m
[40;36m ======= node_fun:child3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:child4========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1767288725
from child4 basic block 3dot graph end relate end

In function â€˜child4â€™:
test.c:220:11: warning: use location
   *data = *data + 1;
           ^
dot graph relate stmt start ID : 1953482132 stmt(LHS) :_1 = data;
test.c:220:11: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1767288725
from child4 basic block 3dot graph end relate end

test.c:220:3: warning: use location
   *data = *data + 1;
   ^
dot graph relate stmt start ID : 1760634694 stmt(LHS) :_3 = data;
test.c:220:3: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1767288725
from child4 basic block 4dot graph end relate end

test.c:223:3: warning: use location
   *data = 2;
   ^
dot graph relate stmt start ID : 91086977 stmt(LHS) :_5 = data;
test.c:223:3: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this is fucntion return value is heap-object 
foo this is fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :2========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
[40;31m  find free stmt free same pointer [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
In function â€˜mainâ€™:
test.c:85:3: warning: use location
   free(p3);
   ^
dot graph start relate form ID : 1217720039
from foo2 basic block 3dot graph end relate end

dot graph relate stmt start ID : 1332033197 stmt(free) :free (p3_15);
test.c:85:3: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1332033197 stmt(free) :free (p3_15);
test.c:85:3: warning: use location
dot graph relate end

# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;31m  find free stmt free same pointer [0m
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:91:3: warning: use location
   free(p4);
   ^
dot graph start relate form ID : 1217720039
from foo2 basic block 4dot graph end relate end

dot graph relate stmt start ID : 1508320215 stmt(free) :free (p4_17);
test.c:91:3: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1508320215 stmt(free) :free (p4_17);
test.c:91:3: warning: use location
dot graph relate end

[40;36m ======= node_fun:foo2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph arrowdot graph start relate for1ID : 1217720039
from foo2 basic block 2dot graph end relate end

dot graph relate stmt start ID : 520303306 stmt(call) :foo3 (p3_15);
In function â€˜foo2â€™:
test.c:79:2: warning: use location
  foo3(p3);
  ^
p3_15
dot graph relate end

dot graph arrowdot graph start relate for1ID : 1217720039
from foo2 basic block 3dot graph end relate end

dot graph relate stmt start ID : 15310723 stmt(call) :free (p3_15);
test.c:85:3: warning: use location
   free(p3);
   ^
p3_15
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1217720039
from foo2 basic block 3dot graph end relate end

test.c:86:10: warning: use location
   return p3;
          ^
dot graph relate stmt start ID : 1423585770 stmt(LHS) :_33 = p3_15;
test.c:86:10: warning: use location
_33
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 1217720039
from foo2 basic block 4dot graph end relate end

dot graph relate stmt start ID : 539674613 stmt(call) :free (p4_17);
test.c:91:3: warning: use location
   free(p4);
   ^
p4_17
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph arrowdot graph start relate for1ID : 1217720039
from foo2 basic block 4dot graph end relate end

test.c:92:10: warning: use location
   return p4;
          ^
dot graph relate stmt start ID : 690164178 stmt(LHS) :_29 = p4_17;
test.c:92:10: warning: use location
_29
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m

 ================== trace ================== 

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :14 [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 24
 [0m
[40;34m    used_stmt array stack totalsize of : 656
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
algorithm time: 0.052815 s
=======Mapping node_fun:foo5=========
<bb 2> [100.00%]:
_1 = *z_4(D);
_8 = __printf_chk (1, "test1%d\n", _1);
_2 = *y_5(D);
_7 = __printf_chk (1, "test2%d\n", _2);
_6 = __printf_chk (1, "test3%d\n", 10);
return 10;

=======is loop:0=========
=======Mapping node_fun:foo3=========
<bb 2> [100.00%]:
if (test_6(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_1 = malloc (1);
_2 = (long int) _1;
_3 = (int) _2;
*z_11(D) = _3;
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
p2_9 = malloc (2);

=======is loop:0=========
<bb 5> [100.00%]:
# p2_4 = PHI <p2_13(D)(3), p2_9(4)>
*p2_4 = 10;
_15 = __printf_chk (1, "%d", p2_4);
return;

=======is loop:0=========
=======Mapping node_fun:foo2=========
<bb 2> [100.00%]:
_1 = (long unsigned int) z_10(D);
a2_13 = malloc (_1);
_2 = (long unsigned int) z_10(D);
p3_15 = malloc (_2);
_3 = (long unsigned int) z_10(D);
p4_17 = malloc (_3);
_4 = malloc (200);
p99 = _4;
_5 = p99;
*_5 = 99;
_6 = p99;
MEM[(int *)_6 + 4B] = 100;
pthread_mutex_lock (&mLock);
pthread_mutex_lock (&mLock2);
pthread_mutex_lock (&mLock3);
foo3 (p3_15);
if (tmp_26(D) > 10)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_7 = p99;
MEM[(int *)_7 + 4B] = 200;
*p3_15 = 10;
free (p3_15);
_33 = p3_15;
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
*p4_17 = 10;
free (p4_17);
_29 = p4_17;

=======is loop:0=========
<bb 5> [100.00%]:
# _8 = PHI <p3_15(3), p4_17(4)>
return _8;

=======is loop:0=========
=======Mapping node_fun:foo=========
<bb 2> [100.00%]:
p2_5 = malloc (1);
*p2_5 = 1;
_1 = p99;
MEM[(int *)_1 + 4B] = 1000;
_2 = p99;
MEM[(int *)_2 + 8B] = 200;
_11 = foo2 (z_9(D));
return _11;

=======is loop:0=========
=======Mapping node_fun:child4=========
<bb 2> [100.00%]:
if (t_7(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_1 = data;
_2 = *_1;
_3 = data;
_4 = _2 + 1;
*_3 = _4;
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
_5 = data;
*_5 = 2;

=======is loop:0=========
<bb 5> [100.00%]:
_11 = __printf_chk (1, "asdda%d\n", &data);
return;

=======is loop:0=========
=======Mapping node_fun:child3=========
<bb 2> [100.00%]:
_1 = pthread_self ();
pthread_detach (_1);
_6 = __printf_chk (1, "asdda%d\n", &MEM[(void *)&data + 4B]);
_5 = __printf_chk (1, "asdda%d\n", 10);
free (&data);
return;

=======is loop:0=========
=======Mapping node_fun:child5=========
<bb 2> [100.00%]:
_1 = pthread_self ();
pthread_detach (_1);
pData_6 = data_5(D) + 4;
if (c_7(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_9 = __printf_chk (1, "asdda%d\n", pData_6);
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
_10 = __printf_chk (1, "asdda%d\n", c_7(D));
free (pData_6);

=======is loop:0=========
<bb 5> [100.00%]:
return;

=======is loop:0=========
=======Mapping node_fun:child7=========
<bb 2> [100.00%]:
_1 = pthread_self ();
pthread_detach (_1);
if (c_9(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_2 = p98;
MEM[(int *)_2 + 12B] = 300;
_15 = malloc (10);
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
_3 = p98;
MEM[(int *)_3 + 8B] = 300;
_16 = __printf_chk (1, "asdda%d\n", c_9(D));
_12 = malloc (30);

=======is loop:0=========
<bb 5> [100.00%]:
# _4 = PHI <_15(3), _12(4)>
return _4;

=======is loop:0=========
=======Mapping node_fun:boo=========
<bb 2> [100.00%]:
free (b_2(D));
free (b_2(D));
test22 (b_2(D));
_6 = __printf_chk (1, "asdda\n");
return;

=======is loop:0=========
=======Mapping node_fun:test22=========
<bb 2> [100.00%]:
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
w_10 = malloc (5);
free (w_10);
return;

=======is loop:0=========
=======Mapping node_fun:child=========
<bb 2> [100.00%]:
pthread_mutex_lock (&mLock);
pthread_mutex_lock (&mLock);
a99_16 = foo (20);
_38 = __printf_chk (1, "asdda%d\n", a99_16);
ppData_18 = malloc (10);
_1 = data;
pData = _1;
pData2_21 = malloc (10);
_2 = pData;
_3 = *_2;
_4 = pData;
_5 = _3 + 1;
*_4 = _5;
data2 = 0;
data = 10B;
pData = &data2;
_6 = pData;
*_6 = 10;
_7 = pData;
*_7 = 12;
child4 (&data);
child3 (&data);
child5 (pData2_21);
_8 = p98;
*_8 = 98;
_9 = pData;
free (_9);
_10 = data;
free (_10);
_11 = data;
boo (_11);
free (&pData);
pthread_mutex_unlock (&mLock);
free (&pData);
pData ={v} {CLOBBER};
data2 ={v} {CLOBBER};
return;

=======is loop:0=========
=======Mapping node_fun:child2=========
<bb 2> [100.00%]:
_1 = p98;
MEM[(int *)_1 + 4B] = 99;
_2 = data_8(D);
child3 (_2);
_3 = data_8(D);
free (_3);
return;

=======is loop:0=========
=======Mapping node_fun:main=========
<bb 2> [25.00%]:
size_79 = 2;
_1 = 2;
_2 = 2;
_3 = 32;
a_51 = malloc (32);
goto <bb 4>; [100.00%]

=======is loop:0=========
<bb 3> [50.01%]:
_4 = (long unsigned int) i_37;
_5 = _4 * 16;
_6 = a_51 + _5;
_6->name = "Testname";
_7 = (long unsigned int) i_37;
_8 = _7 * 16;
_9 = a_51 + _8;
_9->nummer = 123;
i_105 = i_37 + 1;

=======is loop:1=========
<bb 4> [75.01%]:
# i_37 = PHI <0(2), i_105(3)>
_10 = 2;
if (i_37 <= 1)
  goto <bb 3>; [66.67%]
else
  goto <bb 5>; [33.33%]

=======is loop:1=========
<bb 5> [25.00%]:
free (a_51);
goto <bb 7>; [100.00%]

=======is loop:0=========
<bb 6> [50.01%]:
_11 = (long unsigned int) i_38;
_12 = _11 * 16;
_13 = a_51 + _12;
_14 = _13->nummer;
_15 = (long unsigned int) i_38;
_16 = _15 * 16;
_17 = a_51 + _16;
_18 = _17->name;
_92 = __printf_chk (1, "%s, %d\n", _18, _14);
i_102 = i_38 + 1;

=======is loop:1=========
<bb 7> [75.01%]:
# i_38 = PHI <0(5), i_102(6)>
_19 = 2;
if (i_38 <= 1)
  goto <bb 6>; [66.67%]
else
  goto <bb 8>; [33.33%]

=======is loop:1=========
<bb 8> [25.00%]:
input[0] = 1;
input[1] = 2;
pthread_attr_init (&attr);
pthread_attr_init (&attr2);
pthread_attr_setdetachstate (&attr, 1);
pthread_attr_setdetachstate (&attr2, 0);
_20 = (long int) input2_59(D);
_21 = (void *) _20;
pthread_create (&t, &attr2, child2, _21);
_22 = t;
pthread_join (_22, 0B);
goto <bb 10>; [100.00%]

=======is loop:0=========
<bb 9> [75.00%]:
_23 = &t2[i_39];
err_100 = pthread_create (_23, &attr2, child, 0B);
_24 = t2[i_39];
_106 = __printf_chk (1, "%ld\n", _24);
i_101 = i_39 + 1;

=======is loop:1=========
<bb 10> [100.00%]:
# i_39 = PHI <0(8), i_101(9)>
if (i_39 <= 2)
  goto <bb 9>; [75.00%]
else
  goto <bb 11>; [25.00%]

=======is loop:1=========
<bb 11> [25.00%]:
q_63 = malloc (70);
q2_65 = malloc (20);
_25 = q_63 != 0B;
_26 = test_66(D) != 0;
_27 = _25 & _26;
if (_27 != 0)
  goto <bb 12>; [50.00%]
else
  goto <bb 14>; [50.00%]

=======is loop:0=========
<bb 12> [12.50%]:
child (q_63);
free (q_63);
*q_63 = 10;

=======is loop:0=========
<bb 13> [25.00%]:
# i_45 = PHI <0(12), 0(14)>
goto <bb 16>; [100.00%]

=======is loop:0=========
<bb 14> [12.50%]:
*q_63 = 20;
child (q2_65);
_107 = __printf_chk (1, "test\n");
goto <bb 13>; [100.00%]

=======is loop:0=========
<bb 15> [75.00%]:
_28 = t2[i_40];
pthread_join (_28, 0B);
i_98 = i_40 + 1;

=======is loop:1=========
<bb 16> [100.00%]:
# i_40 = PHI <i_45(13), i_98(15)>
if (i_40 <= 2)
  goto <bb 15>; [75.00%]
else
  goto <bb 17>; [25.00%]

=======is loop:1=========
<bb 17> [25.00%]:
_29 = staticTrue;
if (_29 != 0)
  goto <bb 18>; [33.00%]
else
  goto <bb 21>; [67.00%]

=======is loop:0=========
<bb 18> [8.25%]:
data_74 = malloc (400);
if (data_74 == 0B)
  goto <bb 19>; [0.04%]
else
  goto <bb 20>; [99.96%]

=======is loop:0=========
<bb 19> [0.00%]:
exit (-1);

=======is loop:0=========
<bb 20> [8.25%]:
free (data_74);

=======is loop:0=========
<bb 21> [25.00%]:
# data_41 = PHI <0B(17), data_74(20)>
_30 = staticTrue;
if (_30 != 0)
  goto <bb 22>; [36.64%]
else
  goto <bb 23>; [63.36%]

=======is loop:0=========
<bb 22> [9.16%]:
free (data_41);

=======is loop:0=========
<bb 23> [25.00%]:
_31 = foo5 (q_63, q_63);
_108 = __printf_chk (1, "123%d\n", _31);
p4_81 = malloc (10);
child4 (1B);
_32 = (long int) test_66(D);
_33 = (void *) _32;
p4_84 = child7 (_33, 1B);
free (p4_84);
_34 = malloc (201);
p98 = _34;
_35 = p98;
child (_35);
_36 = p98;
free (_36);
input ={v} {CLOBBER};
attr ={v} {CLOBBER};
attr2 ={v} {CLOBBER};
t ={v} {CLOBBER};
t2 ={v} {CLOBBER};
return 0;

=======is loop:0=========
time: 0.055442 s
test.c: In function â€˜child3â€™:
test.c:262:2: warning: attempt to free a non-heap object â€˜dataâ€™ [-Wfree-nonheap-object]
  free(&data);
  ^
test.c: In function â€˜childâ€™:
test.c:193:2: warning: attempt to free a non-heap object â€˜data2â€™ [-Wfree-nonheap-object]
  free(pData);
  ^
test.c:196:2: warning: attempt to free a non-heap object â€˜pDataâ€™ [-Wfree-nonheap-object]
  free(ppData);
  ^
test.c:198:2: warning: attempt to free a non-heap object â€˜pDataâ€™ [-Wfree-nonheap-object]
  free(ppData);
  ^
