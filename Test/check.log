In file included from test.c:10:0:
git.h: In function ‘copy_array’:
git.h:161:3: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
   memcpy(dst, src, st_mult(size, n));
   ^~~~~~
git.h:161:3: warning: incompatible implicit declaration of built-in function ‘memcpy’
git.h:161:3: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
git.h:161:20: warning: implicit declaration of function ‘st_mult’; did you mean ‘stdout’? [-Wimplicit-function-declaration]
   memcpy(dst, src, st_mult(size, n));
                    ^~~~~~~
                    stdout
git.h: In function ‘move_array’:
git.h:169:3: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
   memmove(dst, src, st_mult(size, n));
   ^~~~~~~
git.h:169:3: warning: incompatible implicit declaration of built-in function ‘memmove’
git.h:169:3: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from test.c:9:0:
git.h: In function ‘xstrdup_or_null’:
stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
 #define xstrdup(a) strdup(a)
                    ^
git.h:174:15: note: in expansion of macro ‘xstrdup’
  return str ? xstrdup(str) : NULL;
               ^~~~~~~
stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’
 #define xstrdup(a) strdup(a)
                    ^
git.h:174:15: note: in expansion of macro ‘xstrdup’
  return str ? xstrdup(str) : NULL;
               ^~~~~~~
In file included from test.c:10:0:
git.h: At top level:
git.h:236:55: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  int (*write_archive)(const struct archiver *, struct archiver_args *);
                                                       ^~~~~~~~~~~~~
git.h: In function ‘strbuf_swap’:
git.h:126:2: warning: incompatible implicit declaration of built-in function ‘memcpy’
  memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));  \
  ^
git.h:407:2: note: in expansion of macro ‘SWAP’
  SWAP(*a, *b);
  ^~~~
git.h:126:2: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));  \
  ^
git.h:407:2: note: in expansion of macro ‘SWAP’
  SWAP(*a, *b);
  ^~~~
test.c: In function ‘best_bisection’:
test.c:51:14: warning: implicit declaration of function ‘weight’ [-Wimplicit-function-declaration]
   distance = weight(p);
              ^~~~~~
test.c: In function ‘best_bisection_sorted’:
test.c:86:3: warning: implicit declaration of function ‘strbuf_reset’; did you mean ‘strbuf_swap’? [-Wimplicit-function-declaration]
   strbuf_reset(&buf);
   ^~~~~~~~~~~~
   strbuf_swap
test.c:87:3: warning: implicit declaration of function ‘strbuf_addf’; did you mean ‘strbuf_swap’? [-Wimplicit-function-declaration]
   strbuf_addf(&buf, "dist=%d", array[i].distance);
   ^~~~~~~~~~~
   strbuf_swap
test.c:88:3: warning: implicit declaration of function ‘add_name_decoration’ [-Wimplicit-function-declaration]
   add_name_decoration(DECORATION_NONE, buf.buf, obj);
   ^~~~~~~~~~~~~~~~~~~
test.c:96:2: warning: implicit declaration of function ‘strbuf_release’; did you mean ‘strbuf_swap’? [-Wimplicit-function-declaration]
  strbuf_release(&buf);
  ^~~~~~~~~~~~~~
  strbuf_swap
test.c: In function ‘do_find_bisection’:
test.c:116:11: warning: implicit declaration of function ‘count_interesting_parents’ [-Wimplicit-function-declaration]
   switch (count_interesting_parents(commit)) {
           ^~~~~~~~~~~~~~~~~~~~~~~~~
test.c:119:5: warning: implicit declaration of function ‘weight_set’ [-Wimplicit-function-declaration]
     weight_set(p, 1);
     ^~~~~~~~~~
test.c:121:5: warning: implicit declaration of function ‘show_list’ [-Wimplicit-function-declaration]
     show_list("bisection 2 count one",
     ^~~~~~~~~
test.c:159:17: warning: implicit declaration of function ‘count_distance’; did you mean ‘commit_list_insert’? [-Wimplicit-function-declaration]
   weight_set(p, count_distance(p));
                 ^~~~~~~~~~~~~~
                 commit_list_insert
test.c:160:3: warning: implicit declaration of function ‘clear_distance’ [-Wimplicit-function-declaration]
   clear_distance(list);
   ^~~~~~~~~~~~~~
test.c:163:20: warning: implicit declaration of function ‘halfway’ [-Wimplicit-function-declaration]
   if (!find_all && halfway(p, nr))
                    ^~~~~~~
=======ipa_pta=========
============gimple assign==================
top_5 = list_14;
 <ssa_name 0x7f52520b7f78
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <parm_decl 0x7f5251c49200 list>
    def_stmt list_14 = PHI <list_15(D)(2), list_13(7)>
    version 14
    ptr-info 0x7f5251c8f0d8>
============COMPONEN2T_REF==================
In function ‘free_commit_list’:
test.c:14:22: warning: use location
  struct commit_list *top = *stack;
                      ^
============gimple assign==================
# VUSE <.MEM_2>
_6 = top_5->item;
 <component_ref 0x7f52520ae5a0
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f5251c54eb0
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
       
        arg 0 <ssa_name 0x7f52520b7cf0 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5252e2eea0 top>
            def_stmt top_5 = list_14;
            version 5
            ptr-info 0x7f5251c8f048>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3da18 item type <pointer_type 0x7f5251c3b2a0>
        unsigned DI file git.h line 308 col 17 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b1f8 commit_list>
        chain <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
            unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>>
    test.c:15:33 start: test.c:15:33 finish: test.c:15:33>
============COMPONEN2T_REF==================
test.c:15:40: warning: use location
  struct commit *item = top ? top->item : NULL;
                                        ^
============gimple assign==================
# VUSE <.MEM_2>
_7 = top_5->next;
 <component_ref 0x7f52520ae600
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    arg 0 <mem_ref 0x7f5251c54f00 type <record_type 0x7f5251c3b1f8 commit_list>
       
        arg 0 <ssa_name 0x7f52520b7cf0 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5252e2eea0 top>
            def_stmt top_5 = list_14;
            version 5
            ptr-info 0x7f5251c8f048>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
        unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>
    test.c:18:15 start: test.c:18:15 finish: test.c:18:15>
============COMPONEN2T_REF==================
test.c:18:15: warning: use location
   *stack = top->next;
               ^
============gimple assign==================
list_16 = _7;
 <ssa_name 0x7f52520b7d80
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    def_stmt _7 = top_5->next;
    version 7
    ptr-info 0x7f5251c8f078>
============COMPONEN2T_REF==================
test.c:18:10: warning: use location
   *stack = top->next;
          ^
# .MEM_11 = VDEF <.MEM_2>
free (top_5);
============gimple assign==================
_12 = _8;
 <ssa_name 0x7f52520b7dc8
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _8 = PHI <0B(3), _6(4)>
    version 8
    ptr-info 0x7f5251c8f090>
============COMPONEN2T_REF==================
lto1: warning: use location
============gimple assign==================
_1 = list_14;
 <ssa_name 0x7f52520b7f78
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <parm_decl 0x7f5251c49200 list>
    def_stmt list_14 = PHI <list_15(D)(2), list_13(7)>
    version 14
    ptr-info 0x7f5251c8f0d8>
============COMPONEN2T_REF==================
test.c:26:9: warning: use location
  while (list)
         ^
In function ‘main’:
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
============gimple assign==================
# .MEM_251 = VDEF <.MEM_250>
new_list_21->item = 0B;
 <integer_cst 0x7f5251c3ee10 type <pointer_type 0x7f5251c3b2a0> constant 0>
============gimple assign==================
_22 = list_255;
 <ssa_name 0x7f5251c92e10
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c59240 list>
    def_stmt list_255 = PHI <list_256(D)(2), list_262(3)>
    version 255
    ptr-info 0x7f5251c8f750>
============COMPONEN2T_REF==================
test.c:34:19: warning: use location
  new_list->next = *list_p;
                   ^
============gimple assign==================
# .MEM_252 = VDEF <.MEM_251>
new_list_21->next = _22;
 <ssa_name 0x7f5251c5c678
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    def_stmt _22 = list_255;
    version 22
    ptr-info 0x7f5251c8f150>
============gimple assign==================
list_262 = new_list_21;
 <ssa_name 0x7f5251c5c630
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c597e0 new_list>
    def_stmt new_list_21 = malloc (16);
    version 21
    ptr-info 0x7f5251c8f138>
============COMPONEN2T_REF==================
test.c:35:10: warning: use location
  *list_p = new_list;
          ^
============gimple assign==================
_23 = new_list_21;
 <ssa_name 0x7f5251c5c630
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c597e0 new_list>
    def_stmt new_list_21 = malloc (16);
    version 21
    ptr-info 0x7f5251c8f138>
============COMPONEN2T_REF==================
test.c:36:9: warning: use location
  return new_list;
         ^
============gimple assign==================
_254 = new_list_21;
 <ssa_name 0x7f5251c5c630
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c597e0 new_list>
    def_stmt new_list_21 = malloc (16);
    version 21
    ptr-info 0x7f5251c8f138>
============COMPONEN2T_REF==================
lto1: warning: use location
============gimple assign==================
i_12 = i_2 + 1;
 <ssa_name 0x7f5251c5c000
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c592d0 i>
    def_stmt i_2 = PHI <0(2), i_12(3)>
    version 2>
============COMPONEN2T_REF==================
test.c:263:29: warning: use location
     for(int i = 0; i < 10; i++)
                             ^
============gimple assign==================
_24 = list_255;
 <ssa_name 0x7f5251c92e10
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c59240 list>
    def_stmt list_255 = PHI <list_256(D)(2), list_262(3)>
    version 255
    ptr-info 0x7f5251c8f750>
============COMPONEN2T_REF==================
test.c:221:2: warning: use location
  show_list("bisection 2 entry", 0, 0, *commit_list);
  ^
============gimple assign==================
p_25 = list_255;
 <ssa_name 0x7f5251c92e10
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c59240 list>
    def_stmt list_255 = PHI <list_256(D)(2), list_262(3)>
    version 255
    ptr-info 0x7f5251c8f750>
============COMPONEN2T_REF==================
test.c:227:40: warning: use location
  for (nr = on_list = 0, last = NULL, p = *commit_list;
                                        ^
============gimple assign==================
# VUSE <.MEM_176>
_27 = p_26->item;
 <component_ref 0x7f52520ae9f0
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f5251c5f230
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
       
        arg 0 <ssa_name 0x7f5251c64510 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c635a0 p>
            def_stmt p_26 = PHI <p_25(5), p_49(11)>
            version 26
            ptr-info 0x7f5251c8f1b0>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3da18 item type <pointer_type 0x7f5251c3b2a0>
        unsigned DI file git.h line 308 col 17 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b1f8 commit_list>
        chain <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
            unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>>
    test.c:230:21 start: test.c:230:21 finish: test.c:230:21>
============COMPONEN2T_REF==================
test.c:230:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
============gimple assign==================
# VUSE <.MEM_176>
_28 = _27->object.flags;
 <component_ref 0x7f52520aea80
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    arg 0 <component_ref 0x7f52520aeab0
        type <record_type 0x7f5251c3bc78 object BLK
            size <integer_cst 0x7f52520cb0a8 constant 192>
            unit size <integer_cst 0x7f52520cb078 constant 24>
            align 32 symtab 0 alias set -1 canonical type 0x7f5251c3bc78 fields <field_decl 0x7f5251c3d4c0 parsed> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48930> chain <type_decl 0x7f5251c3d558 D.3993>>
       
        arg 0 <mem_ref 0x7f5251c5f280 type <record_type 0x7f5251c3b348 commit>
           
            arg 0 <ssa_name 0x7f5251c64558 type <pointer_type 0x7f5251c3b2a0>
               
                def_stmt _27 = p_26->item;
                version 27
                ptr-info 0x7f5251c8f1c8>
            arg 1 <integer_cst 0x7f5251c3ee10 constant 0>>
        arg 1 <field_decl 0x7f5251c3dda8 object type <record_type 0x7f5251c3bc78 object>
            BLK file git.h line 313 col 16 size <integer_cst 0x7f52520cb0a8 192> unit size <integer_cst 0x7f52520cb078 24>
            align 32 offset_align 128
            offset <integer_cst 0x7f52520afc18 constant 0>
            bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b348 commit> chain <field_decl 0x7f5251c3dd10 util>>
        test.c:230:27 start: test.c:230:27 finish: test.c:230:27>
    arg 1 <field_decl 0x7f5251c3d2f8 flags type <integer_type 0x7f5251c3ba80>
        unsigned external bit-field nonaddressable SI file git.h line 270 col 11
        size <integer_cst 0x7f5251c3e1c8 constant 27> unit size <integer_cst 0x7f52520afe40 4>
        align 1 offset_align 128 offset <integer_cst 0x7f52520afc18 0>
        bit offset <integer_cst 0x7f5252168978 constant 4>
        bit_field_type <integer_type 0x7f52520c3690 unsigned int public unsigned SI size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c3690 precision 32 min <integer_cst 0x7f52520afe58 0> max <integer_cst 0x7f52520afe10 4294967295>
            pointer_to_this <pointer_type 0x7f52520cf888>> context <record_type 0x7f5251c3bc78 object>
        chain <field_decl 0x7f5251c3d260 oid type <record_type 0x7f5251c3b9d8 object_id>
            BLK file git.h line 271 col 19
            size <integer_cst 0x7f5251c3e198 constant 160>
            unit size <integer_cst 0x7f5251c3e180 constant 20>
            align 8 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afe28 32> context <record_type 0x7f5251c3bc78 object>>>
    test.c:230:35 start: test.c:230:35 finish: test.c:230:35>
============COMPONEN2T_REF==================
test.c:230:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
============gimple assign==================
flags_29 = (unsigned int) _28;
 <ssa_name 0x7f5251c645a0
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _28 = _27->object.flags;
    version 28>
============COMPONEN2T_REF==================
test.c:230:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
============gimple assign==================
# VUSE <.MEM_176>
next_30 = p_26->next;
 <component_ref 0x7f52520aeb10
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    arg 0 <mem_ref 0x7f5251c5f2d0 type <record_type 0x7f5251c3b1f8 commit_list>
       
        arg 0 <ssa_name 0x7f5251c64510 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c635a0 p>
            def_stmt p_26 = PHI <p_25(5), p_49(11)>
            version 26
            ptr-info 0x7f5251c8f1b0>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
        unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>
    test.c:232:11 start: test.c:232:11 finish: test.c:232:11>
============COMPONEN2T_REF==================
test.c:232:8: warning: use location
   next = p->next;
        ^
============gimple assign==================
_31 = _28 & 2;
 <ssa_name 0x7f5251c645a0
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _28 = _27->object.flags;
    version 28>
============COMPONEN2T_REF==================
lto1: warning: use location
============gimple assign==================
_32 = (unsigned int) _31;
 <ssa_name 0x7f5251c64678
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _31 = _28 & 2;
    version 31>
============COMPONEN2T_REF==================
test.c:233:13: warning: use location
   if (flags & UNINTERESTING) {
             ^
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
============gimple assign==================
# .MEM_248 = VDEF <.MEM_176>
p_26->next = last_33;
 <ssa_name 0x7f5251c64708
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c63750 last>
    def_stmt last_33 = PHI <0B(5), last_50(11)>
    version 33
    ptr-info 0x7f5251c8f1f8>
============gimple assign==================
last_34 = p_26;
 <ssa_name 0x7f5251c64510
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c635a0 p>
    def_stmt p_26 = PHI <p_25(5), p_49(11)>
    version 26
    ptr-info 0x7f5251c8f1b0>
============COMPONEN2T_REF==================
test.c:238:8: warning: use location
   last = p;
        ^
============gimple assign==================
_35 = _28 & 4;
 <ssa_name 0x7f5251c645a0
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _28 = _27->object.flags;
    version 28>
============COMPONEN2T_REF==================
lto1: warning: use location
============gimple assign==================
_36 = (unsigned int) _35;
 <ssa_name 0x7f5251c64798
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _35 = _28 & 4;
    version 35>
============COMPONEN2T_REF==================
test.c:239:15: warning: use location
   if (!(flags & TREESAME))
               ^
============gimple assign==================
nr_38 = nr_37 + 1;
 <ssa_name 0x7f5251c64828
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c633f0 nr>
    def_stmt nr_37 = PHI <0(5), nr_47(11)>
    version 37>
============COMPONEN2T_REF==================
test.c:240:6: warning: use location
    nr++;
      ^
============gimple assign==================
on_list_40 = on_list_39 + 1;
 <ssa_name 0x7f5251c648b8
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c63480 on_list>
    def_stmt on_list_39 = PHI <0(5), on_list_48(11)>
    version 39>
============COMPONEN2T_REF==================
test.c:241:10: warning: use location
   on_list++;
          ^
============gimple assign==================
list_41 = last_33;
 <ssa_name 0x7f5251c64708
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c63750 last>
    def_stmt last_33 = PHI <0B(5), last_50(11)>
    version 33
    ptr-info 0x7f5251c8f1f8>
============COMPONEN2T_REF==================
test.c:243:7: warning: use location
  list = last;
       ^
============gimple assign==================
all_257 = nr_37;
 <ssa_name 0x7f5251c64828
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c633f0 nr>
    def_stmt nr_37 = PHI <0(5), nr_47(11)>
    version 37>
============COMPONEN2T_REF==================
test.c:246:7: warning: use location
  *all = nr;
       ^
============gimple assign==================
_42 = (long unsigned int) on_list_39;
 <ssa_name 0x7f5251c648b8
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c63480 on_list>
    def_stmt on_list_39 = PHI <0(5), on_list_48(11)>
    version 39>
============COMPONEN2T_REF==================
test.c:247:12: warning: use location
  weights = xcalloc(on_list, sizeof(*weights));
            ^
test.c:247:10: warning: use location
  weights = xcalloc(on_list, sizeof(*weights));
          ^
============gimple assign==================
# VUSE <.MEM_178>
commit_52 = p_51->item;
 <component_ref 0x7f5251c71120
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f5251c6bdc0
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
       
        arg 0 <ssa_name 0x7f52520b76c0 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c6ed80 p>
            def_stmt p_51 = PHI <list_41(13), p_67(19)>
            version 51
            ptr-info 0x7f5251c8f2a0>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3da18 item type <pointer_type 0x7f5251c3b2a0>
        unsigned DI file git.h line 308 col 17 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b1f8 commit_list>
        chain <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
            unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>>
    test.c:112:28 start: test.c:112:28 finish: test.c:112:28>
============COMPONEN2T_REF==================
test.c:112:18: warning: use location
   struct commit *commit = p->item;
                  ^
============gimple assign==================
# VUSE <.MEM_178>
_53 = commit_52->object.flags;
 <component_ref 0x7f5251c711b0
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    arg 0 <component_ref 0x7f5251c711e0
        type <record_type 0x7f5251c3bc78 object BLK
            size <integer_cst 0x7f52520cb0a8 constant 192>
            unit size <integer_cst 0x7f52520cb078 constant 24>
            align 32 symtab 0 alias set -1 canonical type 0x7f5251c3bc78 fields <field_decl 0x7f5251c3d4c0 parsed> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48930> chain <type_decl 0x7f5251c3d558 D.3993>>
       
        arg 0 <mem_ref 0x7f5251c6be10 type <record_type 0x7f5251c3b348 commit>
           
            arg 0 <ssa_name 0x7f5251c73a20 type <pointer_type 0x7f5251c3b2a0>
                var <var_decl 0x7f5251c6ef30 commit>
                def_stmt commit_52 = p_51->item;
                version 52
                ptr-info 0x7f5251c8f2b8>
            arg 1 <integer_cst 0x7f5251c3ee10 constant 0>>
        arg 1 <field_decl 0x7f5251c3dda8 object type <record_type 0x7f5251c3bc78 object>
            BLK file git.h line 313 col 16 size <integer_cst 0x7f52520cb0a8 192> unit size <integer_cst 0x7f52520cb078 24>
            align 32 offset_align 128
            offset <integer_cst 0x7f52520afc18 constant 0>
            bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b348 commit> chain <field_decl 0x7f5251c3dd10 util>>
        test.c:113:26 start: test.c:113:26 finish: test.c:113:26>
    arg 1 <field_decl 0x7f5251c3d2f8 flags type <integer_type 0x7f5251c3ba80>
        unsigned external bit-field nonaddressable SI file git.h line 270 col 11
        size <integer_cst 0x7f5251c3e1c8 constant 27> unit size <integer_cst 0x7f52520afe40 4>
        align 1 offset_align 128 offset <integer_cst 0x7f52520afc18 0>
        bit offset <integer_cst 0x7f5252168978 constant 4>
        bit_field_type <integer_type 0x7f52520c3690 unsigned int public unsigned SI size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c3690 precision 32 min <integer_cst 0x7f52520afe58 0> max <integer_cst 0x7f52520afe10 4294967295>
            pointer_to_this <pointer_type 0x7f52520cf888>> context <record_type 0x7f5251c3bc78 object>
        chain <field_decl 0x7f5251c3d260 oid type <record_type 0x7f5251c3b9d8 object_id>
            BLK file git.h line 271 col 19
            size <integer_cst 0x7f5251c3e198 constant 160>
            unit size <integer_cst 0x7f5251c3e180 constant 20>
            align 8 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afe28 32> context <record_type 0x7f5251c3bc78 object>>>
    test.c:113:34 start: test.c:113:34 finish: test.c:113:34>
============COMPONEN2T_REF==================
test.c:113:34: warning: use location
   unsigned flags = commit->object.flags;
                                  ^
============gimple assign==================
flags_54 = (unsigned int) _53;
 <ssa_name 0x7f5251c73a68
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _53 = commit_52->object.flags;
    version 53>
============COMPONEN2T_REF==================
test.c:113:12: warning: use location
   unsigned flags = commit->object.flags;
            ^
============gimple assign==================
_56 = n_55;
 <ssa_name 0x7f5251c73af8
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c6ec60 n>
    def_stmt n_55 = PHI <0(13), n_57(19)>
    version 55>
============COMPONEN2T_REF==================
test.c:115:29: warning: use location
   p->item->util = &weights[n++];
                             ^
============gimple assign==================
n_57 = n_55 + 1;
 <ssa_name 0x7f5251c73af8
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c6ec60 n>
    def_stmt n_55 = PHI <0(13), n_57(19)>
    version 55>
============COMPONEN2T_REF==================
test.c:115:29: warning: use location
============gimple assign==================
_58 = (long unsigned int) n_55;
 <ssa_name 0x7f5251c73af8
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c6ec60 n>
    def_stmt n_55 = PHI <0(13), n_57(19)>
    version 55>
============COMPONEN2T_REF==================
test.c:115:29: warning: use location
============gimple assign==================
_59 = _58 * 4;
 <ssa_name 0x7f5251c73bd0
    type <integer_type 0x7f52520c37e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f52520c3738 precision 64 min <integer_cst 0x7f52520afeb8 0> max <integer_cst 0x7f52520b1500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f52520cf9d8>>
   
    def_stmt _58 = (long unsigned int) n_55;
    version 58>
============COMPONEN2T_REF==================
test.c:115:27: warning: use location
   p->item->util = &weights[n++];
                           ^
============gimple assign==================
# VUSE <.MEM_178>
_60 = p_51->item;
 <component_ref 0x7f5251c71240
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f5251c6be60
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
       
        arg 0 <ssa_name 0x7f52520b76c0 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c6ed80 p>
            def_stmt p_51 = PHI <list_41(13), p_67(19)>
            version 51
            ptr-info 0x7f5251c8f2a0>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3da18 item type <pointer_type 0x7f5251c3b2a0>
        unsigned DI file git.h line 308 col 17 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b1f8 commit_list>
        chain <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
            unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>>
    test.c:115:4 start: test.c:115:4 finish: test.c:115:4>
============COMPONEN2T_REF==================
test.c:115:4: warning: use location
   p->item->util = &weights[n++];
    ^
============gimple assign==================
_61 = weights_43 + _59;
 <ssa_name 0x7f5251c649d8
    type <pointer_type 0x7f52520caa80
        type <integer_type 0x7f52520c35e8 int public SI
            size <integer_cst 0x7f52520afe28 constant 32>
            unit size <integer_cst 0x7f52520afe40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
            pointer_to_this <pointer_type 0x7f52520caa80>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f5251c637e0 weights>
    def_stmt weights_43 = calloc (_42, 4);
    version 43
    ptr-info 0x7f5251c8f240>
============COMPONEN2T_REF==================
test.c:115:19: warning: use location
   p->item->util = &weights[n++];
                   ^
============gimple assign==================
# .MEM_242 = VDEF <.MEM_178>
_60->util = _61;
 <ssa_name 0x7f5251c73ca8
    type <pointer_type 0x7f52520caa80
        type <integer_type 0x7f52520c35e8 int public SI
            size <integer_cst 0x7f52520afe28 constant 32>
            unit size <integer_cst 0x7f52520afe40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
            pointer_to_this <pointer_type 0x7f52520caa80>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _61 = weights_43 + _59;
    version 61
    ptr-info 0x7f5251c8f2e8>
============gimple assign==================
_63 = _53 & 4;
 <ssa_name 0x7f5251c73a68
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _53 = commit_52->object.flags;
    version 53>
============COMPONEN2T_REF==================
lto1: warning: use location
============gimple assign==================
_64 = (unsigned int) _63;
 <ssa_name 0x7f5251c73d38
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _63 = _53 & 4;
    version 63>
============COMPONEN2T_REF==================
test.c:118:16: warning: use location
    if (!(flags & TREESAME)) {
                ^
============gimple assign==================
counted_66 = counted_65 + 1;
 <ssa_name 0x7f5251c73dc8
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c6ecf0 counted>
    def_stmt counted_65 = PHI <0(13), counted_110(19)>
    version 65>
============COMPONEN2T_REF==================
test.c:120:12: warning: use location
     counted++;
            ^
============gimple assign==================
# VUSE <.MEM_177>
p_67 = p_51->next;
 <component_ref 0x7f5251c71300
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    arg 0 <mem_ref 0x7f5251c6bf00 type <record_type 0x7f5251c3b1f8 commit_list>
       
        arg 0 <ssa_name 0x7f52520b76c0 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c6ed80 p>
            def_stmt p_51 = PHI <list_41(13), p_67(19)>
            version 51
            ptr-info 0x7f5251c8f2a0>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
        unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>
    test.c:111:32 start: test.c:111:32 finish: test.c:111:32>
============COMPONEN2T_REF==================
test.c:111:29: warning: use location
  for (n = 0, p = list; p; p = p->next) {
                             ^
============gimple assign==================
# VUSE <.MEM_181>
_69 = p_68->item;
 <component_ref 0x7f5251c71360
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f5251c6bf50
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
       
        arg 0 <ssa_name 0x7f5251c73ea0 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c6ed80 p>
            def_stmt p_68 = PHI <list_41(21), p_80(30)>
            version 68
            ptr-info 0x7f5251c8f318>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3da18 item type <pointer_type 0x7f5251c3b2a0>
        unsigned DI file git.h line 308 col 17 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b1f8 commit_list>
        chain <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
            unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>>
    test.c:155:8 start: test.c:155:8 finish: test.c:155:8>
============COMPONEN2T_REF==================
test.c:155:8: warning: use location
   if (p->item->object.flags & UNINTERESTING)
        ^
============gimple assign==================
# VUSE <.MEM_181>
_70 = _69->object.flags;
 <component_ref 0x7f5251c713f0
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    arg 0 <component_ref 0x7f5251c71420
        type <record_type 0x7f5251c3bc78 object BLK
            size <integer_cst 0x7f52520cb0a8 constant 192>
            unit size <integer_cst 0x7f52520cb078 constant 24>
            align 32 symtab 0 alias set -1 canonical type 0x7f5251c3bc78 fields <field_decl 0x7f5251c3d4c0 parsed> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48930> chain <type_decl 0x7f5251c3d558 D.3993>>
       
        arg 0 <mem_ref 0x7f5251c6bfa0 type <record_type 0x7f5251c3b348 commit>
           
            arg 0 <ssa_name 0x7f5251c73ee8 type <pointer_type 0x7f5251c3b2a0>
               
                def_stmt _69 = p_68->item;
                version 69
                ptr-info 0x7f5251c8f330>
            arg 1 <integer_cst 0x7f5251c3ee10 constant 0>>
        arg 1 <field_decl 0x7f5251c3dda8 object type <record_type 0x7f5251c3bc78 object>
            BLK file git.h line 313 col 16 size <integer_cst 0x7f52520cb0a8 192> unit size <integer_cst 0x7f52520cb078 24>
            align 32 offset_align 128
            offset <integer_cst 0x7f52520afc18 constant 0>
            bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b348 commit> chain <field_decl 0x7f5251c3dd10 util>>
        test.c:155:14 start: test.c:155:14 finish: test.c:155:14>
    arg 1 <field_decl 0x7f5251c3d2f8 flags type <integer_type 0x7f5251c3ba80>
        unsigned external bit-field nonaddressable SI file git.h line 270 col 11
        size <integer_cst 0x7f5251c3e1c8 constant 27> unit size <integer_cst 0x7f52520afe40 4>
        align 1 offset_align 128 offset <integer_cst 0x7f52520afc18 0>
        bit offset <integer_cst 0x7f5252168978 constant 4>
        bit_field_type <integer_type 0x7f52520c3690 unsigned int public unsigned SI size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c3690 precision 32 min <integer_cst 0x7f52520afe58 0> max <integer_cst 0x7f52520afe10 4294967295>
            pointer_to_this <pointer_type 0x7f52520cf888>> context <record_type 0x7f5251c3bc78 object>
        chain <field_decl 0x7f5251c3d260 oid type <record_type 0x7f5251c3b9d8 object_id>
            BLK file git.h line 271 col 19
            size <integer_cst 0x7f5251c3e198 constant 160>
            unit size <integer_cst 0x7f5251c3e180 constant 20>
            align 8 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afe28 32> context <record_type 0x7f5251c3bc78 object>>>
    test.c:155:22 start: test.c:155:22 finish: test.c:155:22>
============COMPONEN2T_REF==================
test.c:155:22: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                      ^
============gimple assign==================
_71 = (unsigned int) _70;
 <ssa_name 0x7f5251c73f30
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _70 = _69->object.flags;
    version 70>
============COMPONEN2T_REF==================
test.c:155:29: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                             ^
============gimple assign==================
_72 = _70 & 2;
 <ssa_name 0x7f5251c73f30
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _70 = _69->object.flags;
    version 70>
============COMPONEN2T_REF==================
lto1: warning: use location
============gimple assign==================
_73 = (unsigned int) _72;
 <ssa_name 0x7f5251c77000
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _72 = _70 & 2;
    version 72>
============COMPONEN2T_REF==================
test.c:155:29: warning: use location
============gimple assign==================
_77 = p_68;
 <ssa_name 0x7f5251c73ea0
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c6ed80 p>
    def_stmt p_68 = PHI <list_41(21), p_80(30)>
    version 68
    ptr-info 0x7f5251c8f318>
============COMPONEN2T_REF==================
test.c:164:11: warning: use location
    return p;
           ^
============gimple assign==================
counted_79 = counted_78 + 1;
 <ssa_name 0x7f5251c771b0
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c6ecf0 counted>
    def_stmt counted_78 = PHI <counted_65(21), counted_111(30)>
    version 78>
============COMPONEN2T_REF==================
test.c:165:10: warning: use location
   counted++;
          ^
============gimple assign==================
# VUSE <.MEM_180>
p_80 = p_68->next;
 <component_ref 0x7f5251c71480
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    arg 0 <mem_ref 0x7f5251c78028 type <record_type 0x7f5251c3b1f8 commit_list>
       
        arg 0 <ssa_name 0x7f5251c73ea0 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c6ed80 p>
            def_stmt p_68 = PHI <list_41(21), p_80(30)>
            version 68
            ptr-info 0x7f5251c8f318>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
        unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>
    test.c:154:25 start: test.c:154:25 finish: test.c:154:25>
============COMPONEN2T_REF==================
test.c:154:22: warning: use location
  for (p = list; p; p = p->next) {
                      ^
============gimple assign==================
# VUSE <.MEM_187>
_82 = p_81->item;
 <component_ref 0x7f5251c714e0
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f5251c78078
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
       
        arg 0 <ssa_name 0x7f5251c77288 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c6ed80 p>
            def_stmt p_81 = PHI <p_105(49), list_41(52)>
            version 81
            ptr-info 0x7f5251c8f378>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3da18 item type <pointer_type 0x7f5251c3b2a0>
        unsigned DI file git.h line 308 col 17 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b1f8 commit_list>
        chain <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
            unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>>
    test.c:173:22 start: test.c:173:22 finish: test.c:173:22>
============COMPONEN2T_REF==================
test.c:173:22: warning: use location
    unsigned flags = p->item->object.flags;
                      ^
============gimple assign==================
# VUSE <.MEM_187>
_83 = _82->object.flags;
 <component_ref 0x7f5251c71570
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    arg 0 <component_ref 0x7f5251c715a0
        type <record_type 0x7f5251c3bc78 object BLK
            size <integer_cst 0x7f52520cb0a8 constant 192>
            unit size <integer_cst 0x7f52520cb078 constant 24>
            align 32 symtab 0 alias set -1 canonical type 0x7f5251c3bc78 fields <field_decl 0x7f5251c3d4c0 parsed> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48930> chain <type_decl 0x7f5251c3d558 D.3993>>
       
        arg 0 <mem_ref 0x7f5251c780c8 type <record_type 0x7f5251c3b348 commit>
           
            arg 0 <ssa_name 0x7f5251c772d0 type <pointer_type 0x7f5251c3b2a0>
               
                def_stmt _82 = p_81->item;
                version 82
                ptr-info 0x7f5251c8f390>
            arg 1 <integer_cst 0x7f5251c3ee10 constant 0>>
        arg 1 <field_decl 0x7f5251c3dda8 object type <record_type 0x7f5251c3bc78 object>
            BLK file git.h line 313 col 16 size <integer_cst 0x7f52520cb0a8 192> unit size <integer_cst 0x7f52520cb078 24>
            align 32 offset_align 128
            offset <integer_cst 0x7f52520afc18 constant 0>
            bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b348 commit> chain <field_decl 0x7f5251c3dd10 util>>
        test.c:173:28 start: test.c:173:28 finish: test.c:173:28>
    arg 1 <field_decl 0x7f5251c3d2f8 flags type <integer_type 0x7f5251c3ba80>
        unsigned external bit-field nonaddressable SI file git.h line 270 col 11
        size <integer_cst 0x7f5251c3e1c8 constant 27> unit size <integer_cst 0x7f52520afe40 4>
        align 1 offset_align 128 offset <integer_cst 0x7f52520afc18 0>
        bit offset <integer_cst 0x7f5252168978 constant 4>
        bit_field_type <integer_type 0x7f52520c3690 unsigned int public unsigned SI size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c3690 precision 32 min <integer_cst 0x7f52520afe58 0> max <integer_cst 0x7f52520afe10 4294967295>
            pointer_to_this <pointer_type 0x7f52520cf888>> context <record_type 0x7f5251c3bc78 object>
        chain <field_decl 0x7f5251c3d260 oid type <record_type 0x7f5251c3b9d8 object_id>
            BLK file git.h line 271 col 19
            size <integer_cst 0x7f5251c3e198 constant 160>
            unit size <integer_cst 0x7f5251c3e180 constant 20>
            align 8 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afe28 32> context <record_type 0x7f5251c3bc78 object>>>
    test.c:173:36 start: test.c:173:36 finish: test.c:173:36>
============COMPONEN2T_REF==================
test.c:173:36: warning: use location
    unsigned flags = p->item->object.flags;
                                    ^
============gimple assign==================
flags_84 = (unsigned int) _83;
 <ssa_name 0x7f5251c77318
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _83 = _82->object.flags;
    version 83>
============COMPONEN2T_REF==================
test.c:173:13: warning: use location
    unsigned flags = p->item->object.flags;
             ^
============gimple assign==================
# VUSE <.MEM_223>
_86 = p_81->item;
 <component_ref 0x7f5251c71600
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f5251c78140
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
       
        arg 0 <ssa_name 0x7f5251c77288 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c6ed80 p>
            def_stmt p_81 = PHI <p_105(49), list_41(52)>
            version 81
            ptr-info 0x7f5251c8f378>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3da18 item type <pointer_type 0x7f5251c3b2a0>
        unsigned DI file git.h line 308 col 17 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b1f8 commit_list>
        chain <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
            unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>>
    test.c:177:14 start: test.c:177:14 finish: test.c:177:14>
============COMPONEN2T_REF==================
test.c:177:14: warning: use location
    for (q = p->item->parents; q; q = q->next) {
              ^
============gimple assign==================
# VUSE <.MEM_223>
q_87 = _86->parents;
 <component_ref 0x7f5251c71660
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    arg 0 <mem_ref 0x7f5251c78190
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
       
        arg 0 <ssa_name 0x7f5251c773f0 type <pointer_type 0x7f5251c3b2a0>
           
            def_stmt _86 = p_81->item;
            version 86
            ptr-info 0x7f5251c8f3a8>
        arg 1 <integer_cst 0x7f5251c3ee10 constant 0>>
    arg 1 <field_decl 0x7f5251c3db48 parents type <pointer_type 0x7f5251c3b0a8>
        unsigned DI file git.h line 317 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f5251c3e168 constant 48>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b348 commit>
        chain <field_decl 0x7f5251c3dab0 tree type <pointer_type 0x7f5251c3bdc8>
            unsigned DI file git.h line 318 col 15 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f5251c3e168 48> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b348 commit>>>
    test.c:177:20 start: test.c:177:20 finish: test.c:177:20>
============COMPONEN2T_REF==================
test.c:177:11: warning: use location
    for (q = p->item->parents; q; q = q->next) {
           ^
============gimple assign==================
# VUSE <.MEM_183>
_89 = q_88->item;
 <component_ref 0x7f5251c716c0
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f5251c781e0
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
       
        arg 0 <ssa_name 0x7f5251c77480 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c6ee10 q>
            def_stmt q_88 = PHI <q_87(35), q_95(39)>
            version 88
            ptr-info 0x7f5251c8f3d8>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3da18 item type <pointer_type 0x7f5251c3b2a0>
        unsigned DI file git.h line 308 col 17 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b1f8 commit_list>
        chain <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
            unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>>
    test.c:178:10 start: test.c:178:10 finish: test.c:178:10>
============COMPONEN2T_REF==================
test.c:178:10: warning: use location
     if (q->item->object.flags & UNINTERESTING)
          ^
============gimple assign==================
# VUSE <.MEM_183>
_90 = _89->object.flags;
 <component_ref 0x7f5251c71750
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    arg 0 <component_ref 0x7f5251c71780
        type <record_type 0x7f5251c3bc78 object BLK
            size <integer_cst 0x7f52520cb0a8 constant 192>
            unit size <integer_cst 0x7f52520cb078 constant 24>
            align 32 symtab 0 alias set -1 canonical type 0x7f5251c3bc78 fields <field_decl 0x7f5251c3d4c0 parsed> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48930> chain <type_decl 0x7f5251c3d558 D.3993>>
       
        arg 0 <mem_ref 0x7f5251c78230 type <record_type 0x7f5251c3b348 commit>
           
            arg 0 <ssa_name 0x7f5251c774c8 type <pointer_type 0x7f5251c3b2a0>
               
                def_stmt _89 = q_88->item;
                version 89
                ptr-info 0x7f5251c8f3f0>
            arg 1 <integer_cst 0x7f5251c3ee10 constant 0>>
        arg 1 <field_decl 0x7f5251c3dda8 object type <record_type 0x7f5251c3bc78 object>
            BLK file git.h line 313 col 16 size <integer_cst 0x7f52520cb0a8 192> unit size <integer_cst 0x7f52520cb078 24>
            align 32 offset_align 128
            offset <integer_cst 0x7f52520afc18 constant 0>
            bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b348 commit> chain <field_decl 0x7f5251c3dd10 util>>
        test.c:178:16 start: test.c:178:16 finish: test.c:178:16>
    arg 1 <field_decl 0x7f5251c3d2f8 flags type <integer_type 0x7f5251c3ba80>
        unsigned external bit-field nonaddressable SI file git.h line 270 col 11
        size <integer_cst 0x7f5251c3e1c8 constant 27> unit size <integer_cst 0x7f52520afe40 4>
        align 1 offset_align 128 offset <integer_cst 0x7f52520afc18 0>
        bit offset <integer_cst 0x7f5252168978 constant 4>
        bit_field_type <integer_type 0x7f52520c3690 unsigned int public unsigned SI size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c3690 precision 32 min <integer_cst 0x7f52520afe58 0> max <integer_cst 0x7f52520afe10 4294967295>
            pointer_to_this <pointer_type 0x7f52520cf888>> context <record_type 0x7f5251c3bc78 object>
        chain <field_decl 0x7f5251c3d260 oid type <record_type 0x7f5251c3b9d8 object_id>
            BLK file git.h line 271 col 19
            size <integer_cst 0x7f5251c3e198 constant 160>
            unit size <integer_cst 0x7f5251c3e180 constant 20>
            align 8 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afe28 32> context <record_type 0x7f5251c3bc78 object>>>
    test.c:178:24 start: test.c:178:24 finish: test.c:178:24>
============COMPONEN2T_REF==================
test.c:178:24: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                        ^
============gimple assign==================
_91 = (unsigned int) _90;
 <ssa_name 0x7f5251c77510
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _90 = _89->object.flags;
    version 90>
============COMPONEN2T_REF==================
test.c:178:31: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                               ^
============gimple assign==================
_92 = _90 & 2;
 <ssa_name 0x7f5251c77510
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _90 = _89->object.flags;
    version 90>
============COMPONEN2T_REF==================
lto1: warning: use location
============gimple assign==================
_93 = (unsigned int) _92;
 <ssa_name 0x7f5251c775a0
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _92 = _90 & 2;
    version 92>
============COMPONEN2T_REF==================
test.c:178:31: warning: use location
============gimple assign==================
# VUSE <.MEM_182>
q_95 = q_88->next;
 <component_ref 0x7f5251c717e0
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    arg 0 <mem_ref 0x7f5251c782a8 type <record_type 0x7f5251c3b1f8 commit_list>
       
        arg 0 <ssa_name 0x7f5251c77480 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c6ee10 q>
            def_stmt q_88 = PHI <q_87(35), q_95(39)>
            version 88
            ptr-info 0x7f5251c8f3d8>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
        unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>
    test.c:177:39 start: test.c:177:39 finish: test.c:177:39>
============COMPONEN2T_REF==================
test.c:177:36: warning: use location
    for (q = p->item->parents; q; q = q->next) {
                                    ^
============gimple assign==================
_96 = _83 & 4;
 <ssa_name 0x7f5251c77318
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _83 = _82->object.flags;
    version 83>
============COMPONEN2T_REF==================
lto1: warning: use location
============gimple assign==================
_97 = (unsigned int) _96;
 <ssa_name 0x7f5251c776c0
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _96 = _83 & 4;
    version 96>
============COMPONEN2T_REF==================
test.c:191:16: warning: use location
    if (!(flags & TREESAME)) {
                ^
============gimple assign==================
_99 = _98 + 1;
 <ssa_name 0x7f5251c77750
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
   
    def_stmt _98 = weight (q_88);
    version 98>
============COMPONEN2T_REF==================
test.c:192:5: warning: use location
     weight_set(p, weight(q)+1);
     ^
============gimple assign==================
counted_101 = counted_100 + 1;
 <ssa_name 0x7f5251c777e0
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c6ecf0 counted>
    def_stmt counted_100 = PHI <counted_113(49), counted_106(52)>
    version 100>
============COMPONEN2T_REF==================
test.c:193:12: warning: use location
     counted++;
            ^
============gimple assign==================
_104 = p_81;
 <ssa_name 0x7f5251c77288
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c6ed80 p>
    def_stmt p_81 = PHI <p_105(49), list_41(52)>
    version 81
    ptr-info 0x7f5251c8f378>
============COMPONEN2T_REF==================
test.c:202:12: warning: use location
     return p;
            ^
============gimple assign==================
# VUSE <.MEM_186>
p_105 = p_81->next;
 <component_ref 0x7f5251c71840
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    arg 0 <mem_ref 0x7f5251c78320 type <record_type 0x7f5251c3b1f8 commit_list>
       
        arg 0 <ssa_name 0x7f5251c77288 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c6ed80 p>
            def_stmt p_81 = PHI <p_105(49), list_41(52)>
            version 81
            ptr-info 0x7f5251c8f378>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
        unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>
    test.c:171:26 start: test.c:171:26 finish: test.c:171:26>
============COMPONEN2T_REF==================
test.c:171:23: warning: use location
   for (p = list; p; p = p->next) {
                       ^
============gimple assign==================
# VUSE <.MEM_190>
_115 = p_114->item;
 <component_ref 0x7f5251c719f0
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f5251c7c6e0
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
       
        arg 0 <ssa_name 0x7f52520b7750 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c83090 p>
            def_stmt p_114 = PHI <list_41(53), p_126(60)>
            version 114
            ptr-info 0x7f5251c8f498>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3da18 item type <pointer_type 0x7f5251c3b2a0>
        unsigned DI file git.h line 308 col 17 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b1f8 commit_list>
        chain <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
            unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>>
    test.c:47:21 start: test.c:47:21 finish: test.c:47:21>
============COMPONEN2T_REF==================
test.c:47:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
============gimple assign==================
# VUSE <.MEM_190>
_116 = _115->object.flags;
 <component_ref 0x7f5251c71a80
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    arg 0 <component_ref 0x7f5251c71ab0
        type <record_type 0x7f5251c3bc78 object BLK
            size <integer_cst 0x7f52520cb0a8 constant 192>
            unit size <integer_cst 0x7f52520cb078 constant 24>
            align 32 symtab 0 alias set -1 canonical type 0x7f5251c3bc78 fields <field_decl 0x7f5251c3d4c0 parsed> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48930> chain <type_decl 0x7f5251c3d558 D.3993>>
       
        arg 0 <mem_ref 0x7f5251c7c730 type <record_type 0x7f5251c3b348 commit>
           
            arg 0 <ssa_name 0x7f5251c80318 type <pointer_type 0x7f5251c3b2a0>
               
                def_stmt _115 = p_114->item;
                version 115
                ptr-info 0x7f5251c8f4b0>
            arg 1 <integer_cst 0x7f5251c3ee10 constant 0>>
        arg 1 <field_decl 0x7f5251c3dda8 object type <record_type 0x7f5251c3bc78 object>
            BLK file git.h line 313 col 16 size <integer_cst 0x7f52520cb0a8 192> unit size <integer_cst 0x7f52520cb078 24>
            align 32 offset_align 128
            offset <integer_cst 0x7f52520afc18 constant 0>
            bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b348 commit> chain <field_decl 0x7f5251c3dd10 util>>
        test.c:47:27 start: test.c:47:27 finish: test.c:47:27>
    arg 1 <field_decl 0x7f5251c3d2f8 flags type <integer_type 0x7f5251c3ba80>
        unsigned external bit-field nonaddressable SI file git.h line 270 col 11
        size <integer_cst 0x7f5251c3e1c8 constant 27> unit size <integer_cst 0x7f52520afe40 4>
        align 1 offset_align 128 offset <integer_cst 0x7f52520afc18 0>
        bit offset <integer_cst 0x7f5252168978 constant 4>
        bit_field_type <integer_type 0x7f52520c3690 unsigned int public unsigned SI size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c3690 precision 32 min <integer_cst 0x7f52520afe58 0> max <integer_cst 0x7f52520afe10 4294967295>
            pointer_to_this <pointer_type 0x7f52520cf888>> context <record_type 0x7f5251c3bc78 object>
        chain <field_decl 0x7f5251c3d260 oid type <record_type 0x7f5251c3b9d8 object_id>
            BLK file git.h line 271 col 19
            size <integer_cst 0x7f5251c3e198 constant 160>
            unit size <integer_cst 0x7f5251c3e180 constant 20>
            align 8 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afe28 32> context <record_type 0x7f5251c3bc78 object>>>
    test.c:47:35 start: test.c:47:35 finish: test.c:47:35>
============COMPONEN2T_REF==================
test.c:47:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
============gimple assign==================
flags_117 = (unsigned int) _116;
 <ssa_name 0x7f5251c80360
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _116 = _115->object.flags;
    version 116>
============COMPONEN2T_REF==================
test.c:47:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
============gimple assign==================
_118 = _116 & 4;
 <ssa_name 0x7f5251c80360
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _116 = _115->object.flags;
    version 116>
============COMPONEN2T_REF==================
lto1: warning: use location
============gimple assign==================
_119 = (unsigned int) _118;
 <ssa_name 0x7f5251c803f0
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _118 = _116 & 4;
    version 118>
============COMPONEN2T_REF==================
test.c:49:13: warning: use location
   if (flags & TREESAME)
             ^
============gimple assign==================
_121 = nr_37 - distance_120;
 <ssa_name 0x7f5251c64828
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c633f0 nr>
    def_stmt nr_37 = PHI <0(5), nr_47(11)>
    version 37>
============COMPONEN2T_REF==================
test.c:52:10: warning: use location
   if (nr - distance < distance)
          ^
============gimple assign==================
distance_122 = nr_37 - distance_120;
 <ssa_name 0x7f5251c64828
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c633f0 nr>
    def_stmt nr_37 = PHI <0(5), nr_47(11)>
    version 37>
============COMPONEN2T_REF==================
test.c:53:13: warning: use location
    distance = nr - distance;
             ^
============gimple assign==================
best_125 = p_114;
 <ssa_name 0x7f52520b7750
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c83090 p>
    def_stmt p_114 = PHI <list_41(53), p_126(60)>
    version 114
    ptr-info 0x7f5251c8f498>
============COMPONEN2T_REF==================
test.c:55:9: warning: use location
    best = p;
         ^
============gimple assign==================
# VUSE <.MEM_189>
p_126 = p_114->next;
 <component_ref 0x7f5251c71b10
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    arg 0 <mem_ref 0x7f5251c7c7a8 type <record_type 0x7f5251c3b1f8 commit_list>
       
        arg 0 <ssa_name 0x7f52520b7750 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c83090 p>
            def_stmt p_114 = PHI <list_41(53), p_126(60)>
            version 114
            ptr-info 0x7f5251c8f498>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
        unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>
    test.c:45:25 start: test.c:45:25 finish: test.c:45:25>
============COMPONEN2T_REF==================
test.c:45:22: warning: use location
  for (p = list; p; p = p->next) {
                      ^
============gimple assign==================
_128 = best_127;
 <ssa_name 0x7f5251c80678
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c83120 best>
    def_stmt best_127 = PHI <list_41(53), best_129(60)>
    version 127
    ptr-info 0x7f5251c8f4f8>
============COMPONEN2T_REF==================
test.c:60:9: warning: use location
  return best;
         ^
============gimple assign==================
_221 = best_127;
 <ssa_name 0x7f5251c80678
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c83120 best>
    def_stmt best_127 = PHI <list_41(53), best_129(60)>
    version 127
    ptr-info 0x7f5251c8f4f8>
============COMPONEN2T_REF==================
lto1: warning: use location
============gimple assign==================
_107 = _221;
 <ssa_name 0x7f5251c92438
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c83360 D.4162>
    def_stmt _221 = best_127;
    version 221
    ptr-info 0x7f5251c8f708>
============COMPONEN2T_REF==================
test.c:209:10: warning: use location
   return best_bisection(list, nr);
          ^
============gimple assign==================
_131 = (long unsigned int) nr_37;
 <ssa_name 0x7f5251c64828
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c633f0 nr>
    def_stmt nr_37 = PHI <0(5), nr_47(11)>
    version 37>
============COMPONEN2T_REF==================
test.c:66:30: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                              ^
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
============gimple assign==================
# .MEM_205 = VDEF <.MEM_204>
buf.alloc = 0;
 <integer_cst 0x7f52520afeb8 type <integer_type 0x7f52520c37e0 long unsigned int> constant 0>
============gimple assign==================
# .MEM_206 = VDEF <.MEM_205>
buf.len = 0;
 <integer_cst 0x7f52520afeb8 type <integer_type 0x7f52520c37e0 long unsigned int> constant 0>
============gimple assign==================
# .MEM_207 = VDEF <.MEM_206>
buf.buf = &strbuf_slopbuf;
 <addr_expr 0x7f5251c2fd80
    type <pointer_type 0x7f5251c489d8
        type <array_type 0x7f5251c44498 type <integer_type 0x7f5251c443f0 char>
            BLK
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f5251c489d8>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    constant
    arg 0 <var_decl 0x7f5252e2eab0 strbuf_slopbuf type <array_type 0x7f5251c44498>
        addressable public external common BLK file git.h line 386 col 13
        align 8 context <translation_unit_decl 0x7f52520ba168 test.c>>
    test.c:67:22 start: test.c:67:22 finish: test.c:67:22>
============gimple assign==================
# VUSE <.MEM_192>
_134 = p_133->item;
 <component_ref 0x7f5251c8a090
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f5251c85460
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
       
        arg 0 <ssa_name 0x7f5251c86af8 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c83ea0 p>
            def_stmt p_133 = PHI <list_41(63), p_152(69)>
            version 133
            ptr-info 0x7f5251c8f558>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3da18 item type <pointer_type 0x7f5251c3b2a0>
        unsigned DI file git.h line 308 col 17 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b1f8 commit_list>
        chain <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
            unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>>
    test.c:72:21 start: test.c:72:21 finish: test.c:72:21>
============COMPONEN2T_REF==================
test.c:72:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
============gimple assign==================
# VUSE <.MEM_192>
_135 = _134->object.flags;
 <component_ref 0x7f5251c8a120
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    arg 0 <component_ref 0x7f5251c8a150
        type <record_type 0x7f5251c3bc78 object BLK
            size <integer_cst 0x7f52520cb0a8 constant 192>
            unit size <integer_cst 0x7f52520cb078 constant 24>
            align 32 symtab 0 alias set -1 canonical type 0x7f5251c3bc78 fields <field_decl 0x7f5251c3d4c0 parsed> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48930> chain <type_decl 0x7f5251c3d558 D.3993>>
       
        arg 0 <mem_ref 0x7f5251c854b0 type <record_type 0x7f5251c3b348 commit>
           
            arg 0 <ssa_name 0x7f5251c86b40 type <pointer_type 0x7f5251c3b2a0>
               
                def_stmt _134 = p_133->item;
                version 134
                ptr-info 0x7f5251c8f570>
            arg 1 <integer_cst 0x7f5251c3ee10 constant 0>>
        arg 1 <field_decl 0x7f5251c3dda8 object type <record_type 0x7f5251c3bc78 object>
            BLK file git.h line 313 col 16 size <integer_cst 0x7f52520cb0a8 192> unit size <integer_cst 0x7f52520cb078 24>
            align 32 offset_align 128
            offset <integer_cst 0x7f52520afc18 constant 0>
            bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b348 commit> chain <field_decl 0x7f5251c3dd10 util>>
        test.c:72:27 start: test.c:72:27 finish: test.c:72:27>
    arg 1 <field_decl 0x7f5251c3d2f8 flags type <integer_type 0x7f5251c3ba80>
        unsigned external bit-field nonaddressable SI file git.h line 270 col 11
        size <integer_cst 0x7f5251c3e1c8 constant 27> unit size <integer_cst 0x7f52520afe40 4>
        align 1 offset_align 128 offset <integer_cst 0x7f52520afc18 0>
        bit offset <integer_cst 0x7f5252168978 constant 4>
        bit_field_type <integer_type 0x7f52520c3690 unsigned int public unsigned SI size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c3690 precision 32 min <integer_cst 0x7f52520afe58 0> max <integer_cst 0x7f52520afe10 4294967295>
            pointer_to_this <pointer_type 0x7f52520cf888>> context <record_type 0x7f5251c3bc78 object>
        chain <field_decl 0x7f5251c3d260 oid type <record_type 0x7f5251c3b9d8 object_id>
            BLK file git.h line 271 col 19
            size <integer_cst 0x7f5251c3e198 constant 160>
            unit size <integer_cst 0x7f5251c3e180 constant 20>
            align 8 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afe28 32> context <record_type 0x7f5251c3bc78 object>>>
    test.c:72:35 start: test.c:72:35 finish: test.c:72:35>
============COMPONEN2T_REF==================
test.c:72:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
============gimple assign==================
flags_136 = (unsigned int) _135;
 <ssa_name 0x7f5251c86b88
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _135 = _134->object.flags;
    version 135>
============COMPONEN2T_REF==================
test.c:72:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
============gimple assign==================
_137 = _135 & 4;
 <ssa_name 0x7f5251c86b88
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _135 = _134->object.flags;
    version 135>
============COMPONEN2T_REF==================
lto1: warning: use location
============gimple assign==================
_138 = (unsigned int) _137;
 <ssa_name 0x7f5251c86c18
    type <integer_type 0x7f5251c3ba80 public unsigned SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f5251c3ba80 precision 27 min <integer_cst 0x7f5251c3e1f8 0> max <integer_cst 0x7f5251c3e1e0 134217727>>
   
    def_stmt _137 = _135 & 4;
    version 137>
============COMPONEN2T_REF==================
test.c:74:13: warning: use location
   if (flags & TREESAME)
             ^
============gimple assign==================
_140 = nr_37 - distance_139;
 <ssa_name 0x7f5251c64828
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c633f0 nr>
    def_stmt nr_37 = PHI <0(5), nr_47(11)>
    version 37>
============COMPONEN2T_REF==================
test.c:77:10: warning: use location
   if (nr - distance < distance)
          ^
============gimple assign==================
distance_141 = nr_37 - distance_139;
 <ssa_name 0x7f5251c64828
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c633f0 nr>
    def_stmt nr_37 = PHI <0(5), nr_47(11)>
    version 37>
============COMPONEN2T_REF==================
test.c:78:13: warning: use location
    distance = nr - distance;
             ^
============gimple assign==================
_143 = (long unsigned int) cnt_142;
 <ssa_name 0x7f5251c86d80
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c89090 cnt>
    def_stmt cnt_142 = PHI <0(63), cnt_173(69)>
    version 142>
============COMPONEN2T_REF==================
test.c:79:8: warning: use location
   array[cnt].commit = p->item;
        ^
============gimple assign==================
_144 = _143 * 16;
 <ssa_name 0x7f5251c86dc8
    type <integer_type 0x7f52520c37e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f52520c3738 precision 64 min <integer_cst 0x7f52520afeb8 0> max <integer_cst 0x7f52520b1500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f52520cf9d8>>
   
    def_stmt _143 = (long unsigned int) cnt_142;
    version 143>
============COMPONEN2T_REF==================
test.c:79:8: warning: use location
============gimple assign==================
_145 = array_132 + _144;
 <ssa_name 0x7f5251c86ab0
    type <pointer_type 0x7f5251c48888
        type <record_type 0x7f5251c487e0 commit_dist TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c487e0 fields <field_decl 0x7f5251c46428 commit> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48888> chain <type_decl 0x7f5251c464c0 D.4043>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f5251c83f30 array>
    def_stmt array_132 = calloc (_131, 16);
    version 132
    ptr-info 0x7f5251c8f540>
============COMPONEN2T_REF==================
test.c:79:8: warning: use location
============gimple assign==================
# VUSE <.MEM_218>
_146 = p_133->item;
 <component_ref 0x7f5251c8a1b0
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f5251c85528
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
       
        arg 0 <ssa_name 0x7f5251c86af8 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c83ea0 p>
            def_stmt p_133 = PHI <list_41(63), p_152(69)>
            version 133
            ptr-info 0x7f5251c8f558>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3da18 item type <pointer_type 0x7f5251c3b2a0>
        unsigned DI file git.h line 308 col 17 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b1f8 commit_list>
        chain <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
            unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
            align 64 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>>
    test.c:79:24 start: test.c:79:24 finish: test.c:79:24>
============COMPONEN2T_REF==================
test.c:79:24: warning: use location
   array[cnt].commit = p->item;
                        ^
============gimple assign==================
# .MEM_219 = VDEF <.MEM_218>
_145->commit = _146;
 <ssa_name 0x7f5251c86ea0
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _146 = p_133->item;
    version 146
    ptr-info 0x7f5251c8f5a0>
============gimple assign==================
_147 = (long unsigned int) cnt_142;
 <ssa_name 0x7f5251c86d80
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c89090 cnt>
    def_stmt cnt_142 = PHI <0(63), cnt_173(69)>
    version 142>
============COMPONEN2T_REF==================
test.c:80:8: warning: use location
   array[cnt].distance = distance;
        ^
============gimple assign==================
_148 = _147 * 16;
 <ssa_name 0x7f5251c86ee8
    type <integer_type 0x7f52520c37e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f52520c3738 precision 64 min <integer_cst 0x7f52520afeb8 0> max <integer_cst 0x7f52520b1500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f52520cf9d8>>
   
    def_stmt _147 = (long unsigned int) cnt_142;
    version 147>
============COMPONEN2T_REF==================
test.c:80:8: warning: use location
============gimple assign==================
_149 = array_132 + _148;
 <ssa_name 0x7f5251c86ab0
    type <pointer_type 0x7f5251c48888
        type <record_type 0x7f5251c487e0 commit_dist TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c487e0 fields <field_decl 0x7f5251c46428 commit> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48888> chain <type_decl 0x7f5251c464c0 D.4043>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f5251c83f30 array>
    def_stmt array_132 = calloc (_131, 16);
    version 132
    ptr-info 0x7f5251c8f540>
============COMPONEN2T_REF==================
test.c:80:8: warning: use location
============gimple assign==================
# .MEM_220 = VDEF <.MEM_219>
_149->distance = distance_150;
 <ssa_name 0x7f5251c8c000
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c89240 distance>
    def_stmt distance_150 = PHI <distance_139(66), distance_141(67)>
    version 150>
============gimple assign==================
cnt_151 = cnt_142 + 1;
 <ssa_name 0x7f5251c86d80
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c89090 cnt>
    def_stmt cnt_142 = PHI <0(63), cnt_173(69)>
    version 142>
============COMPONEN2T_REF==================
test.c:81:6: warning: use location
   cnt++;
      ^
============gimple assign==================
# VUSE <.MEM_191>
p_152 = p_133->next;
 <component_ref 0x7f5251c8a2d0
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    arg 0 <mem_ref 0x7f5251c85618 type <record_type 0x7f5251c3b1f8 commit_list>
       
        arg 0 <ssa_name 0x7f5251c86af8 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c83ea0 p>
            def_stmt p_133 = PHI <list_41(63), p_152(69)>
            version 133
            ptr-info 0x7f5251c8f558>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
        unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>
    test.c:70:34 start: test.c:70:34 finish: test.c:70:34>
============COMPONEN2T_REF==================
test.c:70:31: warning: use location
  for (p = list, cnt = 0; p; p = p->next) {
                               ^
============gimple assign==================
_154 = (long unsigned int) i_153;
 <ssa_name 0x7f5251c8c0d8
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c89120 i>
    def_stmt i_153 = PHI <0(70), i_171(73)>
    version 153>
============COMPONEN2T_REF==================
test.c:84:31: warning: use location
   struct object *obj = &(array[i].commit->object);
                               ^
============gimple assign==================
_155 = _154 * 16;
 <ssa_name 0x7f5251c8c120
    type <integer_type 0x7f52520c37e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f52520c3738 precision 64 min <integer_cst 0x7f52520afeb8 0> max <integer_cst 0x7f52520b1500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f52520cf9d8>>
   
    def_stmt _154 = (long unsigned int) i_153;
    version 154>
============COMPONEN2T_REF==================
test.c:84:31: warning: use location
============gimple assign==================
_156 = array_132 + _155;
 <ssa_name 0x7f5251c86ab0
    type <pointer_type 0x7f5251c48888
        type <record_type 0x7f5251c487e0 commit_dist TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c487e0 fields <field_decl 0x7f5251c46428 commit> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48888> chain <type_decl 0x7f5251c464c0 D.4043>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f5251c83f30 array>
    def_stmt array_132 = calloc (_131, 16);
    version 132
    ptr-info 0x7f5251c8f540>
============COMPONEN2T_REF==================
test.c:84:31: warning: use location
============gimple assign==================
# VUSE <.MEM_193>
_157 = _156->commit;
 <component_ref 0x7f5251c8a330
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f5251c85668
        type <record_type 0x7f5251c487e0 commit_dist TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c487e0 fields <field_decl 0x7f5251c46428 commit> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48888> chain <type_decl 0x7f5251c464c0 D.4043>>
       
        arg 0 <ssa_name 0x7f5251c8c1b0 type <pointer_type 0x7f5251c48888>
           
            def_stmt _156 = array_132 + _155;
            version 156
            ptr-info 0x7f5251c8f5e8>
        arg 1 <integer_cst 0x7f5251c3efc0 constant 0>>
    arg 1 <field_decl 0x7f5251c46428 commit type <pointer_type 0x7f5251c3b2a0>
        unsigned DI file git.h line 322 col 17 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c487e0 commit_dist>
        chain <field_decl 0x7f5251c46390 distance type <integer_type 0x7f52520c35e8 int>
            SI file git.h line 323 col 6
            size <integer_cst 0x7f52520afe28 constant 32>
            unit size <integer_cst 0x7f52520afe40 constant 4>
            align 32 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c487e0 commit_dist>>>
    test.c:84:34 start: test.c:84:34 finish: test.c:84:34>
============COMPONEN2T_REF==================
test.c:84:34: warning: use location
   struct object *obj = &(array[i].commit->object);
                                  ^
============gimple assign==================
obj_158 = &_157->object;
 <addr_expr 0x7f5251c8b040
    type <pointer_type 0x7f5251c48930
        type <record_type 0x7f5251c3bc78 object BLK
            size <integer_cst 0x7f52520cb0a8 constant 192>
            unit size <integer_cst 0x7f52520cb078 constant 24>
            align 32 symtab 0 alias set -1 canonical type 0x7f5251c3bc78 fields <field_decl 0x7f5251c3d4c0 parsed> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48930> chain <type_decl 0x7f5251c3d558 D.3993>>
        unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <component_ref 0x7f5251c8a390 type <record_type 0x7f5251c3bc78 object>
       
        arg 0 <mem_ref 0x7f5251c856b8 type <record_type 0x7f5251c3b348 commit>
           
            arg 0 <ssa_name 0x7f5251c8c1f8 type <pointer_type 0x7f5251c3b2a0>
               
                def_stmt _157 = _156->commit;
                version 157
                ptr-info 0x7f5251c8f600>
            arg 1 <integer_cst 0x7f5251c3ee10 constant 0>>
        arg 1 <field_decl 0x7f5251c3dda8 object type <record_type 0x7f5251c3bc78 object>
            BLK file git.h line 313 col 16 size <integer_cst 0x7f52520cb0a8 192> unit size <integer_cst 0x7f52520cb078 24>
            align 32 offset_align 128
            offset <integer_cst 0x7f52520afc18 constant 0>
            bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c3b348 commit> chain <field_decl 0x7f5251c3dd10 util>>
        test.c:84:41 start: test.c:84:41 finish: test.c:84:41>
    test.c:84:24 start: test.c:84:24 finish: test.c:84:24>
============COMPONEN2T_REF==================
test.c:84:18: warning: use location
   struct object *obj = &(array[i].commit->object);
                  ^
============gimple assign==================
_159 = (long unsigned int) i_153;
 <ssa_name 0x7f5251c8c0d8
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c89120 i>
    def_stmt i_153 = PHI <0(70), i_171(73)>
    version 153>
============COMPONEN2T_REF==================
test.c:87:37: warning: use location
   strbuf_addf(&buf, "dist=%d", array[i].distance);
                                     ^
============gimple assign==================
_160 = _159 * 16;
 <ssa_name 0x7f5251c8c288
    type <integer_type 0x7f52520c37e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f52520c3738 precision 64 min <integer_cst 0x7f52520afeb8 0> max <integer_cst 0x7f52520b1500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f52520cf9d8>>
   
    def_stmt _159 = (long unsigned int) i_153;
    version 159>
============COMPONEN2T_REF==================
test.c:87:37: warning: use location
============gimple assign==================
_161 = array_132 + _160;
 <ssa_name 0x7f5251c86ab0
    type <pointer_type 0x7f5251c48888
        type <record_type 0x7f5251c487e0 commit_dist TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c487e0 fields <field_decl 0x7f5251c46428 commit> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48888> chain <type_decl 0x7f5251c464c0 D.4043>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f5251c83f30 array>
    def_stmt array_132 = calloc (_131, 16);
    version 132
    ptr-info 0x7f5251c8f540>
============COMPONEN2T_REF==================
test.c:87:37: warning: use location
============gimple assign==================
# VUSE <.MEM_214>
_162 = _161->distance;
 <component_ref 0x7f5251c8a3f0
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
   
    arg 0 <mem_ref 0x7f5251c85708
        type <record_type 0x7f5251c487e0 commit_dist TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c487e0 fields <field_decl 0x7f5251c46428 commit> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48888> chain <type_decl 0x7f5251c464c0 D.4043>>
       
        arg 0 <ssa_name 0x7f5251c8c318 type <pointer_type 0x7f5251c48888>
           
            def_stmt _161 = array_132 + _160;
            version 161
            ptr-info 0x7f5251c8f630>
        arg 1 <integer_cst 0x7f5251c3efc0 constant 0>>
    arg 1 <field_decl 0x7f5251c46390 distance type <integer_type 0x7f52520c35e8 int>
        SI file git.h line 323 col 6 size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
        align 32 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afbe8 constant 64> context <record_type 0x7f5251c487e0 commit_dist>>
    test.c:87:3 start: test.c:87:3 finish: test.c:87:3>
============COMPONEN2T_REF==================
test.c:87:3: warning: use location
   strbuf_addf(&buf, "dist=%d", array[i].distance);
   ^
============gimple assign==================
# VUSE <.MEM_215>
_163 = buf.buf;
 <component_ref 0x7f5251c8a450
    type <pointer_type 0x7f5251c48690
        type <integer_type 0x7f5251c443f0 char public string-flag QI
            size <integer_cst 0x7f52520afcd8 constant 8>
            unit size <integer_cst 0x7f52520afcf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f52520c33f0 precision 8 min <integer_cst 0x7f5251c3e360 -128> max <integer_cst 0x7f5251c3e348 127>
            pointer_to_this <pointer_type 0x7f5251c48690>>
        unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f52520ba168 test.c>>
   
    arg 0 <var_decl 0x7f5251c89000 buf
        type <record_type 0x7f5251c48738 strbuf BLK
            size <integer_cst 0x7f52520cb0a8 constant 192>
            unit size <integer_cst 0x7f52520cb078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c48738 fields <field_decl 0x7f5251c46260 alloc> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48a80> chain <type_decl 0x7f5251c462f8 D.4040>>
        addressable used BLK file test.c line 67 col 16 size <integer_cst 0x7f52520cb0a8 192> unit size <integer_cst 0x7f52520cb078 24>
        align 128 context <function_decl 0x7f5251c3cb00 main> abstract_origin <var_decl 0x7f5251c83630 buf>
        chain <var_decl 0x7f5251c89090 cnt type <integer_type 0x7f52520c35e8 int>
            used SI file test.c line 68 col 6
            size <integer_cst 0x7f52520afe28 constant 32>
            unit size <integer_cst 0x7f52520afe40 constant 4>
            align 32 context <function_decl 0x7f5251c3cb00 main> abstract_origin <var_decl 0x7f5251c835a0 cnt> chain <var_decl 0x7f5251c89120 i>>>
    arg 1 <field_decl 0x7f5251c46130 buf type <pointer_type 0x7f5251c48690>
        unsigned DI file git.h line 244 col 8 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc48 constant 16>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c48738 strbuf>>
    test.c:88:3 start: test.c:88:3 finish: test.c:88:3>
============COMPONEN2T_REF==================
test.c:88:3: warning: use location
   add_name_decoration(DECORATION_NONE, buf.buf, obj);
   ^
============gimple assign==================
_164 = (long unsigned int) i_153;
 <ssa_name 0x7f5251c8c0d8
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c89120 i>
    def_stmt i_153 = PHI <0(70), i_171(73)>
    version 153>
============COMPONEN2T_REF==================
test.c:90:18: warning: use location
   p->item = array[i].commit;
                  ^
============gimple assign==================
_165 = _164 * 16;
 <ssa_name 0x7f5251c8c3f0
    type <integer_type 0x7f52520c37e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f52520c3738 precision 64 min <integer_cst 0x7f52520afeb8 0> max <integer_cst 0x7f52520b1500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f52520cf9d8>>
   
    def_stmt _164 = (long unsigned int) i_153;
    version 164>
============COMPONEN2T_REF==================
test.c:90:18: warning: use location
============gimple assign==================
_166 = array_132 + _165;
 <ssa_name 0x7f5251c86ab0
    type <pointer_type 0x7f5251c48888
        type <record_type 0x7f5251c487e0 commit_dist TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c487e0 fields <field_decl 0x7f5251c46428 commit> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48888> chain <type_decl 0x7f5251c464c0 D.4043>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f5251c83f30 array>
    def_stmt array_132 = calloc (_131, 16);
    version 132
    ptr-info 0x7f5251c8f540>
============COMPONEN2T_REF==================
test.c:90:18: warning: use location
============gimple assign==================
# VUSE <.MEM_216>
_167 = _166->commit;
 <component_ref 0x7f5251c8a4b0
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <mem_ref 0x7f5251c85758
        type <record_type 0x7f5251c487e0 commit_dist TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c487e0 fields <field_decl 0x7f5251c46428 commit> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48888> chain <type_decl 0x7f5251c464c0 D.4043>>
       
        arg 0 <ssa_name 0x7f5251c8c480 type <pointer_type 0x7f5251c48888>
           
            def_stmt _166 = array_132 + _165;
            version 166
            ptr-info 0x7f5251c8f660>
        arg 1 <integer_cst 0x7f5251c3efc0 constant 0>>
    arg 1 <field_decl 0x7f5251c46428 commit type <pointer_type 0x7f5251c3b2a0>
        unsigned DI file git.h line 322 col 17 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0>
        bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c487e0 commit_dist>
        chain <field_decl 0x7f5251c46390 distance type <integer_type 0x7f52520c35e8 int>
            SI file git.h line 323 col 6
            size <integer_cst 0x7f52520afe28 constant 32>
            unit size <integer_cst 0x7f52520afe40 constant 4>
            align 32 offset_align 128 offset <integer_cst 0x7f52520afc18 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c487e0 commit_dist>>>
    test.c:90:21 start: test.c:90:21 finish: test.c:90:21>
============COMPONEN2T_REF==================
test.c:90:21: warning: use location
   p->item = array[i].commit;
                     ^
============gimple assign==================
# .MEM_217 = VDEF <.MEM_216>
p_168->item = _167;
 <ssa_name 0x7f5251c8c4c8
    type <pointer_type 0x7f5251c3b2a0
        type <record_type 0x7f5251c3b348 commit BLK
            size <integer_cst 0x7f52520cb030 constant 512>
            unit size <integer_cst 0x7f5252168c18 constant 64>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b348 fields <field_decl 0x7f5251c3dda8 object> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b2a0> chain <type_decl 0x7f5251c3de40 D.4008>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _167 = _166->commit;
    version 167
    ptr-info 0x7f5251c8f678>
============gimple assign==================
_169 = cnt_142 + -1;
 <ssa_name 0x7f5251c86d80
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c89090 cnt>
    def_stmt cnt_142 = PHI <0(63), cnt_173(69)>
    version 142>
============COMPONEN2T_REF==================
test.c:91:15: warning: use location
   if (i < cnt - 1)
               ^
============gimple assign==================
# VUSE <.MEM_217>
p_170 = p_168->next;
 <component_ref 0x7f5251c8a570
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    arg 0 <mem_ref 0x7f5251c857f8 type <record_type 0x7f5251c3b1f8 commit_list>
       
        arg 0 <ssa_name 0x7f5251c8c510 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c83ea0 p>
            def_stmt p_168 = PHI <list_41(70), p_174(73)>
            version 168
            ptr-info 0x7f5251c8f690>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
        unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>
    test.c:92:9 start: test.c:92:9 finish: test.c:92:9>
============COMPONEN2T_REF==================
test.c:92:6: warning: use location
    p = p->next;
      ^
============gimple assign==================
i_171 = i_153 + 1;
 <ssa_name 0x7f5251c8c0d8
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
    var <var_decl 0x7f5251c89120 i>
    def_stmt i_153 = PHI <0(70), i_171(73)>
    version 153>
============COMPONEN2T_REF==================
test.c:83:34: warning: use location
  for (p = list, i = 0; i < cnt; i++) {
                                  ^
============gimple assign==================
# VUSE <.MEM_193>
_172 = p_168->next;
 <component_ref 0x7f5251c8a5d0
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    arg 0 <mem_ref 0x7f5251c85848 type <record_type 0x7f5251c3b1f8 commit_list>
       
        arg 0 <ssa_name 0x7f5251c8c510 type <pointer_type 0x7f5251c3b0a8>
            var <var_decl 0x7f5251c83ea0 p>
            def_stmt p_168 = PHI <list_41(70), p_174(73)>
            version 168
            ptr-info 0x7f5251c8f690>
        arg 1 <integer_cst 0x7f5251c3edc8 constant 0>>
    arg 1 <field_decl 0x7f5251c3d980 next type <pointer_type 0x7f5251c3b0a8>
        unsigned DI file git.h line 309 col 22 size <integer_cst 0x7f52520afbe8 64> unit size <integer_cst 0x7f52520afc00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f52520afc18 constant 0> bit offset <integer_cst 0x7f52520afbe8 64> context <record_type 0x7f5251c3b1f8 commit_list>>
    test.c:94:2 start: test.c:94:2 finish: test.c:94:2>
============COMPONEN2T_REF==================
test.c:94:2: warning: use location
  free_commit_list(p->next);
  ^
============gimple assign==================
# .MEM_209 = VDEF <.MEM_208>
p_168->next = 0B;
 <integer_cst 0x7f5251c3edc8 type <pointer_type 0x7f5251c3b0a8> constant 0>
# .MEM_211 = VDEF <.MEM_210>
free (array_132);
============gimple assign==================
# .MEM_212 = VDEF <.MEM_211>
buf ={v} {CLOBBER};
 <constructor 0x7f5251c8f018
    type <record_type 0x7f5251c48738 strbuf BLK
        size <integer_cst 0x7f52520cb0a8 constant 192>
        unit size <integer_cst 0x7f52520cb078 constant 24>
        align 64 symtab 0 alias set -1 canonical type 0x7f5251c48738
        fields <field_decl 0x7f5251c46260 alloc type <integer_type 0x7f5251c441f8 size_t>
            unsigned DI file git.h line 242 col 9
            size <integer_cst 0x7f52520afbe8 constant 64>
            unit size <integer_cst 0x7f52520afc00 constant 8>
            align 64 offset_align 128
            offset <integer_cst 0x7f52520afc18 constant 0>
            bit offset <integer_cst 0x7f52520afc60 constant 0> context <record_type 0x7f5251c48738 strbuf> chain <field_decl 0x7f5251c461c8 len>> context <translation_unit_decl 0x7f52520ba168 test.c>
        pointer_to_this <pointer_type 0x7f5251c48a80> chain <type_decl 0x7f5251c462f8 D.4040>>
    constant volatile lngt 0>
============gimple assign==================
_213 = list_41;
 <ssa_name 0x7f5251c64948
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c63510 list>
    def_stmt list_41 = last_33;
    version 41
    ptr-info 0x7f5251c8f228>
============COMPONEN2T_REF==================
lto1: warning: use location
============gimple assign==================
_108 = _213;
 <ssa_name 0x7f5251c921f8
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c89360 D.4190>
    def_stmt _213 = list_41;
    version 213
    ptr-info 0x7f5251c8f6f0>
============COMPONEN2T_REF==================
test.c:211:10: warning: use location
   return best_bisection_sorted(list, nr);
          ^
============gimple assign==================
_236 = _109;
 <ssa_name 0x7f5251c77a68
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
   
    def_stmt _109 = PHI <p_68(28), p_81(48), _107(62), _108(75)>
    version 109
    ptr-info 0x7f5251c8f480>
============COMPONEN2T_REF==================
lto1: warning: use location
============gimple assign==================
best_44 = _236;
 <ssa_name 0x7f5251c92870
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c74090 D.4141>
    def_stmt _236 = _109;
    version 236
    ptr-info 0x7f5251c8f720>
============COMPONEN2T_REF==================
test.c:250:7: warning: use location
  best = do_find_bisection(list, nr, weights, find_all);
       ^
============gimple assign==================
# .MEM_237 = VDEF <.MEM_194>
best_44->next = 0B;
 <integer_cst 0x7f5251c3edc8 type <pointer_type 0x7f5251c3b0a8> constant 0>
============gimple assign==================
reaches_258 = _45;
 <ssa_name 0x7f5251c64a68
    type <integer_type 0x7f52520c35e8 int public SI
        size <integer_cst 0x7f52520afe28 constant 32>
        unit size <integer_cst 0x7f52520afe40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
        pointer_to_this <pointer_type 0x7f52520caa80>>
   
    def_stmt _45 = weight (best_44);
    version 45>
============COMPONEN2T_REF==================
test.c:254:12: warning: use location
   *reaches = weight(best);
            ^
# .MEM_240 = VDEF <.MEM_196>
free (weights_43);
============gimple assign==================
list_259 = best_44;
 <ssa_name 0x7f5251c64a20
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c63630 best>
    def_stmt best_44 = _236;
    version 44
    ptr-info 0x7f5251c8f258>
============COMPONEN2T_REF==================
test.c:257:15: warning: use location
  *commit_list = best;
               ^
============gimple assign==================
_1 = list_259;
 <ssa_name 0x7f5251c92f30
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c59240 list>
    def_stmt list_259 = best_44;
    version 259
    ptr-info 0x7f5251c8f780>
============COMPONEN2T_REF==================
test.c:268:5: warning: use location
     free_commit_list(list);
     ^
GIMPLE_RETURN
# VUSE <.MEM_16>
return 0;
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
 <function_decl 0x7f5251c3cb00 main
    type <function_type 0x7f5251c3b7e0
        type <integer_type 0x7f52520c35e8 int public SI
            size <integer_cst 0x7f52520afe28 constant 32>
            unit size <integer_cst 0x7f52520afe40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
            pointer_to_this <pointer_type 0x7f52520caa80>>
        QI
        size <integer_cst 0x7f52520afcd8 constant 8>
        unit size <integer_cst 0x7f52520afcf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 259 col 5 align 8 context <translation_unit_decl 0x7f52520ba168 test.c> initial <block 0x7f5251c51180>
    result <result_decl 0x7f52520ba2d0 D.4054 type <integer_type 0x7f52520c35e8 int>
        ignored SI file test.c line 259 col 5 size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
        align 32 context <function_decl 0x7f5251c3cb00 main>>
    struct-function 0x7f5251c52160>
 <function_decl 0x7f5251c3cb00 main
    type <function_type 0x7f5251c3b7e0
        type <integer_type 0x7f52520c35e8 int public SI
            size <integer_cst 0x7f52520afe28 constant 32>
            unit size <integer_cst 0x7f52520afe40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
            pointer_to_this <pointer_type 0x7f52520caa80>>
        QI
        size <integer_cst 0x7f52520afcd8 constant 8>
        unit size <integer_cst 0x7f52520afcf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 259 col 5 align 8 context <translation_unit_decl 0x7f52520ba168 test.c> initial <block 0x7f5251c51180>
    result <result_decl 0x7f52520ba2d0 D.4054 type <integer_type 0x7f52520c35e8 int>
        ignored SI file test.c line 259 col 5 size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
        align 32 context <function_decl 0x7f5251c3cb00 main>>
    struct-function 0x7f5251c52160>
 <function_decl 0x7f5251c3cb00 main
    type <function_type 0x7f5251c3b7e0
        type <integer_type 0x7f52520c35e8 int public SI
            size <integer_cst 0x7f52520afe28 constant 32>
            unit size <integer_cst 0x7f52520afe40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
            pointer_to_this <pointer_type 0x7f52520caa80>>
        QI
        size <integer_cst 0x7f52520afcd8 constant 8>
        unit size <integer_cst 0x7f52520afcf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 259 col 5 align 8 context <translation_unit_decl 0x7f52520ba168 test.c> initial <block 0x7f5251c51180>
    result <result_decl 0x7f52520ba2d0 D.4054 type <integer_type 0x7f52520c35e8 int>
        ignored SI file test.c line 259 col 5 size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
        align 32 context <function_decl 0x7f5251c3cb00 main>>
    struct-function 0x7f5251c52160>
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
=======================================================
=======node_fun:free_commit_list=========
=======node_fun:main=========
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 15 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free_commit_list========= [0m
[40;44m =======print_function_path free_commit_list  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:free_commit_list========= [0m
[40;42m =======start_check_funciton:free_commit_list========= [0m
[40;33m =======POP node_fun stack:free_commit_list========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:weight========= [0m
[40;33m =======POP node_fun stack:weight========= [0m
[40;42m =======pre add _ fucntion:strbuf_release========= [0m
[40;33m =======POP node_fun stack:strbuf_release========= [0m
[40;42m =======pre add _ fucntion:add_name_decoration========= [0m
[40;33m =======POP node_fun stack:add_name_decoration========= [0m
[40;42m =======pre add _ fucntion:strbuf_addf========= [0m
[40;33m =======POP node_fun stack:strbuf_addf========= [0m
[40;42m =======pre add _ fucntion:strbuf_reset========= [0m
[40;33m =======POP node_fun stack:strbuf_reset========= [0m
[40;42m =======pre add _ fucntion:calloc========= [0m
[40;33m =======POP node_fun stack:calloc========= [0m
[40;42m =======pre add _ fucntion:show_list========= [0m
[40;33m =======POP node_fun stack:show_list========= [0m
[40;42m =======pre add _ fucntion:halfway========= [0m
[40;33m =======POP node_fun stack:halfway========= [0m
[40;42m =======pre add _ fucntion:weight_set========= [0m
[40;33m =======POP node_fun stack:weight_set========= [0m
[40;42m =======pre add _ fucntion:clear_distance========= [0m
[40;33m =======POP node_fun stack:clear_distance========= [0m
[40;42m =======pre add _ fucntion:count_distance========= [0m
[40;33m =======POP node_fun stack:count_distance========= [0m
[40;42m =======pre add _ fucntion:count_interesting_parents========= [0m
[40;33m =======POP node_fun stack:count_interesting_parents========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m
 <function_decl 0x7f5251c3cb00 main
    type <function_type 0x7f5251c3b7e0
        type <integer_type 0x7f52520c35e8 int public SI
            size <integer_cst 0x7f52520afe28 constant 32>
            unit size <integer_cst 0x7f52520afe40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
            pointer_to_this <pointer_type 0x7f52520caa80>>
        QI
        size <integer_cst 0x7f52520afcd8 constant 8>
        unit size <integer_cst 0x7f52520afcf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 259 col 5 align 8 context <translation_unit_decl 0x7f52520ba168 test.c> initial <block 0x7f5251c51180>
    result <result_decl 0x7f52520ba2d0 D.4054 type <integer_type 0x7f52520c35e8 int>
        ignored SI file test.c line 259 col 5 size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
        align 32 context <function_decl 0x7f5251c3cb00 main>>
    struct-function 0x7f5251c52160>
 <ssa_name 0x7f5251c5c630
    type <pointer_type 0x7f5251c3b0a8
        type <record_type 0x7f5251c3b1f8 commit_list TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c3b1f8 fields <field_decl 0x7f5251c3da18 item> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c3b0a8> chain <type_decl 0x7f5251c3ded8 D.4009>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f5251c3b3f0>>
    var <var_decl 0x7f5251c597e0 new_list>
    def_stmt new_list_21 = malloc (16);
    version 21
    ptr-info 0x7f5251c8f138>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

list_262 = new_list_21;
test.c:35:10: warning: use location
  *list_p = new_list;
          ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 3: list_262 = new_list_21;
test.c:35:10: warning: use location
  *list_p = new_list;
          ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start list_262 = new_list_21;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start list_262 = new_list_21;
test.c:35:10: warning: use location
  *list_p = new_list;
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

list_255 = PHI <list_256(D)(2), list_262(3)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 4: list_255 = PHI <list_256(D)(2), list_262(3)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start list_255 = PHI <list_256(D)(2), list_262(3)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start list_255 = PHI <list_256(D)(2), list_262(3)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

_22 = list_255;
test.c:34:19: warning: use location
  new_list->next = *list_p;
                   ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 3: _22 = list_255;
test.c:34:19: warning: use location
  new_list->next = *list_p;
                   ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _22 = list_255;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _22 = list_255;
test.c:34:19: warning: use location
  new_list->next = *list_p;
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

new_list_21->next = _22;
test.c:34:17: warning: use location
  new_list->next = *list_p;
                 ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 3: new_list_21->next = _22;
test.c:34:17: warning: use location
  new_list->next = *list_p;
                 ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start new_list_21->next = _22;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start new_list_21->next = _22;
test.c:34:17: warning: use location
  new_list->next = *list_p;
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_25 = list_255;
test.c:227:40: warning: use location
  for (nr = on_list = 0, last = NULL, p = *commit_list;
                                        ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 5: p_25 = list_255;
test.c:227:40: warning: use location
  for (nr = on_list = 0, last = NULL, p = *commit_list;
                                        ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_25 = list_255;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_25 = list_255;
test.c:227:40: warning: use location
  for (nr = on_list = 0, last = NULL, p = *commit_list;
                                        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_26 = PHI <p_25(5), p_49(11)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 12: p_26 = PHI <p_25(5), p_49(11)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 12dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_26 = PHI <p_25(5), p_49(11)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_26 = PHI <p_25(5), p_49(11)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

p_26->next = last_33;
test.c:237:11: warning: use location
   p->next = last;
           ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 8: p_26->next = last_33;
test.c:237:11: warning: use location
   p->next = last;
           ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_26->next = last_33;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_26->next = last_33;
test.c:237:11: warning: use location
   p->next = last;
           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_26->next = last_33;
test.c:237:11: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 8: p_26->next = last_33;
test.c:237:11: warning: use location
   p->next = last;
           ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_26->next = last_33;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_26->next = last_33;
test.c:237:11: warning: use location
   p->next = last;
           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

last_50 = PHI <last_33(7), p_26(10)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 11: last_50 = PHI <last_33(7), p_26(10)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start last_50 = PHI <last_33(7), p_26(10)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start last_50 = PHI <last_33(7), p_26(10)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

list_41 = last_33;
test.c:243:7: warning: use location
  list = last;
       ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 13: list_41 = last_33;
test.c:243:7: warning: use location
  list = last;
       ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 13dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start list_41 = last_33;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start list_41 = last_33;
test.c:243:7: warning: use location
  list = last;
       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

show_list ("bisection 2 counted all", counted_106, nr_37, list_41);
test.c:206:2: warning: use location
  show_list("bisection 2 counted all", counted, nr, list);
  ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 53: show_list ("bisection 2 counted all", counted_106, nr_37, list_41);
test.c:206:2: warning: use location
  show_list("bisection 2 counted all", counted, nr, list);
  ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 53dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start show_list ("bisection 2 counted all", counted_106, nr_37, list_41);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start show_list ("bisection 2 counted all", counted_106, nr_37, list_41);
test.c:206:2: warning: use location
  show_list("bisection 2 counted all", counted, nr, list);
  ^
dot graph stmt end

this stmt is child function---show_list-----

 ================== trace ================== 
trace fucntion name:show_list 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

show_list ("bisection 2 count one", counted_101, nr_37, list_41);
test.c:194:5: warning: use location
     show_list("bisection 2 count one",
     ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 44: show_list ("bisection 2 count one", counted_101, nr_37, list_41);
test.c:194:5: warning: use location
     show_list("bisection 2 count one",
     ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 44dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start show_list ("bisection 2 count one", counted_101, nr_37, list_41);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start show_list ("bisection 2 count one", counted_101, nr_37, list_41);
test.c:194:5: warning: use location
     show_list("bisection 2 count one",
     ^
dot graph stmt end

this stmt is child function---show_list-----

 ================== trace ================== 
trace fucntion name:show_list 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

show_list ("bisection 2 count_distance", counted_78, nr_37, list_41);
test.c:168:2: warning: use location
  show_list("bisection 2 count_distance", counted, nr, list);
  ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 32: show_list ("bisection 2 count_distance", counted_78, nr_37, list_41);
test.c:168:2: warning: use location
  show_list("bisection 2 count_distance", counted, nr, list);
  ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start show_list ("bisection 2 count_distance", counted_78, nr_37, list_41);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start show_list ("bisection 2 count_distance", counted_78, nr_37, list_41);
test.c:168:2: warning: use location
  show_list("bisection 2 count_distance", counted, nr, list);
  ^
dot graph stmt end

this stmt is child function---show_list-----

 ================== trace ================== 
trace fucntion name:show_list 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

clear_distance (list_41);
test.c:160:3: warning: use location
   clear_distance(list);
   ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 26: clear_distance (list_41);
test.c:160:3: warning: use location
   clear_distance(list);
   ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start clear_distance (list_41);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start clear_distance (list_41);
test.c:160:3: warning: use location
   clear_distance(list);
   ^
dot graph stmt end

this stmt is child function---clear_distance-----

 ================== trace ================== 
trace fucntion name:clear_distance 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

show_list ("bisection 2 initialize", counted_65, nr_37, list_41);
test.c:138:2: warning: use location
  show_list("bisection 2 initialize", counted, nr, list);
  ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 21: show_list ("bisection 2 initialize", counted_65, nr_37, list_41);
test.c:138:2: warning: use location
  show_list("bisection 2 initialize", counted, nr, list);
  ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 21dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start show_list ("bisection 2 initialize", counted_65, nr_37, list_41);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start show_list ("bisection 2 initialize", counted_65, nr_37, list_41);
test.c:138:2: warning: use location
  show_list("bisection 2 initialize", counted, nr, list);
  ^
dot graph stmt end

this stmt is child function---show_list-----

 ================== trace ================== 
trace fucntion name:show_list 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

show_list ("bisection 2 count one", counted_66, nr_37, list_41);
test.c:121:5: warning: use location
     show_list("bisection 2 count one",
     ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 16: show_list ("bisection 2 count one", counted_66, nr_37, list_41);
test.c:121:5: warning: use location
     show_list("bisection 2 count one",
     ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start show_list ("bisection 2 count one", counted_66, nr_37, list_41);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start show_list ("bisection 2 count one", counted_66, nr_37, list_41);
test.c:121:5: warning: use location
     show_list("bisection 2 count one",
     ^
dot graph stmt end

this stmt is child function---show_list-----

 ================== trace ================== 
trace fucntion name:show_list 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

show_list ("bisection 2 sorted", 0, nr_37, list_41);
test.c:244:2: warning: use location
  show_list("bisection 2 sorted", 0, nr, list);
  ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 13: show_list ("bisection 2 sorted", 0, nr_37, list_41);
test.c:244:2: warning: use location
  show_list("bisection 2 sorted", 0, nr, list);
  ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 13dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start show_list ("bisection 2 sorted", 0, nr_37, list_41);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start show_list ("bisection 2 sorted", 0, nr_37, list_41);
test.c:244:2: warning: use location
  show_list("bisection 2 sorted", 0, nr, list);
  ^
dot graph stmt end

this stmt is child function---show_list-----

 ================== trace ================== 
trace fucntion name:show_list 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

p_168 = PHI <list_41(70), p_174(73)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 74: p_168 = PHI <list_41(70), p_174(73)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 74dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_168 = PHI <list_41(70), p_174(73)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_168 = PHI <list_41(70), p_174(73)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---show_list-----
dot graph entry main
dot graph target entry end

p_168->next = 0B;
test.c:95:10: warning: use location
  p->next = NULL;
          ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 75: p_168->next = 0B;
test.c:95:10: warning: use location
  p->next = NULL;
          ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 75dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_168->next = 0B;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_168->next = 0B;
test.c:95:10: warning: use location
  p->next = NULL;
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_172 = p_168->next;
test.c:94:2: warning: use location
  free_commit_list(p->next);
  ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 75: _172 = p_168->next;
test.c:94:2: warning: use location
  free_commit_list(p->next);
  ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 75dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _172 = p_168->next;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _172 = p_168->next;
test.c:94:2: warning: use location
  free_commit_list(p->next);
  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free_commit_list (_172);
test.c:94:2: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 75: free_commit_list (_172);
test.c:94:2: warning: use location
  free_commit_list(p->next);
  ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 75dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start free_commit_list (_172);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start free_commit_list (_172);
test.c:94:2: warning: use location
  free_commit_list(p->next);
  ^
dot graph stmt end

this stmt is child function---free_commit_list-----

 ================== trace ================== 
trace fucntion name:free_commit_list 
[40;44m =======trace_function_path free_commit_list  function_call count: 1 level :0========  [0m
# .MEM_11 = VDEF <.MEM_2>
free (top_5);
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_2>
free (top_5);
test.c:19:3: warning: use location
   free(top);
   ^
dot graph start relate form ID : 579430541
from free_commit_list basic block 6dot graph end relate end

dot graph relate stmt start ID : 1279607749 stmt(free) :free (top_5);
test.c:19:3: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 1279607749 stmt(free) :free (top_5);
test.c:19:3: warning: use location
dot graph relate end

[40;36m ======= node_fun:free_commit_list========= [0m
[40;36m ======= find relate stmt with new_list ========= [0m
[40;36m ======= relate stmt argument:new_list ========= [0m
[40;36m ======= relate node_fun argument222:new_list========= [0m
[40;36m ======= relate gimple_assign_lhs2:�========= [0m




dot graph arrowdot graph start relate for1ID : 579430541
from free_commit_list basic block 3dot graph end relate end

In function ‘free_commit_list’:
test.c:14:22: warning: use location
  struct commit_list *top = *stack;
                      ^
dot graph relate stmt start ID : 2018049243 stmt(LHS) :top_5 = list_14;
test.c:14:22: warning: use location
top_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:new_list========= [0m
[40;36m ======= relate gimple_assign_lhs2:�========= [0m




dot graph arrowdot graph start relate for1ID : 579430541
from free_commit_list basic block 4dot graph end relate end

test.c:15:40: warning: use location
  struct commit *item = top ? top->item : NULL;
                                        ^
dot graph relate stmt start ID : 1280543392 stmt(LHS) :_6 = top_5->item;
test.c:15:40: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:new_list========= [0m
[40;36m ======= relate gimple_assign_lhs2:�========= [0m




dot graph arrowdot graph start relate for1ID : 579430541
from free_commit_list basic block 6dot graph end relate end

test.c:18:15: warning: use location
   *stack = top->next;
               ^
dot graph relate stmt start ID : 1225705398 stmt(LHS) :_7 = top_5->next;
test.c:18:15: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:new_list========= [0m
[40;36m ======= relate gimple_assign_lhs2:�========= [0m




dot graph arrowdot graph start relate for1ID : 579430541
from free_commit_list basic block 6dot graph end relate end

test.c:18:10: warning: use location
   *stack = top->next;
          ^
dot graph relate stmt start ID : 1993773955 stmt(LHS) :list_16 = _7;
test.c:18:10: warning: use location
list_16
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 579430541
from free_commit_list basic block 6dot graph end relate end

dot graph relate stmt start ID : 530130203 stmt(call) :free (top_5);
test.c:19:3: warning: use location
   free(top);
   ^
top_5
dot graph relate end

[40;36m ======= relate node_fun argument222:new_list========= [0m
[40;36m ======= relate gimple_assign_lhs2:�========= [0m




dot graph arrowdot graph start relate for1ID : 579430541
from free_commit_list basic block 7dot graph end relate end

lto1: warning: use location
dot graph relate stmt start ID : 1039386654 stmt(LHS) :_12 = _8;
lto1: warning: use location
_12
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:new_list========= [0m
[40;36m ======= relate gimple_assign_lhs2:�========= [0m




dot graph arrowdot graph start relate for1ID : 579430541
from free_commit_list basic block 8dot graph end relate end

test.c:26:9: warning: use location
  while (list)
         ^
dot graph relate stmt start ID : 935189304 stmt(LHS) :_1 = list_14;
test.c:26:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

p_170 = p_168->next;
In function ‘main’:
test.c:92:6: warning: use location
    p = p->next;
      ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 72: p_170 = p_168->next;
test.c:92:6: warning: use location
    p = p->next;
      ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 72dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_170 = p_168->next;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_170 = p_168->next;
test.c:92:6: warning: use location
    p = p->next;
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_174 = PHI <p_168(71), p_170(72)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 73: p_174 = PHI <p_168(71), p_170(72)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 73dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_174 = PHI <p_168(71), p_170(72)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_174 = PHI <p_168(71), p_170(72)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---free_commit_list-----
dot graph entry main
dot graph target entry end

p_168->item = _167;
test.c:90:11: warning: use location
   p->item = array[i].commit;
           ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 71: p_168->item = _167;
test.c:90:11: warning: use location
   p->item = array[i].commit;
           ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_168->item = _167;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_168->item = _167;
test.c:90:11: warning: use location
   p->item = array[i].commit;
           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_168->item = _167;
test.c:90:11: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 71: p_168->item = _167;
test.c:90:11: warning: use location
   p->item = array[i].commit;
           ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_168->item = _167;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_168->item = _167;
test.c:90:11: warning: use location
   p->item = array[i].commit;
           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

best_127 = PHI <list_41(53), best_129(60)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 61: best_127 = PHI <list_41(53), best_129(60)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 61dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start best_127 = PHI <list_41(53), best_129(60)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start best_127 = PHI <list_41(53), best_129(60)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---free_commit_list-----
dot graph entry main
dot graph target entry end

best_129 = PHI <best_127(55), best_127(58), p_114(59)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 60: best_129 = PHI <best_127(55), best_127(58), p_114(59)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 60dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start best_129 = PHI <best_127(55), best_127(58), p_114(59)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start best_129 = PHI <best_127(55), best_127(58), p_114(59)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---free_commit_list-----
dot graph entry main
dot graph target entry end

_221 = best_127;
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 62: _221 = best_127;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 62dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _221 = best_127;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _221 = best_127;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_107 = _221;
test.c:209:10: warning: use location
   return best_bisection(list, nr);
          ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 62: _107 = _221;
test.c:209:10: warning: use location
   return best_bisection(list, nr);
          ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 62dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _107 = _221;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _107 = _221;
test.c:209:10: warning: use location
   return best_bisection(list, nr);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_109 = PHI <p_68(28), p_81(48), _107(62), _108(75)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 76: _109 = PHI <p_68(28), p_81(48), _107(62), _108(75)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 76dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _109 = PHI <p_68(28), p_81(48), _107(62), _108(75)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _109 = PHI <p_68(28), p_81(48), _107(62), _108(75)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---free_commit_list-----
dot graph entry main
dot graph target entry end

_236 = _109;
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 76: _236 = _109;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 76dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _236 = _109;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _236 = _109;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

best_44 = _236;
test.c:250:7: warning: use location
  best = do_find_bisection(list, nr, weights, find_all);
       ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 76: best_44 = _236;
test.c:250:7: warning: use location
  best = do_find_bisection(list, nr, weights, find_all);
       ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 76dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start best_44 = _236;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start best_44 = _236;
test.c:250:7: warning: use location
  best = do_find_bisection(list, nr, weights, find_all);
       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

list_259 = best_44;
test.c:257:15: warning: use location
  *commit_list = best;
               ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 80: list_259 = best_44;
test.c:257:15: warning: use location
  *commit_list = best;
               ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 80dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start list_259 = best_44;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start list_259 = best_44;
test.c:257:15: warning: use location
  *commit_list = best;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_1 = list_259;
test.c:268:5: warning: use location
     free_commit_list(list);
     ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 80: _1 = list_259;
test.c:268:5: warning: use location
     free_commit_list(list);
     ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 80dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _1 = list_259;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _1 = list_259;
test.c:268:5: warning: use location
     free_commit_list(list);
     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free_commit_list (_1);
test.c:268:5: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 80: free_commit_list (_1);
test.c:268:5: warning: use location
     free_commit_list(list);
     ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 80dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start free_commit_list (_1);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start free_commit_list (_1);
test.c:268:5: warning: use location
     free_commit_list(list);
     ^
dot graph stmt end

this stmt is child function---free_commit_list-----

 ================== trace ================== 
trace fucntion name:free_commit_list 
[40;44m =======trace_function_path free_commit_list  function_call count: 1 level :0========  [0m
# .MEM_11 = VDEF <.MEM_2>
free (top_5);
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_2>
free (top_5);
test.c:19:3: warning: use location
   free(top);
   ^
dot graph start relate form ID : 835340471
from free_commit_list basic block 6dot graph end relate end

dot graph relate stmt start ID : 182840037 stmt(free) :free (top_5);
test.c:19:3: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 182840037 stmt(free) :free (top_5);
test.c:19:3: warning: use location
dot graph relate end

[40;36m ======= node_fun:free_commit_list========= [0m
[40;36m ======= find relate stmt with new_list ========= [0m
[40;36m ======= relate stmt argument:new_list ========= [0m
[40;36m ======= relate node_fun argument222:new_list========= [0m
[40;36m ======= relate gimple_assign_lhs2:�========= [0m




dot graph arrowdot graph start relate for1ID : 835340471
from free_commit_list basic block 3dot graph end relate end

In function ‘free_commit_list’:
test.c:14:22: warning: use location
  struct commit_list *top = *stack;
                      ^
dot graph relate stmt start ID : 2142663454 stmt(LHS) :top_5 = list_14;
test.c:14:22: warning: use location
top_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:new_list========= [0m
[40;36m ======= relate gimple_assign_lhs2:�========= [0m




dot graph arrowdot graph start relate for1ID : 835340471
from free_commit_list basic block 4dot graph end relate end

test.c:15:40: warning: use location
  struct commit *item = top ? top->item : NULL;
                                        ^
dot graph relate stmt start ID : 1283192529 stmt(LHS) :_6 = top_5->item;
test.c:15:40: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:new_list========= [0m
[40;36m ======= relate gimple_assign_lhs2:�========= [0m




dot graph arrowdot graph start relate for1ID : 835340471
from free_commit_list basic block 6dot graph end relate end

test.c:18:15: warning: use location
   *stack = top->next;
               ^
dot graph relate stmt start ID : 1685800158 stmt(LHS) :_7 = top_5->next;
test.c:18:15: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:new_list========= [0m
[40;36m ======= relate gimple_assign_lhs2:�========= [0m




dot graph arrowdot graph start relate for1ID : 835340471
from free_commit_list basic block 6dot graph end relate end

test.c:18:10: warning: use location
   *stack = top->next;
          ^
dot graph relate stmt start ID : 1343745261 stmt(LHS) :list_16 = _7;
test.c:18:10: warning: use location
list_16
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph arrowdot graph start relate for1ID : 835340471
from free_commit_list basic block 6dot graph end relate end

dot graph relate stmt start ID : 2080691572 stmt(call) :free (top_5);
test.c:19:3: warning: use location
   free(top);
   ^
top_5
dot graph relate end

[40;36m ======= relate node_fun argument222:new_list========= [0m
[40;36m ======= relate gimple_assign_lhs2:�========= [0m




dot graph arrowdot graph start relate for1ID : 835340471
from free_commit_list basic block 7dot graph end relate end

lto1: warning: use location
dot graph relate stmt start ID : 1492501299 stmt(LHS) :_12 = _8;
lto1: warning: use location
_12
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:new_list========= [0m
[40;36m ======= relate gimple_assign_lhs2:�========= [0m




dot graph arrowdot graph start relate for1ID : 835340471
from free_commit_list basic block 8dot graph end relate end

test.c:26:9: warning: use location
  while (list)
         ^
dot graph relate stmt start ID : 180112609 stmt(LHS) :_1 = list_14;
test.c:26:9: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_45 = weight (best_44);
In function ‘main’:
test.c:254:14: warning: use location
   *reaches = weight(best);
              ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 79: _45 = weight (best_44);
test.c:254:14: warning: use location
   *reaches = weight(best);
              ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 79dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _45 = weight (best_44);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _45 = weight (best_44);
test.c:254:14: warning: use location
   *reaches = weight(best);
              ^
dot graph stmt end

this stmt is child function---weight-----

 ================== trace ================== 
trace fucntion name:weight 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

best_44->next = 0B;
test.c:253:15: warning: use location
    best->next = NULL;              /* memory leak */
               ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 78: best_44->next = 0B;
test.c:253:15: warning: use location
    best->next = NULL;              /* memory leak */
               ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 78dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start best_44->next = 0B;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start best_44->next = 0B;
test.c:253:15: warning: use location
    best->next = NULL;              /* memory leak */
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_128 = best_127;
test.c:60:9: warning: use location
  return best;
         ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 62: _128 = best_127;
test.c:60:9: warning: use location
  return best;
         ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 62dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _128 = best_127;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _128 = best_127;
test.c:60:9: warning: use location
  return best;
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_114 = PHI <list_41(53), p_126(60)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 61: p_114 = PHI <list_41(53), p_126(60)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 61dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_114 = PHI <list_41(53), p_126(60)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_114 = PHI <list_41(53), p_126(60)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---weight-----
dot graph entry main
dot graph target entry end

p_126 = p_114->next;
test.c:45:22: warning: use location
  for (p = list; p; p = p->next) {
                      ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 60: p_126 = p_114->next;
test.c:45:22: warning: use location
  for (p = list; p; p = p->next) {
                      ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 60dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_126 = p_114->next;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_126 = p_114->next;
test.c:45:22: warning: use location
  for (p = list; p; p = p->next) {
                      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

distance_120 = weight (p_114);
test.c:51:12: warning: use location
   distance = weight(p);
            ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 56: distance_120 = weight (p_114);
test.c:51:12: warning: use location
   distance = weight(p);
            ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 56dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start distance_120 = weight (p_114);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start distance_120 = weight (p_114);
test.c:51:12: warning: use location
   distance = weight(p);
            ^
dot graph stmt end

this stmt is child function---weight-----

 ================== trace ================== 
trace fucntion name:weight 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_115 = p_114->item;
test.c:47:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 54: _115 = p_114->item;
test.c:47:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 54dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _115 = p_114->item;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _115 = p_114->item;
test.c:47:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_116 = _115->object.flags;
test.c:47:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 54: _116 = _115->object.flags;
test.c:47:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 54dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _116 = _115->object.flags;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _116 = _115->object.flags;
test.c:47:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_118 = _116 & 4;
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 54: _118 = _116 & 4;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 54dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _118 = _116 & 4;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _118 = _116 & 4;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_119 = (unsigned int) _118;
test.c:49:13: warning: use location
   if (flags & TREESAME)
             ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 54: _119 = (unsigned int) _118;
test.c:49:13: warning: use location
   if (flags & TREESAME)
             ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 54dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _119 = (unsigned int) _118;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _119 = (unsigned int) _118;
test.c:49:13: warning: use location
   if (flags & TREESAME)
             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

flags_117 = (unsigned int) _116;
test.c:47:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 54: flags_117 = (unsigned int) _116;
test.c:47:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 54dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start flags_117 = (unsigned int) _116;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start flags_117 = (unsigned int) _116;
test.c:47:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

best_125 = p_114;
test.c:55:9: warning: use location
    best = p;
         ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 59: best_125 = p_114;
test.c:55:9: warning: use location
    best = p;
         ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 59dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start best_125 = p_114;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start best_125 = p_114;
test.c:55:9: warning: use location
    best = p;
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_133 = PHI <list_41(63), p_152(69)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 70: p_133 = PHI <list_41(63), p_152(69)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 70dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_133 = PHI <list_41(63), p_152(69)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_133 = PHI <list_41(63), p_152(69)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---weight-----
dot graph entry main
dot graph target entry end

p_152 = p_133->next;
test.c:70:31: warning: use location
  for (p = list, cnt = 0; p; p = p->next) {
                               ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 69: p_152 = p_133->next;
test.c:70:31: warning: use location
  for (p = list, cnt = 0; p; p = p->next) {
                               ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 69dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_152 = p_133->next;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_152 = p_133->next;
test.c:70:31: warning: use location
  for (p = list, cnt = 0; p; p = p->next) {
                               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_146 = p_133->item;
test.c:79:24: warning: use location
   array[cnt].commit = p->item;
                        ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 68: _146 = p_133->item;
test.c:79:24: warning: use location
   array[cnt].commit = p->item;
                        ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 68dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _146 = p_133->item;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _146 = p_133->item;
test.c:79:24: warning: use location
   array[cnt].commit = p->item;
                        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_145->commit = _146;
test.c:79:21: warning: use location
   array[cnt].commit = p->item;
                     ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 68: _145->commit = _146;
test.c:79:21: warning: use location
   array[cnt].commit = p->item;
                     ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 68dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _145->commit = _146;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _145->commit = _146;
test.c:79:21: warning: use location
   array[cnt].commit = p->item;
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

distance_139 = weight (p_133);
test.c:76:12: warning: use location
   distance = weight(p);
            ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 66: distance_139 = weight (p_133);
test.c:76:12: warning: use location
   distance = weight(p);
            ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 66dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start distance_139 = weight (p_133);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start distance_139 = weight (p_133);
test.c:76:12: warning: use location
   distance = weight(p);
            ^
dot graph stmt end

this stmt is child function---weight-----

 ================== trace ================== 
trace fucntion name:weight 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_134 = p_133->item;
test.c:72:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 64: _134 = p_133->item;
test.c:72:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 64dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _134 = p_133->item;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _134 = p_133->item;
test.c:72:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_135 = _134->object.flags;
test.c:72:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 64: _135 = _134->object.flags;
test.c:72:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 64dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _135 = _134->object.flags;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _135 = _134->object.flags;
test.c:72:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_137 = _135 & 4;
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 64: _137 = _135 & 4;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 64dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _137 = _135 & 4;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _137 = _135 & 4;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_138 = (unsigned int) _137;
test.c:74:13: warning: use location
   if (flags & TREESAME)
             ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 64: _138 = (unsigned int) _137;
test.c:74:13: warning: use location
   if (flags & TREESAME)
             ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 64dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _138 = (unsigned int) _137;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _138 = (unsigned int) _137;
test.c:74:13: warning: use location
   if (flags & TREESAME)
             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

flags_136 = (unsigned int) _135;
test.c:72:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 64: flags_136 = (unsigned int) _135;
test.c:72:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 64dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start flags_136 = (unsigned int) _135;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start flags_136 = (unsigned int) _135;
test.c:72:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_213 = list_41;
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 75: _213 = list_41;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 75dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _213 = list_41;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _213 = list_41;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_108 = _213;
test.c:211:10: warning: use location
   return best_bisection_sorted(list, nr);
          ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 75: _108 = _213;
test.c:211:10: warning: use location
   return best_bisection_sorted(list, nr);
          ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 75dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _108 = _213;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _108 = _213;
test.c:211:10: warning: use location
   return best_bisection_sorted(list, nr);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_81 = PHI <p_105(49), list_41(52)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 50: p_81 = PHI <p_105(49), list_41(52)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 50dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_81 = PHI <p_105(49), list_41(52)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_81 = PHI <p_105(49), list_41(52)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---weight-----
dot graph entry main
dot graph target entry end

p_105 = p_81->next;
test.c:171:23: warning: use location
   for (p = list; p; p = p->next) {
                       ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 49: p_105 = p_81->next;
test.c:171:23: warning: use location
   for (p = list; p; p = p->next) {
                       ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 49dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_105 = p_81->next;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_105 = p_81->next;
test.c:171:23: warning: use location
   for (p = list; p; p = p->next) {
                       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_103 = halfway (p_81, nr_37);
test.c:201:21: warning: use location
    if (!find_all && halfway(p, nr))
                     ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 47: _103 = halfway (p_81, nr_37);
test.c:201:21: warning: use location
    if (!find_all && halfway(p, nr))
                     ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 47dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _103 = halfway (p_81, nr_37);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _103 = halfway (p_81, nr_37);
test.c:201:21: warning: use location
    if (!find_all && halfway(p, nr))
                     ^
dot graph stmt end

this stmt is child function---halfway-----

 ================== trace ================== 
trace fucntion name:halfway 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

weight_set (p_81, _102);
test.c:198:5: warning: use location
     weight_set(p, weight(q));
     ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 45: weight_set (p_81, _102);
test.c:198:5: warning: use location
     weight_set(p, weight(q));
     ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 45dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start weight_set (p_81, _102);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start weight_set (p_81, _102);
test.c:198:5: warning: use location
     weight_set(p, weight(q));
     ^
dot graph stmt end

this stmt is child function---weight_set-----

 ================== trace ================== 
trace fucntion name:weight_set 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

weight_set (p_81, _99);
test.c:192:5: warning: use location
     weight_set(p, weight(q)+1);
     ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 44: weight_set (p_81, _99);
test.c:192:5: warning: use location
     weight_set(p, weight(q)+1);
     ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 44dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start weight_set (p_81, _99);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start weight_set (p_81, _99);
test.c:192:5: warning: use location
     weight_set(p, weight(q)+1);
     ^
dot graph stmt end

this stmt is child function---weight_set-----

 ================== trace ================== 
trace fucntion name:weight_set 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_86 = p_81->item;
test.c:177:14: warning: use location
    for (q = p->item->parents; q; q = q->next) {
              ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 35: _86 = p_81->item;
test.c:177:14: warning: use location
    for (q = p->item->parents; q; q = q->next) {
              ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _86 = p_81->item;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _86 = p_81->item;
test.c:177:14: warning: use location
    for (q = p->item->parents; q; q = q->next) {
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

q_87 = _86->parents;
test.c:177:11: warning: use location
    for (q = p->item->parents; q; q = q->next) {
           ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 35: q_87 = _86->parents;
test.c:177:11: warning: use location
    for (q = p->item->parents; q; q = q->next) {
           ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start q_87 = _86->parents;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start q_87 = _86->parents;
test.c:177:11: warning: use location
    for (q = p->item->parents; q; q = q->next) {
           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

q_88 = PHI <q_87(35), q_95(39)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 40: q_88 = PHI <q_87(35), q_95(39)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 40dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start q_88 = PHI <q_87(35), q_95(39)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start q_88 = PHI <q_87(35), q_95(39)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---weight_set-----
dot graph entry main
dot graph target entry end

_102 = weight (q_88);
test.c:198:5: warning: use location
     weight_set(p, weight(q));
     ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 45: _102 = weight (q_88);
test.c:198:5: warning: use location
     weight_set(p, weight(q));
     ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 45dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _102 = weight (q_88);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _102 = weight (q_88);
test.c:198:5: warning: use location
     weight_set(p, weight(q));
     ^
dot graph stmt end

this stmt is child function---weight-----

 ================== trace ================== 
trace fucntion name:weight 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_98 = weight (q_88);
test.c:192:19: warning: use location
     weight_set(p, weight(q)+1);
                   ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 44: _98 = weight (q_88);
test.c:192:19: warning: use location
     weight_set(p, weight(q)+1);
                   ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 44dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _98 = weight (q_88);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _98 = weight (q_88);
test.c:192:19: warning: use location
     weight_set(p, weight(q)+1);
                   ^
dot graph stmt end

this stmt is child function---weight-----

 ================== trace ================== 
trace fucntion name:weight 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

q_95 = q_88->next;
test.c:177:36: warning: use location
    for (q = p->item->parents; q; q = q->next) {
                                    ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 39: q_95 = q_88->next;
test.c:177:36: warning: use location
    for (q = p->item->parents; q; q = q->next) {
                                    ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 39dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start q_95 = q_88->next;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start q_95 = q_88->next;
test.c:177:36: warning: use location
    for (q = p->item->parents; q; q = q->next) {
                                    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_94 = weight (q_88);
test.c:180:14: warning: use location
     if (0 <= weight(q))
              ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 38: _94 = weight (q_88);
test.c:180:14: warning: use location
     if (0 <= weight(q))
              ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 38dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _94 = weight (q_88);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _94 = weight (q_88);
test.c:180:14: warning: use location
     if (0 <= weight(q))
              ^
dot graph stmt end

this stmt is child function---weight-----

 ================== trace ================== 
trace fucntion name:weight 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_89 = q_88->item;
test.c:178:10: warning: use location
     if (q->item->object.flags & UNINTERESTING)
          ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 36: _89 = q_88->item;
test.c:178:10: warning: use location
     if (q->item->object.flags & UNINTERESTING)
          ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _89 = q_88->item;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _89 = q_88->item;
test.c:178:10: warning: use location
     if (q->item->object.flags & UNINTERESTING)
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_90 = _89->object.flags;
test.c:178:24: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                        ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 36: _90 = _89->object.flags;
test.c:178:24: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                        ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _90 = _89->object.flags;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _90 = _89->object.flags;
test.c:178:24: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_92 = _90 & 2;
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 36: _92 = _90 & 2;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _92 = _90 & 2;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _92 = _90 & 2;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_93 = (unsigned int) _92;
test.c:178:31: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                               ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 36: _93 = (unsigned int) _92;
test.c:178:31: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                               ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _93 = (unsigned int) _92;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _93 = (unsigned int) _92;
test.c:178:31: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_91 = (unsigned int) _90;
test.c:178:31: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 36: _91 = (unsigned int) _90;
test.c:178:31: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                               ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _91 = (unsigned int) _90;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _91 = (unsigned int) _90;
test.c:178:31: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_85 = weight (p_81);
test.c:175:13: warning: use location
    if (0 <= weight(p))
             ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 33: _85 = weight (p_81);
test.c:175:13: warning: use location
    if (0 <= weight(p))
             ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 33dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _85 = weight (p_81);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _85 = weight (p_81);
test.c:175:13: warning: use location
    if (0 <= weight(p))
             ^
dot graph stmt end

this stmt is child function---weight-----

 ================== trace ================== 
trace fucntion name:weight 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_82 = p_81->item;
test.c:173:22: warning: use location
    unsigned flags = p->item->object.flags;
                      ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 33: _82 = p_81->item;
test.c:173:22: warning: use location
    unsigned flags = p->item->object.flags;
                      ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 33dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _82 = p_81->item;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _82 = p_81->item;
test.c:173:22: warning: use location
    unsigned flags = p->item->object.flags;
                      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_83 = _82->object.flags;
test.c:173:36: warning: use location
    unsigned flags = p->item->object.flags;
                                    ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 33: _83 = _82->object.flags;
test.c:173:36: warning: use location
    unsigned flags = p->item->object.flags;
                                    ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 33dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _83 = _82->object.flags;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _83 = _82->object.flags;
test.c:173:36: warning: use location
    unsigned flags = p->item->object.flags;
                                    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_96 = _83 & 4;
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 43: _96 = _83 & 4;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 43dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _96 = _83 & 4;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _96 = _83 & 4;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_97 = (unsigned int) _96;
test.c:191:16: warning: use location
    if (!(flags & TREESAME)) {
                ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 43: _97 = (unsigned int) _96;
test.c:191:16: warning: use location
    if (!(flags & TREESAME)) {
                ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 43dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _97 = (unsigned int) _96;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _97 = (unsigned int) _96;
test.c:191:16: warning: use location
    if (!(flags & TREESAME)) {
                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

flags_84 = (unsigned int) _83;
test.c:173:13: warning: use location
    unsigned flags = p->item->object.flags;
             ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 33: flags_84 = (unsigned int) _83;
test.c:173:13: warning: use location
    unsigned flags = p->item->object.flags;
             ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 33dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start flags_84 = (unsigned int) _83;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start flags_84 = (unsigned int) _83;
test.c:173:13: warning: use location
    unsigned flags = p->item->object.flags;
             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_104 = p_81;
test.c:202:12: warning: use location
     return p;
            ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 48: _104 = p_81;
test.c:202:12: warning: use location
     return p;
            ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 48dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _104 = p_81;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _104 = p_81;
test.c:202:12: warning: use location
     return p;
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_68 = PHI <list_41(21), p_80(30)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 31: p_68 = PHI <list_41(21), p_80(30)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_68 = PHI <list_41(21), p_80(30)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_68 = PHI <list_41(21), p_80(30)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---weight-----
dot graph entry main
dot graph target entry end

p_80 = p_68->next;
test.c:154:22: warning: use location
  for (p = list; p; p = p->next) {
                      ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 30: p_80 = p_68->next;
test.c:154:22: warning: use location
  for (p = list; p; p = p->next) {
                      ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 30dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_80 = p_68->next;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_80 = p_68->next;
test.c:154:22: warning: use location
  for (p = list; p; p = p->next) {
                      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_76 = halfway (p_68, nr_37);
test.c:163:20: warning: use location
   if (!find_all && halfway(p, nr))
                    ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 27: _76 = halfway (p_68, nr_37);
test.c:163:20: warning: use location
   if (!find_all && halfway(p, nr))
                    ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 27dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _76 = halfway (p_68, nr_37);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _76 = halfway (p_68, nr_37);
test.c:163:20: warning: use location
   if (!find_all && halfway(p, nr))
                    ^
dot graph stmt end

this stmt is child function---halfway-----

 ================== trace ================== 
trace fucntion name:halfway 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

weight_set (p_68, _75);
test.c:159:3: warning: use location
   weight_set(p, count_distance(p));
   ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 26: weight_set (p_68, _75);
test.c:159:3: warning: use location
   weight_set(p, count_distance(p));
   ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start weight_set (p_68, _75);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start weight_set (p_68, _75);
test.c:159:3: warning: use location
   weight_set(p, count_distance(p));
   ^
dot graph stmt end

this stmt is child function---weight_set-----

 ================== trace ================== 
trace fucntion name:weight_set 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_75 = count_distance (p_68);
test.c:159:3: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 26: _75 = count_distance (p_68);
test.c:159:3: warning: use location
   weight_set(p, count_distance(p));
   ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _75 = count_distance (p_68);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _75 = count_distance (p_68);
test.c:159:3: warning: use location
   weight_set(p, count_distance(p));
   ^
dot graph stmt end

this stmt is child function---count_distance-----

 ================== trace ================== 
trace fucntion name:count_distance 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_74 = weight (p_68);
test.c:157:7: warning: use location
   if (weight(p) != -2)
       ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 24: _74 = weight (p_68);
test.c:157:7: warning: use location
   if (weight(p) != -2)
       ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 24dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _74 = weight (p_68);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _74 = weight (p_68);
test.c:157:7: warning: use location
   if (weight(p) != -2)
       ^
dot graph stmt end

this stmt is child function---weight-----

 ================== trace ================== 
trace fucntion name:weight 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_69 = p_68->item;
test.c:155:8: warning: use location
   if (p->item->object.flags & UNINTERESTING)
        ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 22: _69 = p_68->item;
test.c:155:8: warning: use location
   if (p->item->object.flags & UNINTERESTING)
        ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _69 = p_68->item;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _69 = p_68->item;
test.c:155:8: warning: use location
   if (p->item->object.flags & UNINTERESTING)
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_70 = _69->object.flags;
test.c:155:22: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                      ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 22: _70 = _69->object.flags;
test.c:155:22: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                      ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _70 = _69->object.flags;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _70 = _69->object.flags;
test.c:155:22: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_72 = _70 & 2;
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 22: _72 = _70 & 2;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _72 = _70 & 2;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _72 = _70 & 2;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_73 = (unsigned int) _72;
test.c:155:29: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                             ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 22: _73 = (unsigned int) _72;
test.c:155:29: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                             ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _73 = (unsigned int) _72;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _73 = (unsigned int) _72;
test.c:155:29: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_71 = (unsigned int) _70;
test.c:155:29: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 22: _71 = (unsigned int) _70;
test.c:155:29: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                             ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 22dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _71 = (unsigned int) _70;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _71 = (unsigned int) _70;
test.c:155:29: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_77 = p_68;
test.c:164:11: warning: use location
    return p;
           ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 28: _77 = p_68;
test.c:164:11: warning: use location
    return p;
           ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 28dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _77 = p_68;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _77 = p_68;
test.c:164:11: warning: use location
    return p;
           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_51 = PHI <list_41(13), p_67(19)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 20: p_51 = PHI <list_41(13), p_67(19)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_51 = PHI <list_41(13), p_67(19)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_51 = PHI <list_41(13), p_67(19)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---weight-----
dot graph entry main
dot graph target entry end

p_67 = p_51->next;
test.c:111:29: warning: use location
  for (n = 0, p = list; p; p = p->next) {
                             ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 19: p_67 = p_51->next;
test.c:111:29: warning: use location
  for (n = 0, p = list; p; p = p->next) {
                             ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 19dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_67 = p_51->next;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_67 = p_51->next;
test.c:111:29: warning: use location
  for (n = 0, p = list; p; p = p->next) {
                             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

weight_set (p_51, -2);
test.c:133:4: warning: use location
    weight_set(p, -2);
    ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 18: weight_set (p_51, -2);
test.c:133:4: warning: use location
    weight_set(p, -2);
    ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start weight_set (p_51, -2);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start weight_set (p_51, -2);
test.c:133:4: warning: use location
    weight_set(p, -2);
    ^
dot graph stmt end

this stmt is child function---weight_set-----

 ================== trace ================== 
trace fucntion name:weight_set 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

weight_set (p_51, -1);
test.c:130:4: warning: use location
    weight_set(p, -1);
    ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 17: weight_set (p_51, -1);
test.c:130:4: warning: use location
    weight_set(p, -1);
    ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start weight_set (p_51, -1);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start weight_set (p_51, -1);
test.c:130:4: warning: use location
    weight_set(p, -1);
    ^
dot graph stmt end

this stmt is child function---weight_set-----

 ================== trace ================== 
trace fucntion name:weight_set 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

weight_set (p_51, 1);
test.c:119:5: warning: use location
     weight_set(p, 1);
     ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 16: weight_set (p_51, 1);
test.c:119:5: warning: use location
     weight_set(p, 1);
     ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start weight_set (p_51, 1);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start weight_set (p_51, 1);
test.c:119:5: warning: use location
     weight_set(p, 1);
     ^
dot graph stmt end

this stmt is child function---weight_set-----

 ================== trace ================== 
trace fucntion name:weight_set 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_60 = p_51->item;
test.c:115:4: warning: use location
   p->item->util = &weights[n++];
    ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _60 = p_51->item;
test.c:115:4: warning: use location
   p->item->util = &weights[n++];
    ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _60 = p_51->item;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _60 = p_51->item;
test.c:115:4: warning: use location
   p->item->util = &weights[n++];
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_60->util = _61;
test.c:115:17: warning: use location
   p->item->util = &weights[n++];
                 ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _60->util = _61;
test.c:115:17: warning: use location
   p->item->util = &weights[n++];
                 ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _60->util = _61;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _60->util = _61;
test.c:115:17: warning: use location
   p->item->util = &weights[n++];
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_60->util = _61;
test.c:115:17: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _60->util = _61;
test.c:115:17: warning: use location
   p->item->util = &weights[n++];
                 ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _60->util = _61;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _60->util = _61;
test.c:115:17: warning: use location
   p->item->util = &weights[n++];
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

commit_52 = p_51->item;
test.c:112:18: warning: use location
   struct commit *commit = p->item;
                  ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: commit_52 = p_51->item;
test.c:112:18: warning: use location
   struct commit *commit = p->item;
                  ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start commit_52 = p_51->item;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start commit_52 = p_51->item;
test.c:112:18: warning: use location
   struct commit *commit = p->item;
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_62 = count_interesting_parents (commit_52);
test.c:116:11: warning: use location
   switch (count_interesting_parents(commit)) {
           ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _62 = count_interesting_parents (commit_52);
test.c:116:11: warning: use location
   switch (count_interesting_parents(commit)) {
           ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _62 = count_interesting_parents (commit_52);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _62 = count_interesting_parents (commit_52);
test.c:116:11: warning: use location
   switch (count_interesting_parents(commit)) {
           ^
dot graph stmt end

this stmt is child function---count_interesting_parents-----

 ================== trace ================== 
trace fucntion name:count_interesting_parents 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_53 = commit_52->object.flags;
test.c:113:34: warning: use location
   unsigned flags = commit->object.flags;
                                  ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: _53 = commit_52->object.flags;
test.c:113:34: warning: use location
   unsigned flags = commit->object.flags;
                                  ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _53 = commit_52->object.flags;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _53 = commit_52->object.flags;
test.c:113:34: warning: use location
   unsigned flags = commit->object.flags;
                                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_63 = _53 & 4;
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 15: _63 = _53 & 4;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _63 = _53 & 4;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _63 = _53 & 4;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_64 = (unsigned int) _63;
test.c:118:16: warning: use location
    if (!(flags & TREESAME)) {
                ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 15: _64 = (unsigned int) _63;
test.c:118:16: warning: use location
    if (!(flags & TREESAME)) {
                ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _64 = (unsigned int) _63;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _64 = (unsigned int) _63;
test.c:118:16: warning: use location
    if (!(flags & TREESAME)) {
                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

flags_54 = (unsigned int) _53;
test.c:113:12: warning: use location
   unsigned flags = commit->object.flags;
            ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 14: flags_54 = (unsigned int) _53;
test.c:113:12: warning: use location
   unsigned flags = commit->object.flags;
            ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start flags_54 = (unsigned int) _53;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start flags_54 = (unsigned int) _53;
test.c:113:12: warning: use location
   unsigned flags = commit->object.flags;
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free (p_26);
test.c:234:4: warning: use location
    free(p);
    ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 7: free (p_26);
test.c:234:4: warning: use location
    free(p);
    ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 7dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start free (p_26);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start free (p_26);
test.c:234:4: warning: use location
    free(p);
    ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (p_26);
test.c:234:4: warning: use location
[40;32m    HAS FREE STMT count:3 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

next_30 = p_26->next;
test.c:232:8: warning: use location
   next = p->next;
        ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 6: next_30 = p_26->next;
test.c:232:8: warning: use location
   next = p->next;
        ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start next_30 = p_26->next;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start next_30 = p_26->next;
test.c:232:8: warning: use location
   next = p->next;
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_49 = PHI <next_30(7), next_30(10)>
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 11: p_49 = PHI <next_30(7), next_30(10)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start p_49 = PHI <next_30(7), next_30(10)>
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start p_49 = PHI <next_30(7), next_30(10)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---free-----
dot graph entry main
dot graph target entry end

_27 = p_26->item;
test.c:230:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 6: _27 = p_26->item;
test.c:230:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _27 = p_26->item;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _27 = p_26->item;
test.c:230:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_28 = _27->object.flags;
test.c:230:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 6: _28 = _27->object.flags;
test.c:230:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _28 = _27->object.flags;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _28 = _27->object.flags;
test.c:230:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_35 = _28 & 4;
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 8: _35 = _28 & 4;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _35 = _28 & 4;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _35 = _28 & 4;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_36 = (unsigned int) _35;
test.c:239:15: warning: use location
   if (!(flags & TREESAME))
               ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 8: _36 = (unsigned int) _35;
test.c:239:15: warning: use location
   if (!(flags & TREESAME))
               ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _36 = (unsigned int) _35;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _36 = (unsigned int) _35;
test.c:239:15: warning: use location
   if (!(flags & TREESAME))
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_31 = _28 & 2;
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 6: _31 = _28 & 2;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _31 = _28 & 2;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _31 = _28 & 2;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_32 = (unsigned int) _31;
test.c:233:13: warning: use location
   if (flags & UNINTERESTING) {
             ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 6: _32 = (unsigned int) _31;
test.c:233:13: warning: use location
   if (flags & UNINTERESTING) {
             ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _32 = (unsigned int) _31;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _32 = (unsigned int) _31;
test.c:233:13: warning: use location
   if (flags & UNINTERESTING) {
             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

flags_29 = (unsigned int) _28;
test.c:230:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 6: flags_29 = (unsigned int) _28;
test.c:230:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start flags_29 = (unsigned int) _28;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start flags_29 = (unsigned int) _28;
test.c:230:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

last_34 = p_26;
test.c:238:8: warning: use location
   last = p;
        ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 8: last_34 = p_26;
test.c:238:8: warning: use location
   last = p;
        ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start last_34 = p_26;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start last_34 = p_26;
test.c:238:8: warning: use location
   last = p;
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_24 = list_255;
test.c:221:2: warning: use location
  show_list("bisection 2 entry", 0, 0, *commit_list);
  ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 5: _24 = list_255;
test.c:221:2: warning: use location
  show_list("bisection 2 entry", 0, 0, *commit_list);
  ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _24 = list_255;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _24 = list_255;
test.c:221:2: warning: use location
  show_list("bisection 2 entry", 0, 0, *commit_list);
  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

show_list ("bisection 2 entry", 0, 0, _24);
test.c:221:2: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 5: show_list ("bisection 2 entry", 0, 0, _24);
test.c:221:2: warning: use location
  show_list("bisection 2 entry", 0, 0, *commit_list);
  ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start show_list ("bisection 2 entry", 0, 0, _24);
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start show_list ("bisection 2 entry", 0, 0, _24);
test.c:221:2: warning: use location
  show_list("bisection 2 entry", 0, 0, *commit_list);
  ^
dot graph stmt end

this stmt is child function---show_list-----

 ================== trace ================== 
trace fucntion name:show_list 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

new_list_21->item = 0B;
test.c:33:17: warning: use location
  new_list->item = item;
                 ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 3: new_list_21->item = 0B;
test.c:33:17: warning: use location
  new_list->item = item;
                 ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start new_list_21->item = 0B;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start new_list_21->item = 0B;
test.c:33:17: warning: use location
  new_list->item = item;
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_254 = new_list_21;
lto1: warning: use location
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 3: _254 = new_list_21;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _254 = new_list_21;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _254 = new_list_21;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_23 = new_list_21;
test.c:36:9: warning: use location
  return new_list;
         ^
dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc en1

dot graph target line desc form basic block 3: _23 = new_list_21;
test.c:36:9: warning: use location
  return new_list;
         ^
dot graph target line desend

dot graph target loc start # .MEM_250 = VDEF <.MEM_13>
new_list_21 = malloc (16);
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

new_list_21, points-to NULL, points-to vars: { D.4192 } (nonlocal, escaped, escaped heap)
dot graph stmt start _23 = new_list_21;
new_list_21 = malloc (16);
dot graph stmt end

dot graph stmt start _23 = new_list_21;
test.c:36:9: warning: use location
  return new_list;
         ^
dot graph stmt end


 ================== Start Use after free Check ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
list_255 = PHI <list_256(D)(2), list_262(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
list_255 = PHI <list_256(D)(2), list_262(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
list_255 = PHI <list_256(D)(2), list_262(3)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
p_26 = PHI <p_25(5), p_49(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
p_26 = PHI <p_25(5), p_49(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
p_26 = PHI <p_25(5), p_49(11)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
# .MEM_248 = VDEF <.MEM_176>
p_26->next = last_33;
test.c:237:11: warning: use location
   p->next = last;
           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_248 = VDEF <.MEM_176>
p_26->next = last_33;
test.c:237:11: warning: use location
   p->next = last;
           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
last_50 = PHI <last_33(7), p_26(10)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
last_50 = PHI <last_33(7), p_26(10)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
last_50 = PHI <last_33(7), p_26(10)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
list_41 = last_33;
test.c:243:7: warning: use location
  list = last;
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_203 = VDEF <.MEM_188>
show_list ("bisection 2 counted all", counted_106, nr_37, list_41);
test.c:206:2: warning: use location
  show_list("bisection 2 counted all", counted, nr, list);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_229 = VDEF <.MEM_228>
show_list ("bisection 2 count one", counted_101, nr_37, list_41);
test.c:194:5: warning: use location
     show_list("bisection 2 count one",
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_202 = VDEF <.MEM_181>
show_list ("bisection 2 count_distance", counted_78, nr_37, list_41);
test.c:168:2: warning: use location
  show_list("bisection 2 count_distance", counted, nr, list);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_234 = VDEF <.MEM_233>
clear_distance (list_41);
test.c:160:3: warning: use location
   clear_distance(list);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_201 = VDEF <.MEM_178>
show_list ("bisection 2 initialize", counted_65, nr_37, list_41);
test.c:138:2: warning: use location
  show_list("bisection 2 initialize", counted, nr, list);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_246 = VDEF <.MEM_245>
show_list ("bisection 2 count one", counted_66, nr_37, list_41);
test.c:121:5: warning: use location
     show_list("bisection 2 count one",
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_198 = VDEF <.MEM_176>
show_list ("bisection 2 sorted", 0, nr_37, list_41);
test.c:244:2: warning: use location
  show_list("bisection 2 sorted", 0, nr, list);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
p_168 = PHI <list_41(70), p_174(73)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
p_168 = PHI <list_41(70), p_174(73)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
p_168 = PHI <list_41(70), p_174(73)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
# .MEM_209 = VDEF <.MEM_208>
p_168->next = 0B;
test.c:95:10: warning: use location
  p->next = NULL;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_209 = VDEF <.MEM_208>
p_168->next = 0B;
test.c:95:10: warning: use location
  p->next = NULL;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_193>
_172 = p_168->next;
test.c:94:2: warning: use location
  free_commit_list(p->next);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: use location
  free_commit_list(p->next);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_217>
p_170 = p_168->next;
test.c:92:6: warning: use location
    p = p->next;
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
p_174 = PHI <p_168(71), p_170(72)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
p_174 = PHI <p_168(71), p_170(72)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
p_174 = PHI <p_168(71), p_170(72)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
# .MEM_217 = VDEF <.MEM_216>
p_168->item = _167;
test.c:90:11: warning: use location
   p->item = array[i].commit;
           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_217 = VDEF <.MEM_216>
p_168->item = _167;
test.c:90:11: warning: use location
   p->item = array[i].commit;
           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
best_127 = PHI <list_41(53), best_129(60)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
best_127 = PHI <list_41(53), best_129(60)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
best_127 = PHI <list_41(53), best_129(60)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
best_129 = PHI <best_127(55), best_127(58), p_114(59)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
best_129 = PHI <best_127(55), best_127(58), p_114(59)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
best_129 = PHI <best_127(55), best_127(58), p_114(59)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
_221 = best_127;
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
_107 = _221;
test.c:209:10: warning: use location
   return best_bisection(list, nr);
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
_109 = PHI <p_68(28), p_81(48), _107(62), _108(75)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
_109 = PHI <p_68(28), p_81(48), _107(62), _108(75)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_109 = PHI <p_68(28), p_81(48), _107(62), _108(75)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
_236 = _109;
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_236 = _109;
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
best_44 = _236;
test.c:250:7: warning: use location
  best = do_find_bisection(list, nr, weights, find_all);
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
best_44 = _236;
test.c:250:7: warning: use location
  best = do_find_bisection(list, nr, weights, find_all);
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
list_259 = best_44;
test.c:257:15: warning: use location
  *commit_list = best;
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
list_259 = best_44;
test.c:257:15: warning: use location
  *commit_list = best;
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
_1 = list_259;
test.c:268:5: warning: use location
     free_commit_list(list);
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_1 = list_259;
test.c:268:5: warning: use location
     free_commit_list(list);
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: use location
     free_commit_list(list);
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: use location
     free_commit_list(list);
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
# .MEM_238 = VDEF <.MEM_195>
_45 = weight (best_44);
test.c:254:14: warning: use location
   *reaches = weight(best);
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_238 = VDEF <.MEM_195>
_45 = weight (best_44);
test.c:254:14: warning: use location
   *reaches = weight(best);
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
# .MEM_237 = VDEF <.MEM_194>
best_44->next = 0B;
test.c:253:15: warning: use location
    best->next = NULL;              /* memory leak */
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_237 = VDEF <.MEM_194>
best_44->next = 0B;
test.c:253:15: warning: use location
    best->next = NULL;              /* memory leak */
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_128 = best_127;
test.c:60:9: warning: use location
  return best;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
p_114 = PHI <list_41(53), p_126(60)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
p_114 = PHI <list_41(53), p_126(60)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
p_114 = PHI <list_41(53), p_126(60)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
# VUSE <.MEM_189>
p_126 = p_114->next;
test.c:45:22: warning: use location
  for (p = list; p; p = p->next) {
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_222 = VDEF <.MEM_190>
distance_120 = weight (p_114);
test.c:51:12: warning: use location
   distance = weight(p);
            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_190>
_115 = p_114->item;
test.c:47:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_190>
_116 = _115->object.flags;
test.c:47:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_118 = _116 & 4;
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
_119 = (unsigned int) _118;
test.c:49:13: warning: use location
   if (flags & TREESAME)
             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
flags_117 = (unsigned int) _116;
test.c:47:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
best_125 = p_114;
test.c:55:9: warning: use location
    best = p;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
p_133 = PHI <list_41(63), p_152(69)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
p_133 = PHI <list_41(63), p_152(69)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
p_133 = PHI <list_41(63), p_152(69)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
# VUSE <.MEM_191>
p_152 = p_133->next;
test.c:70:31: warning: use location
  for (p = list, cnt = 0; p; p = p->next) {
                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_218>
_146 = p_133->item;
test.c:79:24: warning: use location
   array[cnt].commit = p->item;
                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_219 = VDEF <.MEM_218>
_145->commit = _146;
test.c:79:21: warning: use location
   array[cnt].commit = p->item;
                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_218 = VDEF <.MEM_192>
distance_139 = weight (p_133);
test.c:76:12: warning: use location
   distance = weight(p);
            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_192>
_134 = p_133->item;
test.c:72:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_192>
_135 = _134->object.flags;
test.c:72:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_137 = _135 & 4;
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
_138 = (unsigned int) _137;
test.c:74:13: warning: use location
   if (flags & TREESAME)
             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
flags_136 = (unsigned int) _135;
test.c:72:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
_213 = list_41;
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_213 = list_41;
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
_108 = _213;
test.c:211:10: warning: use location
   return best_bisection_sorted(list, nr);
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_108 = _213;
test.c:211:10: warning: use location
   return best_bisection_sorted(list, nr);
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
p_81 = PHI <p_105(49), list_41(52)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
p_81 = PHI <p_105(49), list_41(52)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
p_81 = PHI <p_105(49), list_41(52)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
# VUSE <.MEM_186>
p_105 = p_81->next;
test.c:171:23: warning: use location
   for (p = list; p; p = p->next) {
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_230 = VDEF <.MEM_185>
_103 = halfway (p_81, nr_37);
test.c:201:21: warning: use location
    if (!find_all && halfway(p, nr))
                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_226 = VDEF <.MEM_225>
weight_set (p_81, _102);
test.c:198:5: warning: use location
     weight_set(p, weight(q));
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_228 = VDEF <.MEM_227>
weight_set (p_81, _99);
test.c:192:5: warning: use location
     weight_set(p, weight(q)+1);
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_223>
_86 = p_81->item;
test.c:177:14: warning: use location
    for (q = p->item->parents; q; q = q->next) {
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_223>
q_87 = _86->parents;
test.c:177:11: warning: use location
    for (q = p->item->parents; q; q = q->next) {
           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
q_88 = PHI <q_87(35), q_95(39)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
q_88 = PHI <q_87(35), q_95(39)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
q_88 = PHI <q_87(35), q_95(39)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
# .MEM_225 = VDEF <.MEM_184>
_102 = weight (q_88);
test.c:198:5: warning: use location
     weight_set(p, weight(q));
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_227 = VDEF <.MEM_184>
_98 = weight (q_88);
test.c:192:19: warning: use location
     weight_set(p, weight(q)+1);
                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_182>
q_95 = q_88->next;
test.c:177:36: warning: use location
    for (q = p->item->parents; q; q = q->next) {
                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_224 = VDEF <.MEM_183>
_94 = weight (q_88);
test.c:180:14: warning: use location
     if (0 <= weight(q))
              ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_183>
_89 = q_88->item;
test.c:178:10: warning: use location
     if (q->item->object.flags & UNINTERESTING)
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_183>
_90 = _89->object.flags;
test.c:178:24: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_92 = _90 & 2;
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
_93 = (unsigned int) _92;
test.c:178:31: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_91 = (unsigned int) _90;
test.c:178:31: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_223 = VDEF <.MEM_187>
_85 = weight (p_81);
test.c:175:13: warning: use location
    if (0 <= weight(p))
             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_187>
_82 = p_81->item;
test.c:173:22: warning: use location
    unsigned flags = p->item->object.flags;
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_187>
_83 = _82->object.flags;
test.c:173:36: warning: use location
    unsigned flags = p->item->object.flags;
                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_96 = _83 & 4;
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
_97 = (unsigned int) _96;
test.c:191:16: warning: use location
    if (!(flags & TREESAME)) {
                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
flags_84 = (unsigned int) _83;
test.c:173:13: warning: use location
    unsigned flags = p->item->object.flags;
             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_104 = p_81;
test.c:202:12: warning: use location
     return p;
            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
p_68 = PHI <list_41(21), p_80(30)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
p_68 = PHI <list_41(21), p_80(30)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
p_68 = PHI <list_41(21), p_80(30)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
# VUSE <.MEM_180>
p_80 = p_68->next;
test.c:154:22: warning: use location
  for (p = list; p; p = p->next) {
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_235 = VDEF <.MEM_234>
_76 = halfway (p_68, nr_37);
test.c:163:20: warning: use location
   if (!find_all && halfway(p, nr))
                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_233 = VDEF <.MEM_232>
weight_set (p_68, _75);
test.c:159:3: warning: use location
   weight_set(p, count_distance(p));
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_232 = VDEF <.MEM_231>
_75 = count_distance (p_68);
test.c:159:3: warning: use location
   weight_set(p, count_distance(p));
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_231 = VDEF <.MEM_181>
_74 = weight (p_68);
test.c:157:7: warning: use location
   if (weight(p) != -2)
       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_181>
_69 = p_68->item;
test.c:155:8: warning: use location
   if (p->item->object.flags & UNINTERESTING)
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_181>
_70 = _69->object.flags;
test.c:155:22: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_72 = _70 & 2;
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
_73 = (unsigned int) _72;
test.c:155:29: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_71 = (unsigned int) _70;
test.c:155:29: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_77 = p_68;
test.c:164:11: warning: use location
    return p;
           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
p_51 = PHI <list_41(13), p_67(19)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
p_51 = PHI <list_41(13), p_67(19)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
p_51 = PHI <list_41(13), p_67(19)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
# VUSE <.MEM_177>
p_67 = p_51->next;
test.c:111:29: warning: use location
  for (n = 0, p = list; p; p = p->next) {
                             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_247 = VDEF <.MEM_243>
weight_set (p_51, -2);
test.c:133:4: warning: use location
    weight_set(p, -2);
    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_244 = VDEF <.MEM_243>
weight_set (p_51, -1);
test.c:130:4: warning: use location
    weight_set(p, -1);
    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_245 = VDEF <.MEM_243>
weight_set (p_51, 1);
test.c:119:5: warning: use location
     weight_set(p, 1);
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_178>
_60 = p_51->item;
test.c:115:4: warning: use location
   p->item->util = &weights[n++];
    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_242 = VDEF <.MEM_178>
_60->util = _61;
test.c:115:17: warning: use location
   p->item->util = &weights[n++];
                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_242 = VDEF <.MEM_178>
_60->util = _61;
test.c:115:17: warning: use location
   p->item->util = &weights[n++];
                 ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_178>
commit_52 = p_51->item;
test.c:112:18: warning: use location
   struct commit *commit = p->item;
                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# .MEM_243 = VDEF <.MEM_242>
_62 = count_interesting_parents (commit_52);
test.c:116:11: warning: use location
   switch (count_interesting_parents(commit)) {
           ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
# VUSE <.MEM_178>
_53 = commit_52->object.flags;
test.c:113:34: warning: use location
   unsigned flags = commit->object.flags;
                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
_63 = _53 & 4;
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
_64 = (unsigned int) _63;
test.c:118:16: warning: use location
    if (!(flags & TREESAME)) {
                ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
flags_54 = (unsigned int) _53;
test.c:113:12: warning: use location
   unsigned flags = commit->object.flags;
            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_208 = VDEF <.MEM_193>
free_commit_list (_172);
test.c:94:2: warning: Use after free error!: free location 
  free_commit_list(p->next);
  ^
p_49 = PHI <next_30(7), next_30(10)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_16 = VDEF <.MEM_240>
free_commit_list (_1);
test.c:268:5: warning: Use after free error!: free location 
     free_commit_list(list);
     ^
p_49 = PHI <next_30(7), next_30(10)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
p_49 = PHI <next_30(7), next_30(10)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
_35 = _28 & 4;
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
_36 = (unsigned int) _35;
test.c:239:15: warning: use location
   if (!(flags & TREESAME))
               ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_249 = VDEF <.MEM_176>
free (p_26);
test.c:234:4: warning: Use after free error!: free location 
    free(p);
    ^
last_34 = p_26;
test.c:238:8: warning: use location
   last = p;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;31m  	possible double free :3 [0m

======================================================================
 <function_decl 0x7f5251c3cb00 main
    type <function_type 0x7f5251c3b7e0
        type <integer_type 0x7f52520c35e8 int public SI
            size <integer_cst 0x7f52520afe28 constant 32>
            unit size <integer_cst 0x7f52520afe40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
            pointer_to_this <pointer_type 0x7f52520caa80>>
        QI
        size <integer_cst 0x7f52520afcd8 constant 8>
        unit size <integer_cst 0x7f52520afcf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 259 col 5 align 8 context <translation_unit_decl 0x7f52520ba168 test.c> initial <block 0x7f5251c51180>
    result <result_decl 0x7f52520ba2d0 D.4054 type <integer_type 0x7f52520c35e8 int>
        ignored SI file test.c line 259 col 5 size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
        align 32 context <function_decl 0x7f5251c3cb00 main>>
    struct-function 0x7f5251c52160>
 <ssa_name 0x7f5251c649d8
    type <pointer_type 0x7f52520caa80
        type <integer_type 0x7f52520c35e8 int public SI
            size <integer_cst 0x7f52520afe28 constant 32>
            unit size <integer_cst 0x7f52520afe40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
            pointer_to_this <pointer_type 0x7f52520caa80>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f5251c637e0 weights>
    def_stmt weights_43 = calloc (_42, 4);
    version 43
    ptr-info 0x7f5251c8f240>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:calloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---calloc-----
this Reserved word function ------calloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

free (weights_43);
test.c:256:2: warning: use location
  free(weights);
  ^
dot graph target loc start # .MEM_200 = VDEF <.MEM_198>
weights_43 = calloc (_42, 4);
test.c:247:10: warning: use location
  weights = xcalloc(on_list, sizeof(*weights));
          ^
dot graph target loc en1

dot graph target line desc form basic block 80: free (weights_43);
test.c:256:2: warning: use location
  free(weights);
  ^
dot graph target line desend

dot graph target loc start # .MEM_200 = VDEF <.MEM_198>
weights_43 = calloc (_42, 4);
test.c:247:10: warning: use location
  weights = xcalloc(on_list, sizeof(*weights));
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 80dot graph target basicblock en1

weights_43, points-to NULL, points-to vars: { D.4193 } (nonlocal, escaped, escaped heap)
dot graph stmt start free (weights_43);
weights_43 = calloc (_42, 4);
dot graph stmt end

dot graph stmt start free (weights_43);
test.c:256:2: warning: use location
  free(weights);
  ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (weights_43);
test.c:256:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

_61 = weights_43 + _59;
test.c:115:19: warning: use location
   p->item->util = &weights[n++];
                   ^
dot graph target loc start # .MEM_200 = VDEF <.MEM_198>
weights_43 = calloc (_42, 4);
test.c:247:10: warning: use location
  weights = xcalloc(on_list, sizeof(*weights));
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: _61 = weights_43 + _59;
test.c:115:19: warning: use location
   p->item->util = &weights[n++];
                   ^
dot graph target line desend

dot graph target loc start # .MEM_200 = VDEF <.MEM_198>
weights_43 = calloc (_42, 4);
test.c:247:10: warning: use location
  weights = xcalloc(on_list, sizeof(*weights));
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

weights_43, points-to NULL, points-to vars: { D.4193 } (nonlocal, escaped, escaped heap)
dot graph stmt start _61 = weights_43 + _59;
weights_43 = calloc (_42, 4);
dot graph stmt end

dot graph stmt start _61 = weights_43 + _59;
test.c:115:19: warning: use location
   p->item->util = &weights[n++];
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_60->util = _61;
test.c:115:17: warning: use location
   p->item->util = &weights[n++];
                 ^
dot graph target loc start # .MEM_200 = VDEF <.MEM_198>
weights_43 = calloc (_42, 4);
test.c:247:10: warning: use location
  weights = xcalloc(on_list, sizeof(*weights));
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: _60->util = _61;
test.c:115:17: warning: use location
   p->item->util = &weights[n++];
                 ^
dot graph target line desend

dot graph target loc start # .MEM_200 = VDEF <.MEM_198>
weights_43 = calloc (_42, 4);
test.c:247:10: warning: use location
  weights = xcalloc(on_list, sizeof(*weights));
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

weights_43, points-to NULL, points-to vars: { D.4193 } (nonlocal, escaped, escaped heap)
dot graph stmt start _60->util = _61;
weights_43 = calloc (_42, 4);
dot graph stmt end

dot graph stmt start _60->util = _61;
test.c:115:17: warning: use location
   p->item->util = &weights[n++];
                 ^
dot graph stmt end


 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;32m   Maybe you don't have a memory leak.... more checks  [0m

======================================================================

 <function_decl 0x7f5251c3cb00 main
    type <function_type 0x7f5251c3b7e0
        type <integer_type 0x7f52520c35e8 int public SI
            size <integer_cst 0x7f52520afe28 constant 32>
            unit size <integer_cst 0x7f52520afe40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f52520c35e8 precision 32 min <integer_cst 0x7f52520afde0 -2147483648> max <integer_cst 0x7f52520afdf8 2147483647>
            pointer_to_this <pointer_type 0x7f52520caa80>>
        QI
        size <integer_cst 0x7f52520afcd8 constant 8>
        unit size <integer_cst 0x7f52520afcf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 259 col 5 align 8 context <translation_unit_decl 0x7f52520ba168 test.c> initial <block 0x7f5251c51180>
    result <result_decl 0x7f52520ba2d0 D.4054 type <integer_type 0x7f52520c35e8 int>
        ignored SI file test.c line 259 col 5 size <integer_cst 0x7f52520afe28 32> unit size <integer_cst 0x7f52520afe40 4>
        align 32 context <function_decl 0x7f5251c3cb00 main>>
    struct-function 0x7f5251c52160>
 <ssa_name 0x7f5251c86ab0
    type <pointer_type 0x7f5251c48888
        type <record_type 0x7f5251c487e0 commit_dist TI
            size <integer_cst 0x7f52520afc30 constant 128>
            unit size <integer_cst 0x7f52520afc48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f5251c487e0 fields <field_decl 0x7f5251c46428 commit> context <translation_unit_decl 0x7f52520ba168 test.c>
            pointer_to_this <pointer_type 0x7f5251c48888> chain <type_decl 0x7f5251c464c0 D.4043>>
        public unsigned DI
        size <integer_cst 0x7f52520afbe8 constant 64>
        unit size <integer_cst 0x7f52520afc00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f5251c83f30 array>
    def_stmt array_132 = calloc (_131, 16);
    version 132
    ptr-info 0x7f5251c8f540>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:calloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---calloc-----
this Reserved word function ------calloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

free (array_132);
test.c:97:2: warning: use location
  free(array);
  ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 75: free (array_132);
test.c:97:2: warning: use location
  free(array);
  ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 75dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start free (array_132);
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start free (array_132);
test.c:97:2: warning: use location
  free(array);
  ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (array_132);
test.c:97:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

_166 = array_132 + _165;
test.c:90:18: warning: use location
   p->item = array[i].commit;
                  ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 71: _166 = array_132 + _165;
test.c:90:18: warning: use location
   p->item = array[i].commit;
                  ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start _166 = array_132 + _165;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start _166 = array_132 + _165;
test.c:90:18: warning: use location
   p->item = array[i].commit;
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_167 = _166->commit;
test.c:90:21: warning: use location
   p->item = array[i].commit;
                     ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 71: _167 = _166->commit;
test.c:90:21: warning: use location
   p->item = array[i].commit;
                     ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start _167 = _166->commit;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start _167 = _166->commit;
test.c:90:21: warning: use location
   p->item = array[i].commit;
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_168->item = _167;
test.c:90:11: warning: use location
   p->item = array[i].commit;
           ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 71: p_168->item = _167;
test.c:90:11: warning: use location
   p->item = array[i].commit;
           ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start p_168->item = _167;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start p_168->item = _167;
test.c:90:11: warning: use location
   p->item = array[i].commit;
           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_161 = array_132 + _160;
test.c:87:37: warning: use location
   strbuf_addf(&buf, "dist=%d", array[i].distance);
                                     ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 71: _161 = array_132 + _160;
test.c:87:37: warning: use location
   strbuf_addf(&buf, "dist=%d", array[i].distance);
                                     ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start _161 = array_132 + _160;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start _161 = array_132 + _160;
test.c:87:37: warning: use location
   strbuf_addf(&buf, "dist=%d", array[i].distance);
                                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_162 = _161->distance;
test.c:87:3: warning: use location
   strbuf_addf(&buf, "dist=%d", array[i].distance);
   ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 71: _162 = _161->distance;
test.c:87:3: warning: use location
   strbuf_addf(&buf, "dist=%d", array[i].distance);
   ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start _162 = _161->distance;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start _162 = _161->distance;
test.c:87:3: warning: use location
   strbuf_addf(&buf, "dist=%d", array[i].distance);
   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

strbuf_addf (&buf, "dist=%d", _162);
test.c:87:3: warning: use location
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 71: strbuf_addf (&buf, "dist=%d", _162);
test.c:87:3: warning: use location
   strbuf_addf(&buf, "dist=%d", array[i].distance);
   ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start strbuf_addf (&buf, "dist=%d", _162);
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start strbuf_addf (&buf, "dist=%d", _162);
test.c:87:3: warning: use location
   strbuf_addf(&buf, "dist=%d", array[i].distance);
   ^
dot graph stmt end

this stmt is child function---strbuf_addf-----

 ================== trace ================== 
trace fucntion name:strbuf_addf 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_156 = array_132 + _155;
test.c:84:31: warning: use location
   struct object *obj = &(array[i].commit->object);
                               ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 71: _156 = array_132 + _155;
test.c:84:31: warning: use location
   struct object *obj = &(array[i].commit->object);
                               ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start _156 = array_132 + _155;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start _156 = array_132 + _155;
test.c:84:31: warning: use location
   struct object *obj = &(array[i].commit->object);
                               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_157 = _156->commit;
test.c:84:34: warning: use location
   struct object *obj = &(array[i].commit->object);
                                  ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 71: _157 = _156->commit;
test.c:84:34: warning: use location
   struct object *obj = &(array[i].commit->object);
                                  ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start _157 = _156->commit;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start _157 = _156->commit;
test.c:84:34: warning: use location
   struct object *obj = &(array[i].commit->object);
                                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

obj_158 = &_157->object;
test.c:84:18: warning: use location
   struct object *obj = &(array[i].commit->object);
                  ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 71: obj_158 = &_157->object;
test.c:84:18: warning: use location
   struct object *obj = &(array[i].commit->object);
                  ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start obj_158 = &_157->object;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start obj_158 = &_157->object;
test.c:84:18: warning: use location
   struct object *obj = &(array[i].commit->object);
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

add_name_decoration (0, _163, obj_158);
test.c:88:3: warning: use location
   add_name_decoration(DECORATION_NONE, buf.buf, obj);
   ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 71: add_name_decoration (0, _163, obj_158);
test.c:88:3: warning: use location
   add_name_decoration(DECORATION_NONE, buf.buf, obj);
   ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start add_name_decoration (0, _163, obj_158);
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start add_name_decoration (0, _163, obj_158);
test.c:88:3: warning: use location
   add_name_decoration(DECORATION_NONE, buf.buf, obj);
   ^
dot graph stmt end

this stmt is child function---add_name_decoration-----

 ================== trace ================== 
trace fucntion name:add_name_decoration 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_149 = array_132 + _148;
test.c:80:8: warning: use location
   array[cnt].distance = distance;
        ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 68: _149 = array_132 + _148;
test.c:80:8: warning: use location
   array[cnt].distance = distance;
        ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 68dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start _149 = array_132 + _148;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start _149 = array_132 + _148;
test.c:80:8: warning: use location
   array[cnt].distance = distance;
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_149->distance = distance_150;
test.c:80:23: warning: use location
   array[cnt].distance = distance;
                       ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 68: _149->distance = distance_150;
test.c:80:23: warning: use location
   array[cnt].distance = distance;
                       ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 68dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start _149->distance = distance_150;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start _149->distance = distance_150;
test.c:80:23: warning: use location
   array[cnt].distance = distance;
                       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_149->distance = distance_150;
test.c:80:23: warning: use location
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 68: _149->distance = distance_150;
test.c:80:23: warning: use location
   array[cnt].distance = distance;
                       ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 68dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start _149->distance = distance_150;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start _149->distance = distance_150;
test.c:80:23: warning: use location
   array[cnt].distance = distance;
                       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_145 = array_132 + _144;
test.c:79:8: warning: use location
   array[cnt].commit = p->item;
        ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 68: _145 = array_132 + _144;
test.c:79:8: warning: use location
   array[cnt].commit = p->item;
        ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 68dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start _145 = array_132 + _144;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start _145 = array_132 + _144;
test.c:79:8: warning: use location
   array[cnt].commit = p->item;
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_145->commit = _146;
test.c:79:21: warning: use location
   array[cnt].commit = p->item;
                     ^
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 68: _145->commit = _146;
test.c:79:21: warning: use location
   array[cnt].commit = p->item;
                     ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 68dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start _145->commit = _146;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start _145->commit = _146;
test.c:79:21: warning: use location
   array[cnt].commit = p->item;
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_145->commit = _146;
test.c:79:21: warning: use location
dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc en1

dot graph target line desc form basic block 68: _145->commit = _146;
test.c:79:21: warning: use location
   array[cnt].commit = p->item;
                     ^
dot graph target line desend

dot graph target loc start # .MEM_204 = VDEF <.MEM_203>
array_132 = calloc (_131, 16);
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
dot graph target loc end

dot graph target basicblock start from main basic block 68dot graph target basicblock en1

array_132, points-to NULL, points-to vars: { D.4194 } (nonlocal)
dot graph stmt start _145->commit = _146;
array_132 = calloc (_131, 16);
dot graph stmt end

dot graph stmt start _145->commit = _146;
test.c:79:21: warning: use location
   array[cnt].commit = p->item;
                     ^
dot graph stmt end


 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;32m   Maybe you don't have a memory leak.... more checks  [0m

======================================================================

[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 3
 [0m
[40;34m    used_stmt array stack totalsize of : 1184
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
algorithm time: 0.042661 s
=======Mapping node_fun:free_commit_list=========
<bb 2> [15.00%]:
goto <bb 8>; [100.00%]

=======is loop:0=========
<bb 3> [85.00%]:
top_5 = list_14;
if (top_5 != 0B)
  goto <bb 4>; [95.93%]
else
  goto <bb 5>; [4.07%]

In function ‘free_commit_list’:
test.c:14:22: warning: use location
  struct commit_list *top = *stack;
                      ^
test.c:15:40: warning: use location
  struct commit *item = top ? top->item : NULL;
                                        ^
=======is loop:1=========
<bb 4> [81.54%]:
_6 = top_5->item;

test.c:15:40: warning: use location
=======is loop:1=========
<bb 5> [85.00%]:
# _8 = PHI <0B(3), _6(4)>
if (top_5 != 0B)
  goto <bb 6>; [57.44%]
else
  goto <bb 7>; [42.56%]

test.c:17:5: warning: use location
  if (top) {
     ^
=======is loop:1=========
<bb 6> [48.82%]:
_7 = top_5->next;
list_16 = _7;
free (top_5);

test.c:18:15: warning: use location
   *stack = top->next;
               ^
test.c:18:10: warning: use location
   *stack = top->next;
          ^
test.c:19:3: warning: use location
   free(top);
   ^
=======is loop:1=========
<bb 7> [85.00%]:
# list_13 = PHI <list_14(5), list_16(6)>
_12 = _8;

=======is loop:1=========
<bb 8> [100.00%]:
# list_14 = PHI <list_15(D)(2), list_13(7)>
_1 = list_14;
if (_1 != 0B)
  goto <bb 3>; [85.00%]
else
  goto <bb 9>; [15.00%]

test.c:26:9: warning: use location
  while (list)
         ^
test.c:26:8: warning: use location
  while (list)
        ^
=======is loop:1=========
<bb 9> [15.00%]:
return;

test.c:28:1: warning: use location
 }
 ^
=======is loop:0=========
=======Mapping node_fun:main=========
<bb 2> [0.46%]:
goto <bb 4>; [100.00%]

=======is loop:0=========
<bb 3> [4.60%]:
new_list_21 = malloc (16);
new_list_21->item = 0B;
_22 = list_255;
new_list_21->next = _22;
list_262 = new_list_21;
_23 = new_list_21;
_254 = new_list_21;
i_12 = i_2 + 1;

In function ‘main’:
test.c:32:22: warning: use location
  struct commit_list *new_list = xmalloc(sizeof(struct commit_list)); /* allocation site */
                      ^
test.c:33:17: warning: use location
  new_list->item = item;
                 ^
test.c:34:19: warning: use location
  new_list->next = *list_p;
                   ^
test.c:34:17: warning: use location
  new_list->next = *list_p;
                 ^
test.c:35:10: warning: use location
  *list_p = new_list;
          ^
test.c:36:9: warning: use location
  return new_list;
         ^
test.c:263:29: warning: use location
     for(int i = 0; i < 10; i++)
                             ^
=======is loop:1=========
<bb 4> [5.06%]:
# i_2 = PHI <0(2), i_12(3)>
# list_255 = PHI <list_256(D)(2), list_262(3)>
if (i_2 <= 9)
  goto <bb 3>; [90.91%]
else
  goto <bb 5>; [9.09%]

test.c:263:5: warning: use location
     for(int i = 0; i < 10; i++)
     ^
=======is loop:1=========
<bb 5> [0.46%]:
_24 = list_255;
show_list ("bisection 2 entry", 0, 0, _24);
p_25 = list_255;
goto <bb 12>; [100.00%]

test.c:221:2: warning: use location
  show_list("bisection 2 entry", 0, 0, *commit_list);
  ^
test.c:221:2: warning: use location
test.c:227:40: warning: use location
  for (nr = on_list = 0, last = NULL, p = *commit_list;
                                        ^
=======is loop:0=========
<bb 6> [2.61%]:
_27 = p_26->item;
_28 = _27->object.flags;
flags_29 = (unsigned int) _28;
next_30 = p_26->next;
_31 = _28 & 2;
_32 = (unsigned int) _31;
if (_31 != 0)
  goto <bb 7>; [19.52%]
else
  goto <bb 8>; [80.48%]

test.c:230:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
test.c:230:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
test.c:230:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
test.c:232:8: warning: use location
   next = p->next;
        ^
test.c:233:13: warning: use location
   if (flags & UNINTERESTING) {
             ^
test.c:233:6: warning: use location
   if (flags & UNINTERESTING) {
      ^
=======is loop:1=========
<bb 7> [0.51%]:
free (p_26);
// predicted unlikely by continue predictor.
goto <bb 11>; [100.00%]

test.c:234:4: warning: use location
    free(p);
    ^
test.c:235:4: warning: use location
    continue;
    ^
=======is loop:1=========
<bb 8> [2.10%]:
p_26->next = last_33;
last_34 = p_26;
_35 = _28 & 4;
_36 = (unsigned int) _35;
if (_35 == 0)
  goto <bb 9>; [50.00%]
else
  goto <bb 10>; [50.00%]

test.c:237:11: warning: use location
   p->next = last;
           ^
test.c:238:8: warning: use location
   last = p;
        ^
test.c:239:15: warning: use location
   if (!(flags & TREESAME))
               ^
test.c:239:6: warning: use location
   if (!(flags & TREESAME))
      ^
=======is loop:1=========
<bb 9> [1.05%]:
nr_38 = nr_37 + 1;

test.c:240:6: warning: use location
    nr++;
      ^
=======is loop:1=========
<bb 10> [2.10%]:
# nr_46 = PHI <nr_37(8), nr_38(9)>
on_list_40 = on_list_39 + 1;

test.c:241:10: warning: use location
   on_list++;
          ^
=======is loop:1=========
<bb 11> [2.61%]:
# nr_47 = PHI <nr_37(7), nr_46(10)>
# on_list_48 = PHI <on_list_39(7), on_list_40(10)>
# p_49 = PHI <next_30(7), next_30(10)>
# last_50 = PHI <last_33(7), p_26(10)>

=======is loop:1=========
<bb 12> [3.07%]:
# nr_37 = PHI <0(5), nr_47(11)>
# on_list_39 = PHI <0(5), on_list_48(11)>
# p_26 = PHI <p_25(5), p_49(11)>
# last_33 = PHI <0B(5), last_50(11)>
if (p_26 != 0B)
  goto <bb 6>; [85.00%]
else
  goto <bb 13>; [15.00%]

test.c:227:2: warning: use location
  for (nr = on_list = 0, last = NULL, p = *commit_list;
  ^
=======is loop:1=========
<bb 13> [0.46%]:
list_41 = last_33;
show_list ("bisection 2 sorted", 0, nr_37, list_41);
all_257 = nr_37;
_42 = (long unsigned int) on_list_39;
weights_43 = calloc (_42, 4);
goto <bb 20>; [100.00%]

test.c:243:7: warning: use location
  list = last;
       ^
test.c:244:2: warning: use location
  show_list("bisection 2 sorted", 0, nr, list);
  ^
test.c:246:7: warning: use location
  *all = nr;
       ^
test.c:247:12: warning: use location
  weights = xcalloc(on_list, sizeof(*weights));
            ^
test.c:247:10: warning: use location
  weights = xcalloc(on_list, sizeof(*weights));
          ^
=======is loop:0=========
<bb 14> [2.60%]:
commit_52 = p_51->item;
_53 = commit_52->object.flags;
flags_54 = (unsigned int) _53;
_56 = n_55;
n_57 = n_55 + 1;
_58 = (long unsigned int) n_55;
_59 = _58 * 4;
_60 = p_51->item;
_61 = weights_43 + _59;
_60->util = _61;
_62 = count_interesting_parents (commit_52);
switch (_62) <default: <L2> [33.33%], case 0: <L0> [33.33%], case 1: <L1> [33.33%]>

test.c:112:18: warning: use location
   struct commit *commit = p->item;
                  ^
test.c:113:34: warning: use location
   unsigned flags = commit->object.flags;
                                  ^
test.c:113:12: warning: use location
   unsigned flags = commit->object.flags;
            ^
test.c:115:29: warning: use location
   p->item->util = &weights[n++];
                             ^
test.c:115:29: warning: use location
test.c:115:29: warning: use location
test.c:115:27: warning: use location
   p->item->util = &weights[n++];
                           ^
test.c:115:4: warning: use location
   p->item->util = &weights[n++];
    ^
test.c:115:19: warning: use location
   p->item->util = &weights[n++];
                   ^
test.c:115:17: warning: use location
   p->item->util = &weights[n++];
                 ^
test.c:116:11: warning: use location
   switch (count_interesting_parents(commit)) {
           ^
test.c:116:3: warning: use location
   switch (count_interesting_parents(commit)) {
   ^
=======is loop:1=========
<L0> [0.87%]:
_63 = _53 & 4;
_64 = (unsigned int) _63;
if (_63 == 0)
  goto <bb 16>; [33.00%]
else
  goto <bb 19>; [67.00%]

test.c:117:3: warning: use location
   case 0:
   ^
test.c:118:16: warning: use location
    if (!(flags & TREESAME)) {
                ^
test.c:118:7: warning: use location
    if (!(flags & TREESAME)) {
       ^
=======is loop:1=========
<bb 16> [0.29%]:
weight_set (p_51, 1);
counted_66 = counted_65 + 1;
show_list ("bisection 2 count one", counted_66, nr_37, list_41);
goto <bb 19>; [100.00%]

test.c:119:5: warning: use location
     weight_set(p, 1);
     ^
test.c:120:12: warning: use location
     counted++;
            ^
test.c:121:5: warning: use location
     show_list("bisection 2 count one",
     ^
=======is loop:1=========
<L1> [0.87%]:
weight_set (p_51, -1);
goto <bb 19>; [100.00%]

test.c:129:3: warning: use location
   case 1:
   ^
test.c:130:4: warning: use location
    weight_set(p, -1);
    ^
=======is loop:1=========
<L2> [0.87%]:
weight_set (p_51, -2);

test.c:132:3: warning: use location
   default:
   ^
test.c:133:4: warning: use location
    weight_set(p, -2);
    ^
=======is loop:1=========
<bb 19> [2.60%]:
# counted_110 = PHI <counted_65(15), counted_66(16), counted_65(17), counted_65(18)>
p_67 = p_51->next;

test.c:111:29: warning: use location
  for (n = 0, p = list; p; p = p->next) {
                             ^
=======is loop:1=========
<bb 20> [3.06%]:
# n_55 = PHI <0(13), n_57(19)>
# counted_65 = PHI <0(13), counted_110(19)>
# p_51 = PHI <list_41(13), p_67(19)>
if (p_51 != 0B)
  goto <bb 14>; [85.00%]
else
  goto <bb 21>; [15.00%]

test.c:111:2: warning: use location
  for (n = 0, p = list; p; p = p->next) {
  ^
=======is loop:1=========
<bb 21> [0.46%]:
show_list ("bisection 2 initialize", counted_65, nr_37, list_41);
goto <bb 31>; [100.00%]

test.c:138:2: warning: use location
  show_list("bisection 2 initialize", counted, nr, list);
  ^
=======is loop:0=========
<bb 22> [5.39%]:
_69 = p_68->item;
_70 = _69->object.flags;
_71 = (unsigned int) _70;
_72 = _70 & 2;
_73 = (unsigned int) _72;
if (_72 != 0)
  goto <bb 23>; [50.00%]
else
  goto <bb 24>; [50.00%]

test.c:155:8: warning: use location
   if (p->item->object.flags & UNINTERESTING)
        ^
test.c:155:22: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                      ^
test.c:155:29: warning: use location
   if (p->item->object.flags & UNINTERESTING)
                             ^
test.c:155:29: warning: use location
test.c:155:6: warning: use location
   if (p->item->object.flags & UNINTERESTING)
      ^
=======is loop:1=========
<bb 23> [2.69%]:
// predicted unlikely by continue predictor.
goto <bb 30>; [100.00%]

test.c:156:4: warning: use location
    continue;
    ^
=======is loop:1=========
<bb 24> [2.69%]:
_74 = weight (p_68);
if (_74 != -2)
  goto <bb 25>; [66.00%]
else
  goto <bb 26>; [34.00%]

test.c:157:7: warning: use location
   if (weight(p) != -2)
       ^
test.c:157:6: warning: use location
   if (weight(p) != -2)
      ^
=======is loop:1=========
<bb 25> [1.78%]:
// predicted unlikely by continue predictor.
goto <bb 30>; [100.00%]

test.c:158:4: warning: use location
    continue;
    ^
=======is loop:1=========
<bb 26> [0.92%]:
_75 = count_distance (p_68);
weight_set (p_68, _75);
clear_distance (list_41);
if (find_all_5(D) == 0)
  goto <bb 27>; [33.00%]
else
  goto <bb 29>; [67.00%]

test.c:159:3: warning: use location
   weight_set(p, count_distance(p));
   ^
test.c:159:3: warning: use location
test.c:160:3: warning: use location
   clear_distance(list);
   ^
test.c:163:6: warning: use location
   if (!find_all && halfway(p, nr))
      ^
=======is loop:1=========
<bb 27> [0.30%]:
_76 = halfway (p_68, nr_37);
if (_76 != 0)
  goto <bb 28>; [7.50%]
else
  goto <bb 29>; [92.50%]

test.c:163:20: warning: use location
   if (!find_all && halfway(p, nr))
                    ^
test.c:163:17: warning: use location
   if (!find_all && halfway(p, nr))
                 ^
=======is loop:1=========
<bb 28> [0.02%]:
_77 = p_68;
goto <bb 76>; [100.00%]

test.c:164:11: warning: use location
    return p;
           ^
=======is loop:0=========
<bb 29> [0.89%]:
counted_79 = counted_78 + 1;

test.c:165:10: warning: use location
   counted++;
          ^
=======is loop:1=========
<bb 30> [5.37%]:
# counted_111 = PHI <counted_78(23), counted_78(25), counted_79(29)>
p_80 = p_68->next;

test.c:154:22: warning: use location
  for (p = list; p; p = p->next) {
                      ^
=======is loop:1=========
<bb 31> [5.83%]:
# counted_78 = PHI <counted_65(21), counted_111(30)>
# p_68 = PHI <list_41(21), p_80(30)>
if (p_68 != 0B)
  goto <bb 22>; [92.50%]
else
  goto <bb 32>; [7.50%]

test.c:154:2: warning: use location
  for (p = list; p; p = p->next) {
  ^
=======is loop:1=========
<bb 32> [0.44%]:
show_list ("bisection 2 count_distance", counted_78, nr_37, list_41);
goto <bb 51>; [100.00%]

test.c:168:2: warning: use location
  show_list("bisection 2 count_distance", counted, nr, list);
  ^
=======is loop:0=========
<bb 33> [29.61%]:
_82 = p_81->item;
_83 = _82->object.flags;
flags_84 = (unsigned int) _83;
_85 = weight (p_81);
if (_85 >= 0)
  goto <bb 34>; [62.96%]
else
  goto <bb 35>; [37.04%]

test.c:173:22: warning: use location
    unsigned flags = p->item->object.flags;
                      ^
test.c:173:36: warning: use location
    unsigned flags = p->item->object.flags;
                                    ^
test.c:173:13: warning: use location
    unsigned flags = p->item->object.flags;
             ^
test.c:175:13: warning: use location
    if (0 <= weight(p))
             ^
test.c:175:7: warning: use location
    if (0 <= weight(p))
       ^
=======is loop:1=========
<bb 34> [18.64%]:
// predicted unlikely by continue predictor.
goto <bb 49>; [100.00%]

test.c:176:5: warning: use location
     continue;
     ^
=======is loop:1=========
<bb 35> [10.97%]:
_86 = p_81->item;
q_87 = _86->parents;
goto <bb 40>; [100.00%]

test.c:177:14: warning: use location
    for (q = p->item->parents; q; q = q->next) {
              ^
test.c:177:11: warning: use location
    for (q = p->item->parents; q; q = q->next) {
           ^
=======is loop:1=========
<bb 36> [92.50%]:
_89 = q_88->item;
_90 = _89->object.flags;
_91 = (unsigned int) _90;
_92 = _90 & 2;
_93 = (unsigned int) _92;
if (_92 != 0)
  goto <bb 37>; [50.00%]
else
  goto <bb 38>; [50.00%]

test.c:178:10: warning: use location
     if (q->item->object.flags & UNINTERESTING)
          ^
test.c:178:24: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                        ^
test.c:178:31: warning: use location
     if (q->item->object.flags & UNINTERESTING)
                               ^
test.c:178:31: warning: use location
test.c:178:8: warning: use location
     if (q->item->object.flags & UNINTERESTING)
        ^
=======is loop:1=========
<bb 37> [46.25%]:
// predicted unlikely by continue predictor.
goto <bb 39>; [100.00%]

test.c:179:6: warning: use location
      continue;
      ^
=======is loop:1=========
<bb 38> [46.25%]:
_94 = weight (q_88);
if (_94 >= 0)
  goto <bb 41>; [7.50%]
else
  goto <bb 39>; [92.50%]

test.c:180:14: warning: use location
     if (0 <= weight(q))
              ^
test.c:180:8: warning: use location
     if (0 <= weight(q))
        ^
=======is loop:1=========
<bb 39> [89.03%]:
q_95 = q_88->next;

test.c:177:36: warning: use location
    for (q = p->item->parents; q; q = q->next) {
                                    ^
=======is loop:1=========
<bb 40> [100.00%]:
# q_88 = PHI <q_87(35), q_95(39)>
if (q_88 != 0B)
  goto <bb 36>; [92.50%]
else
  goto <bb 41>; [7.50%]

test.c:177:4: warning: use location
    for (q = p->item->parents; q; q = q->next) {
    ^
=======is loop:1=========
<bb 41> [10.97%]:
if (q_88 == 0B)
  goto <bb 42>; [17.43%]
else
  goto <bb 43>; [82.57%]

test.c:183:7: warning: use location
    if (!q)
       ^
=======is loop:1=========
<bb 42> [1.91%]:
// predicted unlikely by continue predictor.
goto <bb 49>; [100.00%]

test.c:184:5: warning: use location
     continue;
     ^
=======is loop:1=========
<bb 43> [9.06%]:
_96 = _83 & 4;
_97 = (unsigned int) _96;
if (_96 == 0)
  goto <bb 44>; [50.00%]
else
  goto <bb 45>; [50.00%]

test.c:191:16: warning: use location
    if (!(flags & TREESAME)) {
                ^
test.c:191:7: warning: use location
    if (!(flags & TREESAME)) {
       ^
=======is loop:1=========
<bb 44> [4.53%]:
_98 = weight (q_88);
_99 = _98 + 1;
weight_set (p_81, _99);
counted_101 = counted_100 + 1;
show_list ("bisection 2 count one", counted_101, nr_37, list_41);
goto <bb 46>; [100.00%]

test.c:192:19: warning: use location
     weight_set(p, weight(q)+1);
                   ^
test.c:192:5: warning: use location
     weight_set(p, weight(q)+1);
     ^
test.c:192:5: warning: use location
     weight_set(p, weight(q)+1);
     ^
test.c:193:12: warning: use location
     counted++;
            ^
test.c:194:5: warning: use location
     show_list("bisection 2 count one",
     ^
=======is loop:1=========
<bb 45> [4.53%]:
_102 = weight (q_88);
weight_set (p_81, _102);

test.c:198:5: warning: use location
     weight_set(p, weight(q));
     ^
test.c:198:5: warning: use location
=======is loop:1=========
<bb 46> [9.06%]:
# counted_112 = PHI <counted_101(44), counted_100(45)>
if (find_all_5(D) == 0)
  goto <bb 47>; [33.00%]
else
  goto <bb 49>; [67.00%]

test.c:201:7: warning: use location
    if (!find_all && halfway(p, nr))
       ^
=======is loop:1=========
<bb 47> [2.99%]:
_103 = halfway (p_81, nr_37);
if (_103 != 0)
  goto <bb 48>; [7.50%]
else
  goto <bb 49>; [92.50%]

test.c:201:21: warning: use location
    if (!find_all && halfway(p, nr))
                     ^
test.c:201:18: warning: use location
    if (!find_all && halfway(p, nr))
                  ^
=======is loop:1=========
<bb 48> [0.22%]:
_104 = p_81;
goto <bb 76>; [100.00%]

test.c:202:12: warning: use location
     return p;
            ^
=======is loop:0=========
<bb 49> [29.39%]:
# counted_113 = PHI <counted_100(34), counted_100(42), counted_112(46), counted_112(47)>
p_105 = p_81->next;

test.c:171:23: warning: use location
   for (p = list; p; p = p->next) {
                       ^
=======is loop:1=========
<bb 50> [32.01%]:
# counted_100 = PHI <counted_113(49), counted_106(52)>
# p_81 = PHI <p_105(49), list_41(52)>
if (p_81 != 0B)
  goto <bb 33>; [92.50%]
else
  goto <bb 51>; [7.50%]

test.c:171:3: warning: use location
   for (p = list; p; p = p->next) {
   ^
=======is loop:1=========
<bb 51> [2.84%]:
# counted_106 = PHI <counted_78(32), counted_100(50)>
if (nr_37 > counted_106)
  goto <bb 52>; [92.50%]
else
  goto <bb 53>; [7.50%]

test.c:170:8: warning: use location
  while (counted < nr) {
        ^
=======is loop:1=========
<bb 52> [2.63%]:
goto <bb 50>; [100.00%]

=======is loop:1=========
<bb 53> [0.21%]:
show_list ("bisection 2 counted all", counted_106, nr_37, list_41);
if (find_all_5(D) == 0)
  goto <bb 61>; [46.00%]
else
  goto <bb 63>; [54.00%]

test.c:206:2: warning: use location
  show_list("bisection 2 counted all", counted, nr, list);
  ^
test.c:208:5: warning: use location
  if (!find_all)
     ^
=======is loop:0=========
<bb 54> [0.55%]:
_115 = p_114->item;
_116 = _115->object.flags;
flags_117 = (unsigned int) _116;
_118 = _116 & 4;
_119 = (unsigned int) _118;
if (_118 != 0)
  goto <bb 55>; [50.00%]
else
  goto <bb 56>; [50.00%]

test.c:47:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
test.c:47:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
test.c:47:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
test.c:49:13: warning: use location
   if (flags & TREESAME)
             ^
test.c:49:6: warning: use location
   if (flags & TREESAME)
      ^
=======is loop:1=========
<bb 55> [0.28%]:
// predicted unlikely by continue predictor.
goto <bb 60>; [100.00%]

test.c:50:4: warning: use location
    continue;
    ^
=======is loop:1=========
<bb 56> [0.28%]:
distance_120 = weight (p_114);
_121 = nr_37 - distance_120;
if (distance_120 > _121)
  goto <bb 57>; [50.00%]
else
  goto <bb 58>; [50.00%]

test.c:51:12: warning: use location
   distance = weight(p);
            ^
test.c:52:10: warning: use location
   if (nr - distance < distance)
          ^
test.c:52:6: warning: use location
   if (nr - distance < distance)
      ^
=======is loop:1=========
<bb 57> [0.14%]:
distance_122 = nr_37 - distance_120;

test.c:53:13: warning: use location
    distance = nr - distance;
             ^
=======is loop:1=========
<bb 58> [0.28%]:
# distance_124 = PHI <distance_120(56), distance_122(57)>
if (best_distance_123 < distance_124)
  goto <bb 59>; [50.00%]
else
  goto <bb 60>; [50.00%]

test.c:54:6: warning: use location
   if (distance > best_distance) {
      ^
=======is loop:1=========
<bb 59> [0.14%]:
best_125 = p_114;

test.c:55:9: warning: use location
    best = p;
         ^
=======is loop:1=========
<bb 60> [0.55%]:
# best_129 = PHI <best_127(55), best_127(58), p_114(59)>
# best_distance_130 = PHI <best_distance_123(55), best_distance_123(58), distance_124(59)>
p_126 = p_114->next;

test.c:45:22: warning: use location
  for (p = list; p; p = p->next) {
                      ^
=======is loop:1=========
<bb 61> [0.65%]:
# p_114 = PHI <list_41(53), p_126(60)>
# best_127 = PHI <list_41(53), best_129(60)>
# best_distance_123 = PHI <-1(53), best_distance_130(60)>
if (p_114 != 0B)
  goto <bb 54>; [85.00%]
else
  goto <bb 62>; [15.00%]

test.c:45:2: warning: use location
  for (p = list; p; p = p->next) {
  ^
=======is loop:1=========
<bb 62> [0.10%]:
_128 = best_127;
_221 = best_127;
_107 = _221;
goto <bb 76>; [100.00%]

test.c:60:9: warning: use location
  return best;
         ^
test.c:209:10: warning: use location
   return best_bisection(list, nr);
          ^
=======is loop:0=========
<bb 63> [0.11%]:
_131 = (long unsigned int) nr_37;
array_132 = calloc (_131, 16);
buf.alloc = 0;
buf.len = 0;
buf.buf = &strbuf_slopbuf;
goto <bb 70>; [100.00%]

test.c:66:30: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                              ^
test.c:66:22: warning: use location
  struct commit_dist *array = xcalloc(nr, sizeof(*array));
                      ^
test.c:67:16: warning: use location
  struct strbuf buf = STRBUF_INIT;
                ^
test.c:67:16: warning: use location
test.c:67:16: warning: use location
=======is loop:0=========
<bb 64> [0.65%]:
_134 = p_133->item;
_135 = _134->object.flags;
flags_136 = (unsigned int) _135;
_137 = _135 & 4;
_138 = (unsigned int) _137;
if (_137 != 0)
  goto <bb 65>; [50.00%]
else
  goto <bb 66>; [50.00%]

test.c:72:21: warning: use location
   unsigned flags = p->item->object.flags;
                     ^
test.c:72:35: warning: use location
   unsigned flags = p->item->object.flags;
                                   ^
test.c:72:12: warning: use location
   unsigned flags = p->item->object.flags;
            ^
test.c:74:13: warning: use location
   if (flags & TREESAME)
             ^
test.c:74:6: warning: use location
   if (flags & TREESAME)
      ^
=======is loop:1=========
<bb 65> [0.33%]:
// predicted unlikely by continue predictor.
goto <bb 69>; [100.00%]

test.c:75:4: warning: use location
    continue;
    ^
=======is loop:1=========
<bb 66> [0.33%]:
distance_139 = weight (p_133);
_140 = nr_37 - distance_139;
if (distance_139 > _140)
  goto <bb 67>; [50.00%]
else
  goto <bb 68>; [50.00%]

test.c:76:12: warning: use location
   distance = weight(p);
            ^
test.c:77:10: warning: use location
   if (nr - distance < distance)
          ^
test.c:77:6: warning: use location
   if (nr - distance < distance)
      ^
=======is loop:1=========
<bb 67> [0.16%]:
distance_141 = nr_37 - distance_139;

test.c:78:13: warning: use location
    distance = nr - distance;
             ^
=======is loop:1=========
<bb 68> [0.33%]:
# distance_150 = PHI <distance_139(66), distance_141(67)>
_143 = (long unsigned int) cnt_142;
_144 = _143 * 16;
_145 = array_132 + _144;
_146 = p_133->item;
_145->commit = _146;
_147 = (long unsigned int) cnt_142;
_148 = _147 * 16;
_149 = array_132 + _148;
_149->distance = distance_150;
cnt_151 = cnt_142 + 1;

test.c:79:8: warning: use location
   array[cnt].commit = p->item;
        ^
test.c:79:8: warning: use location
test.c:79:8: warning: use location
test.c:79:24: warning: use location
   array[cnt].commit = p->item;
                        ^
test.c:79:21: warning: use location
   array[cnt].commit = p->item;
                     ^
test.c:80:8: warning: use location
   array[cnt].distance = distance;
        ^
test.c:80:8: warning: use location
test.c:80:8: warning: use location
test.c:80:23: warning: use location
   array[cnt].distance = distance;
                       ^
test.c:81:6: warning: use location
   cnt++;
      ^
=======is loop:1=========
<bb 69> [0.65%]:
# cnt_173 = PHI <cnt_142(65), cnt_151(68)>
p_152 = p_133->next;

test.c:70:31: warning: use location
  for (p = list, cnt = 0; p; p = p->next) {
                               ^
=======is loop:1=========
<bb 70> [0.77%]:
# p_133 = PHI <list_41(63), p_152(69)>
# cnt_142 = PHI <0(63), cnt_173(69)>
if (p_133 != 0B)
  goto <bb 64>; [85.00%]
else
  goto <bb 74>; [15.00%]

test.c:70:2: warning: use location
  for (p = list, cnt = 0; p; p = p->next) {
  ^
=======is loop:1=========
<bb 71> [0.65%]:
_154 = (long unsigned int) i_153;
_155 = _154 * 16;
_156 = array_132 + _155;
_157 = _156->commit;
obj_158 = &_157->object;
strbuf_reset (&buf);
_159 = (long unsigned int) i_153;
_160 = _159 * 16;
_161 = array_132 + _160;
_162 = _161->distance;
strbuf_addf (&buf, "dist=%d", _162);
_163 = buf.buf;
add_name_decoration (0, _163, obj_158);
_164 = (long unsigned int) i_153;
_165 = _164 * 16;
_166 = array_132 + _165;
_167 = _166->commit;
p_168->item = _167;
_169 = cnt_142 + -1;
if (i_153 < _169)
  goto <bb 72>; [98.00%]
else
  goto <bb 73>; [2.00%]

test.c:84:31: warning: use location
   struct object *obj = &(array[i].commit->object);
                               ^
test.c:84:31: warning: use location
test.c:84:31: warning: use location
test.c:84:34: warning: use location
   struct object *obj = &(array[i].commit->object);
                                  ^
test.c:84:18: warning: use location
   struct object *obj = &(array[i].commit->object);
                  ^
test.c:86:3: warning: use location
   strbuf_reset(&buf);
   ^
test.c:87:37: warning: use location
   strbuf_addf(&buf, "dist=%d", array[i].distance);
                                     ^
test.c:87:37: warning: use location
test.c:87:37: warning: use location
test.c:87:3: warning: use location
   strbuf_addf(&buf, "dist=%d", array[i].distance);
   ^
test.c:87:3: warning: use location
test.c:88:3: warning: use location
   add_name_decoration(DECORATION_NONE, buf.buf, obj);
   ^
test.c:88:3: warning: use location
test.c:90:18: warning: use location
   p->item = array[i].commit;
                  ^
test.c:90:18: warning: use location
test.c:90:18: warning: use location
test.c:90:21: warning: use location
   p->item = array[i].commit;
                     ^
test.c:90:11: warning: use location
   p->item = array[i].commit;
           ^
test.c:91:15: warning: use location
   if (i < cnt - 1)
               ^
test.c:91:6: warning: use location
   if (i < cnt - 1)
      ^
=======is loop:1=========
<bb 72> [0.64%]:
p_170 = p_168->next;

test.c:92:6: warning: use location
    p = p->next;
      ^
=======is loop:1=========
<bb 73> [0.65%]:
# p_174 = PHI <p_168(71), p_170(72)>
i_171 = i_153 + 1;

test.c:83:34: warning: use location
  for (p = list, i = 0; i < cnt; i++) {
                                  ^
=======is loop:1=========
<bb 74> [0.77%]:
# p_168 = PHI <list_41(70), p_174(73)>
# i_153 = PHI <0(70), i_171(73)>
if (cnt_142 > i_153)
  goto <bb 71>; [85.00%]
else
  goto <bb 75>; [15.00%]

test.c:83:2: warning: use location
  for (p = list, i = 0; i < cnt; i++) {
  ^
=======is loop:1=========
<bb 75> [0.11%]:
_172 = p_168->next;
free_commit_list (_172);
p_168->next = 0B;
strbuf_release (&buf);
free (array_132);
buf ={v} {CLOBBER};
_213 = list_41;
_108 = _213;

test.c:94:2: warning: use location
  free_commit_list(p->next);
  ^
test.c:94:2: warning: use location
test.c:95:10: warning: use location
  p->next = NULL;
          ^
test.c:96:2: warning: use location
  strbuf_release(&buf);
  ^
test.c:97:2: warning: use location
  free(array);
  ^
lto1: warning: use location
test.c:211:10: warning: use location
   return best_bisection_sorted(list, nr);
          ^
=======is loop:0=========
<bb 76> [0.46%]:
# _109 = PHI <p_68(28), p_81(48), _107(62), _108(75)>
_236 = _109;
best_44 = _236;
if (best_44 != 0B)
  goto <bb 77>; [73.26%]
else
  goto <bb 80>; [26.74%]

test.c:250:7: warning: use location
  best = do_find_bisection(list, nr, weights, find_all);
       ^
test.c:251:5: warning: use location
  if (best) {
     ^
=======is loop:0=========
<bb 77> [0.34%]:
if (find_all_5(D) == 0)
  goto <bb 78>; [50.00%]
else
  goto <bb 79>; [50.00%]

test.c:252:6: warning: use location
   if (!find_all)
      ^
=======is loop:0=========
<bb 78> [0.17%]:
best_44->next = 0B;

test.c:253:15: warning: use location
    best->next = NULL;              /* memory leak */
               ^
=======is loop:0=========
<bb 79> [0.34%]:
_45 = weight (best_44);
reaches_258 = _45;

test.c:254:14: warning: use location
   *reaches = weight(best);
              ^
test.c:254:12: warning: use location
   *reaches = weight(best);
            ^
=======is loop:0=========
<bb 80> [0.46%]:
free (weights_43);
list_259 = best_44;
_1 = list_259;
free_commit_list (_1);
return 0;

test.c:256:2: warning: use location
  free(weights);
  ^
test.c:257:15: warning: use location
  *commit_list = best;
               ^
test.c:268:5: warning: use location
     free_commit_list(list);
     ^
test.c:268:5: warning: use location
=======is loop:0=========
time: 0.178727 s
/usr/bin/ld: /tmp/ccomoxxq.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x77): undefined reference to `show_list'
/usr/bin/ld: <artificial>:(.text+0xea): undefined reference to `show_list'
/usr/bin/ld: <artificial>:(.text+0x12c): undefined reference to `weight_set'
/usr/bin/ld: <artificial>:(.text+0x14a): undefined reference to `show_list'
/usr/bin/ld: <artificial>:(.text+0x15e): undefined reference to `weight_set'
/usr/bin/ld: <artificial>:(.text+0x19a): undefined reference to `count_interesting_parents'
/usr/bin/ld: <artificial>:(.text+0x1b9): undefined reference to `weight_set'
/usr/bin/ld: <artificial>:(.text+0x1e1): undefined reference to `weight'
/usr/bin/ld: <artificial>:(.text+0x1f3): undefined reference to `count_distance'
/usr/bin/ld: <artificial>:(.text+0x202): undefined reference to `weight_set'
/usr/bin/ld: <artificial>:(.text+0x20f): undefined reference to `clear_distance'
/usr/bin/ld: <artificial>:(.text+0x21f): undefined reference to `halfway'
/usr/bin/ld: <artificial>:(.text+0x249): undefined reference to `weight'
/usr/bin/ld: <artificial>:(.text+0x269): undefined reference to `weight'
/usr/bin/ld: <artificial>:(.text+0x279): undefined reference to `weight_set'
/usr/bin/ld: <artificial>:(.text+0x297): undefined reference to `show_list'
/usr/bin/ld: <artificial>:(.text+0x2a7): undefined reference to `halfway'
/usr/bin/ld: <artificial>:(.text+0x2d7): undefined reference to `weight'
/usr/bin/ld: <artificial>:(.text+0x2fb): undefined reference to `weight'
/usr/bin/ld: <artificial>:(.text+0x30a): undefined reference to `weight_set'
/usr/bin/ld: <artificial>:(.text+0x33e): undefined reference to `weight'
/usr/bin/ld: <artificial>:(.text+0x37b): undefined reference to `show_list'
/usr/bin/ld: <artificial>:(.text+0x3af): undefined reference to `show_list'
/usr/bin/ld: <artificial>:(.text+0x3cf): undefined reference to `show_list'
/usr/bin/ld: <artificial>:(.text+0x3f8): undefined reference to `show_list'
/usr/bin/ld: <artificial>:(.text+0x42a): undefined reference to `show_list'
/usr/bin/ld: /tmp/ccomoxxq.ltrans0.ltrans.o:<artificial>:(.text+0x44a): more undefined references to `show_list' follow
/usr/bin/ld: /tmp/ccomoxxq.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x494): undefined reference to `weight'
collect2: error: ld returned 1 exit status
