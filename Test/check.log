../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  1298k ( 57%)
 phase parsing                      :   0.01 (100%)   0.02 (100%)   0.03 (100%)   909k ( 40%)
 preprocessing                      :   0.00 (  0%)   0.01 ( 50%)   0.01 ( 33%)   270k ( 12%)
 lexical analysis                   :   0.01 (100%)   0.01 ( 50%)   0.01 ( 33%)     0  (  0%)
 parser (global)                    :   0.00 (  0%)   0.00 (  0%)   0.01 ( 33%)   583k ( 26%)
 TOTAL                              :   0.01          0.02          0.03         2283k
../Compiler/newplugin.so 11.2.0 
test2.c: In function â€˜fooâ€™:
test2.c:6:13: warning: implicit declaration of function â€˜mallocâ€™ [-Wimplicit-function-declaration]
    6 |         b = malloc(1);
      |             ^~~~~~
test2.c:1:1: note: include â€˜<stdlib.h>â€™ or provide a declaration of â€˜mallocâ€™
  +++ |+#include <stdlib.h>
    1 | int   *foo(void)
test2.c:6:13: warning: incompatible implicit declaration of built-in function â€˜mallocâ€™ [-Wbuiltin-declaration-mismatch]
    6 |         b = malloc(1);
      |             ^~~~~~
test2.c:6:13: note: include â€˜<stdlib.h>â€™ or provide a declaration of â€˜mallocâ€™
test2.c:8:13: warning: incompatible implicit declaration of built-in function â€˜mallocâ€™ [-Wbuiltin-declaration-mismatch]
    8 |         b = malloc(2);
      |             ^~~~~~
test2.c:8:13: note: include â€˜<stdlib.h>â€™ or provide a declaration of â€˜mallocâ€™

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)  1298k ( 88%)
 phase opt and generate             :   0.01 (100%)   0.00 (  0%)   0.00 (  0%)    17k (  1%)
 callgraph ipa passes               :   0.01 (100%)   0.00 (  0%)   0.00 (  0%)    11k (  1%)
 lto stream compression             :   0.01 (100%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 TOTAL                              :   0.01          0.00          0.01         1466k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)  2157k ( 99%)
 TOTAL                              :   0.00          0.00          0.01         2190k
../Compiler/newplugin.so 11.2.0 
--------plugin argument-----------
contextsentive 1
debugoutput 1
debugmod 0
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
# VUSE <.MEM_15>
return 0;
GIMPLE_RETURN
 <integer_cst 0x7fd2eaeebf48 type <integer_type 0x7fd2eaf005e8 int> constant 0>
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 3 
===============The second stage : Mapping stmt=================
# .MEM_17 = VDEF <.MEM_16(D)>
srand (10);
# .MEM_18 = VDEF <.MEM_14>
_1 = rand ();
# .MEM_19 = VDEF <.MEM_18>
p_10 = malloc (10);
# .MEM_20 = VDEF <.MEM_19>
printf ("%d\n", test_8);
===============The second stage : Program slicing=================
=============== *this point analyzable =================
_1 = rand ();
=============== program slcing stmt count:1=================
test.c:10:23: warning: use location
   10 |                 test= rand()% (10 - 0 + 1) + 0;
      |                       ^
========================================================
=============== *this point analyzable =================
p_10 = malloc (10);
=============== program slcing stmt count:0=================
test.c:11:19: warning: use location
   11 |                 p=malloc(10);
      |                   ^
========================================================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================
=======node_fun: =========
[40;44m =======print_function_path main  function_call count: 5 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;42m =======pre add _ fucntion:srand========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fd2eaef35e8
    type <integer_type 0x7fd2eaf005e8 int public SI
        size <integer_cst 0x7fd2eaeebdf8 constant 32>
        unit-size <integer_cst 0x7fd2eaeebe10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd2eaf005e8 precision:32 min <integer_cst 0x7fd2eaeebdb0 -2147483648> max <integer_cst 0x7fd2eaeebdc8 2147483647>
        pointer_to_this <pointer_type 0x7fd2eaf079d8>>
   
    def_stmt _1 = rand ();
    version:1>
 <ssa_name 0x7fd2eaef35e8
    type <integer_type 0x7fd2eaf005e8 int public SI
        size <integer_cst 0x7fd2eaeebdf8 constant 32>
        unit-size <integer_cst 0x7fd2eaeebe10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd2eaf005e8 precision:32 min <integer_cst 0x7fd2eaeebdb0 -2147483648> max <integer_cst 0x7fd2eaeebdc8 2147483647>
        pointer_to_this <pointer_type 0x7fd2eaf079d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:rand 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7fd2eaef35e8
    type <integer_type 0x7fd2eaf005e8 int public SI
        size <integer_cst 0x7fd2eaeebdf8 constant 32>
        unit-size <integer_cst 0x7fd2eaeebe10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd2eaf005e8 precision:32 min <integer_cst 0x7fd2eaeebdb0 -2147483648> max <integer_cst 0x7fd2eaeebdc8 2147483647>
        pointer_to_this <pointer_type 0x7fd2eaf079d8>>
   
    def_stmt _1 = rand ();
    version:1>
is Other function rand
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (test_8 > 5)
In function â€˜mainâ€™:
test.c:13:19: warning: use location
   13 |                 if(test >5)
      |                   ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
printf ("%d\n", test_8);
test.c:12:17: warning: use location
   12 |                 printf("%d\n", test);
      |                 ^
this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_18 = VDEF <.MEM_14>
_1 = rand ();
_1 = rand ();
test.c:10:23: warning: use location
   10 |                 test= rand()% (10 - 0 + 1) + 0;
      |                       ^
this stmt call this function :rand
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_21 = VDEF <.MEM_20>
free (p_10);
test.c:15:17: warning: use location
   15 |                 free(p);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:main 
if (test_8 > 5)
test.c:13:19: warning: use location
   13 |                 if(test >5)
      |                   ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
test.c:14:25: warning: use location
   14 |                         goto EXIT;
      |                         ^
branch in succ := 4 have goto
# .MEM_21 = VDEF <.MEM_20>
free (p_10);
test.c:15:17: warning: use location
   15 |                 free(p);
      |                 ^
The path has a release memory in succ := 5 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:main 
if (test_8 > 5)
test.c:13:19: warning: use location
   13 |                 if(test >5)
      |                   ^
gimple stmt in succ := 3 
# VUSE <.MEM_15>
return 0;
lto1: warning: use location
branch in succ := 7 have 
# .MEM_21 = VDEF <.MEM_20>
free (p_10);
test.c:15:17: warning: use location
   15 |                 free(p);
      |                 ^
The path has a release memory in succ := 5 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:main 
# .MEM_20 = VDEF <.MEM_19>
printf ("%d\n", test_8);
test.c:12:17: warning: use location
   12 |                 printf("%d\n", test);
      |                 ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
test.c:14:25: warning: use location
   14 |                         goto EXIT;
      |                         ^
branch in succ := 4 have goto
# .MEM_21 = VDEF <.MEM_20>
free (p_10);
test.c:15:17: warning: use location
   15 |                 free(p);
      |                 ^
The path has a release memory in succ := 5 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:main 
# .MEM_20 = VDEF <.MEM_19>
printf ("%d\n", test_8);
test.c:12:17: warning: use location
   12 |                 printf("%d\n", test);
      |                 ^
gimple stmt in succ := 3 
# VUSE <.MEM_15>
return 0;
lto1: warning: use location
branch in succ := 7 have 
# .MEM_21 = VDEF <.MEM_20>
free (p_10);
test.c:15:17: warning: use location
   15 |                 free(p);
      |                 ^
The path has a release memory in succ := 5 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:main 
# .MEM_18 = VDEF <.MEM_14>
_1 = rand ();
test.c:10:23: warning: use location
   10 |                 test= rand()% (10 - 0 + 1) + 0;
      |                       ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
test.c:14:25: warning: use location
   14 |                         goto EXIT;
      |                         ^
branch in succ := 4 have goto
# .MEM_21 = VDEF <.MEM_20>
free (p_10);
test.c:15:17: warning: use location
   15 |                 free(p);
      |                 ^
The path has a release memory in succ := 5 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:main 
# .MEM_18 = VDEF <.MEM_14>
_1 = rand ();
test.c:10:23: warning: use location
   10 |                 test= rand()% (10 - 0 + 1) + 0;
      |                       ^
gimple stmt in succ := 3 
# VUSE <.MEM_15>
return 0;
lto1: warning: use location
branch in succ := 7 have 
# .MEM_21 = VDEF <.MEM_20>
free (p_10);
test.c:15:17: warning: use location
   15 |                 free(p);
      |                 ^
The path has a release memory in succ := 5 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fd2eaef36c0
    type <pointer_type 0x7fd2eaf079d8
        type <integer_type 0x7fd2eaf005e8 int public SI
            size <integer_cst 0x7fd2eaeebdf8 constant 32>
            unit-size <integer_cst 0x7fd2eaeebe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd2eaf005e8 precision:32 min <integer_cst 0x7fd2eaeebdb0 -2147483648> max <integer_cst 0x7fd2eaeebdc8 2147483647>
            pointer_to_this <pointer_type 0x7fd2eaf079d8>>
        unsigned DI
        size <integer_cst 0x7fd2eaeebbb8 constant 64>
        unit-size <integer_cst 0x7fd2eaeebbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fd2eb795bd0 p>
    def_stmt p_10 = malloc (10);
    version:10
    ptr-info 0x7fd2ea9fb0a8>
 <ssa_name 0x7fd2eaef36c0
    type <pointer_type 0x7fd2eaf079d8
        type <integer_type 0x7fd2eaf005e8 int public SI
            size <integer_cst 0x7fd2eaeebdf8 constant 32>
            unit-size <integer_cst 0x7fd2eaeebe10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fd2eaf005e8 precision:32 min <integer_cst 0x7fd2eaeebdb0 -2147483648> max <integer_cst 0x7fd2eaeebdc8 2147483647>
            pointer_to_this <pointer_type 0x7fd2eaf079d8>>
        unsigned DI
        size <integer_cst 0x7fd2eaeebbb8 constant 64>
        unit-size <integer_cst 0x7fd2eaeebbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7fd2eb795bd0 p>
    def_stmt p_10 = malloc (10);
    version:10
    ptr-info 0x7fd2ea9fb0a8>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (p_10);
test.c:15:17: warning: use location
this stmt call this function :free

 ================== find free stmt ================== 
free (p_10);
test.c:15:17: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_19 = VDEF <.MEM_18>
p_10 = malloc (10);
p_10 = malloc (10);
test.c:11:19: warning: use location
   11 |                 p=malloc(10);
      |                   ^
this stmt call this function :malloc

This stmt may duplicate memory requests.

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_21 = VDEF <.MEM_20>
free (p_10);
test.c:15:17: warning: use location
   15 |                 free(p);
      |                 ^

=====================prebranchexit:start================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:main 
# .MEM_19 = VDEF <.MEM_18>
p_10 = malloc (10);
test.c:11:19: warning: use location
   11 |                 p=malloc(10);
      |                   ^
gimple stmt in succ := 3 
// predicted unlikely by goto predictor.
test.c:14:25: warning: use location
   14 |                         goto EXIT;
      |                         ^
branch in succ := 4 have goto
# .MEM_21 = VDEF <.MEM_20>
free (p_10);
test.c:15:17: warning: use location
   15 |                 free(p);
      |                 ^
The path has a release memory in succ := 5 

======================================================================
[40;31m    branch possiable have return or exit  [0m
In fucntion name:main 
# .MEM_19 = VDEF <.MEM_18>
p_10 = malloc (10);
test.c:11:19: warning: use location
   11 |                 p=malloc(10);
      |                   ^
gimple stmt in succ := 3 
# VUSE <.MEM_15>
return 0;
lto1: warning: use location
branch in succ := 7 have 
# .MEM_21 = VDEF <.MEM_20>
free (p_10);
test.c:15:17: warning: use location
   15 |                 free(p);
      |                 ^
The path has a release memory in succ := 5 

======================================================================

=====================prebranchexit:end================

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 151290756]:
srand (10);
goto <bb 6>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 976138698]:
_1 = rand ();
test_8 = _1 % 11;
p_10 = malloc (10);
printf ("%d\n", test_8);
if (test_8 > 5)
  goto <bb 4>; [5.50%]
else
  goto <bb 5>; [94.50%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 53687628]:
// predicted unlikely by goto predictor.
goto <bb 7>; [100.00%]

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 922451069]:
free (p_10);
i_13 = i_2 + 1;

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 1073741824]:
# i_2 = PHI <0(2), i_13(5)>
if (i_2 <= 9)
  goto <bb 3>; [90.91%]
else
  goto <bb 7>; [9.09%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 151290756]:
EXIT:
return 0;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 1 [0m
[40;34m    gimple free   count : 1 [0m
[40;34m    all ptable point : 3 [0m
[40;34m    analyzable ptable point : 2 [0m
[40;34m    analyzable ptable all point stmt : 1 [0m
[40;34m    used_stmt array stack totalsize of : 0.000056 mb[0m
[40;34m    collect time: : 0.000146 s [0m
[40;34m    mapping time: : 0.000221 s [0m
[40;34m    algorithm time: 0.002317 s [0m
[40;34m    gimple stmt count : : 12 [0m
[40;34m    this report analysis in Fri Jul 15 05:28:30 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 ( 50%)  2157k ( 93%)
 phase opt and generate             :   0.01 (100%)   0.00 (  0%)   0.01 ( 50%)   126k (  5%)
 callgraph functions expansion      :   0.00 (  0%)   0.00 (  0%)   0.01 ( 50%)    96k (  4%)
 plugin execution                   :   0.01 (100%)   0.00 (  0%)   0.00 (  0%)   264  (  0%)
 rest of compilation                :   0.00 (  0%)   0.00 (  0%)   0.01 ( 50%)  3528  (  0%)
 TOTAL                              :   0.01          0.00          0.02         2309k
