test.c: In function â€˜foo3â€™:
test.c:58:6: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
   *z = malloc(1);
      ^
test.c:64:11: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("%d", p2);
          ~^
          %ls
test.c: In function â€˜foo4â€™:
test.c:136:5: warning: assignment from incompatible pointer type [-Wincompatible-pointer-types]
  p2 = &b;
     ^
test.c: In function â€˜childâ€™:
test.c:200:16: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("asdda%d\n", a99);
               ~^
               %ls
test.c:210:7: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
  data = 10;
       ^
test.c:217:9: warning: passing argument 1 of â€˜child4â€™ from incompatible pointer type [-Wincompatible-pointer-types]
  child4(&data);
         ^
test.c:25:7: note: expected â€˜int *â€™ but argument is of type â€˜void **â€™
 void *child4(int *data) __attribute__((noinline));
       ^~~~~~
test.c: In function â€˜child4â€™:
test.c:243:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c:244:14: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *test = &data;
              ^
test.c:263:16: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("asdda%d\n", pData);
               ~^
               %ls
test.c: In function â€˜child3â€™:
test.c:277:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c:288:16: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("asdda%d\n", pData);
               ~^
               %ls
test.c: In function â€˜child5â€™:
test.c:319:17: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
   printf("asdda%d\n", pData);
                ~^
                %ls
test.c: In function â€˜child6â€™:
test.c:355:17: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
   printf("asdda%d\n", pData);
                ~^
                %ls
test.c: In function â€˜child7â€™:
test.c:392:17: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
   printf("asdda%d\n", pData);
                ~^
                %ls
test.c: In function â€˜child2â€™:
test.c:415:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c: In function â€˜mainâ€™:
test.c:526:37: warning: passing argument 4 of â€˜pthread_createâ€™ makes pointer from integer without a cast [-Wint-conversion]
  pthread_create(&t, &attr2, child2, input2);
                                     ^~~~~~
In file included from test.c:3:0:
/usr/include/pthread.h:200:12: note: expected â€˜void * restrictâ€™ but argument is of type â€˜intâ€™
 extern int pthread_create (pthread_t *__restrict __newthread,
            ^~~~~~~~~~~~~~
test.c:546:12: warning: passing argument 1 of â€˜child7â€™ makes pointer from integer without a cast [-Wint-conversion]
   q=child7(test,q);
            ^~~~
test.c:374:6: note: expected â€˜void *â€™ but argument is of type â€˜intâ€™
 int *child7(void *data, void *test)
      ^~~~~~
test.c:564:13: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
 printf("tes%dt\n" ,q3);
            ~^
            %ls
test.c:592:5: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
  p4 = 1;
     ^
test.c:595:14: warning: passing argument 1 of â€˜child7â€™ makes pointer from integer without a cast [-Wint-conversion]
  p4 = child7(test, p4);
              ^~~~
test.c:374:6: note: expected â€˜void *â€™ but argument is of type â€˜intâ€™
 int *child7(void *data, void *test)
      ^~~~~~
=======ipa_pta=========
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
 <var_decl 0x7f61ef37f3f0 pData
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    addressable unsigned DI file test.c line 204 col 7 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
    align 64 context <function_decl 0x7f61ef34dd00 child> chain <var_decl 0x7f61ef37f360 pData2>>
 <var_decl 0x7f61f058eb40 p98
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    static unsigned DI file test.c line 12 col 13 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
    align 64 context <translation_unit_decl 0x7f61ef804168 test.c>>
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
=======print_function_var -262608208   11========
=======print_function_var -281521312   2========
if (_27 != 0)
if (data_83 == 0B)
=======print_function_var -262608064   12========
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
=======================================================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 13 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path child  function_call count: 10 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;33m =======POP node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;44m =======print_function_path boo  function_call count: 3 level :2========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;44m =======print_function_path test22  function_call count: 2 level :3========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:test22========= [0m
[40;42m =======start_check_funciton:test22========= [0m
 <function_decl 0x7f61ef34de00 test22
    type <function_type 0x7f61ef34c930
        type <void_type 0x7f61ef80df18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef8140a8>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34ba78 value <pointer_type 0x7f61ef814a80>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef3599d8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 458 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef364c00>
    result <result_decl 0x7f61ef804708 D.4094 type <void_type 0x7f61ef80df18 void>
        ignored VOID file test.c line 458 col 6
        align 8 context <function_decl 0x7f61ef34de00 test22>>
    arguments <parm_decl 0x7f61ef35ed00 k
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        unsigned DI file test.c line 458 col 18 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef34de00 test22> arg-type <pointer_type 0x7f61ef814a80>>
    struct-function 0x7f61ef3656e0>
 <ssa_name 0x7f61ef37d3a8
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef373cf0 w>
    def_stmt w_10 = malloc (5);
    version 10
    ptr-info 0x7f61ef3806a8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry test22
dot graph target entry end

free (w_10);
In function â€˜mainâ€™:
test.c:467:2: warning: use location
  free(w);
  ^
dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
w_10 = malloc (5);
test.c:466:7: warning: use location
  int *w = malloc(5);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: free (w_10);
test.c:467:2: warning: use location
  free(w);
  ^
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
w_10 = malloc (5);
test.c:466:7: warning: use location
  int *w = malloc(5);
       ^
dot graph target loc end

dot graph target basicblock start from test22 basic block 2dot graph target basicblock en1

dot graph stmt start free (w_10);
w_10 = malloc (5);
dot graph stmt end

dot graph stmt start free (w_10);
test.c:467:2: warning: use location
  free(w);
  ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (w_10);
test.c:467:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
 <ssa_name 0x7f61ef37d3a8
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef373cf0 w>
    def_stmt w_10 = malloc (5);
    version 10
    ptr-info 0x7f61ef3806a8>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

[40;33m =======POP node_fun stack:test22========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:boo========= [0m
[40;42m =======start_check_funciton:boo========= [0m
[40;33m =======POP node_fun stack:boo========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;44m =======print_function_path child5  function_call count: 4 level :2========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;33m =======POP node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;33m =======POP node_fun stack:pthread_self========= [0m
[40;42m =======pre_check_funciton:child5========= [0m
[40;42m =======start_check_funciton:child5========= [0m
[40;33m =======POP node_fun stack:child5========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;44m =======print_function_path child3  function_call count: 4 level :2========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;33m =======POP node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;33m =======POP node_fun stack:pthread_self========= [0m
[40;42m =======pre_check_funciton:child3========= [0m
[40;42m =======start_check_funciton:child3========= [0m
[40;33m =======POP node_fun stack:child3========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;44m =======print_function_path child4  function_call count: 1 level :2========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre_check_funciton:child4========= [0m
[40;42m =======start_check_funciton:child4========= [0m
[40;33m =======POP node_fun stack:child4========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path foo  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:foo2========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path foo2  function_call count: 4 level :3========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;44m =======print_function_path foo3  function_call count: 2 level :4========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:foo3========= [0m
[40;42m =======start_check_funciton:foo3========= [0m
 <function_decl 0x7f61ef352700 foo3
    type <function_type 0x7f61ef34c930
        type <void_type 0x7f61ef80df18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef8140a8>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34ba78 value <pointer_type 0x7f61ef814a80>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef3599d8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 48 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef3642a0>
    result <result_decl 0x7f61ef8042d0 D.4051 type <void_type 0x7f61ef80df18 void>
        ignored VOID file test.c line 48 col 6
        align 8 context <function_decl 0x7f61ef352700 foo3>>
    arguments <parm_decl 0x7f61ef35e600 z
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        unsigned DI file test.c line 48 col 16 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352700 foo3> arg-type <pointer_type 0x7f61ef814a80>>
    struct-function 0x7f61ef3650b0>
 <ssa_name 0x7f61ef801e10
    type <pointer_type 0x7f61ef8140a8
        type <void_type 0x7f61ef80df18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef8140a8>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef34c348>>
   
    def_stmt _1 = malloc (1);
    version 1
    ptr-info 0x7f61ef380318>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo3
dot graph target entry end

_2 = (long int) _1;
test.c:58:6: warning: use location
   *z = malloc(1);
      ^
dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:58:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = (long int) _1;
test.c:58:6: warning: use location
   *z = malloc(1);
      ^
dot graph target line desend

dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:58:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc end

dot graph target basicblock start from foo3 basic block 3dot graph target basicblock en1

dot graph stmt start _2 = (long int) _1;
_1 = malloc (1);
dot graph stmt end

dot graph stmt start _2 = (long int) _1;
test.c:58:6: warning: use location
   *z = malloc(1);
      ^
dot graph stmt end

dot graph entry foo3
dot graph target entry end

_3 = (int) _2;
test.c:58:6: warning: use location
dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:58:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _3 = (int) _2;
test.c:58:6: warning: use location
   *z = malloc(1);
      ^
dot graph target line desend

dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:58:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc end

dot graph target basicblock start from foo3 basic block 3dot graph target basicblock en1

dot graph stmt start _3 = (int) _2;
_1 = malloc (1);
dot graph stmt end

dot graph stmt start _3 = (int) _2;
test.c:58:6: warning: use location
   *z = malloc(1);
      ^
dot graph stmt end

dot graph entry foo3
dot graph target entry end

*z_11(D) = _3;
test.c:58:6: warning: use location
dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:58:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: *z_11(D) = _3;
test.c:58:6: warning: use location
   *z = malloc(1);
      ^
dot graph target line desend

dot graph target loc start # .MEM_19 = VDEF <.MEM_17(D)>
_1 = malloc (1);
test.c:58:8: warning: use location
   *z = malloc(1);
        ^
dot graph target loc end

dot graph target basicblock start from foo3 basic block 3dot graph target basicblock en1

dot graph stmt start *z_11(D) = _3;
_1 = malloc (1);
dot graph stmt end

dot graph stmt start *z_11(D) = _3;
test.c:58:6: warning: use location
   *z = malloc(1);
      ^
dot graph stmt end

 <ssa_name 0x7f61ef801e10
    type <pointer_type 0x7f61ef8140a8
        type <void_type 0x7f61ef80df18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef8140a8>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef34c348>>
   
    def_stmt _1 = malloc (1);
    version 1
    ptr-info 0x7f61ef380318>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f61ef352700 foo3
    type <function_type 0x7f61ef34c930
        type <void_type 0x7f61ef80df18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef8140a8>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34ba78 value <pointer_type 0x7f61ef814a80>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef3599d8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 48 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef3642a0>
    result <result_decl 0x7f61ef8042d0 D.4051 type <void_type 0x7f61ef80df18 void>
        ignored VOID file test.c line 48 col 6
        align 8 context <function_decl 0x7f61ef352700 foo3>>
    arguments <parm_decl 0x7f61ef35e600 z
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        unsigned DI file test.c line 48 col 16 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352700 foo3> arg-type <pointer_type 0x7f61ef814a80>>
    struct-function 0x7f61ef3650b0>
 <ssa_name 0x7f61ef801f78
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368120 p2>
    def_stmt p2_9 = malloc (2);
    version 9
    ptr-info 0x7f61ef380348>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo3
dot graph target entry end

p2_4 = PHI <p2_13(D)(3), p2_9(4)>
lto1: warning: use location
dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:61:6: warning: use location
   p2 = malloc(2);
      ^
dot graph target loc en1

dot graph target line desc form basic block 5: p2_4 = PHI <p2_13(D)(3), p2_9(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:61:6: warning: use location
dot graph target loc end

dot graph target basicblock start from foo3 basic block 5dot graph target basicblock en1

dot graph stmt start p2_4 = PHI <p2_13(D)(3), p2_9(4)>
p2_9 = malloc (2);
dot graph stmt end

dot graph stmt start p2_4 = PHI <p2_13(D)(3), p2_9(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry foo3
dot graph target entry end

_15 = __printf_chk (1, "%d", p2_4);
dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:61:6: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 5: _15 = __printf_chk (1, "%d", p2_4);
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:61:6: warning: use location
dot graph target loc end

dot graph target basicblock start from foo3 basic block 5dot graph target basicblock en1

dot graph stmt start _15 = __printf_chk (1, "%d", p2_4);
p2_9 = malloc (2);
dot graph stmt end

dot graph stmt start _15 = __printf_chk (1, "%d", p2_4);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f61ef801f78
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368120 p2>
    def_stmt p2_9 = malloc (2);
    version 9
    ptr-info 0x7f61ef380348>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry foo3
dot graph target entry end

*p2_4 = 10;
test.c:63:8: warning: use location
  p2[0] = 10;
        ^
dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:61:6: warning: use location
   p2 = malloc(2);
      ^
dot graph target loc en1

dot graph target line desc form basic block 5: *p2_4 = 10;
test.c:63:8: warning: use location
  p2[0] = 10;
        ^
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17(D)>
p2_9 = malloc (2);
test.c:61:6: warning: use location
   p2 = malloc(2);
      ^
dot graph target loc end

dot graph target basicblock start from foo3 basic block 5dot graph target basicblock en1

dot graph stmt start *p2_4 = 10;
p2_9 = malloc (2);
dot graph stmt end

dot graph stmt start *p2_4 = 10;
test.c:63:8: warning: use location
  p2[0] = 10;
        ^
dot graph stmt end

 <ssa_name 0x7f61ef801f78
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368120 p2>
    def_stmt p2_9 = malloc (2);
    version 9
    ptr-info 0x7f61ef380348>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:foo3========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;33m =======POP node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:foo2========= [0m
[40;42m =======start_check_funciton:foo2========= [0m
 <function_decl 0x7f61ef352600 foo2
    type <function_type 0x7f61ef34cb28
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34bbb8 value <integer_type 0x7f61ef80d5e8 int>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef3592a0>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 66 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef3643c0>
    result <result_decl 0x7f61ef804348 D.4056 type <pointer_type 0x7f61ef814a80>
        unsigned ignored DI file test.c line 66 col 6 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352600 foo2>>
    arguments <parm_decl 0x7f61ef35e680 z
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        SI file test.c line 66 col 15 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef352600 foo2> arg-type <integer_type 0x7f61ef80d5e8 int>>
    struct-function 0x7f61ef365160>
 <ssa_name 0x7f61ef36d4c8
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368510 a2>
    def_stmt a2_13 = malloc (_1);
    version 13
    ptr-info 0x7f61ef380408>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
 <ssa_name 0x7f61ef36d4c8
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368510 a2>
    def_stmt a2_13 = malloc (_1);
    version 13
    ptr-info 0x7f61ef380408>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:69:7: warning: use location
  int *a2 = malloc(z);
       ^

======================================================================
 <function_decl 0x7f61ef352600 foo2
    type <function_type 0x7f61ef34cb28
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34bbb8 value <integer_type 0x7f61ef80d5e8 int>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef3592a0>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 66 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef3643c0>
    result <result_decl 0x7f61ef804348 D.4056 type <pointer_type 0x7f61ef814a80>
        unsigned ignored DI file test.c line 66 col 6 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352600 foo2>>
    arguments <parm_decl 0x7f61ef35e680 z
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        SI file test.c line 66 col 15 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef352600 foo2> arg-type <integer_type 0x7f61ef80d5e8 int>>
    struct-function 0x7f61ef365160>
 <ssa_name 0x7f61ef36d510
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368480 p3>
    def_stmt p3_15 = malloc (_2);
    version 15
    ptr-info 0x7f61ef380420>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo2
dot graph target entry end

_8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:70:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 5: _8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:70:7: warning: use location
dot graph target loc end

dot graph target basicblock start from foo2 basic block 5dot graph target basicblock en1

dot graph stmt start _8 = PHI <p3_15(3), p4_17(4)>
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start _8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry foo2
dot graph target entry end

_33 = p3_15;
test.c:89:10: warning: use location
   return p3;
          ^
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:70:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 3: _33 = p3_15;
test.c:89:10: warning: use location
   return p3;
          ^
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:70:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

dot graph stmt start _33 = p3_15;
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start _33 = p3_15;
test.c:89:10: warning: use location
   return p3;
          ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

free (p3_15);
test.c:88:3: warning: use location
   free(p3);
   ^
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:70:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 3: free (p3_15);
test.c:88:3: warning: use location
   free(p3);
   ^
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:70:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

dot graph stmt start free (p3_15);
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start free (p3_15);
test.c:88:3: warning: use location
   free(p3);
   ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (p3_15);
test.c:88:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry foo2
dot graph target entry end

*p3_15 = 10;
test.c:87:9: warning: use location
   p3[0] = 10;
         ^
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:70:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 3: *p3_15 = 10;
test.c:87:9: warning: use location
   p3[0] = 10;
         ^
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:70:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

dot graph stmt start *p3_15 = 10;
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start *p3_15 = 10;
test.c:87:9: warning: use location
   p3[0] = 10;
         ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

foo3 (p3_15);
test.c:82:2: warning: use location
  foo3(p3);
  ^
dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:70:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: foo3 (p3_15);
test.c:82:2: warning: use location
  foo3(p3);
  ^
dot graph target line desend

dot graph target loc start # .MEM_37 = VDEF <.MEM_36>
p3_15 = malloc (_2);
test.c:70:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph stmt start foo3 (p3_15);
p3_15 = malloc (_2);
dot graph stmt end

dot graph stmt start foo3 (p3_15);
test.c:82:2: warning: use location
  foo3(p3);
  ^
dot graph stmt end

this stmt is child function---foo3-----

 ================== trace ================== 
 <ssa_name 0x7f61ef36d510
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368480 p3>
    def_stmt p3_15 = malloc (_2);
    version 15
    ptr-info 0x7f61ef380420>
trace fucntion name:foo3 
[40;44m =======trace_function_path foo3  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with p3 ========= [0m
[40;36m ======= relate stmt argument:p3 ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
 <ssa_name 0x7f61ef36d510
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368480 p3>
    def_stmt p3_15 = malloc (_2);
    version 15
    ptr-info 0x7f61ef380420>

 ================== Start Use after free Check ================== 
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
test.c:88:3: warning: Use after free error!: free location 
   free(p3);
   ^
_8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
test.c:88:3: warning: Use after free error!: free location 
_33 = p3_15;
test.c:89:10: warning: use location
   return p3;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================

 <function_decl 0x7f61ef352600 foo2
    type <function_type 0x7f61ef34cb28
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34bbb8 value <integer_type 0x7f61ef80d5e8 int>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef3592a0>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 66 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef3643c0>
    result <result_decl 0x7f61ef804348 D.4056 type <pointer_type 0x7f61ef814a80>
        unsigned ignored DI file test.c line 66 col 6 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352600 foo2>>
    arguments <parm_decl 0x7f61ef35e680 z
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        SI file test.c line 66 col 15 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef352600 foo2> arg-type <integer_type 0x7f61ef80d5e8 int>>
    struct-function 0x7f61ef365160>
 <ssa_name 0x7f61ef36d558
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef3683f0 p4>
    def_stmt p4_17 = malloc (_3);
    version 17
    ptr-info 0x7f61ef380438>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo2
dot graph target entry end

_8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:71:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 5: _8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:71:7: warning: use location
dot graph target loc end

dot graph target basicblock start from foo2 basic block 5dot graph target basicblock en1

dot graph stmt start _8 = PHI <p3_15(3), p4_17(4)>
p4_17 = malloc (_3);
dot graph stmt end

dot graph stmt start _8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry foo2
dot graph target entry end

_29 = p4_17;
test.c:96:10: warning: use location
   return p4;
          ^
dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:71:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 4: _29 = p4_17;
test.c:96:10: warning: use location
   return p4;
          ^
dot graph target line desend

dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:71:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 4dot graph target basicblock en1

dot graph stmt start _29 = p4_17;
p4_17 = malloc (_3);
dot graph stmt end

dot graph stmt start _29 = p4_17;
test.c:96:10: warning: use location
   return p4;
          ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

free (p4_17);
test.c:95:3: warning: use location
   free(p4);
   ^
dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:71:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 4: free (p4_17);
test.c:95:3: warning: use location
   free(p4);
   ^
dot graph target line desend

dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:71:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 4dot graph target basicblock en1

dot graph stmt start free (p4_17);
p4_17 = malloc (_3);
dot graph stmt end

dot graph stmt start free (p4_17);
test.c:95:3: warning: use location
   free(p4);
   ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (p4_17);
test.c:95:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry foo2
dot graph target entry end

*p4_17 = 10;
test.c:93:9: warning: use location
   p4[0] = 10;
         ^
dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:71:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 4: *p4_17 = 10;
test.c:93:9: warning: use location
   p4[0] = 10;
         ^
dot graph target line desend

dot graph target loc start # .MEM_38 = VDEF <.MEM_37>
p4_17 = malloc (_3);
test.c:71:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 4dot graph target basicblock en1

dot graph stmt start *p4_17 = 10;
p4_17 = malloc (_3);
dot graph stmt end

dot graph stmt start *p4_17 = 10;
test.c:93:9: warning: use location
   p4[0] = 10;
         ^
dot graph stmt end

 <ssa_name 0x7f61ef36d558
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef3683f0 p4>
    def_stmt p4_17 = malloc (_3);
    version 17
    ptr-info 0x7f61ef380438>

 ================== Start Use after free Check ================== 
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:95:3: warning: Use after free error!: free location 
   free(p4);
   ^
_8 = PHI <p3_15(3), p4_17(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:95:3: warning: Use after free error!: free location 
_29 = p4_17;
test.c:96:10: warning: use location
   return p4;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================

 <function_decl 0x7f61ef352600 foo2
    type <function_type 0x7f61ef34cb28
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34bbb8 value <integer_type 0x7f61ef80d5e8 int>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef3592a0>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 66 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef3643c0>
    result <result_decl 0x7f61ef804348 D.4056 type <pointer_type 0x7f61ef814a80>
        unsigned ignored DI file test.c line 66 col 6 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352600 foo2>>
    arguments <parm_decl 0x7f61ef35e680 z
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        SI file test.c line 66 col 15 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef352600 foo2> arg-type <integer_type 0x7f61ef80d5e8 int>>
    struct-function 0x7f61ef365160>
 <ssa_name 0x7f61ef36d318
    type <pointer_type 0x7f61ef8140a8
        type <void_type 0x7f61ef80df18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef8140a8>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef34c348>>
   
    def_stmt _4 = malloc (200);
    version 4
    ptr-info 0x7f61ef380390>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo2
dot graph target entry end

p99 = _4;
test.c:72:6: warning: use location
  p99 = malloc(200);
      ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: p99 = _4;
test.c:72:6: warning: use location
  p99 = malloc(200);
      ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph stmt start p99 = _4;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start p99 = _4;
test.c:72:6: warning: use location
  p99 = malloc(200);
      ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_5 = p99;
test.c:73:5: warning: use location
  p99[0] = 99;
     ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _5 = p99;
test.c:73:5: warning: use location
  p99[0] = 99;
     ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph stmt start _5 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start _5 = p99;
test.c:73:5: warning: use location
  p99[0] = 99;
     ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

*_5 = 99;
test.c:73:9: warning: use location
  p99[0] = 99;
         ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: *_5 = 99;
test.c:73:9: warning: use location
  p99[0] = 99;
         ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph stmt start *_5 = 99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start *_5 = 99;
test.c:73:9: warning: use location
  p99[0] = 99;
         ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_6 = p99;
test.c:74:5: warning: use location
  p99[1] = 100;
     ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _6 = p99;
test.c:74:5: warning: use location
  p99[1] = 100;
     ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph stmt start _6 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start _6 = p99;
test.c:74:5: warning: use location
  p99[1] = 100;
     ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

MEM[(int *)_6 + 4B] = 100;
test.c:74:9: warning: use location
  p99[1] = 100;
         ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)_6 + 4B] = 100;
test.c:74:9: warning: use location
  p99[1] = 100;
         ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph stmt start MEM[(int *)_6 + 4B] = 100;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start MEM[(int *)_6 + 4B] = 100;
test.c:74:9: warning: use location
  p99[1] = 100;
         ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_7 = p99;
test.c:85:6: warning: use location
   p99[1] = 200;
      ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _7 = p99;
test.c:85:6: warning: use location
   p99[1] = 200;
      ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

dot graph stmt start _7 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start _7 = p99;
test.c:85:6: warning: use location
   p99[1] = 200;
      ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

MEM[(int *)_7 + 4B] = 200;
test.c:85:10: warning: use location
   p99[1] = 200;
          ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: MEM[(int *)_7 + 4B] = 200;
test.c:85:10: warning: use location
   p99[1] = 200;
          ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 3dot graph target basicblock en1

dot graph stmt start MEM[(int *)_7 + 4B] = 200;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start MEM[(int *)_7 + 4B] = 200;
test.c:85:10: warning: use location
   p99[1] = 200;
          ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_1 = p99;
test.c:151:6: warning: use location
   p99[1] = 1000;
      ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = p99;
test.c:151:6: warning: use location
   p99[1] = 1000;
      ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start _1 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start _1 = p99;
test.c:151:6: warning: use location
   p99[1] = 1000;
      ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

MEM[(int *)_1 + 4B] = 1000;
test.c:151:10: warning: use location
   p99[1] = 1000;
          ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)_1 + 4B] = 1000;
test.c:151:10: warning: use location
   p99[1] = 1000;
          ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start MEM[(int *)_1 + 4B] = 1000;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start MEM[(int *)_1 + 4B] = 1000;
test.c:151:10: warning: use location
   p99[1] = 1000;
          ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

_2 = p99;
test.c:152:6: warning: use location
   p99[2] = 200;
      ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _2 = p99;
test.c:152:6: warning: use location
   p99[2] = 200;
      ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start _2 = p99;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start _2 = p99;
test.c:152:6: warning: use location
   p99[2] = 200;
      ^
dot graph stmt end

dot graph entry foo2
dot graph target entry end

MEM[(int *)_2 + 8B] = 200;
test.c:152:10: warning: use location
   p99[2] = 200;
          ^
dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)_2 + 8B] = 200;
test.c:152:10: warning: use location
   p99[2] = 200;
          ^
dot graph target line desend

dot graph target loc start # .MEM_39 = VDEF <.MEM_38>
_4 = malloc (200);
test.c:72:8: warning: use location
  p99 = malloc(200);
        ^
dot graph target loc end

dot graph target basicblock start from foo2 basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from foo basic block 2dot graph target basicblock end

dot graph stmt start MEM[(int *)_2 + 8B] = 200;
_4 = malloc (200);
dot graph stmt end

dot graph stmt start MEM[(int *)_2 + 8B] = 200;
test.c:152:10: warning: use location
   p99[2] = 200;
          ^
dot graph stmt end

 <ssa_name 0x7f61ef36d318
    type <pointer_type 0x7f61ef8140a8
        type <void_type 0x7f61ef80df18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef8140a8>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef34c348>>
   
    def_stmt _4 = malloc (200);
    version 4
    ptr-info 0x7f61ef380390>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:foo2========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======thread job funciton:foo========= [0m
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_40 = VDEF <.MEM_39(D)>
pthread_mutex_lock (&mLock);
test.c:196:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_41 = VDEF <.MEM_40>
pthread_mutex_lock (&mLock);
test.c:197:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_61 = VDEF <.MEM_60>
pthread_mutex_unlock (&mLock);
test.c:225:2: warning: use location
  pthread_mutex_unlock(&mLock);
  ^
[40;42m =======thread job funciton lock count :3========= [0m
[40;42m =======start_check_funciton:foo========= [0m
 <function_decl 0x7f61ef352400 foo
    type <function_type 0x7f61ef34cb28
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34bbb8 value <integer_type 0x7f61ef80d5e8 int>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef3592a0>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 146 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef364480>
    result <result_decl 0x7f61ef804438 D.4070 type <pointer_type 0x7f61ef814a80>
        unsigned ignored DI file test.c line 146 col 6 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352400 foo>>
    arguments <parm_decl 0x7f61ef35e800 z
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        SI file test.c line 146 col 14 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef352400 foo> arg-type <integer_type 0x7f61ef80d5e8 int>>
    struct-function 0x7f61ef3652c0>
 <ssa_name 0x7f61ef374048
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef373090 p2>
    def_stmt p2_5 = malloc (1);
    version 5
    ptr-info 0x7f61ef380540>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo
dot graph target entry end

*p2_5 = 1;
test.c:150:8: warning: use location
  p2[0] = 1;
        ^
dot graph target loc start # .MEM_13 = VDEF <.MEM_12(D)>
p2_5 = malloc (1);
test.c:149:7: warning: use location
  int *p2 = malloc(1);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: *p2_5 = 1;
test.c:150:8: warning: use location
  p2[0] = 1;
        ^
dot graph target line desend

dot graph target loc start # .MEM_13 = VDEF <.MEM_12(D)>
p2_5 = malloc (1);
test.c:149:7: warning: use location
  int *p2 = malloc(1);
       ^
dot graph target loc end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph stmt start *p2_5 = 1;
p2_5 = malloc (1);
dot graph stmt end

dot graph stmt start *p2_5 = 1;
test.c:150:8: warning: use location
  p2[0] = 1;
        ^
dot graph stmt end

 
 LOCAL VARIBALE  
# .MEM_14 = VDEF <.MEM_13>
*p2_5 = 1;
test.c:150:8: warning: use location
 
 LOCAL VARIBALE  
 <ssa_name 0x7f61ef374048
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef373090 p2>
    def_stmt p2_5 = malloc (1);
    version 5
    ptr-info 0x7f61ef380540>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f61ef352400 foo
    type <function_type 0x7f61ef34cb28
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34bbb8 value <integer_type 0x7f61ef80d5e8 int>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef3592a0>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 146 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef364480>
    result <result_decl 0x7f61ef804438 D.4070 type <pointer_type 0x7f61ef814a80>
        unsigned ignored DI file test.c line 146 col 6 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352400 foo>>
    arguments <parm_decl 0x7f61ef35e800 z
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        SI file test.c line 146 col 14 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef352400 foo> arg-type <integer_type 0x7f61ef80d5e8 int>>
    struct-function 0x7f61ef3652c0>
 <ssa_name 0x7f61ef3740d8
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
   
    def_stmt _11 = foo2 (z_9(D));
    version 11
    ptr-info 0x7f61ef380558>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:foo2 
[40;44m =======trace_function_path foo2  function_call count: 4 level :-100========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_34>
return _8;
lto1: warning: use location
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :-100========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---foo2-----
this other function ------foo2-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo
dot graph target entry end

return _11;
test.c:167:9: warning: use location
  return foo2(z);
         ^
dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_11 = foo2 (z_9(D));
test.c:167:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: return _11;
test.c:167:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_17 = VDEF <.MEM_16>
_11 = foo2 (z_9(D));
test.c:167:9: warning: use location
dot graph target loc end

dot graph target basicblock start from foo basic block 2dot graph target basicblock en1

dot graph stmt start return _11;
_11 = foo2 (z_9(D));
dot graph stmt end

dot graph stmt start return _11;
test.c:167:9: warning: use location
dot graph stmt end

 <ssa_name 0x7f61ef3740d8
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
   
    def_stmt _11 = foo2 (z_9(D));
    version 11
    ptr-info 0x7f61ef380558>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:foo========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;33m =======POP node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre_check_funciton:child========= [0m
[40;42m =======thread job funciton:child========= [0m
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_40 = VDEF <.MEM_39(D)>
pthread_mutex_lock (&mLock);
test.c:196:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_41 = VDEF <.MEM_40>
pthread_mutex_lock (&mLock);
test.c:197:2: warning: use location
  pthread_mutex_lock(&mLock);
  ^
[40;44m ======= print pthread lock stmt 666 ========  [0m
# .MEM_61 = VDEF <.MEM_60>
pthread_mutex_unlock (&mLock);
test.c:225:2: warning: use location
  pthread_mutex_unlock(&mLock);
  ^
[40;42m =======thread job funciton lock count :3========= [0m
[40;42m =======start_check_funciton:child========= [0m
 <function_decl 0x7f61ef34dd00 child
    type <function_type 0x7f61ef34c888
        type <pointer_type 0x7f61ef8140a8 type <void_type 0x7f61ef80df18 void>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef34c348>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34ba00 value <pointer_type 0x7f61ef8140a8>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef34c5e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 169 col 7 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef364c60>
    result <result_decl 0x7f61ef804780 D.4098 type <pointer_type 0x7f61ef8140a8>
        unsigned ignored DI file test.c line 169 col 7 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef34dd00 child>>
    arguments <parm_decl 0x7f61ef35ed80 data type <pointer_type 0x7f61ef8140a8>
        addressable unsigned DI file test.c line 169 col 19 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef34dd00 child> arg-type <pointer_type 0x7f61ef8140a8>>
    struct-function 0x7f61ef365790>
 <ssa_name 0x7f61ef37da20
    type <pointer_type 0x7f61ef3597e0
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        public unsigned DI size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f61ef37f480 ppData>
    def_stmt ppData_18 = malloc (10);
    version 18
    ptr-info 0x7f61ef3807b0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
 <ssa_name 0x7f61ef37da20
    type <pointer_type 0x7f61ef3597e0
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        public unsigned DI size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f61ef37f480 ppData>
    def_stmt ppData_18 = malloc (10);
    version 18
    ptr-info 0x7f61ef3807b0>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:203:8: warning: use location
  int **ppData = malloc(10);
        ^

======================================================================
 <function_decl 0x7f61ef34dd00 child
    type <function_type 0x7f61ef34c888
        type <pointer_type 0x7f61ef8140a8 type <void_type 0x7f61ef80df18 void>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef34c348>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34ba00 value <pointer_type 0x7f61ef8140a8>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef34c5e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 169 col 7 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef364c60>
    result <result_decl 0x7f61ef804780 D.4098 type <pointer_type 0x7f61ef8140a8>
        unsigned ignored DI file test.c line 169 col 7 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef34dd00 child>>
    arguments <parm_decl 0x7f61ef35ed80 data type <pointer_type 0x7f61ef8140a8>
        addressable unsigned DI file test.c line 169 col 19 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef34dd00 child> arg-type <pointer_type 0x7f61ef8140a8>>
    struct-function 0x7f61ef365790>
 <ssa_name 0x7f61ef37da68
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef37f360 pData2>
    def_stmt pData2_21 = malloc (10);
    version 21
    ptr-info 0x7f61ef3807c8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child
dot graph target entry end

child5 (pData2_21);
test.c:219:2: warning: use location
  child5(pData2);
  ^
dot graph target loc start # .MEM_46 = VDEF <.MEM_45>
pData2_21 = malloc (10);
test.c:205:7: warning: use location
  int *pData2 = malloc(10);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: child5 (pData2_21);
test.c:219:2: warning: use location
  child5(pData2);
  ^
dot graph target line desend

dot graph target loc start # .MEM_46 = VDEF <.MEM_45>
pData2_21 = malloc (10);
test.c:205:7: warning: use location
  int *pData2 = malloc(10);
       ^
dot graph target loc end

dot graph target basicblock start from child basic block 2dot graph target basicblock en1

dot graph stmt start child5 (pData2_21);
pData2_21 = malloc (10);
dot graph stmt end

dot graph stmt start child5 (pData2_21);
test.c:219:2: warning: use location
  child5(pData2);
  ^
dot graph stmt end

this stmt is child function---child5-----

 ================== trace ================== 
 <ssa_name 0x7f61ef37da68
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef37f360 pData2>
    def_stmt pData2_21 = malloc (10);
    version 21
    ptr-info 0x7f61ef3807c8>
trace fucntion name:child5 
[40;44m =======trace_function_path child5  function_call count: 4 level :0========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
test.c:324:3: warning: use location
   free(pData);
   ^
[40;36m ======= node_fun:child5========= [0m
[40;36m ======= find relate stmt with pData2 ========= [0m
[40;36m ======= relate stmt argument:pData2 ========= [0m
[40;36m ======= relate node_fun argument222:pData2========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 1375676987
from child5 basic block 2dot graph end relate end

In function â€˜child5â€™:
test.c:307:8: warning: use location
  pData = pData + 1;
        ^
dot graph relate stmt start ID : 2132487515 stmt(LHS) :pData_6 = data_5(D) + 4;
test.c:307:8: warning: use location
pData_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate formID : 1375676987
from child5 basic block 4dot graph end relate end

dot graph relate stmt start ID : 1891526088 stmt(call) :free (pData_6);
test.c:324:3: warning: use location
   free(pData);
   ^
pData_6
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m

 ================== trace ================== 
 <ssa_name 0x7f61ef37da68
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef37f360 pData2>
    def_stmt pData2_21 = malloc (10);
    version 21
    ptr-info 0x7f61ef3807c8>
dot graph start relate for1ID : 1375676987
from child5 basic block 4dot graph end relate end

subgraph cluster_1107806991 dot graph subgraph  start ID : 1891526088 stmt(relate) ï¼Œ Tree ID : 1375676987 : free (pData_6);
In function â€˜mainâ€™:
test.c:324:3: warning: use location
dot graph subgrapend


 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

 <function_decl 0x7f61ef34dd00 child
    type <function_type 0x7f61ef34c888
        type <pointer_type 0x7f61ef8140a8 type <void_type 0x7f61ef80df18 void>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef34c348>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34ba00 value <pointer_type 0x7f61ef8140a8>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef34c5e8>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 169 col 7 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef364c60>
    result <result_decl 0x7f61ef804780 D.4098 type <pointer_type 0x7f61ef8140a8>
        unsigned ignored DI file test.c line 169 col 7 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef34dd00 child>>
    arguments <parm_decl 0x7f61ef35ed80 data type <pointer_type 0x7f61ef8140a8>
        addressable unsigned DI file test.c line 169 col 19 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef34dd00 child> arg-type <pointer_type 0x7f61ef8140a8>>
    struct-function 0x7f61ef365790>
 <ssa_name 0x7f61ef37d9d8
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef37f510 a99>
    def_stmt a99_16 = foo (20);
    version 16
    ptr-info 0x7f61ef380798>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 2 level :-100========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_17>
return _11;
test.c:167:9: warning: use location
  return foo2(z);
         ^
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this fucntion return value is heap-object 
foo this fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :-100========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_34>
return _8;
lto1: warning: use location
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :-100========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
this is fucntion return value is heap-object 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---foo-----
this other function ------foo-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child
dot graph target entry end

_38 = __printf_chk (1, "asdda%d\n", a99_16);
dot graph target loc start # .MEM_42 = VDEF <.MEM_41>
a99_16 = foo (20);
test.c:199:7: warning: use location
  int *a99 = foo(20);
       ^
dot graph target loc en1

dot graph target line desc form basic block 2: _38 = __printf_chk (1, "asdda%d\n", a99_16);
dot graph target line desend

dot graph target loc start # .MEM_42 = VDEF <.MEM_41>
a99_16 = foo (20);
test.c:199:7: warning: use location
dot graph target loc end

dot graph target basicblock start from child basic block 2dot graph target basicblock en1

dot graph stmt start _38 = __printf_chk (1, "asdda%d\n", a99_16);
a99_16 = foo (20);
dot graph stmt end

dot graph stmt start _38 = __printf_chk (1, "asdda%d\n", a99_16);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f61ef37d9d8
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef37f510 a99>
    def_stmt a99_16 = foo (20);
    version 16
    ptr-info 0x7f61ef380798>
trace fucntion name:__printf_chk 

 ================== trace ================== 
 <ssa_name 0x7f61ef37d9d8
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef37f510 a99>
    def_stmt a99_16 = foo (20);
    version 16
    ptr-info 0x7f61ef380798>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:child========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:child7========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path child7  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;33m =======POP node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;33m =======POP node_fun stack:pthread_self========= [0m
[40;42m =======pre_check_funciton:child7========= [0m
[40;42m =======start_check_funciton:child7========= [0m
 <function_decl 0x7f61ef352000 child7
    type <function_type 0x7f61ef34c9d8
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34baf0 value <pointer_type 0x7f61ef8140a8>
            chain <tree_list 0x7f61ef34ba00 value <pointer_type 0x7f61ef8140a8>
                chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>>
        pointer_to_this <pointer_type 0x7f61ef359000>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 374 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef3649c0>
    result <result_decl 0x7f61ef804618 D.4086 type <pointer_type 0x7f61ef814a80>
        unsigned ignored DI file test.c line 374 col 6 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352000 child7>>
    arguments <parm_decl 0x7f61ef35eb00 data
        type <pointer_type 0x7f61ef8140a8 type <void_type 0x7f61ef80df18 void>
            public unsigned DI size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef34c348>>
        unsigned DI file test.c line 374 col 19 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352000 child7> arg-type <pointer_type 0x7f61ef8140a8>
        chain <parm_decl 0x7f61ef35eb80 test type <pointer_type 0x7f61ef8140a8>
            unsigned DI file test.c line 374 col 31 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
            align 64 context <function_decl 0x7f61ef352000 child7> arg-type <pointer_type 0x7f61ef8140a8>>>
    struct-function 0x7f61ef365580>
 <ssa_name 0x7f61ef374ee8
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
   
    def_stmt _15 = malloc (10);
    version 15
    ptr-info 0x7f61ef380660>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child7
dot graph target entry end

_4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph target loc start # .MEM_24 = VDEF <.MEM_23>
_15 = malloc (10);
test.c:391:10: warning: use location
   return malloc(10);
          ^
dot graph target loc en1

dot graph target line desc form basic block 5: _4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_24 = VDEF <.MEM_23>
_15 = malloc (10);
test.c:391:10: warning: use location
dot graph target loc end

dot graph target basicblock start from child7 basic block 5dot graph target basicblock en1

dot graph stmt start _4 = PHI <_15(3), _12(4)>
_15 = malloc (10);
dot graph stmt end

dot graph stmt start _4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
 <ssa_name 0x7f61ef374ee8
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
   
    def_stmt _15 = malloc (10);
    version 15
    ptr-info 0x7f61ef380660>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f61ef352000 child7
    type <function_type 0x7f61ef34c9d8
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34baf0 value <pointer_type 0x7f61ef8140a8>
            chain <tree_list 0x7f61ef34ba00 value <pointer_type 0x7f61ef8140a8>
                chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>>
        pointer_to_this <pointer_type 0x7f61ef359000>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 374 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef3649c0>
    result <result_decl 0x7f61ef804618 D.4086 type <pointer_type 0x7f61ef814a80>
        unsigned ignored DI file test.c line 374 col 6 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352000 child7>>
    arguments <parm_decl 0x7f61ef35eb00 data
        type <pointer_type 0x7f61ef8140a8 type <void_type 0x7f61ef80df18 void>
            public unsigned DI size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef34c348>>
        unsigned DI file test.c line 374 col 19 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352000 child7> arg-type <pointer_type 0x7f61ef8140a8>
        chain <parm_decl 0x7f61ef35eb80 test type <pointer_type 0x7f61ef8140a8>
            unsigned DI file test.c line 374 col 31 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
            align 64 context <function_decl 0x7f61ef352000 child7> arg-type <pointer_type 0x7f61ef8140a8>>>
    struct-function 0x7f61ef365580>
 <ssa_name 0x7f61ef374ea0
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
   
    def_stmt _12 = malloc (30);
    version 12
    ptr-info 0x7f61ef380648>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry child7
dot graph target entry end

_4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph target loc start # .MEM_22 = VDEF <.MEM_21>
_12 = malloc (30);
test.c:399:10: warning: use location
   return malloc(30);
          ^
dot graph target loc en1

dot graph target line desc form basic block 5: _4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_22 = VDEF <.MEM_21>
_12 = malloc (30);
test.c:399:10: warning: use location
dot graph target loc end

dot graph target basicblock start from child7 basic block 5dot graph target basicblock en1

dot graph stmt start _4 = PHI <_15(3), _12(4)>
_12 = malloc (30);
dot graph stmt end

dot graph stmt start _4 = PHI <_15(3), _12(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
 <ssa_name 0x7f61ef374ea0
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
   
    def_stmt _12 = malloc (30);
    version 12
    ptr-info 0x7f61ef380648>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:child7========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;44m =======print_function_path child4  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre_check_funciton:child4========= [0m
[40;42m =======start_check_funciton:child4========= [0m
[40;33m =======POP node_fun stack:child4========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo5========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path foo5  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre_check_funciton:foo5========= [0m
[40;42m =======start_check_funciton:foo5========= [0m
[40;33m =======POP node_fun stack:foo5========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:pthread_join========= [0m
[40;33m =======POP node_fun stack:pthread_join========= [0m
[40;42m =======pre add _ fucntion:foo6========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path foo6  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:foo6========= [0m
[40;42m =======start_check_funciton:foo6========= [0m
 <function_decl 0x7f61ef352500 foo6
    type <function_type 0x7f61ef34cb28
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34bbb8 value <integer_type 0x7f61ef80d5e8 int>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef3592a0>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 103 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef364420>
    result <result_decl 0x7f61ef8043c0 D.4063 type <pointer_type 0x7f61ef814a80>
        unsigned ignored DI file test.c line 103 col 6 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352500 foo6>>
    arguments <parm_decl 0x7f61ef35e780 z
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        SI file test.c line 103 col 15 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef352500 foo6> arg-type <integer_type 0x7f61ef80d5e8 int>>
    struct-function 0x7f61ef365210>
 <ssa_name 0x7f61ef36dd38
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368d80 a2>
    def_stmt a2_8 = malloc (_1);
    version 8
    ptr-info 0x7f61ef380498>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
 <ssa_name 0x7f61ef36dd38
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368d80 a2>
    def_stmt a2_8 = malloc (_1);
    version 8
    ptr-info 0x7f61ef380498>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:106:7: warning: use location
  int *a2 = malloc(z);
       ^

======================================================================
 <function_decl 0x7f61ef352500 foo6
    type <function_type 0x7f61ef34cb28
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34bbb8 value <integer_type 0x7f61ef80d5e8 int>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef3592a0>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 103 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef364420>
    result <result_decl 0x7f61ef8043c0 D.4063 type <pointer_type 0x7f61ef814a80>
        unsigned ignored DI file test.c line 103 col 6 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352500 foo6>>
    arguments <parm_decl 0x7f61ef35e780 z
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        SI file test.c line 103 col 15 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef352500 foo6> arg-type <integer_type 0x7f61ef80d5e8 int>>
    struct-function 0x7f61ef365210>
 <ssa_name 0x7f61ef36dd80
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368cf0 p3>
    def_stmt p3_10 = malloc (_2);
    version 10
    ptr-info 0x7f61ef3804b0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo6
dot graph target entry end

_4 = PHI <p3_10(3), p4_12(4)>
lto1: warning: use location
dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
p3_10 = malloc (_2);
test.c:107:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 5: _4 = PHI <p3_10(3), p4_12(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
p3_10 = malloc (_2);
test.c:107:7: warning: use location
dot graph target loc end

dot graph target basicblock start from foo6 basic block 5dot graph target basicblock en1

dot graph stmt start _4 = PHI <p3_10(3), p4_12(4)>
p3_10 = malloc (_2);
dot graph stmt end

dot graph stmt start _4 = PHI <p3_10(3), p4_12(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry foo6
dot graph target entry end

_15 = p3_10;
test.c:115:10: warning: use location
   return p3;
          ^
dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
p3_10 = malloc (_2);
test.c:107:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 3: _15 = p3_10;
test.c:115:10: warning: use location
   return p3;
          ^
dot graph target line desend

dot graph target loc start # .MEM_18 = VDEF <.MEM_17>
p3_10 = malloc (_2);
test.c:107:7: warning: use location
  int *p3 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo6 basic block 3dot graph target basicblock en1

dot graph stmt start _15 = p3_10;
p3_10 = malloc (_2);
dot graph stmt end

dot graph stmt start _15 = p3_10;
test.c:115:10: warning: use location
   return p3;
          ^
dot graph stmt end

 <ssa_name 0x7f61ef36dd80
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368cf0 p3>
    def_stmt p3_10 = malloc (_2);
    version 10
    ptr-info 0x7f61ef3804b0>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f61ef352500 foo6
    type <function_type 0x7f61ef34cb28
        type <pointer_type 0x7f61ef814a80 type <integer_type 0x7f61ef80d5e8 int>
            public unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef3597e0>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality
        arg-types <tree_list 0x7f61ef34bbb8 value <integer_type 0x7f61ef80d5e8 int>
            chain <tree_list 0x7f61ef80cac8 value <void_type 0x7f61ef80df18 void>>>
        pointer_to_this <pointer_type 0x7f61ef3592a0>>
    addressable nothrow static function-specific-target function-specific-opt QI file test.c line 103 col 6 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> attributes <tree_list 0x7f61ef34b9d8> initial <block 0x7f61ef364420>
    result <result_decl 0x7f61ef8043c0 D.4063 type <pointer_type 0x7f61ef814a80>
        unsigned ignored DI file test.c line 103 col 6 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef352500 foo6>>
    arguments <parm_decl 0x7f61ef35e780 z
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        SI file test.c line 103 col 15 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef352500 foo6> arg-type <integer_type 0x7f61ef80d5e8 int>>
    struct-function 0x7f61ef365210>
 <ssa_name 0x7f61ef36ddc8
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368c60 p4>
    def_stmt p4_12 = malloc (_3);
    version 12
    ptr-info 0x7f61ef3804c8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry foo6
dot graph target entry end

_4 = PHI <p3_10(3), p4_12(4)>
lto1: warning: use location
dot graph target loc start # .MEM_19 = VDEF <.MEM_18>
p4_12 = malloc (_3);
test.c:108:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 5: _4 = PHI <p3_10(3), p4_12(4)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_19 = VDEF <.MEM_18>
p4_12 = malloc (_3);
test.c:108:7: warning: use location
dot graph target loc end

dot graph target basicblock start from foo6 basic block 5dot graph target basicblock en1

dot graph stmt start _4 = PHI <p3_10(3), p4_12(4)>
p4_12 = malloc (_3);
dot graph stmt end

dot graph stmt start _4 = PHI <p3_10(3), p4_12(4)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry foo6
dot graph target entry end

_14 = p4_12;
test.c:120:10: warning: use location
   return p4;
          ^
dot graph target loc start # .MEM_19 = VDEF <.MEM_18>
p4_12 = malloc (_3);
test.c:108:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc en1

dot graph target line desc form basic block 4: _14 = p4_12;
test.c:120:10: warning: use location
   return p4;
          ^
dot graph target line desend

dot graph target loc start # .MEM_19 = VDEF <.MEM_18>
p4_12 = malloc (_3);
test.c:108:7: warning: use location
  int *p4 = malloc(z);
       ^
dot graph target loc end

dot graph target basicblock start from foo6 basic block 4dot graph target basicblock en1

dot graph stmt start _14 = p4_12;
p4_12 = malloc (_3);
dot graph stmt end

dot graph stmt start _14 = p4_12;
test.c:120:10: warning: use location
   return p4;
          ^
dot graph stmt end

 <ssa_name 0x7f61ef36ddc8
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef368c60 p4>
    def_stmt p4_12 = malloc (_3);
    version 12
    ptr-info 0x7f61ef3804c8>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:foo6========= [0m
[40;42m =======pre add _ fucntion:pthread_create========= [0m
[40;33m =======POP node_fun stack:pthread_create========= [0m
[40;42m =======pre add _ fucntion:pthread_attr_setdetachstate========= [0m
[40;33m =======POP node_fun stack:pthread_attr_setdetachstate========= [0m
[40;42m =======pre add _ fucntion:pthread_attr_init========= [0m
[40;33m =======POP node_fun stack:pthread_attr_init========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m
 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <ssa_name 0x7f61ef38b0d8
    type <pointer_type 0x7f61ef3583f0
        type <record_type 0x7f61ef358348 adresse TI
            size <integer_cst 0x7f61ef7f9c30 constant 128>
            unit size <integer_cst 0x7f61ef7f9c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f61ef358348 fields <field_decl 0x7f61ef357130 name> context <translation_unit_decl 0x7f61ef804168 test.c>
            pointer_to_this <pointer_type 0x7f61ef3583f0> chain <type_decl 0x7f61ef3571c8 D.4044>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f61ef3856c0 a>
    def_stmt a_56 = malloc (32);
    version 56
    ptr-info 0x7f61ef3809a8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_17 = a_56 + _16;
test.c:494:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _17 = a_56 + _16;
test.c:494:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _17 = a_56 + _16;
a_56 = malloc (32);
dot graph stmt end

dot graph stmt start _17 = a_56 + _16;
test.c:494:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_18 = _17->name;
test.c:494:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _18 = _17->name;
test.c:494:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _18 = _17->name;
a_56 = malloc (32);
dot graph stmt end

dot graph stmt start _18 = _17->name;
test.c:494:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_100 = __printf_chk (1, "%s, %d\n", _18, _14);
dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _100 = __printf_chk (1, "%s, %d\n", _18, _14);
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _100 = __printf_chk (1, "%s, %d\n", _18, _14);
a_56 = malloc (32);
dot graph stmt end

dot graph stmt start _100 = __printf_chk (1, "%s, %d\n", _18, _14);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f61ef38b0d8
    type <pointer_type 0x7f61ef3583f0
        type <record_type 0x7f61ef358348 adresse TI
            size <integer_cst 0x7f61ef7f9c30 constant 128>
            unit size <integer_cst 0x7f61ef7f9c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f61ef358348 fields <field_decl 0x7f61ef357130 name> context <translation_unit_decl 0x7f61ef804168 test.c>
            pointer_to_this <pointer_type 0x7f61ef3583f0> chain <type_decl 0x7f61ef3571c8 D.4044>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f61ef3856c0 a>
    def_stmt a_56 = malloc (32);
    version 56
    ptr-info 0x7f61ef3809a8>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_13 = a_56 + _12;
test.c:494:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _13 = a_56 + _12;
test.c:494:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _13 = a_56 + _12;
a_56 = malloc (32);
dot graph stmt end

dot graph stmt start _13 = a_56 + _12;
test.c:494:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_14 = _13->nummer;
test.c:494:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 6: _14 = _13->nummer;
test.c:494:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _14 = _13->nummer;
a_56 = malloc (32);
dot graph stmt end

dot graph stmt start _14 = _13->nummer;
test.c:494:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free (a_56);
test.c:491:2: warning: use location
  free(a);
  ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 5: free (a_56);
test.c:491:2: warning: use location
  free(a);
  ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 5dot graph target basicblock en1

dot graph stmt start free (a_56);
a_56 = malloc (32);
dot graph stmt end

dot graph stmt start free (a_56);
test.c:491:2: warning: use location
  free(a);
  ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (a_56);
test.c:491:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

_9 = a_56 + _8;
test.c:489:4: warning: use location
   a[i].nummer = 123;
    ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _9 = a_56 + _8;
test.c:489:4: warning: use location
   a[i].nummer = 123;
    ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _9 = a_56 + _8;
a_56 = malloc (32);
dot graph stmt end

dot graph stmt start _9 = a_56 + _8;
test.c:489:4: warning: use location
   a[i].nummer = 123;
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_9->nummer = 123;
test.c:489:15: warning: use location
   a[i].nummer = 123;
               ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _9->nummer = 123;
test.c:489:15: warning: use location
   a[i].nummer = 123;
               ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _9->nummer = 123;
a_56 = malloc (32);
dot graph stmt end

dot graph stmt start _9->nummer = 123;
test.c:489:15: warning: use location
   a[i].nummer = 123;
               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_6 = a_56 + _5;
test.c:488:4: warning: use location
   a[i].name = "Testname";
    ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _6 = a_56 + _5;
test.c:488:4: warning: use location
   a[i].name = "Testname";
    ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _6 = a_56 + _5;
a_56 = malloc (32);
dot graph stmt end

dot graph stmt start _6 = a_56 + _5;
test.c:488:4: warning: use location
   a[i].name = "Testname";
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_6->name = "Testname";
test.c:488:13: warning: use location
   a[i].name = "Testname";
             ^
dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc en1

dot graph target line desc form basic block 3: _6->name = "Testname";
test.c:488:13: warning: use location
   a[i].name = "Testname";
             ^
dot graph target line desend

dot graph target loc start # .MEM_127 = VDEF <.MEM_126(D)>
a_56 = malloc (32);
test.c:484:18: warning: use location
  struct adresse *a = (struct adresse *)malloc(sizeof(struct adresse) * size);
                  ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _6->name = "Testname";
a_56 = malloc (32);
dot graph stmt end

dot graph stmt start _6->name = "Testname";
test.c:488:13: warning: use location
   a[i].name = "Testname";
             ^
dot graph stmt end

 <ssa_name 0x7f61ef38b0d8
    type <pointer_type 0x7f61ef3583f0
        type <record_type 0x7f61ef358348 adresse TI
            size <integer_cst 0x7f61ef7f9c30 constant 128>
            unit size <integer_cst 0x7f61ef7f9c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f61ef358348 fields <field_decl 0x7f61ef357130 name> context <translation_unit_decl 0x7f61ef804168 test.c>
            pointer_to_this <pointer_type 0x7f61ef3583f0> chain <type_decl 0x7f61ef3571c8 D.4044>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f61ef3856c0 a>
    def_stmt a_56 = malloc (32);
    version 56
    ptr-info 0x7f61ef3809a8>

 ================== Start Use after free Check ================== 
# .MEM_128 = VDEF <.MEM_118>
free (a_56);
test.c:491:2: warning: Use after free error!: free location 
  free(a);
  ^
_17 = a_56 + _16;
test.c:494:23: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_128 = VDEF <.MEM_118>
free (a_56);
test.c:491:2: warning: Use after free error!: free location 
  free(a);
  ^
# VUSE <.MEM_119>
_18 = _17->name;
test.c:494:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_128 = VDEF <.MEM_118>
free (a_56);
test.c:491:2: warning: Use after free error!: free location 
  free(a);
  ^
# .MEM_169 = VDEF <.MEM_119>
_100 = __printf_chk (1, "%s, %d\n", _18, _14);

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_128 = VDEF <.MEM_118>
free (a_56);
test.c:491:2: warning: Use after free error!: free location 
_13 = a_56 + _12;
test.c:494:34: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
                                  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_128 = VDEF <.MEM_118>
free (a_56);
test.c:491:2: warning: Use after free error!: free location 
  free(a);
  ^
# VUSE <.MEM_119>
_14 = _13->nummer;
test.c:494:3: warning: use location
   printf("%s, %d\n", a[i].name, a[i].nummer);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <addr_expr 0x7f61ef376ea0
    type <pointer_type 0x7f61ef3553f0
        type <integer_type 0x7f61ef34c3f0 pthread_t unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 canonical type 0x7f61ef80d738 precision 64 min <integer_cst 0x7f61ef7f9eb8 0> max <integer_cst 0x7f61ef7fb500 18446744073709551615> context <translation_unit_decl 0x7f61ef804168 test.c>
            pointer_to_this <pointer_type 0x7f61ef3553f0>>
        unsigned DI size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    arg 0 <var_decl 0x7f61ef3853f0 t type <integer_type 0x7f61ef34c3f0 pthread_t>
        addressable unsigned DI file test.c line 525 col 12 size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 context <function_decl 0x7f61ef34db00 main>
        chain <var_decl 0x7f61ef385360 t2 type <array_type 0x7f61ef3580a8>
            addressable BLK file test.c line 525 col 15
            size <integer_cst 0x7f61ef8150a8 constant 192>
            unit size <integer_cst 0x7f61ef815078 constant 24>
            align 128 context <function_decl 0x7f61ef34db00 main> chain <var_decl 0x7f61ef3852d0 q>>>
    test.c:526:2 start: test.c:526:2 finish: test.c:526:2>

dot graph START

======================================================================

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:526:2: warning: use location
  pthread_create(&t, &attr2, child2, input2);
  ^

======================================================================
 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <ssa_name 0x7f61ef383ab0
    type <pointer_type 0x7f61ef3553f0
        type <integer_type 0x7f61ef34c3f0 pthread_t unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 canonical type 0x7f61ef80d738 precision 64 min <integer_cst 0x7f61ef7f9eb8 0> max <integer_cst 0x7f61ef7fb500 18446744073709551615> context <translation_unit_decl 0x7f61ef804168 test.c>
            pointer_to_this <pointer_type 0x7f61ef3553f0>>
        unsigned DI size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _23 = &t2[i_41];
    version 23
    ptr-info 0x7f61ef3808d0>

dot graph START

======================================================================

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start is Pthread Job Collect  

======================================================================
dot graph entry main
dot graph target entry end

_24 = t2[i_41];
test.c:535:3: warning: use location
   printf("%ld\n", t2[i]);
   ^
dot graph target loc start # .MEM_167 = VDEF <.MEM_120>
err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc en1

dot graph target line desc form basic block 9: _24 = t2[i_41];
test.c:535:3: warning: use location
   printf("%ld\n", t2[i]);
   ^
dot graph target line desend

dot graph target loc start # .MEM_167 = VDEF <.MEM_120>
err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 9dot graph target basicblock en1

dot graph stmt start _24 = t2[i_41];
err_108 = pthread_create (_23, &attr2, child, 0B);
dot graph stmt end

dot graph stmt start _24 = t2[i_41];
test.c:535:3: warning: use location
   printf("%ld\n", t2[i]);
   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_114 = __printf_chk (1, "%ld\n", _24);
dot graph target loc start # .MEM_167 = VDEF <.MEM_120>
err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc en1

dot graph target line desc form basic block 9: _114 = __printf_chk (1, "%ld\n", _24);
dot graph target line desend

dot graph target loc start # .MEM_167 = VDEF <.MEM_120>
err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 9dot graph target basicblock en1

dot graph stmt start _114 = __printf_chk (1, "%ld\n", _24);
err_108 = pthread_create (_23, &attr2, child, 0B);
dot graph stmt end

dot graph stmt start _114 = __printf_chk (1, "%ld\n", _24);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f61ef383ab0
    type <pointer_type 0x7f61ef3553f0
        type <integer_type 0x7f61ef34c3f0 pthread_t unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 canonical type 0x7f61ef80d738 precision 64 min <integer_cst 0x7f61ef7f9eb8 0> max <integer_cst 0x7f61ef7fb500 18446744073709551615> context <translation_unit_decl 0x7f61ef804168 test.c>
            pointer_to_this <pointer_type 0x7f61ef3553f0>>
        unsigned DI size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _23 = &t2[i_41];
    version 23
    ptr-info 0x7f61ef3808d0>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_30 = t2[i_44];
test.c:568:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph target loc start # .MEM_167 = VDEF <.MEM_120>
err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc en1

dot graph target line desc form basic block 18: _30 = t2[i_44];
test.c:568:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph target line desend

dot graph target loc start # .MEM_167 = VDEF <.MEM_120>
err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start _30 = t2[i_44];
err_108 = pthread_create (_23, &attr2, child, 0B);
dot graph stmt end

dot graph stmt start _30 = t2[i_44];
test.c:568:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

pthread_join (_30, 0B);
test.c:568:3: warning: use location
dot graph target loc start # .MEM_167 = VDEF <.MEM_120>
err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc en1

dot graph target line desc form basic block 18: pthread_join (_30, 0B);
test.c:568:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph target line desend

dot graph target loc start # .MEM_167 = VDEF <.MEM_120>
err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 18dot graph target basicblock en1

dot graph stmt start pthread_join (_30, 0B);
err_108 = pthread_create (_23, &attr2, child, 0B);
dot graph stmt end

dot graph stmt start pthread_join (_30, 0B);
test.c:568:3: warning: use location
   pthread_join(t2[i], NULL);
   ^
dot graph stmt end

this stmt is child function---pthread_join-----
[40;32m    FIND PTHREAD_JOIN [0m
dot graph entry main
dot graph target entry end

err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
   int err = pthread_create(&t2[i], &attr2, child, NULL);
       ^
dot graph target loc start # .MEM_167 = VDEF <.MEM_120>
err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 9: err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_167 = VDEF <.MEM_120>
err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 9dot graph target basicblock en1

dot graph stmt start err_108 = pthread_create (_23, &attr2, child, 0B);
err_108 = pthread_create (_23, &attr2, child, 0B);
dot graph stmt end

dot graph stmt start err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
dot graph stmt end

this stmt is child function---pthread_create-----

 ================== find ================== 
err_108 = pthread_create (_23, &attr2, child, 0B);
test.c:533:7: warning: use location
[40;32m    FIND PTHREAD_CREATED STMT  [0m

 ================== pre_pthread_detched ================== 
[40;44m =======trace_function_path child  function_call count: 10 level :-1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :-1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :-1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :-1========  [0m
[40;31m  find pthread_detched stmt  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
pthread_detach (_1);
test.c:304:2: warning: use location
  pthread_detach(pthread_self());
  ^
dot graph start relate form ID : 2063465747
from child5 basic block 2dot graph end relate end

dot graph relate stmt start ID : 568076216 stmt(pthread_detched)) :pthread_detach (_1);
test.c:304:2: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :-1========  [0m
[40;31m  find pthread_detched stmt  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
pthread_detach (_1);
test.c:276:2: warning: use location
  pthread_detach(pthread_self());
  ^
dot graph start relate form ID : 1867993218
from child3 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1612927354 stmt(pthread_detched)) :pthread_detach (_1);
test.c:276:2: warning: use location
dot graph relate end

[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :-1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :-1========  [0m
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this fucntion return value is heap-object 
foo this fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :-1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :-1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m

 ================== pre_pthread_detched end ================== 
[40;44m =======trace_function_path child  function_call count: 10 level :0========  [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
test.c:221:2: warning: use location
  free(pData);
  ^
# .MEM_58 = VDEF <.MEM_57>
free (_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_10);
test.c:222:2: warning: use location
  free(data);
  ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :1========  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
test.c:444:2: warning: use location
  free(b);
  ^
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:445:2: warning: use location
  free(b);
  ^
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :2========  [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
test.c:460:2: warning: use location
  free(k);
  ^
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:461:2: warning: use location
  free(k);
  ^
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:462:2: warning: use location
  free(k);
  ^
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:463:2: warning: use location
  free(k);
  ^
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:464:2: warning: use location
  free(k);
  ^
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:465:2: warning: use location
  free(k);
  ^
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
test.c:467:2: warning: use location
  free(w);
  ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :1========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
test.c:324:3: warning: use location
   free(pData);
   ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :1========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :1========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :1========  [0m
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this fucntion return value is heap-object 
foo this fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :2========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
[40;31m  find free stmt free same pointer [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
test.c:88:3: warning: use location
   free(p3);
   ^
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;31m  find free stmt free same pointer [0m
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:95:3: warning: use location
   free(p4);
   ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :3========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;32m    FIND PTHREAD_CREATED TYPE is CREATE_DETACHED  [0m

 ================== find ================== 
 <ssa_name 0x7f61ef383ab0
    type <pointer_type 0x7f61ef3553f0
        type <integer_type 0x7f61ef34c3f0 pthread_t unsigned DI
            size <integer_cst 0x7f61ef7f9be8 constant 64>
            unit size <integer_cst 0x7f61ef7f9c00 constant 8>
            align 64 symtab 0 alias set -1 canonical type 0x7f61ef80d738 precision 64 min <integer_cst 0x7f61ef7f9eb8 0> max <integer_cst 0x7f61ef7fb500 18446744073709551615> context <translation_unit_decl 0x7f61ef804168 test.c>
            pointer_to_this <pointer_type 0x7f61ef3553f0>>
        unsigned DI size <integer_cst 0x7f61ef7f9be8 64> unit size <integer_cst 0x7f61ef7f9c00 8>
        align 64 symtab 0 alias set -1 structural equality>
   
    def_stmt _23 = &t2[i_41];
    version 23
    ptr-info 0x7f61ef3808d0>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m    pthread is DETACHED and no memory leak  [0m

======================================================================

======================================================================
[40;31m  	possible double free :14 [0m

======================================================================
 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <ssa_name 0x7f61ef38b168
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef3852d0 q>
    def_stmt q_68 = malloc (70);
    version 68
    ptr-info 0x7f61ef3809c0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

q_42 = PHI <q_74(12), q_68(13)>
lto1: warning: use location
dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 14: q_42 = PHI <q_74(12), q_68(13)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start q_42 = PHI <q_74(12), q_68(13)>
q_68 = malloc (70);
dot graph stmt end

dot graph stmt start q_42 = PHI <q_74(12), q_68(13)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

_33 = foo5 (q_42, q_42);
test.c:588:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 26: _33 = foo5 (q_42, q_42);
test.c:588:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target line desend

dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start _33 = foo5 (q_42, q_42);
q_68 = malloc (70);
dot graph stmt end

dot graph stmt start _33 = foo5 (q_42, q_42);
test.c:588:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph stmt end

this stmt is child function---foo5-----

 ================== trace ================== 
 <ssa_name 0x7f61ef38b168
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef3852d0 q>
    def_stmt q_68 = malloc (70);
    version 68
    ptr-info 0x7f61ef3809c0>
trace fucntion name:foo5 
[40;44m =======trace_function_path foo5  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:foo5========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

*q_68 = 20;
test.c:552:8: warning: use location
   q[0] = 20;
        ^
dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 13: *q_68 = 20;
test.c:552:8: warning: use location
   q[0] = 20;
        ^
dot graph target line desend

dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 13dot graph target basicblock en1

dot graph stmt start *q_68 = 20;
q_68 = malloc (70);
dot graph stmt end

dot graph stmt start *q_68 = 20;
test.c:552:8: warning: use location
   q[0] = 20;
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

q_74 = child7 (_29, q_68);
test.c:546:4: warning: use location
   q=child7(test,q);
    ^
dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 12: q_74 = child7 (_29, q_68);
test.c:546:4: warning: use location
   q=child7(test,q);
    ^
dot graph target line desend

dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 12dot graph target basicblock en1

dot graph stmt start q_74 = child7 (_29, q_68);
q_68 = malloc (70);
dot graph stmt end

dot graph stmt start q_74 = child7 (_29, q_68);
test.c:546:4: warning: use location
   q=child7(test,q);
    ^
dot graph stmt end

this stmt is child function---child7-----

 ================== trace ================== 
 <ssa_name 0x7f61ef38b168
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef3852d0 q>
    def_stmt q_68 = malloc (70);
    version 68
    ptr-info 0x7f61ef3809c0>
trace fucntion name:child7 
[40;44m =======trace_function_path child7  function_call count: 4 level :0========  [0m
[40;36m ======= node_fun:child7========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_25 = q_68 != 0B;
test.c:541:9: warning: use location
  if ((q != NULL) && test)
         ^
dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 11: _25 = q_68 != 0B;
test.c:541:9: warning: use location
  if ((q != NULL) && test)
         ^
dot graph target line desend

dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start _25 = q_68 != 0B;
q_68 = malloc (70);
dot graph stmt end

dot graph stmt start _25 = q_68 != 0B;
test.c:541:9: warning: use location
  if ((q != NULL) && test)
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_27 = _25 & _26;
test.c:541:18: warning: use location
  if ((q != NULL) && test)
                  ^
dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 11: _27 = _25 & _26;
test.c:541:18: warning: use location
  if ((q != NULL) && test)
                  ^
dot graph target line desend

dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start _27 = _25 & _26;
q_68 = malloc (70);
dot graph stmt end

dot graph stmt start _27 = _25 & _26;
test.c:541:18: warning: use location
  if ((q != NULL) && test)
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_27 != 0)
test.c:541:5: warning: use location
  if ((q != NULL) && test)
     ^
dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc en1

dot graph target line desc form basic block 11: if (_27 != 0)
test.c:541:5: warning: use location
  if ((q != NULL) && test)
     ^
dot graph target line desend

dot graph target loc start # .MEM_137 = VDEF <.MEM_120>
q_68 = malloc (70);
test.c:537:7: warning: use location
  int *q = malloc(70);
       ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start if (_27 != 0)
q_68 = malloc (70);
dot graph stmt end

dot graph stmt start if (_27 != 0)
test.c:541:5: warning: use location
  if ((q != NULL) && test)
     ^
dot graph stmt end

if (_27 != 0)

 ================== find cond branch ================= 
if (_27 != 0)
Cond in fucntion main basic block 11
 ================== possiable direct basic block ================= 
from main basic block 12
 ================== possiable direct basic block ================= 
from main basic block 13
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
 <ssa_name 0x7f61ef38b168
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef3852d0 q>
    def_stmt q_68 = malloc (70);
    version 68
    ptr-info 0x7f61ef3809c0>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <ssa_name 0x7f61ef38b1b0
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385240 q2>
    def_stmt q2_70 = malloc (20);
    version 70
    ptr-info 0x7f61ef3809d8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
 <ssa_name 0x7f61ef38b1b0
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385240 q2>
    def_stmt q2_70 = malloc (20);
    version 70
    ptr-info 0x7f61ef3809d8>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:538:7: warning: use location
  int *q2 = malloc(20);
       ^

======================================================================
 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <ssa_name 0x7f61ef38b2d0
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385120 q3>
    def_stmt q3_80 = malloc (10);
    version 80
    ptr-info 0x7f61ef380a20>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

q3_43 = PHI <q3_80(15), q3_78(16)>
lto1: warning: use location
dot graph target loc start # .MEM_145 = VDEF <.MEM_121>
q3_80 = malloc (10);
test.c:558:6: warning: use location
   q3 = malloc (10);
      ^
dot graph target loc en1

dot graph target line desc form basic block 17: q3_43 = PHI <q3_80(15), q3_78(16)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_121>
q3_80 = malloc (10);
test.c:558:6: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start q3_43 = PHI <q3_80(15), q3_78(16)>
q3_80 = malloc (10);
dot graph stmt end

dot graph stmt start q3_43 = PHI <q3_80(15), q3_78(16)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

_116 = __printf_chk (1, "tes%dt\n", q3_43);
dot graph target loc start # .MEM_145 = VDEF <.MEM_121>
q3_80 = malloc (10);
test.c:558:6: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 17: _116 = __printf_chk (1, "tes%dt\n", q3_43);
dot graph target line desend

dot graph target loc start # .MEM_145 = VDEF <.MEM_121>
q3_80 = malloc (10);
test.c:558:6: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _116 = __printf_chk (1, "tes%dt\n", q3_43);
q3_80 = malloc (10);
dot graph stmt end

dot graph stmt start _116 = __printf_chk (1, "tes%dt\n", q3_43);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f61ef38b2d0
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385120 q3>
    def_stmt q3_80 = malloc (10);
    version 80
    ptr-info 0x7f61ef380a20>
trace fucntion name:__printf_chk 

 ================== trace ================== 
 <ssa_name 0x7f61ef38b2d0
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385120 q3>
    def_stmt q3_80 = malloc (10);
    version 80
    ptr-info 0x7f61ef380a20>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <ssa_name 0x7f61ef38b360
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385090 data>
    def_stmt data_83 = malloc (400);
    version 83
    ptr-info 0x7f61ef380a38>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

data_45 = PHI <0B(20), data_83(23)>
lto1: warning: use location
dot graph target loc start # .MEM_147 = VDEF <.MEM_123>
data_83 = malloc (400);
test.c:575:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc en1

dot graph target line desc form basic block 24: data_45 = PHI <0B(20), data_83(23)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_147 = VDEF <.MEM_123>
data_83 = malloc (400);
test.c:575:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 24dot graph target basicblock en1

dot graph stmt start data_45 = PHI <0B(20), data_83(23)>
data_83 = malloc (400);
dot graph stmt end

dot graph stmt start data_45 = PHI <0B(20), data_83(23)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

free (data_45);
test.c:586:3: warning: use location
   free(data);
   ^
dot graph target loc start # .MEM_147 = VDEF <.MEM_123>
data_83 = malloc (400);
test.c:575:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc en1

dot graph target line desc form basic block 25: free (data_45);
test.c:586:3: warning: use location
   free(data);
   ^
dot graph target line desend

dot graph target loc start # .MEM_147 = VDEF <.MEM_123>
data_83 = malloc (400);
test.c:575:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph stmt start free (data_45);
data_83 = malloc (400);
dot graph stmt end

dot graph stmt start free (data_45);
test.c:586:3: warning: use location
   free(data);
   ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (data_45);
test.c:586:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

free (data_83);
test.c:581:3: warning: use location
   free(data);
   ^
dot graph target loc start # .MEM_147 = VDEF <.MEM_123>
data_83 = malloc (400);
test.c:575:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc en1

dot graph target line desc form basic block 23: free (data_83);
test.c:581:3: warning: use location
   free(data);
   ^
dot graph target line desend

dot graph target loc start # .MEM_147 = VDEF <.MEM_123>
data_83 = malloc (400);
test.c:575:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start free (data_83);
data_83 = malloc (400);
dot graph stmt end

dot graph stmt start free (data_83);
test.c:581:3: warning: use location
   free(data);
   ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (data_83);
test.c:581:3: warning: use location
[40;32m    HAS FREE STMT count:2 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

if (data_83 == 0B)
test.c:576:6: warning: use location
   if (data == NULL)
      ^
dot graph target loc start # .MEM_147 = VDEF <.MEM_123>
data_83 = malloc (400);
test.c:575:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc en1

dot graph target line desc form basic block 21: if (data_83 == 0B)
test.c:576:6: warning: use location
   if (data == NULL)
      ^
dot graph target line desend

dot graph target loc start # .MEM_147 = VDEF <.MEM_123>
data_83 = malloc (400);
test.c:575:8: warning: use location
   data = (int *)malloc(100 * sizeof(int));
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 21dot graph target basicblock en1

dot graph stmt start if (data_83 == 0B)
data_83 = malloc (400);
dot graph stmt end

dot graph stmt start if (data_83 == 0B)
test.c:576:6: warning: use location
   if (data == NULL)
      ^
dot graph stmt end

if (data_83 == 0B)

 ================== find cond branch ================= 
if (data_83 == 0B)
Cond in fucntion main basic block 21
 ================== possiable direct basic block ================= 
from main basic block 22
 ================== possiable direct basic block ================= 
from main basic block 23
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
 <ssa_name 0x7f61ef38b360
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385090 data>
    def_stmt data_83 = malloc (400);
    version 83
    ptr-info 0x7f61ef380a38>

 ================== Start Use after free Check ================== 
# .MEM_150 = VDEF <.MEM_124>
free (data_45);
test.c:586:3: warning: Use after free error!: free location 
   free(data);
   ^
data_45 = PHI <0B(20), data_83(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_148 = VDEF <.MEM_147>
free (data_83);
test.c:581:3: warning: Use after free error!: free location 
   free(data);
   ^
data_45 = PHI <0B(20), data_83(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_148 = VDEF <.MEM_147>
free (data_83);
test.c:581:3: warning: Use after free error!: free location 
# .MEM_150 = VDEF <.MEM_124>
free (data_45);
test.c:586:3: warning: use location
   free(data);
   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :2 [0m

======================================================================
 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <ssa_name 0x7f61ef38b3f0
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385000 p4>
    def_stmt p4_90 = malloc (10);
    version 90
    ptr-info 0x7f61ef380a50>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
 <ssa_name 0x7f61ef38b3f0
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385000 p4>
    def_stmt p4_90 = malloc (10);
    version 90
    ptr-info 0x7f61ef380a50>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m
test.c:590:7: warning: use location
  int *p4 = malloc(10);
       ^

======================================================================
 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <ssa_name 0x7f61ef383e58
    type <pointer_type 0x7f61ef8140a8
        type <void_type 0x7f61ef80df18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef8140a8>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef34c348>>
   
    def_stmt _36 = malloc (201);
    version 36
    ptr-info 0x7f61ef380918>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

p98 = _36;
test.c:597:6: warning: use location
  p98 = malloc(201);
      ^
dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 26: p98 = _36;
test.c:597:6: warning: use location
  p98 = malloc(201);
      ^
dot graph target line desend

dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start p98 = _36;
_36 = malloc (201);
dot graph stmt end

dot graph stmt start p98 = _36;
test.c:597:6: warning: use location
  p98 = malloc(201);
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_2 = p98;
test.c:390:5: warning: use location
  p98[3] = 300;
     ^
dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _2 = p98;
test.c:390:5: warning: use location
  p98[3] = 300;
     ^
dot graph target line desend

dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from child7 basic block 3dot graph target basicblock end

dot graph stmt start _2 = p98;
_36 = malloc (201);
dot graph stmt end

dot graph stmt start _2 = p98;
test.c:390:5: warning: use location
  p98[3] = 300;
     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(int *)_2 + 12B] = 300;
test.c:390:9: warning: use location
  p98[3] = 300;
         ^
dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 3: MEM[(int *)_2 + 12B] = 300;
test.c:390:9: warning: use location
  p98[3] = 300;
         ^
dot graph target line desend

dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph target basicblock star1 from child7 basic block 3dot graph target basicblock end

dot graph stmt start MEM[(int *)_2 + 12B] = 300;
_36 = malloc (201);
dot graph stmt end

dot graph stmt start MEM[(int *)_2 + 12B] = 300;
test.c:390:9: warning: use location
  p98[3] = 300;
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_3 = p98;
test.c:396:6: warning: use location
   p98[2] = 300;
      ^
dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 4: _3 = p98;
test.c:396:6: warning: use location
   p98[2] = 300;
      ^
dot graph target line desend

dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph target basicblock star1 from child7 basic block 4dot graph target basicblock end

dot graph stmt start _3 = p98;
_36 = malloc (201);
dot graph stmt end

dot graph stmt start _3 = p98;
test.c:396:6: warning: use location
   p98[2] = 300;
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(int *)_3 + 8B] = 300;
test.c:396:10: warning: use location
   p98[2] = 300;
          ^
dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 4: MEM[(int *)_3 + 8B] = 300;
test.c:396:10: warning: use location
   p98[2] = 300;
          ^
dot graph target line desend

dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph target basicblock star1 from child7 basic block 4dot graph target basicblock end

dot graph stmt start MEM[(int *)_3 + 8B] = 300;
_36 = malloc (201);
dot graph stmt end

dot graph stmt start MEM[(int *)_3 + 8B] = 300;
test.c:396:10: warning: use location
   p98[2] = 300;
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_8 = p98;
test.c:220:5: warning: use location
  p98[0] = 98;
     ^
dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _8 = p98;
test.c:220:5: warning: use location
  p98[0] = 98;
     ^
dot graph target line desend

dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from child basic block 2dot graph target basicblock end

dot graph stmt start _8 = p98;
_36 = malloc (201);
dot graph stmt end

dot graph stmt start _8 = p98;
test.c:220:5: warning: use location
  p98[0] = 98;
     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

*_8 = 98;
test.c:220:9: warning: use location
  p98[0] = 98;
         ^
dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: *_8 = 98;
test.c:220:9: warning: use location
  p98[0] = 98;
         ^
dot graph target line desend

dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from child basic block 2dot graph target basicblock end

dot graph stmt start *_8 = 98;
_36 = malloc (201);
dot graph stmt end

dot graph stmt start *_8 = 98;
test.c:220:9: warning: use location
  p98[0] = 98;
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_1 = p98;
test.c:416:4: warning: use location
 p98[1] = 99;
    ^
dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = p98;
test.c:416:4: warning: use location
 p98[1] = 99;
    ^
dot graph target line desend

dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from child2 basic block 2dot graph target basicblock end

dot graph stmt start _1 = p98;
_36 = malloc (201);
dot graph stmt end

dot graph stmt start _1 = p98;
test.c:416:4: warning: use location
 p98[1] = 99;
    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

MEM[(int *)_1 + 4B] = 99;
test.c:416:8: warning: use location
 p98[1] = 99;
        ^
dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 2: MEM[(int *)_1 + 4B] = 99;
test.c:416:8: warning: use location
 p98[1] = 99;
        ^
dot graph target line desend

dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph target basicblock star1 from child2 basic block 2dot graph target basicblock end

dot graph stmt start MEM[(int *)_1 + 4B] = 99;
_36 = malloc (201);
dot graph stmt end

dot graph stmt start MEM[(int *)_1 + 4B] = 99;
test.c:416:8: warning: use location
 p98[1] = 99;
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_37 = p98;
test.c:598:2: warning: use location
  child(p98);
  ^
dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 26: _37 = p98;
test.c:598:2: warning: use location
  child(p98);
  ^
dot graph target line desend

dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start _37 = p98;
_36 = malloc (201);
dot graph stmt end

dot graph stmt start _37 = p98;
test.c:598:2: warning: use location
  child(p98);
  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

child (_37);
test.c:598:2: warning: use location
dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 26: child (_37);
test.c:598:2: warning: use location
  child(p98);
  ^
dot graph target line desend

dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start child (_37);
_36 = malloc (201);
dot graph stmt end

dot graph stmt start child (_37);
test.c:598:2: warning: use location
  child(p98);
  ^
dot graph stmt end

this stmt is child function---child-----

 ================== trace ================== 
 <ssa_name 0x7f61ef383e58
    type <pointer_type 0x7f61ef8140a8
        type <void_type 0x7f61ef80df18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef8140a8>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef34c348>>
   
    def_stmt _36 = malloc (201);
    version 36
    ptr-info 0x7f61ef380918>
trace fucntion name:child 
[40;44m =======trace_function_path child  function_call count: 10 level :0========  [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
test.c:221:2: warning: use location
  free(pData);
  ^
# .MEM_58 = VDEF <.MEM_57>
free (_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_10);
test.c:222:2: warning: use location
  free(data);
  ^
[40;36m ======= node_fun:child========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 205421648
from child basic block 2dot graph end relate end

In function â€˜childâ€™:
test.c:204:7: warning: use location
  int *pData = data;
       ^
dot graph relate stmt start ID : 622800 stmt(LHS) :_1 = data;
test.c:204:7: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 205421648
from child basic block 2dot graph end relate end

test.c:206:9: warning: use location
  *pData += 1;
         ^
dot graph relate stmt start ID : 1921685885 stmt(LHS) :_2 = pData;
test.c:206:9: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 205421648
from child basic block 2dot graph end relate end

test.c:206:9: warning: use location
dot graph relate stmt start ID : 190425516 stmt(LHS) :_4 = pData;
test.c:206:9: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 205421648
from child basic block 2dot graph end relate end

test.c:213:9: warning: use location
  *ppData[0] = 10;
         ^
dot graph relate stmt start ID : 1892148888 stmt(LHS) :_6 = pData;
test.c:213:9: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 205421648
from child basic block 2dot graph end relate end

test.c:216:3: warning: use location
  **ppData = 12;
   ^
dot graph relate stmt start ID : 882009228 stmt(LHS) :_7 = pData;
test.c:216:3: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 205421648
from child basic block 2dot graph end relate end

test.c:221:2: warning: use location
  free(pData);
  ^
dot graph relate stmt start ID : 877987006 stmt(LHS) :_9 = pData;
test.c:221:2: warning: use location
_9
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 205421648
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1081246168 stmt(call) :free (_9);
test.c:221:2: warning: use location
_9
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 205421648
from child basic block 2dot graph end relate end

test.c:222:2: warning: use location
  free(data);
  ^
dot graph relate stmt start ID : 320397058 stmt(LHS) :_10 = data;
test.c:222:2: warning: use location
_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 205421648
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1752516499 stmt(call) :free (_10);
test.c:222:2: warning: use location
_10
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 205421648
from child basic block 2dot graph end relate end

test.c:223:2: warning: use location
  boo(data);
  ^
dot graph relate stmt start ID : 2039073511 stmt(LHS) :_11 = data;
test.c:223:2: warning: use location
_11
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 205421648
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 430720757 stmt(call) :boo (_11);
test.c:223:2: warning: use location
_11
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :1========  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
In function â€˜mainâ€™:
test.c:444:2: warning: use location
  free(b);
  ^
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:445:2: warning: use location
  free(b);
  ^
[40;36m ======= node_fun:boo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph start relate formID : 1668498599
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 459666079 stmt(call) :free (b_2(D));
In function â€˜booâ€™:
test.c:444:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph start relate for1ID : 1668498599
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 151230327 stmt(call) :free (b_2(D));
test.c:445:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph start relate for1ID : 1668498599
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1133942305 stmt(call) :test22 (b_2(D));
test.c:446:2: warning: use location
  test22(b);
  ^
b_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :2========  [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
In function â€˜mainâ€™:
test.c:460:2: warning: use location
  free(k);
  ^
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:461:2: warning: use location
  free(k);
  ^
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:462:2: warning: use location
  free(k);
  ^
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:463:2: warning: use location
  free(k);
  ^
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:464:2: warning: use location
  free(k);
  ^
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:465:2: warning: use location
  free(k);
  ^
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph start relate formID : 419342658
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1272785558 stmt(call) :free (k_2(D));
In function â€˜test22â€™:
test.c:460:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 419342658
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 730012975 stmt(call) :free (k_2(D));
test.c:461:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 419342658
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 930233654 stmt(call) :free (k_2(D));
test.c:462:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 419342658
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1594767593 stmt(call) :free (k_2(D));
test.c:463:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 419342658
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 32503642 stmt(call) :free (k_2(D));
test.c:464:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 419342658
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 768113581 stmt(call) :free (k_2(D));
test.c:465:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :1========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;36m ======= node_fun:child5========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :1========  [0m
[40;36m ======= node_fun:child3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:child4========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 1192191621
from child4 basic block 3dot graph end relate end

In function â€˜child4â€™:
test.c:248:11: warning: use location
   *data = *data + 1;
           ^
dot graph relate stmt start ID : 1914562918 stmt(LHS) :_1 = data;
test.c:248:11: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 1192191621
from child4 basic block 3dot graph end relate end

test.c:248:3: warning: use location
   *data = *data + 1;
   ^
dot graph relate stmt start ID : 756069194 stmt(LHS) :_3 = data;
test.c:248:3: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 1192191621
from child4 basic block 4dot graph end relate end

test.c:251:3: warning: use location
   *data = 2;
   ^
dot graph relate stmt start ID : 1546107879 stmt(LHS) :_5 = data;
test.c:251:3: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph start relate formID : 1541562167
from foo basic block 2dot graph end relate end

In function â€˜fooâ€™:
test.c:150:8: warning: use location
  p2[0] = 1;
        ^
dot graph relate stmt start ID : 1302078092 stmt(LHS) :*p2_5 = 1;
test.c:150:8: warning: use location
*p2_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this fucntion return value is heap-object 
foo this fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :2========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;36m ======= node_fun:foo2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph start relate formID : 1751529528
from foo2 basic block 3dot graph end relate end

In function â€˜foo2â€™:
test.c:87:9: warning: use location
   p3[0] = 10;
         ^
dot graph relate stmt start ID : 1542184967 stmt(LHS) :*p3_15 = 10;
test.c:87:9: warning: use location
*p3_15
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:ž========= [0m




dot graph start relate formID : 1751529528
from foo2 basic block 4dot graph end relate end

test.c:93:9: warning: use location
   p4[0] = 10;
         ^
dot graph relate stmt start ID : 1076280329 stmt(LHS) :*p4_17 = 10;
test.c:93:9: warning: use location
*p4_17
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_38 = p98;
In function â€˜mainâ€™:
test.c:599:2: warning: use location
  free(p98);
  ^
dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 26: _38 = p98;
test.c:599:2: warning: use location
  free(p98);
  ^
dot graph target line desend

dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start _38 = p98;
_36 = malloc (201);
dot graph stmt end

dot graph stmt start _38 = p98;
test.c:599:2: warning: use location
  free(p98);
  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free (_38);
test.c:599:2: warning: use location
dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc en1

dot graph target line desc form basic block 26: free (_38);
test.c:599:2: warning: use location
  free(p98);
  ^
dot graph target line desend

dot graph target loc start # .MEM_157 = VDEF <.MEM_156>
_36 = malloc (201);
test.c:597:8: warning: use location
  p98 = malloc(201);
        ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start free (_38);
_36 = malloc (201);
dot graph stmt end

dot graph stmt start free (_38);
test.c:599:2: warning: use location
  free(p98);
  ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (_38);
test.c:599:2: warning: use location
[40;32m    HAS FREE STMT count:11 name:free [0m

 ================== find ================== 
 <ssa_name 0x7f61ef383e58
    type <pointer_type 0x7f61ef8140a8
        type <void_type 0x7f61ef80df18 void VOID
            align 8 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f61ef8140a8>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef34c348>>
   
    def_stmt _36 = malloc (201);
    version 36
    ptr-info 0x7f61ef380918>
dot graph start relate for1ID : 205421648
from child basic block 2dot graph end relate end

subgraph cluster_1286850207 dot graph subgraph  start ID : 430720757 stmt(relate) ï¼Œ Tree ID : 205421648 : boo (_11);
test.c:223:2: warning: use location
  boo(data);
  ^
dot graph subgrapend

dot graph start relate for1ID : 1668498599
from boo basic block 2dot graph end relate end

subgraph cluster_1958289557 dot graph subgraph  start ID : 1133942305 stmt(relate) ï¼Œ Tree ID : 1668498599 : test22 (b_2(D));
test.c:446:2: warning: use location
  test22(b);
  ^
dot graph subgrapend

dot graph start relate for1ID : 419342658
from test22 basic block 2dot graph end relate end

subgraph cluster_672458402 dot graph subgraph  start ID : 768113581 stmt(relate) ï¼Œ Tree ID : 419342658 : free (k_2(D));
test.c:465:2: warning: use location
  free(k);
  ^
dot graph subgrapend

dot graph start relate for1ID : 1192191621
from child4 basic block 4dot graph end relate end

subgraph cluster_220612728 dot graph subgraph  start ID : 1546107879 stmt(relate) ï¼Œ Tree ID : 1192191621 : _5 = data;
test.c:251:3: warning: use location
   *data = 2;
   ^
dot graph subgrapend

dot graph start relate for1ID : 1541562167
from foo basic block 2dot graph end relate end

subgraph cluster_131202968 dot graph subgraph  start ID : 1302078092 stmt(relate) ï¼Œ Tree ID : 1541562167 : *p2_5 = 1;
test.c:150:8: warning: use location
  p2[0] = 1;
        ^
dot graph subgrapend

dot graph start relate for1ID : 1751529528
from foo2 basic block 4dot graph end relate end

subgraph cluster_277491254 dot graph subgraph  start ID : 1076280329 stmt(relate) ï¼Œ Tree ID : 1751529528 : *p4_17 = 10;
test.c:93:9: warning: use location
   p4[0] = 10;
         ^
dot graph subgrapend


 ================== Start Use after free Check ================== 
# .MEM_159 = VDEF <.MEM_158>
child (_37);
test.c:598:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_19>
_2 = p98;
test.c:390:5: warning: use location
  p98[3] = 300;
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_160 = VDEF <.MEM_159>
free (_38);
test.c:599:2: warning: Use after free error!: free location 
  free(p98);
  ^
# VUSE <.MEM_19>
_2 = p98;
test.c:390:5: warning: use location
  p98[3] = 300;
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_159 = VDEF <.MEM_158>
child (_37);
test.c:598:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_23 = VDEF <.MEM_19>
MEM[(int *)_2 + 12B] = 300;
test.c:390:9: warning: use location
  p98[3] = 300;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_160 = VDEF <.MEM_159>
free (_38);
test.c:599:2: warning: Use after free error!: free location 
  free(p98);
  ^
# .MEM_23 = VDEF <.MEM_19>
MEM[(int *)_2 + 12B] = 300;
test.c:390:9: warning: use location
  p98[3] = 300;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_159 = VDEF <.MEM_158>
child (_37);
test.c:598:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_19>
_3 = p98;
test.c:396:6: warning: use location
   p98[2] = 300;
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_160 = VDEF <.MEM_159>
free (_38);
test.c:599:2: warning: Use after free error!: free location 
  free(p98);
  ^
# VUSE <.MEM_19>
_3 = p98;
test.c:396:6: warning: use location
   p98[2] = 300;
      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_159 = VDEF <.MEM_158>
child (_37);
test.c:598:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_20 = VDEF <.MEM_19>
MEM[(int *)_3 + 8B] = 300;
test.c:396:10: warning: use location
   p98[2] = 300;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_160 = VDEF <.MEM_159>
free (_38);
test.c:599:2: warning: Use after free error!: free location 
  free(p98);
  ^
# .MEM_20 = VDEF <.MEM_19>
MEM[(int *)_3 + 8B] = 300;
test.c:396:10: warning: use location
   p98[2] = 300;
          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_159 = VDEF <.MEM_158>
child (_37);
test.c:598:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_55>
_8 = p98;
test.c:220:5: warning: use location
  p98[0] = 98;
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_160 = VDEF <.MEM_159>
free (_38);
test.c:599:2: warning: Use after free error!: free location 
  free(p98);
  ^
# VUSE <.MEM_55>
_8 = p98;
test.c:220:5: warning: use location
  p98[0] = 98;
     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_159 = VDEF <.MEM_158>
child (_37);
test.c:598:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_56 = VDEF <.MEM_55>
*_8 = 98;
test.c:220:9: warning: use location
  p98[0] = 98;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_160 = VDEF <.MEM_159>
free (_38);
test.c:599:2: warning: Use after free error!: free location 
  free(p98);
  ^
# .MEM_56 = VDEF <.MEM_55>
*_8 = 98;
test.c:220:9: warning: use location
  p98[0] = 98;
         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_159 = VDEF <.MEM_158>
child (_37);
test.c:598:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_9(D)>
_1 = p98;
test.c:416:4: warning: use location
 p98[1] = 99;
    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_160 = VDEF <.MEM_159>
free (_38);
test.c:599:2: warning: Use after free error!: free location 
  free(p98);
  ^
# VUSE <.MEM_9(D)>
_1 = p98;
test.c:416:4: warning: use location
 p98[1] = 99;
    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_159 = VDEF <.MEM_158>
child (_37);
test.c:598:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_10 = VDEF <.MEM_9(D)>
MEM[(int *)_1 + 4B] = 99;
test.c:416:8: warning: use location
 p98[1] = 99;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_160 = VDEF <.MEM_159>
free (_38);
test.c:599:2: warning: Use after free error!: free location 
  free(p98);
  ^
# .MEM_10 = VDEF <.MEM_9(D)>
MEM[(int *)_1 + 4B] = 99;
test.c:416:8: warning: use location
 p98[1] = 99;
        ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_159 = VDEF <.MEM_158>
child (_37);
test.c:598:2: warning: Use after free error!: free location 
  child(p98);
  ^
# VUSE <.MEM_159>
_38 = p98;
test.c:599:2: warning: use location
  free(p98);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_159 = VDEF <.MEM_158>
child (_37);
test.c:598:2: warning: Use after free error!: free location 
  child(p98);
  ^
# .MEM_160 = VDEF <.MEM_159>
free (_38);
test.c:599:2: warning: use location
  free(p98);
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :11 [0m

======================================================================
 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <ssa_name 0x7f61ef38b240
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef3852d0 q>
    def_stmt q_74 = child7 (_29, q_68);
    version 74
    ptr-info 0x7f61ef3809f0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:child7 
[40;44m =======trace_function_path child7  function_call count: 4 level :-100========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_17>
return _4;
lto1: warning: use location
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---child7-----
this other function ------child7-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

q_42 = PHI <q_74(12), q_68(13)>
lto1: warning: use location
dot graph target loc start # .MEM_141 = VDEF <.MEM_138>
q_74 = child7 (_29, q_68);
test.c:546:4: warning: use location
   q=child7(test,q);
    ^
dot graph target loc en1

dot graph target line desc form basic block 14: q_42 = PHI <q_74(12), q_68(13)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_141 = VDEF <.MEM_138>
q_74 = child7 (_29, q_68);
test.c:546:4: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start q_42 = PHI <q_74(12), q_68(13)>
q_74 = child7 (_29, q_68);
dot graph stmt end

dot graph stmt start q_42 = PHI <q_74(12), q_68(13)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---child7-----
dot graph entry main
dot graph target entry end

_33 = foo5 (q_42, q_42);
test.c:588:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target loc start # .MEM_141 = VDEF <.MEM_138>
q_74 = child7 (_29, q_68);
test.c:546:4: warning: use location
   q=child7(test,q);
    ^
dot graph target loc en1

dot graph target line desc form basic block 26: _33 = foo5 (q_42, q_42);
test.c:588:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target line desend

dot graph target loc start # .MEM_141 = VDEF <.MEM_138>
q_74 = child7 (_29, q_68);
test.c:546:4: warning: use location
   q=child7(test,q);
    ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start _33 = foo5 (q_42, q_42);
q_74 = child7 (_29, q_68);
dot graph stmt end

dot graph stmt start _33 = foo5 (q_42, q_42);
test.c:588:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph stmt end

this stmt is child function---foo5-----

 ================== trace ================== 
 <ssa_name 0x7f61ef38b240
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef3852d0 q>
    def_stmt q_74 = child7 (_29, q_68);
    version 74
    ptr-info 0x7f61ef3809f0>
trace fucntion name:foo5 
[40;44m =======trace_function_path foo5  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:foo5========= [0m
[40;36m ======= find relate stmt with q ========= [0m
[40;36m ======= relate stmt argument:q ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m

 ================== trace ================== 
dot graph entry main
dot graph target entry end

free (q_74);
test.c:548:3: warning: use location
   free(q);
   ^
dot graph target loc start # .MEM_141 = VDEF <.MEM_138>
q_74 = child7 (_29, q_68);
test.c:546:4: warning: use location
   q=child7(test,q);
    ^
dot graph target loc en1

dot graph target line desc form basic block 12: free (q_74);
test.c:548:3: warning: use location
   free(q);
   ^
dot graph target line desend

dot graph target loc start # .MEM_141 = VDEF <.MEM_138>
q_74 = child7 (_29, q_68);
test.c:546:4: warning: use location
   q=child7(test,q);
    ^
dot graph target loc end

dot graph target basicblock start from main basic block 12dot graph target basicblock en1

dot graph stmt start free (q_74);
q_74 = child7 (_29, q_68);
dot graph stmt end

dot graph stmt start free (q_74);
test.c:548:3: warning: use location
   free(q);
   ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (q_74);
test.c:548:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

*q_74 = 10;
test.c:547:8: warning: use location
   q[0] = 10;
        ^
dot graph target loc start # .MEM_141 = VDEF <.MEM_138>
q_74 = child7 (_29, q_68);
test.c:546:4: warning: use location
   q=child7(test,q);
    ^
dot graph target loc en1

dot graph target line desc form basic block 12: *q_74 = 10;
test.c:547:8: warning: use location
   q[0] = 10;
        ^
dot graph target line desend

dot graph target loc start # .MEM_141 = VDEF <.MEM_138>
q_74 = child7 (_29, q_68);
test.c:546:4: warning: use location
   q=child7(test,q);
    ^
dot graph target loc end

dot graph target basicblock start from main basic block 12dot graph target basicblock en1

dot graph stmt start *q_74 = 10;
q_74 = child7 (_29, q_68);
dot graph stmt end

dot graph stmt start *q_74 = 10;
test.c:547:8: warning: use location
   q[0] = 10;
        ^
dot graph stmt end

 <ssa_name 0x7f61ef38b240
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef3852d0 q>
    def_stmt q_74 = child7 (_29, q_68);
    version 74
    ptr-info 0x7f61ef3809f0>

 ================== Start Use after free Check ================== 
# .MEM_143 = VDEF <.MEM_142>
free (q_74);
test.c:548:3: warning: Use after free error!: free location 
   free(q);
   ^
q_42 = PHI <q_74(12), q_68(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_143 = VDEF <.MEM_142>
free (q_74);
test.c:548:3: warning: Use after free error!: free location 
# .MEM_151 = VDEF <.MEM_125>
_33 = foo5 (q_42, q_42);
test.c:588:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <ssa_name 0x7f61ef38b288
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385120 q3>
    def_stmt q3_78 = foo6 (10);
    version 78
    ptr-info 0x7f61ef380a08>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:foo6 
[40;44m =======trace_function_path foo6  function_call count: 1 level :-100========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_19>
return _4;
lto1: warning: use location
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---foo6-----
this other function ------foo6-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

q3_43 = PHI <q3_80(15), q3_78(16)>
lto1: warning: use location
dot graph target loc start # .MEM_144 = VDEF <.MEM_121>
q3_78 = foo6 (10);
test.c:561:6: warning: use location
   q3 = foo6(10);
      ^
dot graph target loc en1

dot graph target line desc form basic block 17: q3_43 = PHI <q3_80(15), q3_78(16)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_144 = VDEF <.MEM_121>
q3_78 = foo6 (10);
test.c:561:6: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start q3_43 = PHI <q3_80(15), q3_78(16)>
q3_78 = foo6 (10);
dot graph stmt end

dot graph stmt start q3_43 = PHI <q3_80(15), q3_78(16)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---foo6-----
dot graph entry main
dot graph target entry end

_116 = __printf_chk (1, "tes%dt\n", q3_43);
dot graph target loc start # .MEM_144 = VDEF <.MEM_121>
q3_78 = foo6 (10);
test.c:561:6: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 17: _116 = __printf_chk (1, "tes%dt\n", q3_43);
dot graph target line desend

dot graph target loc start # .MEM_144 = VDEF <.MEM_121>
q3_78 = foo6 (10);
test.c:561:6: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _116 = __printf_chk (1, "tes%dt\n", q3_43);
q3_78 = foo6 (10);
dot graph stmt end

dot graph stmt start _116 = __printf_chk (1, "tes%dt\n", q3_43);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f61ef38b288
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385120 q3>
    def_stmt q3_78 = foo6 (10);
    version 78
    ptr-info 0x7f61ef380a08>
trace fucntion name:__printf_chk 

 ================== trace ================== 
 <ssa_name 0x7f61ef38b288
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385120 q3>
    def_stmt q3_78 = foo6 (10);
    version 78
    ptr-info 0x7f61ef380a08>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <ssa_name 0x7f61ef383d80
    type <integer_type 0x7f61ef80d5e8 int public SI
        size <integer_cst 0x7f61ef7f9e28 constant 32>
        unit size <integer_cst 0x7f61ef7f9e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
        pointer_to_this <pointer_type 0x7f61ef814a80>>
   
    def_stmt _33 = foo5 (q_42, q_42);
    version 33>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:foo5 
[40;44m =======trace_function_path foo5  function_call count: 1 level :-100========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---foo5-----
this other function ------foo5-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_117 = __printf_chk (1, "123%d\n", _33);
dot graph target loc start # .MEM_151 = VDEF <.MEM_125>
_33 = foo5 (q_42, q_42);
test.c:588:2: warning: use location
  printf("123%d\n", foo5(q, q));
  ^
dot graph target loc en1

dot graph target line desc form basic block 26: _117 = __printf_chk (1, "123%d\n", _33);
dot graph target line desend

dot graph target loc start # .MEM_151 = VDEF <.MEM_125>
_33 = foo5 (q_42, q_42);
test.c:588:2: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start _117 = __printf_chk (1, "123%d\n", _33);
_33 = foo5 (q_42, q_42);
dot graph stmt end

dot graph stmt start _117 = __printf_chk (1, "123%d\n", _33);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f61ef383d80
    type <integer_type 0x7f61ef80d5e8 int public SI
        size <integer_cst 0x7f61ef7f9e28 constant 32>
        unit size <integer_cst 0x7f61ef7f9e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
        pointer_to_this <pointer_type 0x7f61ef814a80>>
   
    def_stmt _33 = foo5 (q_42, q_42);
    version 33>
trace fucntion name:__printf_chk 

 ================== trace ================== 
 <ssa_name 0x7f61ef383d80
    type <integer_type 0x7f61ef80d5e8 int public SI
        size <integer_cst 0x7f61ef7f9e28 constant 32>
        unit size <integer_cst 0x7f61ef7f9e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
        pointer_to_this <pointer_type 0x7f61ef814a80>>
   
    def_stmt _33 = foo5 (q_42, q_42);
    version 33>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <ssa_name 0x7f61ef38b438
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385000 p4>
    def_stmt p4_93 = child7 (_35, 1B);
    version 93
    ptr-info 0x7f61ef380a68>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:child7 
[40;44m =======trace_function_path child7  function_call count: 4 level :-100========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_17>
return _4;
lto1: warning: use location
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---child7-----
this other function ------child7-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

free (p4_93);
test.c:596:2: warning: use location
  free(p4);
  ^
dot graph target loc start # .MEM_155 = VDEF <.MEM_154>
p4_93 = child7 (_35, 1B);
test.c:595:5: warning: use location
  p4 = child7(test, p4);
     ^
dot graph target loc en1

dot graph target line desc form basic block 26: free (p4_93);
test.c:596:2: warning: use location
  free(p4);
  ^
dot graph target line desend

dot graph target loc start # .MEM_155 = VDEF <.MEM_154>
p4_93 = child7 (_35, 1B);
test.c:595:5: warning: use location
  p4 = child7(test, p4);
     ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start free (p4_93);
p4_93 = child7 (_35, 1B);
dot graph stmt end

dot graph stmt start free (p4_93);
test.c:596:2: warning: use location
  free(p4);
  ^
dot graph stmt end

this stmt is child function---free-----

 ================== find ================== 
free (p4_93);
test.c:596:2: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
 <ssa_name 0x7f61ef38b438
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
    var <var_decl 0x7f61ef385000 p4>
    def_stmt p4_93 = child7 (_35, 1B);
    version 93
    ptr-info 0x7f61ef380a68>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

 <function_decl 0x7f61ef34db00 main
    type <function_type 0x7f61ef34c7e0
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        QI
        size <integer_cst 0x7f61ef7f9cd8 constant 8>
        unit size <integer_cst 0x7f61ef7f9cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 477 col 5 align 8 context <translation_unit_decl 0x7f61ef804168 test.c> initial <block 0x7f61ef364de0>
    result <result_decl 0x7f61ef804870 D.4109 type <integer_type 0x7f61ef80d5e8 int>
        ignored SI file test.c line 477 col 5 size <integer_cst 0x7f61ef7f9e28 32> unit size <integer_cst 0x7f61ef7f9e40 4>
        align 32 context <function_decl 0x7f61ef34db00 main>>
    struct-function 0x7f61ef3658f0>
 <ssa_name 0x7f61ef383ea0
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
   
    def_stmt _37 = p98;
    version 37
    ptr-info 0x7f61ef380930>

dot graph START

======================================================================

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

child (_37);
test.c:598:2: warning: use location
  child(p98);
  ^
dot graph target loc start # .MEM_159 = VDEF <.MEM_158>
child (_37);
test.c:598:2: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 26: child (_37);
test.c:598:2: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_159 = VDEF <.MEM_158>
child (_37);
test.c:598:2: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start child (_37);
child (_37);
dot graph stmt end

dot graph stmt start child (_37);
test.c:598:2: warning: use location
dot graph stmt end

this stmt is child function---child-----

 ================== trace ================== 
 <ssa_name 0x7f61ef383ea0
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
   
    def_stmt _37 = p98;
    version 37
    ptr-info 0x7f61ef380930>
trace fucntion name:child 
[40;44m =======trace_function_path child  function_call count: 10 level :0========  [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_56>
free (_9);
test.c:221:2: warning: use location
  free(pData);
  ^
# .MEM_58 = VDEF <.MEM_57>
free (_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_10);
test.c:222:2: warning: use location
  free(data);
  ^
[40;36m ======= node_fun:child========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 932448510
from child basic block 2dot graph end relate end

In function â€˜childâ€™:
test.c:204:7: warning: use location
  int *pData = data;
       ^
dot graph relate stmt start ID : 991211329 stmt(LHS) :_1 = data;
test.c:204:7: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

test.c:206:9: warning: use location
  *pData += 1;
         ^
dot graph relate stmt start ID : 1985939611 stmt(LHS) :_2 = pData;
test.c:206:9: warning: use location
_2
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

test.c:206:9: warning: use location
dot graph relate stmt start ID : 1662461485 stmt(LHS) :_4 = pData;
test.c:206:9: warning: use location
_4
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

test.c:213:9: warning: use location
  *ppData[0] = 10;
         ^
dot graph relate stmt start ID : 1921444983 stmt(LHS) :_6 = pData;
test.c:213:9: warning: use location
_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

test.c:216:3: warning: use location
  **ppData = 12;
   ^
dot graph relate stmt start ID : 1433223556 stmt(LHS) :_7 = pData;
test.c:216:3: warning: use location
_7
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1694965128 stmt(call) :child4 (&data);
test.c:217:2: warning: use location
  child4(&data);
  ^
&data
dot graph relate end

dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 542074916 stmt(call) :child3 (&data);
test.c:218:2: warning: use location
  child3(&data);
  ^
&data
dot graph relate end

dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 620145324 stmt(call) :child5 (pData2_21);
test.c:219:2: warning: use location
  child5(pData2);
  ^
pData2_21
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

test.c:221:2: warning: use location
  free(pData);
  ^
dot graph relate stmt start ID : 1649573142 stmt(LHS) :_9 = pData;
test.c:221:2: warning: use location
_9
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1734266537 stmt(call) :free (_9);
test.c:221:2: warning: use location
_9
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

test.c:222:2: warning: use location
  free(data);
  ^
dot graph relate stmt start ID : 387224595 stmt(LHS) :_10 = data;
test.c:222:2: warning: use location
_10
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 258158689 stmt(call) :free (_10);
test.c:222:2: warning: use location
_10
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

test.c:223:2: warning: use location
  boo(data);
  ^
dot graph relate stmt start ID : 1132890768 stmt(LHS) :_11 = data;
test.c:223:2: warning: use location
_11
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

dot graph relate stmt start ID : 1928786762 stmt(call) :boo (_11);
test.c:223:2: warning: use location
_11
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_unlock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_unlock========= [0m
[40;42m =======pre add _ fucntion:boo========= [0m
[40;46m =======add node_fun stack:boo========= [0m
[40;44m =======trace_function_path boo  function_call count: 3 level :1========  [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_8 = VDEF <.MEM_7(D)>
free (b_2(D));
In function â€˜mainâ€™:
test.c:444:2: warning: use location
  free(b);
  ^
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_9 = VDEF <.MEM_8>
free (b_2(D));
test.c:445:2: warning: use location
  free(b);
  ^
[40;36m ======= node_fun:boo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph start relate formID : 1560236781
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 736936648 stmt(call) :free (b_2(D));
In function â€˜booâ€™:
test.c:444:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph start relate for1ID : 1560236781
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 1323488082 stmt(call) :free (b_2(D));
test.c:445:2: warning: use location
  free(b);
  ^
b_2(D)
dot graph relate end

dot graph start relate for1ID : 1560236781
from boo basic block 2dot graph end relate end

dot graph relate stmt start ID : 489033463 stmt(call) :test22 (b_2(D));
test.c:446:2: warning: use location
  test22(b);
  ^
b_2(D)
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:test22========= [0m
[40;46m =======add node_fun stack:test22========= [0m
[40;44m =======trace_function_path test22  function_call count: 2 level :2========  [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_12 = VDEF <.MEM_11(D)>
free (k_2(D));
In function â€˜mainâ€™:
test.c:460:2: warning: use location
  free(k);
  ^
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12>
free (k_2(D));
test.c:461:2: warning: use location
  free(k);
  ^
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_14 = VDEF <.MEM_13>
free (k_2(D));
test.c:462:2: warning: use location
  free(k);
  ^
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (k_2(D));
test.c:463:2: warning: use location
  free(k);
  ^
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15>
free (k_2(D));
test.c:464:2: warning: use location
  free(k);
  ^
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (k_2(D));
test.c:465:2: warning: use location
  free(k);
  ^
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_19 = VDEF <.MEM_18>
free (w_10);
test.c:467:2: warning: use location
  free(w);
  ^
[40;36m ======= node_fun:test22========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph start relate formID : 531408044
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 462854641 stmt(call) :free (k_2(D));
In function â€˜test22â€™:
test.c:460:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 531408044
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 299839372 stmt(call) :free (k_2(D));
test.c:461:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 531408044
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1203866447 stmt(call) :free (k_2(D));
test.c:462:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 531408044
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 683467369 stmt(call) :free (k_2(D));
test.c:463:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 531408044
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 431042340 stmt(call) :free (k_2(D));
test.c:464:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 531408044
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1481357701 stmt(call) :free (k_2(D));
test.c:465:2: warning: use location
  free(k);
  ^
k_2(D)
dot graph relate end

dot graph start relate for1ID : 531408044
from test22 basic block 2dot graph end relate end

dot graph relate stmt start ID : 795669961 stmt(call) :free (w_10);
test.c:467:2: warning: use location
  free(w);
  ^
w_10
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:child5========= [0m
[40;46m =======add node_fun stack:child5========= [0m
[40;44m =======trace_function_path child5  function_call count: 4 level :1========  [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
[40;31m  find free stmt free same pointer [0m
# .MEM_15 = VDEF <.MEM_14>
free (pData_6);
In function â€˜mainâ€™:
test.c:324:3: warning: use location
   free(pData);
   ^
[40;36m ======= node_fun:child5========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 992966066
from child5 basic block 2dot graph end relate end

In function â€˜child5â€™:
test.c:307:8: warning: use location
  pData = pData + 1;
        ^
dot graph relate stmt start ID : 1279863906 stmt(LHS) :pData_6 = data_5(D) + 4;
test.c:307:8: warning: use location
pData_6
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate formID : 992966066
from child5 basic block 4dot graph end relate end

dot graph relate stmt start ID : 1367538632 stmt(call) :free (pData_6);
test.c:324:3: warning: use location
   free(pData);
   ^
pData_6
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child3========= [0m
[40;46m =======add node_fun stack:child3========= [0m
[40;44m =======trace_function_path child3  function_call count: 4 level :1========  [0m
[40;36m ======= node_fun:child3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:pthread_detach========= [0m
[40;46m =======add node_fun stack:pthread_detach========= [0m
[40;42m =======pre add _ fucntion:pthread_self========= [0m
[40;46m =======add node_fun stack:pthread_self========= [0m
[40;42m =======pre add _ fucntion:child4========= [0m
[40;46m =======add node_fun stack:child4========= [0m
[40;44m =======trace_function_path child4  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:child4========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 64828768
from child4 basic block 3dot graph end relate end

In function â€˜child4â€™:
test.c:248:11: warning: use location
   *data = *data + 1;
           ^
dot graph relate stmt start ID : 211266313 stmt(LHS) :_1 = data;
test.c:248:11: warning: use location
_1
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 64828768
from child4 basic block 3dot graph end relate end

test.c:248:3: warning: use location
   *data = *data + 1;
   ^
dot graph relate stmt start ID : 1544576082 stmt(LHS) :_3 = data;
test.c:248:3: warning: use location
_3
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate formID : 64828768
from child4 basic block 4dot graph end relate end

test.c:251:3: warning: use location
   *data = 2;
   ^
dot graph relate stmt start ID : 1727290254 stmt(LHS) :_5 = data;
test.c:251:3: warning: use location
_5
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;46m =======add node_fun stack:foo========= [0m
[40;44m =======trace_function_path foo  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:foo2========= [0m
foo2 this fucntion return value is heap-object 
foo this fucntion return value is heap-object foo2
[40;46m =======add node_fun stack:foo2========= [0m
[40;44m =======trace_function_path foo2  function_call count: 4 level :2========  [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
[40;31m  find free stmt free same pointer [0m
# .MEM_51 = VDEF <.MEM_50>
free (p3_15);
In function â€˜mainâ€™:
test.c:88:3: warning: use location
   free(p3);
   ^
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
[40;31m  find free stmt free same pointer [0m
# .MEM_48 = VDEF <.MEM_47>
free (p4_17);
test.c:95:3: warning: use location
   free(p4);
   ^
[40;36m ======= node_fun:foo2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
dot graph start relate formID : 830315990
from foo2 basic block 2dot graph end relate end

dot graph relate stmt start ID : 1274771734 stmt(call) :foo3 (p3_15);
In function â€˜foo2â€™:
test.c:82:2: warning: use location
  foo3(p3);
  ^
p3_15
dot graph relate end

dot graph start relate formID : 830315990
from foo2 basic block 3dot graph end relate end

dot graph relate stmt start ID : 527302564 stmt(call) :free (p3_15);
test.c:88:3: warning: use location
   free(p3);
   ^
p3_15
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 830315990
from foo2 basic block 3dot graph end relate end

test.c:89:10: warning: use location
   return p3;
          ^
dot graph relate stmt start ID : 1450461314 stmt(LHS) :_33 = p3_15;
test.c:89:10: warning: use location
_33
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
dot graph start relate formID : 830315990
from foo2 basic block 4dot graph end relate end

dot graph relate stmt start ID : 776861228 stmt(call) :free (p4_17);
test.c:95:3: warning: use location
   free(p4);
   ^
p4_17
dot graph relate end

[40;36m ======= relate node_fun argument222:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs2:’========= [0m




dot graph start relate for1ID : 830315990
from foo2 basic block 4dot graph end relate end

test.c:96:10: warning: use location
   return p4;
          ^
dot graph relate stmt start ID : 114085453 stmt(LHS) :_29 = p4_17;
test.c:96:10: warning: use location
_29
dot graph relate end


 ================== warring ================== 
[40;35m this pointer possible  reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:foo3========= [0m
[40;46m =======add node_fun stack:foo3========= [0m
[40;44m =======trace_function_path foo3  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:foo3========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;46m =======add node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:pthread_mutex_lock========= [0m
[40;46m =======add node_fun stack:pthread_mutex_lock========= [0m

 ================== trace ================== 
 <ssa_name 0x7f61ef383ea0
    type <pointer_type 0x7f61ef814a80
        type <integer_type 0x7f61ef80d5e8 int public SI
            size <integer_cst 0x7f61ef7f9e28 constant 32>
            unit size <integer_cst 0x7f61ef7f9e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f61ef80d5e8 precision 32 min <integer_cst 0x7f61ef7f9de0 -2147483648> max <integer_cst 0x7f61ef7f9df8 2147483647>
            pointer_to_this <pointer_type 0x7f61ef814a80>>
        public unsigned DI
        size <integer_cst 0x7f61ef7f9be8 constant 64>
        unit size <integer_cst 0x7f61ef7f9c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f61ef3597e0>>
   
    def_stmt _37 = p98;
    version 37
    ptr-info 0x7f61ef380930>
dot graph start relate for1ID : 932448510
from child basic block 2dot graph end relate end

subgraph cluster_1035019917 dot graph subgraph  start ID : 1928786762 stmt(relate) ï¼Œ Tree ID : 932448510 : boo (_11);
In function â€˜mainâ€™:
test.c:223:2: warning: use location
  boo(data);
  ^
dot graph subgrapend

dot graph start relate for1ID : 1560236781
from boo basic block 2dot graph end relate end

subgraph cluster_1246976221 dot graph subgraph  start ID : 489033463 stmt(relate) ï¼Œ Tree ID : 1560236781 : test22 (b_2(D));
test.c:446:2: warning: use location
  test22(b);
  ^
dot graph subgrapend

dot graph start relate for1ID : 531408044
from test22 basic block 2dot graph end relate end

subgraph cluster_1618989024 dot graph subgraph  start ID : 795669961 stmt(relate) ï¼Œ Tree ID : 531408044 : free (w_10);
test.c:467:2: warning: use location
  free(w);
  ^
dot graph subgrapend

dot graph start relate for1ID : 992966066
from child5 basic block 4dot graph end relate end

subgraph cluster_447773051 dot graph subgraph  start ID : 1367538632 stmt(relate) ï¼Œ Tree ID : 992966066 : free (pData_6);
test.c:324:3: warning: use location
   free(pData);
   ^
dot graph subgrapend

dot graph start relate for1ID : 64828768
from child4 basic block 4dot graph end relate end

subgraph cluster_1983912870 dot graph subgraph  start ID : 1727290254 stmt(relate) ï¼Œ Tree ID : 64828768 : _5 = data;
test.c:251:3: warning: use location
   *data = 2;
   ^
dot graph subgrapend

dot graph start relate for1ID : 830315990
from foo2 basic block 4dot graph end relate end

subgraph cluster_794993458 dot graph subgraph  start ID : 114085453 stmt(relate) ï¼Œ Tree ID : 830315990 : _29 = p4_17;
test.c:96:10: warning: use location
   return p4;
          ^
dot graph subgrapend


 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m  	possible double free :14 [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 30
 [0m
[40;34m    used_stmt array stack totalsize of : 752
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
algorithm time: 0.057894 s
=======Mapping node_fun:foo5=========
<bb 2> [100.00%]:
_1 = *z_4(D);
_8 = __printf_chk (1, "test1%d\n", _1);
_2 = *y_5(D);
_7 = __printf_chk (1, "test2%d\n", _2);
_6 = __printf_chk (1, "test3%d\n", 10);
return 10;

=======is loop:0=========
=======Mapping node_fun:foo3=========
<bb 2> [100.00%]:
if (test_6(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_1 = malloc (1);
_2 = (long int) _1;
_3 = (int) _2;
*z_11(D) = _3;
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
p2_9 = malloc (2);

=======is loop:0=========
<bb 5> [100.00%]:
# p2_4 = PHI <p2_13(D)(3), p2_9(4)>
*p2_4 = 10;
_15 = __printf_chk (1, "%d", p2_4);
return;

=======is loop:0=========
=======Mapping node_fun:foo2=========
<bb 2> [100.00%]:
_1 = (long unsigned int) z_10(D);
a2_13 = malloc (_1);
_2 = (long unsigned int) z_10(D);
p3_15 = malloc (_2);
_3 = (long unsigned int) z_10(D);
p4_17 = malloc (_3);
_4 = malloc (200);
p99 = _4;
_5 = p99;
*_5 = 99;
_6 = p99;
MEM[(int *)_6 + 4B] = 100;
pthread_mutex_lock (&mLock);
pthread_mutex_lock (&mLock2);
pthread_mutex_lock (&mLock3);
foo3 (p3_15);
if (tmp_26(D) > 10)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_7 = p99;
MEM[(int *)_7 + 4B] = 200;
*p3_15 = 10;
free (p3_15);
_33 = p3_15;
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
*p4_17 = 10;
free (p4_17);
_29 = p4_17;

=======is loop:0=========
<bb 5> [100.00%]:
# _8 = PHI <p3_15(3), p4_17(4)>
return _8;

=======is loop:0=========
=======Mapping node_fun:foo6=========
<bb 2> [100.00%]:
_1 = (long unsigned int) z_5(D);
a2_8 = malloc (_1);
_2 = (long unsigned int) z_5(D);
p3_10 = malloc (_2);
_3 = (long unsigned int) z_5(D);
p4_12 = malloc (_3);
if (tmp_13(D) > 10)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_15 = p3_10;
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
_14 = p4_12;

=======is loop:0=========
<bb 5> [100.00%]:
# _4 = PHI <p3_10(3), p4_12(4)>
return _4;

=======is loop:0=========
=======Mapping node_fun:foo=========
<bb 2> [100.00%]:
p2_5 = malloc (1);
*p2_5 = 1;
_1 = p99;
MEM[(int *)_1 + 4B] = 1000;
_2 = p99;
MEM[(int *)_2 + 8B] = 200;
_11 = foo2 (z_9(D));
return _11;

=======is loop:0=========
=======Mapping node_fun:child4=========
<bb 2> [100.00%]:
if (t_7(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_1 = data;
_2 = *_1;
_3 = data;
_4 = _2 + 1;
*_3 = _4;
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
_5 = data;
*_5 = 2;

=======is loop:0=========
<bb 5> [100.00%]:
_11 = __printf_chk (1, "asdda%d\n", &data);
return;

=======is loop:0=========
=======Mapping node_fun:child3=========
<bb 2> [100.00%]:
_1 = pthread_self ();
pthread_detach (_1);
_6 = __printf_chk (1, "asdda%d\n", &MEM[(void *)&data + 4B]);
_5 = __printf_chk (1, "asdda%d\n", 10);
free (&data);
return;

=======is loop:0=========
=======Mapping node_fun:child5=========
<bb 2> [100.00%]:
_1 = pthread_self ();
pthread_detach (_1);
pData_6 = data_5(D) + 4;
if (c_7(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_9 = __printf_chk (1, "asdda%d\n", pData_6);
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
_10 = __printf_chk (1, "asdda%d\n", c_7(D));
free (pData_6);

=======is loop:0=========
<bb 5> [100.00%]:
return;

=======is loop:0=========
=======Mapping node_fun:child7=========
<bb 2> [100.00%]:
_1 = pthread_self ();
pthread_detach (_1);
if (c_9(D) != 0)
  goto <bb 3>; [46.00%]
else
  goto <bb 4>; [54.00%]

=======is loop:0=========
<bb 3> [46.00%]:
_2 = p98;
MEM[(int *)_2 + 12B] = 300;
_15 = malloc (10);
goto <bb 5>; [100.00%]

=======is loop:0=========
<bb 4> [54.00%]:
_3 = p98;
MEM[(int *)_3 + 8B] = 300;
_16 = __printf_chk (1, "asdda%d\n", c_9(D));
_12 = malloc (30);

=======is loop:0=========
<bb 5> [100.00%]:
# _4 = PHI <_15(3), _12(4)>
return _4;

=======is loop:0=========
=======Mapping node_fun:boo=========
<bb 2> [100.00%]:
free (b_2(D));
free (b_2(D));
test22 (b_2(D));
_6 = __printf_chk (1, "asdda\n");
return;

=======is loop:0=========
=======Mapping node_fun:test22=========
<bb 2> [100.00%]:
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
free (k_2(D));
w_10 = malloc (5);
free (w_10);
return;

=======is loop:0=========
=======Mapping node_fun:child=========
<bb 2> [100.00%]:
pthread_mutex_lock (&mLock);
pthread_mutex_lock (&mLock);
a99_16 = foo (20);
_38 = __printf_chk (1, "asdda%d\n", a99_16);
ppData_18 = malloc (10);
_1 = data;
pData = _1;
pData2_21 = malloc (10);
_2 = pData;
_3 = *_2;
_4 = pData;
_5 = _3 + 1;
*_4 = _5;
data2 = 0;
data = 10B;
pData = &data2;
_6 = pData;
*_6 = 10;
_7 = pData;
*_7 = 12;
child4 (&data);
child3 (&data);
child5 (pData2_21);
_8 = p98;
*_8 = 98;
_9 = pData;
free (_9);
_10 = data;
free (_10);
_11 = data;
boo (_11);
free (&pData);
pthread_mutex_unlock (&mLock);
free (&pData);
pData ={v} {CLOBBER};
data2 ={v} {CLOBBER};
return;

=======is loop:0=========
=======Mapping node_fun:child2=========
<bb 2> [100.00%]:
_1 = p98;
MEM[(int *)_1 + 4B] = 99;
_2 = data_8(D);
child3 (_2);
_3 = data_8(D);
free (_3);
return;

=======is loop:0=========
=======Mapping node_fun:main=========
<bb 2> [25.00%]:
size_88 = 2;
_1 = 2;
_2 = 2;
_3 = 32;
a_56 = malloc (32);
goto <bb 4>; [100.00%]

=======is loop:0=========
<bb 3> [50.01%]:
_4 = (long unsigned int) i_39;
_5 = _4 * 16;
_6 = a_56 + _5;
_6->name = "Testname";
_7 = (long unsigned int) i_39;
_8 = _7 * 16;
_9 = a_56 + _8;
_9->nummer = 123;
i_113 = i_39 + 1;

=======is loop:1=========
<bb 4> [75.01%]:
# i_39 = PHI <0(2), i_113(3)>
_10 = 2;
if (i_39 <= 1)
  goto <bb 3>; [66.67%]
else
  goto <bb 5>; [33.33%]

=======is loop:1=========
<bb 5> [25.00%]:
free (a_56);
goto <bb 7>; [100.00%]

=======is loop:0=========
<bb 6> [50.01%]:
_11 = (long unsigned int) i_40;
_12 = _11 * 16;
_13 = a_56 + _12;
_14 = _13->nummer;
_15 = (long unsigned int) i_40;
_16 = _15 * 16;
_17 = a_56 + _16;
_18 = _17->name;
_100 = __printf_chk (1, "%s, %d\n", _18, _14);
i_110 = i_40 + 1;

=======is loop:1=========
<bb 7> [75.01%]:
# i_40 = PHI <0(5), i_110(6)>
_19 = 2;
if (i_40 <= 1)
  goto <bb 6>; [66.67%]
else
  goto <bb 8>; [33.33%]

=======is loop:1=========
<bb 8> [25.00%]:
input[0] = 1;
input[1] = 2;
pthread_attr_init (&attr);
pthread_attr_init (&attr2);
pthread_attr_setdetachstate (&attr, 1);
pthread_attr_setdetachstate (&attr2, 0);
_20 = (long int) input2_64(D);
_21 = (void *) _20;
pthread_create (&t, &attr2, child2, _21);
_22 = t;
pthread_join (_22, 0B);
goto <bb 10>; [100.00%]

=======is loop:0=========
<bb 9> [75.00%]:
_23 = &t2[i_41];
err_108 = pthread_create (_23, &attr2, child, 0B);
_24 = t2[i_41];
_114 = __printf_chk (1, "%ld\n", _24);
i_109 = i_41 + 1;

=======is loop:1=========
<bb 10> [100.00%]:
# i_41 = PHI <0(8), i_109(9)>
if (i_41 <= 2)
  goto <bb 9>; [75.00%]
else
  goto <bb 11>; [25.00%]

=======is loop:1=========
<bb 11> [25.00%]:
q_68 = malloc (70);
q2_70 = malloc (20);
_25 = q_68 != 0B;
_26 = test_71(D) != 0;
_27 = _25 & _26;
if (_27 != 0)
  goto <bb 12>; [50.00%]
else
  goto <bb 13>; [50.00%]

=======is loop:0=========
<bb 12> [12.50%]:
_28 = (long int) test_71(D);
_29 = (void *) _28;
q_74 = child7 (_29, q_68);
*q_74 = 10;
free (q_74);
goto <bb 14>; [100.00%]

=======is loop:0=========
<bb 13> [12.50%]:
*q_68 = 20;
_115 = __printf_chk (1, "test\n");

=======is loop:0=========
<bb 14> [25.00%]:
# q_42 = PHI <q_74(12), q_68(13)>
if (test_71(D) != 0)
  goto <bb 15>; [50.00%]
else
  goto <bb 16>; [50.00%]

=======is loop:0=========
<bb 15> [12.50%]:
q3_80 = malloc (10);
goto <bb 17>; [100.00%]

=======is loop:0=========
<bb 16> [12.50%]:
q3_78 = foo6 (10);

=======is loop:0=========
<bb 17> [25.00%]:
# q3_43 = PHI <q3_80(15), q3_78(16)>
_116 = __printf_chk (1, "tes%dt\n", q3_43);
goto <bb 19>; [100.00%]

=======is loop:0=========
<bb 18> [75.00%]:
_30 = t2[i_44];
pthread_join (_30, 0B);
i_106 = i_44 + 1;

=======is loop:1=========
<bb 19> [100.00%]:
# i_44 = PHI <0(17), i_106(18)>
if (i_44 <= 2)
  goto <bb 18>; [75.00%]
else
  goto <bb 20>; [25.00%]

=======is loop:1=========
<bb 20> [25.00%]:
_31 = staticTrue;
if (_31 != 0)
  goto <bb 21>; [33.00%]
else
  goto <bb 24>; [67.00%]

=======is loop:0=========
<bb 21> [8.25%]:
data_83 = malloc (400);
if (data_83 == 0B)
  goto <bb 22>; [0.04%]
else
  goto <bb 23>; [99.96%]

=======is loop:0=========
<bb 22> [0.00%]:
exit (-1);

=======is loop:0=========
<bb 23> [8.25%]:
free (data_83);

=======is loop:0=========
<bb 24> [25.00%]:
# data_45 = PHI <0B(20), data_83(23)>
_32 = staticTrue;
if (_32 != 0)
  goto <bb 25>; [36.64%]
else
  goto <bb 26>; [63.36%]

=======is loop:0=========
<bb 25> [9.16%]:
free (data_45);

=======is loop:0=========
<bb 26> [25.00%]:
_33 = foo5 (q_42, q_42);
_117 = __printf_chk (1, "123%d\n", _33);
p4_90 = malloc (10);
child4 (1B);
_34 = (long int) test_71(D);
_35 = (void *) _34;
p4_93 = child7 (_35, 1B);
free (p4_93);
_36 = malloc (201);
p98 = _36;
_37 = p98;
child (_37);
_38 = p98;
free (_38);
input ={v} {CLOBBER};
attr ={v} {CLOBBER};
attr2 ={v} {CLOBBER};
t ={v} {CLOBBER};
t2 ={v} {CLOBBER};
return 0;

=======is loop:0=========
time: 0.059897 s
test.c: In function â€˜child3â€™:
test.c:290:2: warning: attempt to free a non-heap object â€˜dataâ€™ [-Wfree-nonheap-object]
  free(&data);
  ^
test.c: In function â€˜childâ€™:
test.c:221:2: warning: attempt to free a non-heap object â€˜data2â€™ [-Wfree-nonheap-object]
  free(pData);
  ^
test.c:224:2: warning: attempt to free a non-heap object â€˜pDataâ€™ [-Wfree-nonheap-object]
  free(ppData);
  ^
test.c:226:2: warning: attempt to free a non-heap object â€˜pDataâ€™ [-Wfree-nonheap-object]
  free(ppData);
  ^
