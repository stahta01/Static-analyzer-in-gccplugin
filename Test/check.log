../Compiler/newplugin.so 11.2.0 
test.c: In function â€˜changePtrâ€™:
test.c:52:13: warning: assignment to â€˜int **â€™ from incompatible pointer type â€˜int *â€™ [-Wincompatible-pointer-types]
   52 |         ptr = (int *)malloc(40);
      |             ^

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  1298k ( 58%)
 phase parsing                      :   0.02 (100%)   0.02 (100%)   0.03 ( 75%)   861k ( 38%)
 phase opt and generate             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 25%)    75k (  3%)
 callgraph ipa passes               :   0.00 (  0%)   0.00 (  0%)   0.01 ( 25%)    46k (  2%)
 lto stream compression             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 25%)     0  (  0%)
 preprocessing                      :   0.01 ( 50%)   0.00 (  0%)   0.00 (  0%)   257k ( 11%)
 parser (global)                    :   0.00 (  0%)   0.00 (  0%)   0.02 ( 50%)   541k ( 24%)
 parser function body               :   0.01 ( 50%)   0.01 ( 50%)   0.00 (  0%)    19k (  1%)
 parser inl. func. body             :   0.00 (  0%)   0.01 ( 50%)   0.01 ( 25%)  8640  (  0%)
 TOTAL                              :   0.02          0.02          0.04         2245k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)  2157k ( 98%)
 TOTAL                              :   0.00          0.00          0.01         2191k
../Compiler/newplugin.so 11.2.0 
--------plugin argument-----------
debugmod 1
vscode_extensionmod 1
==============breakpoint=========
/root/x21321219/new_gccplugin/Test/test.c 185
/root/x21321219/new_gccplugin/Test/test.c 189
/root/x21321219/new_gccplugin/Test/test.c 194
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
node:= 2 
 	next_branch :=4
# .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
set breakpoint /root/x21321219/new_gccplugin/Test/test.c 185
# .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
set breakpoint /root/x21321219/new_gccplugin/Test/test.c 189
set breakpoint free stmt igone
In function â€˜mainâ€™:
test.c:192:5: warning: use location
  192 |     free(b);
      |     ^
# .MEM_36 = VDEF <.MEM_35>
arr3_22 = realloc (a_13, 20);
set breakpoint /root/x21321219/new_gccplugin/Test/test.c 194
node:= 3 
 	next_branch :=4
node:= 4 
 	next_branch :=3
	next_branch :=5
=======node_fun:foo2=========
set breakpoint free stmt igone
In function â€˜foo2â€™:
test.c:178:4: warning: use location
  178 |    free(e);
      |    ^
set breakpoint free stmt igone
test.c:179:4: warning: use location
  179 |    free(ptr);
      |    ^
=======node_fun:foo=========
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 6 
===============The second stage : Mapping stmt=================
# .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
# .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
set breakpoint /root/x21321219/new_gccplugin/Test/test.c 185
# .MEM_30 = VDEF <.MEM_29>
foo2 (a_13);
# .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
# .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
set breakpoint /root/x21321219/new_gccplugin/Test/test.c 189
# .MEM_33 = VDEF <.MEM_32>
foo2 (_1);
# .MEM_35 = VDEF <.MEM_34>
printf ("%d\n", &c);
# .MEM_38 = VDEF <.MEM_27>
printf ("arr3 %p\n", _4);
# .MEM_39 = VDEF <.MEM_38>
printf ("arr3[%d] = %d\n", i_9, _8);
# .MEM_8 = VDEF <.MEM_7(D)>
e_3 = malloc (1);
# .MEM_9 = VDEF <.MEM_8>
printf ("%d\n", e_3);
# .MEM_5 = VDEF <.MEM_4(D)>
ptr1_3 = malloc (20);
===============The second stage : Program slicing=================
_4 = arr3_22 + _3;
_7 = arr3_22 + _6;
 <ssa_name 0x7ffbb2042870
    type <pointer_type 0x7ffbb20569d8
        type <integer_type 0x7ffbb204f5e8 int public SI
            size <integer_cst 0x7ffbb203adf8 constant 32>
            unit-size <integer_cst 0x7ffbb203ae10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7ffbb204f5e8 precision:32 min <integer_cst 0x7ffbb203adb0 -2147483648> max <integer_cst 0x7ffbb203adc8 2147483647>
            pointer_to_this <pointer_type 0x7ffbb20569d8>>
        public unsigned DI
        size <integer_cst 0x7ffbb203abb8 constant 64>
        unit-size <integer_cst 0x7ffbb203abd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7ffbb1b551f8>>
    var <var_decl 0x7ffbb28e2cf0 a>
    def_stmt a_13 = malloc (1);
    version:13
    ptr-info 0x7ffbb1b5a228>
=============== *this point analyzable =================
a_13 = malloc (1);
=============== program slcing stmt count:3=================
At top level:
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
========================================================
# .MEM_32 = VDEF <.MEM_31>
c = b_16;
# VUSE <.MEM_32>
_1 = c;
# .MEM_35 = VDEF <.MEM_34>
printf ("%d\n", &c);
# .MEM_32 = VDEF <.MEM_31>
c = b_16;
# VUSE <.MEM_32>
_1 = c;
# .MEM_35 = VDEF <.MEM_34>
printf ("%d\n", &c);
=============== *this point analyzable =================
b_16 = foo ();
=============== program slcing stmt count:3=================
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
========================================================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================
[40;44m =======print_function_path main  function_call count: 6 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:foo2========= [0m
[40;44m =======print_function_path foo2  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;42m =======pre_check_funciton:foo2========= [0m
[40;42m =======start_check_funciton:foo2========= [0m
[40;42m =======pre add _ fucntion:foo========= [0m
[40;44m =======print_function_path foo  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======start_check_funciton:foo========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7ffbb2042870
    type <pointer_type 0x7ffbb20569d8
        type <integer_type 0x7ffbb204f5e8 int public SI
            size <integer_cst 0x7ffbb203adf8 constant 32>
            unit-size <integer_cst 0x7ffbb203ae10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7ffbb204f5e8 precision:32 min <integer_cst 0x7ffbb203adb0 -2147483648> max <integer_cst 0x7ffbb203adc8 2147483647>
            pointer_to_this <pointer_type 0x7ffbb20569d8>>
        public unsigned DI
        size <integer_cst 0x7ffbb203abb8 constant 64>
        unit-size <integer_cst 0x7ffbb203abd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7ffbb1b551f8>>
    var <var_decl 0x7ffbb28e2cf0 a>
    def_stmt a_13 = malloc (1);
    version:13
    ptr-info 0x7ffbb1b5a228>
 <ssa_name 0x7ffbb2042870
    type <pointer_type 0x7ffbb20569d8
        type <integer_type 0x7ffbb204f5e8 int public SI
            size <integer_cst 0x7ffbb203adf8 constant 32>
            unit-size <integer_cst 0x7ffbb203ae10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7ffbb204f5e8 precision:32 min <integer_cst 0x7ffbb203adb0 -2147483648> max <integer_cst 0x7ffbb203adc8 2147483647>
            pointer_to_this <pointer_type 0x7ffbb20569d8>>
        public unsigned DI
        size <integer_cst 0x7ffbb203abb8 constant 64>
        unit-size <integer_cst 0x7ffbb203abd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7ffbb1b551f8>>
    var <var_decl 0x7ffbb28e2cf0 a>
    def_stmt a_13 = malloc (1);
    version:13
    ptr-info 0x7ffbb1b5a228>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

arr3_22 = realloc (a_13, 20);
In function â€˜mainâ€™:
test.c:194:28: warning: use location
  194 |         int *arr3 = (int *)realloc( a, sizeof(int) * 5);
      |                            ^
dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: arr3_22 = realloc (a_13, 20);
test.c:194:28: warning: use location
  194 |         int *arr3 = (int *)realloc( a, sizeof(int) * 5);
      |                            ^
dot graph target line desend

dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start arr3_22 = realloc (a_13, 20);
a_13 = malloc (1);
dot graph stmt end

dot graph stmt start arr3_22 = realloc (a_13, 20);
test.c:194:28: warning: use location
  194 |         int *arr3 = (int *)realloc( a, sizeof(int) * 5);
      |                            ^
dot graph stmt end

dot graph target color descreddot graph target color desend

If realloc() fails, the initial memory block will not be freed() this stmt call this function :realloc

 ================== find free stmt ================== 
arr3_22 = realloc (a_13, 20);
test.c:194:28: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_8 = *_7;
test.c:198:9: warning: use location
  198 |         printf("arr3[%d] = %d\n", i, *(arr3 + i));
      |         ^
dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _8 = *_7;
test.c:198:9: warning: use location
  198 |         printf("arr3[%d] = %d\n", i, *(arr3 + i));
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _8 = *_7;
a_13 = malloc (1);
dot graph stmt end

dot graph stmt start _8 = *_7;
test.c:198:9: warning: use location
  198 |         printf("arr3[%d] = %d\n", i, *(arr3 + i));
      |         ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

printf ("arr3[%d] = %d\n", i_9, _8);
test.c:198:9: warning: use location
dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 3: printf ("arr3[%d] = %d\n", i_9, _8);
test.c:198:9: warning: use location
  198 |         printf("arr3[%d] = %d\n", i, *(arr3 + i));
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start printf ("arr3[%d] = %d\n", i_9, _8);
a_13 = malloc (1);
dot graph stmt end

dot graph stmt start printf ("arr3[%d] = %d\n", i_9, _8);
test.c:198:9: warning: use location
  198 |         printf("arr3[%d] = %d\n", i, *(arr3 + i));
      |         ^
dot graph stmt end

this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

_4 = arr3_22 + _3;
test.c:197:9: warning: use location
  197 |         printf("arr3 %p\n", (arr3 + i));
      |         ^
dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 3: _4 = arr3_22 + _3;
test.c:197:9: warning: use location
  197 |         printf("arr3 %p\n", (arr3 + i));
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start _4 = arr3_22 + _3;
a_13 = malloc (1);
dot graph stmt end

dot graph stmt start _4 = arr3_22 + _3;
test.c:197:9: warning: use location
  197 |         printf("arr3 %p\n", (arr3 + i));
      |         ^
dot graph stmt end


======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
dot graph entry main
dot graph target entry end

printf ("arr3 %p\n", _4);
test.c:197:9: warning: use location
dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 3: printf ("arr3 %p\n", _4);
test.c:197:9: warning: use location
  197 |         printf("arr3 %p\n", (arr3 + i));
      |         ^
dot graph target line desend

dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start printf ("arr3 %p\n", _4);
a_13 = malloc (1);
dot graph stmt end

dot graph stmt start printf ("arr3 %p\n", _4);
test.c:197:9: warning: use location
  197 |         printf("arr3 %p\n", (arr3 + i));
      |         ^
dot graph stmt end

this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:1 
dot graph entry main
dot graph target entry end

foo2 (a_13);
test.c:187:5: warning: use location
  187 |     foo2(b);
      |     ^
dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
dot graph target loc en1

dot graph target line desc form basic block 2: foo2 (a_13);
test.c:187:5: warning: use location
  187 |     foo2(b);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start foo2 (a_13);
a_13 = malloc (1);
dot graph stmt end

dot graph stmt start foo2 (a_13);
test.c:187:5: warning: use location
  187 |     foo2(b);
      |     ^
dot graph stmt end

this stmt call this function :foo2
trace fucntion name:foo2 
[40;44m =======trace_function_path foo2  function_call count: 3 level :0========  [0m
# .MEM_10 = VDEF <.MEM_9>
free (e_3);
# .MEM_11 = VDEF <.MEM_10>
free (ptr_6(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ptr_6(D));
test.c:179:4: warning: use location
  179 |    free(ptr);
      |    ^
dot graph start relate form ID : 709960977
from foo2 basic block 2dot graph end relate end

dot graph relate stmt start ID : 199503254 stmt(free) :free (ptr_6(D));
test.c:179:4: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 199503254 stmt(free) :free (ptr_6(D));
test.c:179:4: warning: use location
dot graph relate end

 <ssa_name 0x7ffbb2042870
    type <pointer_type 0x7ffbb20569d8
        type <integer_type 0x7ffbb204f5e8 int public SI
            size <integer_cst 0x7ffbb203adf8 constant 32>
            unit-size <integer_cst 0x7ffbb203ae10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7ffbb204f5e8 precision:32 min <integer_cst 0x7ffbb203adb0 -2147483648> max <integer_cst 0x7ffbb203adc8 2147483647>
            pointer_to_this <pointer_type 0x7ffbb20569d8>>
        public unsigned DI
        size <integer_cst 0x7ffbb203abb8 constant 64>
        unit-size <integer_cst 0x7ffbb203abd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7ffbb1b551f8>>
    var <var_decl 0x7ffbb28e2cf0 a>
    def_stmt a_13 = malloc (1);
    version:13
    ptr-info 0x7ffbb1b5a228>
[40;36m ======= node_fun:foo2========= [0m
[40;36m ======= find relate stmt with a ========= [0m
dot graph arrowdot graph start relate for1ID : 709960977
from foo2 basic block 2dot graph end relate end

e_3 = malloc (1);
dot graph relate stmt start ID : 2070963740 stmt(call) :In function â€˜foo2â€™:
test.c:176:11: warning: use location
  176 |    int *e=malloc(1);
      |           ^
1
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:2 
# .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
dot graph entry main
dot graph target entry end

a_13 = malloc (1);
In function â€˜mainâ€™:
test.c:185:8: warning: use location
  185 |     a =malloc(1);
      |        ^
dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: a_13 = malloc (1);
test.c:185:8: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_29 = VDEF <.MEM_28(D)>
a_13 = malloc (1);
test.c:185:8: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start a_13 = malloc (1);
a_13 = malloc (1);
dot graph stmt end

dot graph stmt start a_13 = malloc (1);
test.c:185:8: warning: use location
dot graph stmt end

this stmt call this function :malloc
dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_794430502 dot graph subgraph  _8 = *_7;
_7 = arr3_22 + _6;
dot graph subgrapend

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1947535983 dot graph subgraph  printf ("arr3[%d] = %d\n", i_9, _8);
_8 = *_7;
dot graph subgrapend

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_988159641 dot graph subgraph  _4 = arr3_22 + _3;
arr3_22 = realloc (a_13, 20);
dot graph subgrapend

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph arrowsubgraph cluster_1870846401 dot graph subgraph  printf ("arr3 %p\n", _4);
_4 = arr3_22 + _3;
dot graph subgrapend

dot graph start relate for1ID : 709960977
from foo2 basic block 2dot graph end relate end

subgraph cluster_863497327 dot graph subgraph  start ID : 2070963740 stmt(relate) ï¼Œ Tree ID : 709960977 : e_3 = malloc (1);
test.c:176:11: warning: use location
  176 |    int *e=malloc(1);
      |           ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_36 = VDEF <.MEM_35>
arr3_22 = realloc (a_13, 20);
test.c:194:28: warning: use location
  194 |         int *arr3 = (int *)realloc( a, sizeof(int) * 5);
      |                            ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_30 = VDEF <.MEM_29>
foo2 (a_13);
test.c:187:5: warning: free in this location
  187 |     foo2(b);
      |     ^

===== possiable asias =====
# .MEM_36 = VDEF <.MEM_35>
arr3_22 = realloc (a_13, 20);
test.c:194:28: warning: use location
  194 |         int *arr3 = (int *)realloc( a, sizeof(int) * 5);
      |                            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_36 = VDEF <.MEM_35>
arr3_22 = realloc (a_13, 20);
test.c:194:28: warning: free in this location

===== possiable asias =====
# VUSE <.MEM_38>
_8 = *_7;
test.c:198:9: warning: use location
  198 |         printf("arr3[%d] = %d\n", i, *(arr3 + i));
      |         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_29>
foo2 (a_13);
test.c:187:5: warning: free in this location
  187 |     foo2(b);
      |     ^

===== possiable asias =====
# VUSE <.MEM_38>
_8 = *_7;
test.c:198:9: warning: use location
  198 |         printf("arr3[%d] = %d\n", i, *(arr3 + i));
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_36 = VDEF <.MEM_35>
arr3_22 = realloc (a_13, 20);
test.c:194:28: warning: free in this location
  194 |         int *arr3 = (int *)realloc( a, sizeof(int) * 5);
      |                            ^

===== possiable asias =====
# VUSE <.MEM_38>
_8 = *_7;
test.c:198:9: warning: use location
  198 |         printf("arr3[%d] = %d\n", i, *(arr3 + i));
      |         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_36 = VDEF <.MEM_35>
arr3_22 = realloc (a_13, 20);
test.c:194:28: warning: free in this location
  194 |         int *arr3 = (int *)realloc( a, sizeof(int) * 5);
      |                            ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
printf ("arr3[%d] = %d\n", i_9, _8);
test.c:198:9: warning: use location
  198 |         printf("arr3[%d] = %d\n", i, *(arr3 + i));
      |         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_29>
foo2 (a_13);
test.c:187:5: warning: free in this location
  187 |     foo2(b);
      |     ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
printf ("arr3[%d] = %d\n", i_9, _8);
test.c:198:9: warning: use location
  198 |         printf("arr3[%d] = %d\n", i, *(arr3 + i));
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_36 = VDEF <.MEM_35>
arr3_22 = realloc (a_13, 20);
test.c:194:28: warning: free in this location
  194 |         int *arr3 = (int *)realloc( a, sizeof(int) * 5);
      |                            ^

===== possiable asias =====
# .MEM_39 = VDEF <.MEM_38>
printf ("arr3[%d] = %d\n", i_9, _8);
test.c:198:9: warning: use location
  198 |         printf("arr3[%d] = %d\n", i, *(arr3 + i));
      |         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_36 = VDEF <.MEM_35>
arr3_22 = realloc (a_13, 20);
test.c:194:28: warning: free in this location
  194 |         int *arr3 = (int *)realloc( a, sizeof(int) * 5);
      |                            ^

===== possiable asias =====
_4 = arr3_22 + _3;
test.c:197:9: warning: use location
  197 |         printf("arr3 %p\n", (arr3 + i));
      |         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_29>
foo2 (a_13);
test.c:187:5: warning: free in this location
  187 |     foo2(b);
      |     ^

===== possiable asias =====
_4 = arr3_22 + _3;
test.c:197:9: warning: use location
  197 |         printf("arr3 %p\n", (arr3 + i));
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_36 = VDEF <.MEM_35>
arr3_22 = realloc (a_13, 20);
test.c:194:28: warning: free in this location
  194 |         int *arr3 = (int *)realloc( a, sizeof(int) * 5);
      |                            ^

===== possiable asias =====
_4 = arr3_22 + _3;
test.c:197:9: warning: use location
  197 |         printf("arr3 %p\n", (arr3 + i));
      |         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_36 = VDEF <.MEM_35>
arr3_22 = realloc (a_13, 20);
test.c:194:28: warning: free in this location
  194 |         int *arr3 = (int *)realloc( a, sizeof(int) * 5);
      |                            ^

===== possiable asias =====
# .MEM_38 = VDEF <.MEM_27>
printf ("arr3 %p\n", _4);
test.c:197:9: warning: use location
  197 |         printf("arr3 %p\n", (arr3 + i));
      |         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_30 = VDEF <.MEM_29>
foo2 (a_13);
test.c:187:5: warning: free in this location
  187 |     foo2(b);
      |     ^

===== possiable asias =====
# .MEM_38 = VDEF <.MEM_27>
printf ("arr3 %p\n", _4);
test.c:197:9: warning: use location
  197 |         printf("arr3 %p\n", (arr3 + i));
      |         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_36 = VDEF <.MEM_35>
arr3_22 = realloc (a_13, 20);
test.c:194:28: warning: free in this location
  194 |         int *arr3 = (int *)realloc( a, sizeof(int) * 5);
      |                            ^

===== possiable asias =====
# .MEM_38 = VDEF <.MEM_27>
printf ("arr3 %p\n", _4);
test.c:197:9: warning: use location
  197 |         printf("arr3 %p\n", (arr3 + i));
      |         ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7ffbb20428b8
    type <pointer_type 0x7ffbb20569d8
        type <integer_type 0x7ffbb204f5e8 int public SI
            size <integer_cst 0x7ffbb203adf8 constant 32>
            unit-size <integer_cst 0x7ffbb203ae10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7ffbb204f5e8 precision:32 min <integer_cst 0x7ffbb203adb0 -2147483648> max <integer_cst 0x7ffbb203adc8 2147483647>
            pointer_to_this <pointer_type 0x7ffbb20569d8>>
        public unsigned DI
        size <integer_cst 0x7ffbb203abb8 constant 64>
        unit-size <integer_cst 0x7ffbb203abd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7ffbb1b551f8>>
    var <var_decl 0x7ffbb28e2c60 b>
    def_stmt b_16 = foo ();
    version:16
    ptr-info 0x7ffbb1b5a240>
 <ssa_name 0x7ffbb20428b8
    type <pointer_type 0x7ffbb20569d8
        type <integer_type 0x7ffbb204f5e8 int public SI
            size <integer_cst 0x7ffbb203adf8 constant 32>
            unit-size <integer_cst 0x7ffbb203ae10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7ffbb204f5e8 precision:32 min <integer_cst 0x7ffbb203adb0 -2147483648> max <integer_cst 0x7ffbb203adc8 2147483647>
            pointer_to_this <pointer_type 0x7ffbb20569d8>>
        public unsigned DI
        size <integer_cst 0x7ffbb203abb8 constant 64>
        unit-size <integer_cst 0x7ffbb203abd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7ffbb1b551f8>>
    var <var_decl 0x7ffbb28e2c60 b>
    def_stmt b_16 = foo ();
    version:16
    ptr-info 0x7ffbb1b5a240>

 ================== pre trace ptable ================== 
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_5>
return ptr1_3;
test.c:172:12: warning: use location
  172 |     return ptr1;
      |            ^
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7ffbb20428b8
    type <pointer_type 0x7ffbb20569d8
        type <integer_type 0x7ffbb204f5e8 int public SI
            size <integer_cst 0x7ffbb203adf8 constant 32>
            unit-size <integer_cst 0x7ffbb203ae10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7ffbb204f5e8 precision:32 min <integer_cst 0x7ffbb203adb0 -2147483648> max <integer_cst 0x7ffbb203adc8 2147483647>
            pointer_to_this <pointer_type 0x7ffbb20569d8>>
        public unsigned DI
        size <integer_cst 0x7ffbb203abb8 constant 64>
        unit-size <integer_cst 0x7ffbb203abd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7ffbb1b551f8>>
    var <var_decl 0x7ffbb28e2c60 b>
    def_stmt b_16 = foo ();
    version:16
    ptr-info 0x7ffbb1b5a240>
is Other function foo
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

free (b_16);
test.c:192:5: warning: use location
  192 |     free(b);
      |     ^
dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: free (b_16);
test.c:192:5: warning: use location
  192 |     free(b);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start free (b_16);
b_16 = foo ();
dot graph stmt end

dot graph stmt start free (b_16);
test.c:192:5: warning: use location
  192 |     free(b);
      |     ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt call this function :free

 ================== find free stmt ================== 
free (b_16);
test.c:192:5: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
dot graph entry main
dot graph target entry end

c = b_16;
test.c:190:7: warning: use location
  190 |     c = b;
      |       ^
dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: c = b_16;
test.c:190:7: warning: use location
  190 |     c = b;
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start c = b_16;
b_16 = foo ();
dot graph stmt end

dot graph stmt start c = b_16;
test.c:190:7: warning: use location
  190 |     c = b;
      |       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

c = b_16;
test.c:190:7: warning: use location
dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: c = b_16;
test.c:190:7: warning: use location
  190 |     c = b;
      |       ^
dot graph target line desend

dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start c = b_16;
b_16 = foo ();
dot graph stmt end

dot graph stmt start c = b_16;
test.c:190:7: warning: use location
  190 |     c = b;
      |       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_1 = c;
test.c:191:5: warning: use location
  191 |     foo2(c);
      |     ^
dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: _1 = c;
test.c:191:5: warning: use location
  191 |     foo2(c);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start _1 = c;
b_16 = foo ();
dot graph stmt end

dot graph stmt start _1 = c;
test.c:191:5: warning: use location
  191 |     foo2(c);
      |     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

foo2 (_1);
test.c:191:5: warning: use location
dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: foo2 (_1);
test.c:191:5: warning: use location
  191 |     foo2(c);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start foo2 (_1);
b_16 = foo ();
dot graph stmt end

dot graph stmt start foo2 (_1);
test.c:191:5: warning: use location
  191 |     foo2(c);
      |     ^
dot graph stmt end

this stmt call this function :foo2
trace fucntion name:foo2 
[40;44m =======trace_function_path foo2  function_call count: 3 level :0========  [0m
# .MEM_10 = VDEF <.MEM_9>
free (e_3);
# .MEM_11 = VDEF <.MEM_10>
free (ptr_6(D));
[40;31m  find free stmt free same pointer [0m
# .MEM_11 = VDEF <.MEM_10>
free (ptr_6(D));
test.c:179:4: warning: use location
  179 |    free(ptr);
      |    ^
dot graph start relate form ID : 1559108380
from foo2 basic block 2dot graph end relate end

dot graph relate stmt start ID : 4034184 stmt(free) :free (ptr_6(D));
test.c:179:4: warning: use location
dot graph relate end

dot graph target color descgreendot graph target color desend

dot graph relate stmt start ID : 4034184 stmt(free) :free (ptr_6(D));
test.c:179:4: warning: use location
dot graph relate end

 <ssa_name 0x7ffbb20428b8
    type <pointer_type 0x7ffbb20569d8
        type <integer_type 0x7ffbb204f5e8 int public SI
            size <integer_cst 0x7ffbb203adf8 constant 32>
            unit-size <integer_cst 0x7ffbb203ae10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7ffbb204f5e8 precision:32 min <integer_cst 0x7ffbb203adb0 -2147483648> max <integer_cst 0x7ffbb203adc8 2147483647>
            pointer_to_this <pointer_type 0x7ffbb20569d8>>
        public unsigned DI
        size <integer_cst 0x7ffbb203abb8 constant 64>
        unit-size <integer_cst 0x7ffbb203abd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7ffbb1b551f8>>
    var <var_decl 0x7ffbb28e2c60 b>
    def_stmt b_16 = foo ();
    version:16
    ptr-info 0x7ffbb1b5a240>
[40;36m ======= node_fun:foo2========= [0m
[40;36m ======= find relate stmt with b ========= [0m
dot graph arrowdot graph start relate for1ID : 1559108380
from foo2 basic block 2dot graph end relate end

e_3 = malloc (1);
dot graph relate stmt start ID : 1274700510 stmt(call) :In function â€˜foo2â€™:
test.c:176:11: warning: use location
  176 |    int *e=malloc(1);
      |           ^
1
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:2 
dot graph entry main
dot graph target entry end

printf ("%d\n", &c);
In function â€˜mainâ€™:
test.c:193:5: warning: use location
  193 |     printf("%d\n",&c);
      |     ^
dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: printf ("%d\n", &c);
test.c:193:5: warning: use location
  193 |     printf("%d\n",&c);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start printf ("%d\n", &c);
b_16 = foo ();
dot graph stmt end

dot graph stmt start printf ("%d\n", &c);
test.c:193:5: warning: use location
  193 |     printf("%d\n",&c);
      |     ^
dot graph stmt end

this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:2 
dot graph entry main
dot graph target entry end

printf ("%d\n", &c);
test.c:193:5: warning: use location
dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc en1

dot graph target line desc form basic block 2: printf ("%d\n", &c);
test.c:193:5: warning: use location
  193 |     printf("%d\n",&c);
      |     ^
dot graph target line desend

dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start printf ("%d\n", &c);
b_16 = foo ();
dot graph stmt end

dot graph stmt start printf ("%d\n", &c);
test.c:193:5: warning: use location
  193 |     printf("%d\n",&c);
      |     ^
dot graph stmt end

this stmt call this function :printf
trace fucntion name:printf 

 ================== trace ================== 
trace fucntion free:2 
# .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
dot graph entry main
dot graph target entry end

b_16 = foo ();
test.c:189:9: warning: use location
  189 |     b = foo();
      |         ^
dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 2: b_16 = foo ();
test.c:189:9: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_31 = VDEF <.MEM_30>
b_16 = foo ();
test.c:189:9: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start b_16 = foo ();
b_16 = foo ();
dot graph stmt end

dot graph stmt start b_16 = foo ();
test.c:189:9: warning: use location
dot graph stmt end

this stmt call this function :foo
trace fucntion name:foo 
[40;44m =======trace_function_path foo  function_call count: 1 level :0========  [0m
 <ssa_name 0x7ffbb20428b8
    type <pointer_type 0x7ffbb20569d8
        type <integer_type 0x7ffbb204f5e8 int public SI
            size <integer_cst 0x7ffbb203adf8 constant 32>
            unit-size <integer_cst 0x7ffbb203ae10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7ffbb204f5e8 precision:32 min <integer_cst 0x7ffbb203adb0 -2147483648> max <integer_cst 0x7ffbb203adc8 2147483647>
            pointer_to_this <pointer_type 0x7ffbb20569d8>>
        public unsigned DI
        size <integer_cst 0x7ffbb203abb8 constant 64>
        unit-size <integer_cst 0x7ffbb203abd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7ffbb1b551f8>>
    var <var_decl 0x7ffbb28e2c60 b>
    def_stmt b_16 = foo ();
    version:16
    ptr-info 0x7ffbb1b5a240>
[40;36m ======= node_fun:foo========= [0m
[40;36m ======= find relate stmt with b ========= [0m
dot graph arrowdot graph start relate for1ID : 1174538405
from foo basic block 2dot graph end relate end

ptr1_3 = malloc (20);
dot graph relate stmt start ID : 615532740 stmt(call) :In function â€˜fooâ€™:
test.c:171:19: warning: use location
  171 |     ptr1 = (int *)malloc(20);
      |                   ^
20
dot graph relate end

fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:2 
dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_636400146 dot graph subgraph  free (b_16);
b_16 = foo ();
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1622725251 dot graph subgraph  c = b_16;
b_16 = foo ();
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_845073076 dot graph subgraph  c = b_16;
b_16 = foo ();
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1365212770 dot graph subgraph  _1 = c;
b_16 = foo ();
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1355631886 dot graph subgraph  foo2 (_1);
_1 = c;
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1181545125 dot graph subgraph  printf ("%d\n", &c);
b_16 = foo ();
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_597586325 dot graph subgraph  printf ("%d\n", &c);
b_16 = foo ();
dot graph subgrapend

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph arrowsubgraph cluster_1258620906 dot graph subgraph  b_16 = foo ();
b_16 = foo ();
dot graph subgrapend

dot graph start relate for1ID : 1559108380
from foo2 basic block 2dot graph end relate end

subgraph cluster_794439166 dot graph subgraph  start ID : 1274700510 stmt(relate) ï¼Œ Tree ID : 1559108380 : e_3 = malloc (1);
In function â€˜mainâ€™:
test.c:176:11: warning: use location
  176 |    int *e=malloc(1);
      |           ^
dot graph subgrapend

dot graph start relate for1ID : 1174538405
from foo basic block 2dot graph end relate end

subgraph cluster_1813398397 dot graph subgraph  start ID : 615532740 stmt(relate) ï¼Œ Tree ID : 1174538405 : ptr1_3 = malloc (20);
test.c:171:19: warning: use location
  171 |     ptr1 = (int *)malloc(20);
      |                   ^
dot graph subgrapend


 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_33>
free (b_16);
test.c:192:5: warning: use location
  192 |     free(b);
      |     ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_33 = VDEF <.MEM_32>
foo2 (_1);
test.c:191:5: warning: free in this location
  191 |     foo2(c);
      |     ^

===== possiable asias =====
# .MEM_34 = VDEF <.MEM_33>
free (b_16);
test.c:192:5: warning: use location
  192 |     free(b);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_34 = VDEF <.MEM_33>
free (b_16);
test.c:192:5: warning: free in this location

===== possiable asias =====
# .MEM_35 = VDEF <.MEM_34>
printf ("%d\n", &c);
test.c:193:5: warning: use location
  193 |     printf("%d\n",&c);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_33 = VDEF <.MEM_32>
foo2 (_1);
test.c:191:5: warning: free in this location
  191 |     foo2(c);
      |     ^

===== possiable asias =====
# .MEM_35 = VDEF <.MEM_34>
printf ("%d\n", &c);
test.c:193:5: warning: use location
  193 |     printf("%d\n",&c);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_33>
free (b_16);
test.c:192:5: warning: free in this location
  192 |     free(b);
      |     ^

===== possiable asias =====
# .MEM_35 = VDEF <.MEM_34>
printf ("%d\n", &c);
test.c:193:5: warning: use location
  193 |     printf("%d\n",&c);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_34 = VDEF <.MEM_33>
free (b_16);
test.c:192:5: warning: free in this location
  192 |     free(b);
      |     ^

===== possiable asias =====
# .MEM_35 = VDEF <.MEM_34>
printf ("%d\n", &c);
test.c:193:5: warning: use location
  193 |     printf("%d\n",&c);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_33 = VDEF <.MEM_32>
foo2 (_1);
test.c:191:5: warning: free in this location
  191 |     foo2(c);
      |     ^

===== possiable asias =====
# .MEM_35 = VDEF <.MEM_34>
printf ("%d\n", &c);
test.c:193:5: warning: use location
  193 |     printf("%d\n",&c);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_33>
free (b_16);
test.c:192:5: warning: free in this location
  192 |     free(b);
      |     ^

===== possiable asias =====
# .MEM_35 = VDEF <.MEM_34>
printf ("%d\n", &c);
test.c:193:5: warning: use location
  193 |     printf("%d\n",&c);
      |     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;44m =======print_function_path foo2  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;42m =======pre_check_funciton:foo2========= [0m
[40;42m =======start_check_funciton:foo2========= [0m
[40;44m =======print_function_path foo  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;42m =======pre_check_funciton:foo========= [0m
[40;42m =======start_check_funciton:foo========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 178992760]:
a_13 = malloc (1);
foo2 (a_13);
b_16 = foo ();
c = b_16;
_1 = c;
foo2 (_1);
free (b_16);
printf ("%d\n", &c);
arr3_22 = realloc (a_13, 20);
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 894749065]:
_2 = (long unsigned int) i_9;
_3 = _2 * 4;
_4 = arr3_22 + _3;
printf ("arr3 %p\n", _4);
_5 = (long unsigned int) i_9;
_6 = _5 * 4;
_7 = arr3_22 + _6;
_8 = *_7;
printf ("arr3[%d] = %d\n", i_9, _8);
i_26 = i_9 + 1;

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# i_9 = PHI <0(2), i_26(3)>
if (i_9 <= 4)
  goto <bb 3>; [83.33%]
else
  goto <bb 5>; [16.67%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 178992760]:
c ={v} {CLOBBER};
return 0;

=======Mapping node_fun:foo2=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
e_3 = malloc (1);
printf ("%d\n", e_3);
free (e_3);
free (ptr_6(D));
return;

=======Mapping node_fun:foo=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
ptr1_3 = malloc (20);
return ptr1_3;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 2 [0m
[40;34m    gimple free   count : 3 [0m
[40;34m    all ptable point : 6 [0m
[40;34m    analyzable ptable point : 2 [0m
[40;34m    analyzable ptable all point stmt : 6 [0m
[40;34m    used_stmt array stack totalsize of : 0.000200 mb[0m
[40;34m    collect time: : 0.001688 s [0m
[40;34m    algorithm time: 0.011768 s [0m
[40;34m    gimple stmt count : : 29 [0m
[40;34m    this report analysis in Wed Mar  9 14:56:36 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.01 ( 33%)   0.00 (  0%)   0.00 (  0%)  2157k ( 90%)
 phase opt and generate             :   0.02 ( 67%)   0.01 (100%)   0.04 (100%)   222k (  9%)
 callgraph functions expansion      :   0.02 ( 67%)   0.01 (100%)   0.02 ( 50%)   174k (  7%)
 dead store elim1                   :   0.00 (  0%)   0.00 (  0%)   0.01 ( 25%)   416  (  0%)
 integrated RA                      :   0.00 (  0%)   0.00 (  0%)   0.01 ( 25%)    73k (  3%)
 plugin execution                   :   0.00 (  0%)   0.00 (  0%)   0.02 ( 50%)   240  (  0%)
 initialize rtl                     :   0.01 ( 33%)   0.01 (100%)   0.00 (  0%)    12k (  1%)
 repair loop structures             :   0.01 ( 33%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 TOTAL                              :   0.03          0.01          0.04         2409k
