==============breakpoint=========
/root/x21321219/new_gccplugin/Test/test.c 61
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
# .MEM_34 = VDEF <.MEM_33(D)>
p_19 = malloc (0);
set breakpoint /root/x21321219/new_gccplugin/Test/test.c 61
--------GIMPLE Cond -------
succs:= 4
--------GIMPLE Cond -------
succs:= 5
--------GIMPLE Cond -------
succs:= 5
succs:= 7
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 0 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_34 = VDEF <.MEM_33(D)>
p_19 = malloc (0);
# .MEM_35 = VDEF <.MEM_34>
_1 = malloc (1);
# .MEM_40 = VDEF <.MEM_30>
_5 = malloc (1);
# .MEM_37 = VDEF <.MEM_30>
_6 = malloc (1);
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f1f4e99ba68
    type <pointer_type 0x7f1f4e4beb28
        type <record_type 0x7f1f4e4bea80 st TI
            size <integer_cst 0x7f1f4e993c30 constant 128>
            unit size <integer_cst 0x7f1f4e993c48 constant 16>
            align 64 symtab 0 alias set -1 canonical type 0x7f1f4e4bea80 fields <field_decl 0x7f1f4e4c0260 flag> context <translation_unit_decl 0x7f1f4e99e168 test.c>
            pointer_to_this <pointer_type 0x7f1f4e4beb28> chain <type_decl 0x7f1f4e4c02f8 D.3991>>
        public unsigned DI
        size <integer_cst 0x7f1f4e993be8 constant 64>
        unit size <integer_cst 0x7f1f4e993c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    var <var_decl 0x7f1f4f728ab0 p>
    def_stmt p_19 = malloc (0);
    version 19
    ptr-info 0x7f1f4e4c1c00>
# .MEM_34 = VDEF <.MEM_33(D)>
p_19 = malloc (0);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return  [0m
_9 = p_19 + _8;
bb index := 7
beacuse in succ := 8 have return 
gimple stmt in succ := 6 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = p_19 + _8;
In function â€˜mainâ€™:
test.c:72:9: warning: use location
   free(p[i].f);
         ^

======================================================================
[40;31m    branch possiable have return  [0m
# VUSE <.MEM_31>
_10 = _9->f;
bb index := 7
beacuse in succ := 8 have return 
gimple stmt in succ := 6 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_10 = _9->f;
test.c:72:12: warning: use location
   free(p[i].f);
            ^

======================================================================
[40;31m    branch possiable have return  [0m
# .MEM_39 = VDEF <.MEM_31>
free (_10);
bb index := 7
beacuse in succ := 8 have return 
gimple stmt in succ := 6 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
free (_10);
test.c:72:3: warning: use location
   free(p[i].f);
   ^
this stmt is child function---free-----

 ================== find ================== 
free (_10);
test.c:72:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
MEM[(struct st *)p_19 + 48B].f = _1;
test.c:62:9: warning: use location
  p[3].f = malloc(1);
         ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_4->f = _5;
test.c:64:10: warning: use location
   p[i].f = malloc(1);
          ^
MEM[(struct st *)p_19 + 32B].f = _6;
test.c:65:9: warning: use location
  p[2].f = malloc(1);
         ^
MEM[(struct st *)p_19 + 32B].f = _6;
test.c:65:9: warning: use location

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <integer_cst 0x7f1f4e4c1ab0 type <integer_type 0x7f1f4e4be930 size_t> constant 0>

dot graph START

======================================================================
 <integer_cst 0x7f1f4e4c1ac8 type <integer_type 0x7f1f4e4be930 size_t> constant 1>

dot graph START

======================================================================
 <integer_cst 0x7f1f4e4c1ac8 type <integer_type 0x7f1f4e4be930 size_t> constant 1>
[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [9.09%]:
p_19 = malloc (0);
_1 = malloc (1);
MEM[(struct st *)p_19 + 48B].f = _1;
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [90.91%]:
_2 = (long unsigned int) i_11;
_3 = _2 * 16;
_4 = p_19 + _3;
_5 = malloc (1);
_4->f = _5;
i_29 = i_11 + 1;

=======is loop:1=========

 bb index 4 
<bb 4> [100.00%]:
# i_11 = PHI <0(2), i_29(3)>
if (i_11 <= 9)
  goto <bb 3>; [90.91%]
else
  goto <bb 5>; [9.09%]

=======is loop:0=========

 bb index 5 
<bb 5> [9.09%]:
_6 = malloc (1);
MEM[(struct st *)p_19 + 32B].f = _6;
if (test_24(D) != 0)
  goto <bb 8>; [31.00%]
else
  goto <bb 9>; [69.00%]

=======is loop:0=========

 bb index 9 
<bb 9> [6.27%]:
goto <bb 7>; [100.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [62.73%]:
_7 = (long unsigned int) i_12;
_8 = _7 * 16;
_9 = p_19 + _8;
_10 = _9->f;
free (_10);
i_26 = i_12 + 1;

=======is loop:1=========

 bb index 7 
<bb 7> [69.00%]:
# i_12 = PHI <0(9), i_26(6)>
if (i_12 <= 9)
  goto <bb 6>; [90.91%]
else
  goto <bb 8>; [9.09%]

=======is loop:0=========

 bb index 8 
<bb 8> [9.09%]:
# _13 = PHI <200(5), 0(7)>
return _13;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 1 [0m
[40;34m    used_stmt array stack totalsize of : 408 [0m
[40;34m    collect time: : 0.000093 s [0m
[40;34m    algorithm time: 0.001407 s [0m
[40;34m    gimple stmt count : : 21 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
