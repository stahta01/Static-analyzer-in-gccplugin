test.c: In function â€˜foo3â€™:
test.c:57:6: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
   *z = malloc(1);
      ^
test.c:63:11: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("%d", p2);
          ~^
          %ls
test.c: In function â€˜foo4â€™:
test.c:111:5: warning: assignment from incompatible pointer type [-Wincompatible-pointer-types]
  p2 = &b;
     ^
test.c: In function â€˜childâ€™:
test.c:175:16: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("asdda%d\n", a99);
               ~^
               %ls
test.c:185:7: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
  data = 10;
       ^
test.c:192:9: warning: passing argument 1 of â€˜child4â€™ from incompatible pointer type [-Wincompatible-pointer-types]
  child4(&data);
         ^
test.c:24:7: note: expected â€˜int *â€™ but argument is of type â€˜void **â€™
 void *child4(int *data) __attribute__((noinline));
       ^~~~~~
test.c: In function â€˜child4â€™:
test.c:218:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c:219:14: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *test = &data;
              ^
test.c:238:16: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("asdda%d\n", pData);
               ~^
               %ls
test.c: In function â€˜child3â€™:
test.c:252:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c:263:16: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
  printf("asdda%d\n", pData);
               ~^
               %ls
test.c: In function â€˜child5â€™:
test.c:294:17: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
   printf("asdda%d\n", pData);
                ~^
                %ls
test.c: In function â€˜child6â€™:
test.c:330:17: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
   printf("asdda%d\n", pData);
                ~^
                %ls
test.c: In function â€˜child7â€™:
test.c:367:17: warning: format â€˜%dâ€™ expects argument of type â€˜intâ€™, but argument 2 has type â€˜int *â€™ [-Wformat=]
   printf("asdda%d\n", pData);
                ~^
                %ls
test.c: In function â€˜child2â€™:
test.c:390:15: warning: initialization from incompatible pointer type [-Wincompatible-pointer-types]
  int *pData = &data;
               ^
test.c: In function â€˜mainâ€™:
test.c:459:5: warning: implicit declaration of function â€˜memsetâ€™ [-Wimplicit-function-declaration]
     memset(data, 'A', 100-1);
     ^~~~~~
test.c:459:5: warning: incompatible implicit declaration of built-in function â€˜memsetâ€™
test.c:459:5: note: include â€˜<string.h>â€™ or provide a declaration of â€˜memsetâ€™
=======ipa_pta=========
 <ssa_name 0x7f6c031406c0
    type <pointer_type 0x7f6c02c7fe70
        type <integer_type 0x7f6c02c7f888 char public string-flag QI
            size <integer_cst 0x7f6c03138cd8 constant 8>
            unit size <integer_cst 0x7f6c03138cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6c0314c3f0 precision 8 min <integer_cst 0x7f6c02c82180 -128> max <integer_cst 0x7f6c02c82168 127>
            pointer_to_this <pointer_type 0x7f6c02c7fe70>>
        public unsigned DI
        size <integer_cst 0x7f6c03138be8 constant 64>
        unit size <integer_cst 0x7f6c03138c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6c03143168 test.c>>
    var <var_decl 0x7f6c03ecdab0 data>
    def_stmt data_3 = malloc (100);
    version 3
    ptr-info 0x7f6c02c82bd0>
====================POINTER_TYPE============================
 <ssa_name 0x7f6c031406c0
    type <pointer_type 0x7f6c02c7fe70
        type <integer_type 0x7f6c02c7f888 char public string-flag QI
            size <integer_cst 0x7f6c03138cd8 constant 8>
            unit size <integer_cst 0x7f6c03138cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6c0314c3f0 precision 8 min <integer_cst 0x7f6c02c82180 -128> max <integer_cst 0x7f6c02c82168 127>
            pointer_to_this <pointer_type 0x7f6c02c7fe70>>
        public unsigned DI
        size <integer_cst 0x7f6c03138be8 constant 64>
        unit size <integer_cst 0x7f6c03138c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6c03143168 test.c>>
    var <var_decl 0x7f6c03ecdab0 data>
    def_stmt data_3 = malloc (100);
    version 3
    ptr-info 0x7f6c02c82bd0>
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
 <ssa_name 0x7f6c031406c0
    type <pointer_type 0x7f6c02c7fe70
        type <integer_type 0x7f6c02c7f888 char public string-flag QI
            size <integer_cst 0x7f6c03138cd8 constant 8>
            unit size <integer_cst 0x7f6c03138cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6c0314c3f0 precision 8 min <integer_cst 0x7f6c02c82180 -128> max <integer_cst 0x7f6c02c82168 127>
            pointer_to_this <pointer_type 0x7f6c02c7fe70>>
        public unsigned DI
        size <integer_cst 0x7f6c03138be8 constant 64>
        unit size <integer_cst 0x7f6c03138c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6c03143168 test.c>>
    var <var_decl 0x7f6c03ecdab0 data>
    def_stmt data_3 = malloc (100);
    version 3
    ptr-info 0x7f6c02c82bd0>
qwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqwdqw-1dqwdqwdqwdqwd
-------always in therealways in therealways in there--------------------------
 <ssa_name 0x7f6c031406c0
    type <pointer_type 0x7f6c02c7fe70
        type <integer_type 0x7f6c02c7f888 char public string-flag QI
            size <integer_cst 0x7f6c03138cd8 constant 8>
            unit size <integer_cst 0x7f6c03138cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6c0314c3f0 precision 8 min <integer_cst 0x7f6c02c82180 -128> max <integer_cst 0x7f6c02c82168 127>
            pointer_to_this <pointer_type 0x7f6c02c7fe70>>
        public unsigned DI
        size <integer_cst 0x7f6c03138be8 constant 64>
        unit size <integer_cst 0x7f6c03138c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6c03143168 test.c>>
    var <var_decl 0x7f6c03ecdab0 data>
    def_stmt data_3 = malloc (100);
    version 3
    ptr-info 0x7f6c02c82bd0>
--------GIMPLE goto -------
# .MEM_14 = VDEF <.MEM_13>
_8 = __printf_chk (1, "%s", data_3);
 <ssa_name 0x7f6c03140708
    type <integer_type 0x7f6c0314c5e8 int public SI
        size <integer_cst 0x7f6c03138e28 constant 32>
        unit size <integer_cst 0x7f6c03138e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f6c0314c5e8 precision 32 min <integer_cst 0x7f6c03138de0 -2147483648> max <integer_cst 0x7f6c03138df8 2147483647>
        pointer_to_this <pointer_type 0x7f6c03153a80>>
   
    def_stmt _8 = __printf_chk (1, "%s", data_3);
    version 8>
--------GIMPLE goto -------
# .MEM_13 = VDEF <.MEM_12>
free (data_3);
--------GIMPLE goto -------
# .MEM_12 = VDEF <.MEM_11>
MEM[(char *)data_3 + 99B] = 0;
--------GIMPLE goto -------
# .MEM_11 = VDEF <.MEM_10>
memset (data_3, 65, 99);
--------GIMPLE goto -------
if (data_3 == 0B)
if (data_3 == 0B)
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
=======================================================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 5 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m
 <function_decl 0x7f6c02c80b00 main
    type <function_type 0x7f6c02c7f7e0
        type <integer_type 0x7f6c0314c5e8 int public SI
            size <integer_cst 0x7f6c03138e28 constant 32>
            unit size <integer_cst 0x7f6c03138e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f6c0314c5e8 precision 32 min <integer_cst 0x7f6c03138de0 -2147483648> max <integer_cst 0x7f6c03138df8 2147483647>
            pointer_to_this <pointer_type 0x7f6c03153a80>>
        QI
        size <integer_cst 0x7f6c03138cd8 constant 8>
        unit size <integer_cst 0x7f6c03138cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 452 col 5 align 8 context <translation_unit_decl 0x7f6c03143168 test.c> initial <block 0x7f6c02c8b000>
    result <result_decl 0x7f6c031431e0 D.3994 type <integer_type 0x7f6c0314c5e8 int>
        ignored SI file test.c line 452 col 5 size <integer_cst 0x7f6c03138e28 32> unit size <integer_cst 0x7f6c03138e40 4>
        align 32 context <function_decl 0x7f6c02c80b00 main>>
    struct-function 0x7f6c02c890b0>
 <ssa_name 0x7f6c031406c0
    type <pointer_type 0x7f6c02c7fe70
        type <integer_type 0x7f6c02c7f888 char public string-flag QI
            size <integer_cst 0x7f6c03138cd8 constant 8>
            unit size <integer_cst 0x7f6c03138cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6c0314c3f0 precision 8 min <integer_cst 0x7f6c02c82180 -128> max <integer_cst 0x7f6c02c82168 127>
            pointer_to_this <pointer_type 0x7f6c02c7fe70>>
        public unsigned DI
        size <integer_cst 0x7f6c03138be8 constant 64>
        unit size <integer_cst 0x7f6c03138c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6c03143168 test.c>>
    var <var_decl 0x7f6c03ecdab0 data>
    def_stmt data_3 = malloc (100);
    version 3
    ptr-info 0x7f6c02c82bd0>

dot graph START

======================================================================
 <ssa_name 0x7f6c031406c0
    type <pointer_type 0x7f6c02c7fe70
        type <integer_type 0x7f6c02c7f888 char public string-flag QI
            size <integer_cst 0x7f6c03138cd8 constant 8>
            unit size <integer_cst 0x7f6c03138cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6c0314c3f0 precision 8 min <integer_cst 0x7f6c02c82180 -128> max <integer_cst 0x7f6c02c82168 127>
            pointer_to_this <pointer_type 0x7f6c02c7fe70>>
        public unsigned DI
        size <integer_cst 0x7f6c03138be8 constant 64>
        unit size <integer_cst 0x7f6c03138c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6c03143168 test.c>>
    var <var_decl 0x7f6c03ecdab0 data>
    def_stmt data_3 = malloc (100);
    version 3
    ptr-info 0x7f6c02c82bd0>

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_8 = __printf_chk (1, "%s", data_3);
dot graph target loc start # .MEM_10 = VDEF <.MEM_9(D)>
data_3 = malloc (100);
In function â€˜mainâ€™:
test.c:457:10: warning: use location
     data = (char *)malloc(100*sizeof(char));
          ^
dot graph target loc en1

dot graph target line desc form basic block 4: _8 = __printf_chk (1, "%s", data_3);
dot graph target line desend

dot graph target loc start # .MEM_10 = VDEF <.MEM_9(D)>
data_3 = malloc (100);
test.c:457:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _8 = __printf_chk (1, "%s", data_3);
data_3 = malloc (100);
dot graph stmt end

dot graph stmt start _8 = __printf_chk (1, "%s", data_3);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f6c031406c0
    type <pointer_type 0x7f6c02c7fe70
        type <integer_type 0x7f6c02c7f888 char public string-flag QI
            size <integer_cst 0x7f6c03138cd8 constant 8>
            unit size <integer_cst 0x7f6c03138cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6c0314c3f0 precision 8 min <integer_cst 0x7f6c02c82180 -128> max <integer_cst 0x7f6c02c82168 127>
            pointer_to_this <pointer_type 0x7f6c02c7fe70>>
        public unsigned DI
        size <integer_cst 0x7f6c03138be8 constant 64>
        unit size <integer_cst 0x7f6c03138c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6c03143168 test.c>>
    var <var_decl 0x7f6c03ecdab0 data>
    def_stmt data_3 = malloc (100);
    version 3
    ptr-info 0x7f6c02c82bd0>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

free (data_3);
test.c:462:5: warning: use location
     free(data);
     ^
dot graph target loc start # .MEM_10 = VDEF <.MEM_9(D)>
data_3 = malloc (100);
test.c:457:10: warning: use location
     data = (char *)malloc(100*sizeof(char));
          ^
dot graph target loc en1

dot graph target line desc form basic block 4: free (data_3);
test.c:462:5: warning: use location
     free(data);
     ^
dot graph target line desend

dot graph target loc start # .MEM_10 = VDEF <.MEM_9(D)>
data_3 = malloc (100);
test.c:457:10: warning: use location
     data = (char *)malloc(100*sizeof(char));
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start free (data_3);
data_3 = malloc (100);
dot graph stmt end

dot graph stmt start free (data_3);
test.c:462:5: warning: use location
     free(data);
     ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (data_3);
test.c:462:5: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

MEM[(char *)data_3 + 99B] = 0;
test.c:460:17: warning: use location
     data[100-1] = '\0';
                 ^
dot graph target loc start # .MEM_10 = VDEF <.MEM_9(D)>
data_3 = malloc (100);
test.c:457:10: warning: use location
     data = (char *)malloc(100*sizeof(char));
          ^
dot graph target loc en1

dot graph target line desc form basic block 4: MEM[(char *)data_3 + 99B] = 0;
test.c:460:17: warning: use location
     data[100-1] = '\0';
                 ^
dot graph target line desend

dot graph target loc start # .MEM_10 = VDEF <.MEM_9(D)>
data_3 = malloc (100);
test.c:457:10: warning: use location
     data = (char *)malloc(100*sizeof(char));
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start MEM[(char *)data_3 + 99B] = 0;
data_3 = malloc (100);
dot graph stmt end

dot graph stmt start MEM[(char *)data_3 + 99B] = 0;
test.c:460:17: warning: use location
     data[100-1] = '\0';
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

memset (data_3, 65, 99);
test.c:459:5: warning: use location
     memset(data, 'A', 100-1);
     ^
dot graph target loc start # .MEM_10 = VDEF <.MEM_9(D)>
data_3 = malloc (100);
test.c:457:10: warning: use location
     data = (char *)malloc(100*sizeof(char));
          ^
dot graph target loc en1

dot graph target line desc form basic block 4: memset (data_3, 65, 99);
test.c:459:5: warning: use location
     memset(data, 'A', 100-1);
     ^
dot graph target line desend

dot graph target loc start # .MEM_10 = VDEF <.MEM_9(D)>
data_3 = malloc (100);
test.c:457:10: warning: use location
     data = (char *)malloc(100*sizeof(char));
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start memset (data_3, 65, 99);
data_3 = malloc (100);
dot graph stmt end

dot graph stmt start memset (data_3, 65, 99);
test.c:459:5: warning: use location
     memset(data, 'A', 100-1);
     ^
dot graph stmt end

this stmt is child function---memset-----

 ================== trace ================== 
 <ssa_name 0x7f6c031406c0
    type <pointer_type 0x7f6c02c7fe70
        type <integer_type 0x7f6c02c7f888 char public string-flag QI
            size <integer_cst 0x7f6c03138cd8 constant 8>
            unit size <integer_cst 0x7f6c03138cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6c0314c3f0 precision 8 min <integer_cst 0x7f6c02c82180 -128> max <integer_cst 0x7f6c02c82168 127>
            pointer_to_this <pointer_type 0x7f6c02c7fe70>>
        public unsigned DI
        size <integer_cst 0x7f6c03138be8 constant 64>
        unit size <integer_cst 0x7f6c03138c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6c03143168 test.c>>
    var <var_decl 0x7f6c03ecdab0 data>
    def_stmt data_3 = malloc (100);
    version 3
    ptr-info 0x7f6c02c82bd0>
trace fucntion name:memset 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

if (data_3 == 0B)
test.c:458:8: warning: use location
     if (data == NULL) {exit(-1);}
        ^
dot graph target loc start # .MEM_10 = VDEF <.MEM_9(D)>
data_3 = malloc (100);
test.c:457:10: warning: use location
     data = (char *)malloc(100*sizeof(char));
          ^
dot graph target loc en1

dot graph target line desc form basic block 2: if (data_3 == 0B)
test.c:458:8: warning: use location
     if (data == NULL) {exit(-1);}
        ^
dot graph target line desend

dot graph target loc start # .MEM_10 = VDEF <.MEM_9(D)>
data_3 = malloc (100);
test.c:457:10: warning: use location
     data = (char *)malloc(100*sizeof(char));
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 2dot graph target basicblock en1

dot graph stmt start if (data_3 == 0B)
data_3 = malloc (100);
dot graph stmt end

dot graph stmt start if (data_3 == 0B)
test.c:458:8: warning: use location
     if (data == NULL) {exit(-1);}
        ^
dot graph stmt end

if (data_3 == 0B)

 ================== find cond branch ================= 
if (data_3 == 0B)
Cond in fucntion main basic block 2
 ================== possiable direct basic block ================= 
from main basic block 3
 ================== possiable direct basic block ================= 
from main basic block 4
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_2024001148 dot graph subgraph  _8 = __printf_chk (1, "%s", data_3);
data_3 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_290201720 dot graph subgraph  free (data_3);
data_3 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_57111811 dot graph subgraph  MEM[(char *)data_3 + 99B] = 0;
data_3 = malloc (100);
dot graph subgrapend

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph arrowsubgraph cluster_1995921780 dot graph subgraph  memset (data_3, 65, 99);
data_3 = malloc (100);
dot graph subgrapend

 <ssa_name 0x7f6c031406c0
    type <pointer_type 0x7f6c02c7fe70
        type <integer_type 0x7f6c02c7f888 char public string-flag QI
            size <integer_cst 0x7f6c03138cd8 constant 8>
            unit size <integer_cst 0x7f6c03138cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f6c0314c3f0 precision 8 min <integer_cst 0x7f6c02c82180 -128> max <integer_cst 0x7f6c02c82168 127>
            pointer_to_this <pointer_type 0x7f6c02c7fe70>>
        public unsigned DI
        size <integer_cst 0x7f6c03138be8 constant 64>
        unit size <integer_cst 0x7f6c03138c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f6c03143168 test.c>>
    var <var_decl 0x7f6c03ecdab0 data>
    def_stmt data_3 = malloc (100);
    version 3
    ptr-info 0x7f6c02c82bd0>

 ================== Start Use after free Check ================== 
# .MEM_13 = VDEF <.MEM_12>
free (data_3);
test.c:462:5: warning: Use after free error!: free location 
     free(data);
     ^
# .MEM_14 = VDEF <.MEM_13>
_8 = __printf_chk (1, "%s", data_3);

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 1
 [0m
[40;34m    used_stmt array stack totalsize of : 40
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
algorithm time: 0.006514 s
=======Mapping node_fun:main=========
<bb 2> [100.00%]:
data_3 = malloc (100);
if (data_3 == 0B)
  goto <bb 3>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========
<bb 3> [0.04%]:
exit (-1);

=======is loop:0=========
<bb 4> [99.96%]:
memset (data_3, 65, 99);
MEM[(char *)data_3 + 99B] = 0;
free (data_3);
_8 = __printf_chk (1, "%s", data_3);
return 0;

=======is loop:0=========
time: 0.009747 s
