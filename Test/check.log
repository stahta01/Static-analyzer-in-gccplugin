In file included from test.c:6:0:
common.h: In function ‘discard_my_cleanups’:
common.h:94:21: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 2 has type ‘void *’ [-Wformat=]
   printf("freearg: %x\n", ptr->arg);
                    ~^     ~~~~~~~~
                    %p
common.h: In function ‘do_my_cleanups’:
common.h:108:13: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 2 has type ‘void *’ [-Wformat=]
    printf("%x\n", ptr->arg);
            ~^     ~~~~~~~~
            %p
test.c: In function ‘ada_demangle’:
test.c:44:6: warning: implicit declaration of function ‘strncmp’ [-Wimplicit-function-declaration]
  if (strncmp (mangled, "_ada_", 5) == 0)
      ^~~~~~~
test.c:52:9: warning: implicit declaration of function ‘strlen’ [-Wimplicit-function-declaration]
  len0 = strlen (mangled) + 7 + 1;
         ^~~~~~
test.c:52:9: warning: incompatible implicit declaration of built-in function ‘strlen’
test.c:52:9: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
test.c:12:36: warning: implicit declaration of function ‘isdigit’ [-Wimplicit-function-declaration]
 #define ISDIGIT(c) (ISASCII (c) && isdigit (c))
                                    ^
test.c:66:29: note: in expansion of macro ‘ISDIGIT’
      while (ISLOWER (*p) || ISDIGIT (*p)
                             ^~~~~~~
test.c:91:19: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
                   memcpy (d, operators[k][1], slen);
                   ^~~~~~
test.c:91:19: warning: incompatible implicit declaration of built-in function ‘memcpy’
test.c:91:19: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
test.c:171:11: warning: implicit declaration of function ‘strcpy’ [-Wimplicit-function-declaration]
           strcpy (d, name);
           ^~~~~~
test.c:171:11: warning: incompatible implicit declaration of built-in function ‘strcpy’
test.c:171:11: note: include ‘<string.h>’ or provide a declaration of ‘strcpy’
test.c:189:11: warning: incompatible implicit declaration of built-in function ‘strcpy’
           strcpy (d, name);
           ^~~~~~
test.c:189:11: note: include ‘<string.h>’ or provide a declaration of ‘strcpy’
test.c:235:27: warning: incompatible implicit declaration of built-in function ‘memcpy’
                           memcpy (d, special[k][1], slen);
                           ^~~~~~
test.c:235:27: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
test.c:289:6: warning: incompatible implicit declaration of built-in function ‘strcpy’
      strcpy (demangled, mangled);
      ^~~~~~
test.c:289:6: note: include ‘<string.h>’ or provide a declaration of ‘strcpy’
In file included from test.c:6:0:
test.c: In function ‘cplus_demangle’:
common.h:22:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
 #define xstrdup(a) strdup(a)
                    ^
test.c:300:10: note: in expansion of macro ‘xstrdup’
   return xstrdup (mangled);
          ^~~~~~~
common.h:22:20: warning: incompatible implicit declaration of built-in function ‘strdup’
 #define xstrdup(a) strdup(a)
                    ^
test.c:300:10: note: in expansion of macro ‘xstrdup’
   return xstrdup (mangled);
          ^~~~~~~
test.c: In function ‘demangle_template_value_parm’:
test.c:316:4: warning: implicit declaration of function ‘strncpy’ [-Wimplicit-function-declaration]
    strncpy (p, *mangled, symbol_len);
    ^~~~~~~
test.c:316:4: warning: incompatible implicit declaration of built-in function ‘strncpy’
test.c:316:4: note: include ‘<string.h>’ or provide a declaration of ‘strncpy’
test.c: In function ‘main’:
test.c:341:8: warning: implicit declaration of function ‘time’; did you mean ‘die’? [-Wimplicit-function-declaration]
  srand(time(&t));
        ^~~~
        die
=======ipa_pta=========
============gimple assign==================
mangled_278 = "123456";
 <addr_expr 0x7f495692c9a0
    type <pointer_type 0x7f4956941d20
        type <array_type 0x7f4956941c78 type <integer_type 0x7f4956938888 char>
            BLK
            size <integer_cst 0x7f495693b288 constant 56>
            unit size <integer_cst 0x7f495693b270 constant 7>
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941bd0>
            pointer_to_this <pointer_type 0x7f4956941d20>>
        unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly constant
    arg 0 <string_cst 0x7f495692c980 type <array_type 0x7f4956941c78>
        readonly constant static "123456\000">
    test.c:340:24 start: test.c:340:24 finish: test.c:340:24>
============COMPONEN2T_REF==================
 <addr_expr 0x7f495692c9a0
    type <pointer_type 0x7f4956941d20
        type <array_type 0x7f4956941c78 type <integer_type 0x7f4956938888 char>
            BLK
            size <integer_cst 0x7f495693b288 constant 56>
            unit size <integer_cst 0x7f495693b270 constant 7>
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941bd0>
            pointer_to_this <pointer_type 0x7f4956941d20>>
        unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly constant
    arg 0 <string_cst 0x7f495692c980 type <array_type 0x7f4956941c78>
        readonly constant static "123456\000">
    test.c:340:24 start: test.c:340:24 finish: test.c:340:24>
In function ‘main’:
test.c:340:14: warning: use location
  const char *mangled = "123456";
              ^
============gimple assign==================
_2 = (unsigned int) _1;
 <ssa_name 0x7f4956dfa8b8
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _1 = time (&t);
    version 1>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956dfa8b8
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _1 = time (&t);
    version 1>
test.c:341:2: warning: use location
  srand(time(&t));
  ^
============gimple assign==================
# .MEM_247 = VDEF <.MEM_6>
s.e = 0B;
 <integer_cst 0x7f495693be10 type <pointer_type 0x7f4956938930> constant 0>
============gimple assign==================
# VUSE <.MEM_247>
_19 = s.e;
 <component_ref 0x7f4956df1720
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    arg 0 <var_decl 0x7f4957b87c60 s
        type <record_type 0x7f4956938a80 string BLK
            size <integer_cst 0x7f4956e0e0a8 constant 192>
            unit size <integer_cst 0x7f4956e0e078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f49569389d8 fields <field_decl 0x7f495693a2f8 b> context <translation_unit_decl 0x7f4956dfd168 test.c>
            pointer_to_this <pointer_type 0x7f4956938b28> chain <type_decl 0x7f495693a390 D.3990>>
        BLK file test.c line 339 col 9 size <integer_cst 0x7f4956e0e0a8 192> unit size <integer_cst 0x7f4956e0e078 24>
        align 128 context <function_decl 0x7f4956939b00 main>
        chain <var_decl 0x7f4957b87bd0 mangled type <pointer_type 0x7f4956938c78>
            unsigned DI file test.c line 340 col 14 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
            align 64 context <function_decl 0x7f4956939b00 main> chain <function_decl 0x7f4956945300 time>>>
    arg 1 <field_decl 0x7f495693a1c8 e type <pointer_type 0x7f4956938930>
        unsigned DI file test.c line 18 col 9 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f4956df2c48 constant 16>
        bit offset <integer_cst 0x7f4956df2c60 constant 0> context <record_type 0x7f49569389d8 string>>
    test.c:24:18 start: test.c:24:18 finish: test.c:24:18>
============COMPONEN2T_REF==================
 <component_ref 0x7f4956df1720
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    arg 0 <var_decl 0x7f4957b87c60 s
        type <record_type 0x7f4956938a80 string BLK
            size <integer_cst 0x7f4956e0e0a8 constant 192>
            unit size <integer_cst 0x7f4956e0e078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f49569389d8 fields <field_decl 0x7f495693a2f8 b> context <translation_unit_decl 0x7f4956dfd168 test.c>
            pointer_to_this <pointer_type 0x7f4956938b28> chain <type_decl 0x7f495693a390 D.3990>>
        BLK file test.c line 339 col 9 size <integer_cst 0x7f4956e0e0a8 192> unit size <integer_cst 0x7f4956e0e078 24>
        align 128 context <function_decl 0x7f4956939b00 main>
        chain <var_decl 0x7f4957b87bd0 mangled type <pointer_type 0x7f4956938c78>
            unsigned DI file test.c line 340 col 14 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
            align 64 context <function_decl 0x7f4956939b00 main> chain <function_decl 0x7f4956945300 time>>>
    arg 1 <field_decl 0x7f495693a1c8 e type <pointer_type 0x7f4956938930>
        unsigned DI file test.c line 18 col 9 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f4956df2c48 constant 16>
        bit offset <integer_cst 0x7f4956df2c60 constant 0> context <record_type 0x7f49569389d8 string>>
    test.c:24:18 start: test.c:24:18 finish: test.c:24:18>
test.c:24:18: warning: use location
   s->b = s->p = s->e = NULL;
                  ^
============gimple assign==================
# .MEM_248 = VDEF <.MEM_247>
s.p = _19;
 <ssa_name 0x7f49569585e8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    def_stmt _19 = s.e;
    version 19
    ptr-info 0x7f495696d858>
============gimple assign==================
# VUSE <.MEM_248>
_20 = s.p;
 <component_ref 0x7f4956df17e0
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    arg 0 <var_decl 0x7f4957b87c60 s
        type <record_type 0x7f4956938a80 string BLK
            size <integer_cst 0x7f4956e0e0a8 constant 192>
            unit size <integer_cst 0x7f4956e0e078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f49569389d8 fields <field_decl 0x7f495693a2f8 b> context <translation_unit_decl 0x7f4956dfd168 test.c>
            pointer_to_this <pointer_type 0x7f4956938b28> chain <type_decl 0x7f495693a390 D.3990>>
        BLK file test.c line 339 col 9 size <integer_cst 0x7f4956e0e0a8 192> unit size <integer_cst 0x7f4956e0e078 24>
        align 128 context <function_decl 0x7f4956939b00 main>
        chain <var_decl 0x7f4957b87bd0 mangled type <pointer_type 0x7f4956938c78>
            unsigned DI file test.c line 340 col 14 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
            align 64 context <function_decl 0x7f4956939b00 main> chain <function_decl 0x7f4956945300 time>>>
    arg 1 <field_decl 0x7f495693a260 p type <pointer_type 0x7f4956938930>
        unsigned DI file test.c line 17 col 9 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f4956df2c18 constant 0> bit offset <integer_cst 0x7f4956df2be8 64> context <record_type 0x7f49569389d8 string>
        chain <field_decl 0x7f495693a1c8 e type <pointer_type 0x7f4956938930>
            unsigned DI file test.c line 18 col 9 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
            align 64 offset_align 128
            offset <integer_cst 0x7f4956df2c48 constant 16>
            bit offset <integer_cst 0x7f4956df2c60 constant 0> context <record_type 0x7f49569389d8 string>>>
    test.c:24:11 start: test.c:24:11 finish: test.c:24:11>
============COMPONEN2T_REF==================
 <component_ref 0x7f4956df17e0
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    arg 0 <var_decl 0x7f4957b87c60 s
        type <record_type 0x7f4956938a80 string BLK
            size <integer_cst 0x7f4956e0e0a8 constant 192>
            unit size <integer_cst 0x7f4956e0e078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f49569389d8 fields <field_decl 0x7f495693a2f8 b> context <translation_unit_decl 0x7f4956dfd168 test.c>
            pointer_to_this <pointer_type 0x7f4956938b28> chain <type_decl 0x7f495693a390 D.3990>>
        BLK file test.c line 339 col 9 size <integer_cst 0x7f4956e0e0a8 192> unit size <integer_cst 0x7f4956e0e078 24>
        align 128 context <function_decl 0x7f4956939b00 main>
        chain <var_decl 0x7f4957b87bd0 mangled type <pointer_type 0x7f4956938c78>
            unsigned DI file test.c line 340 col 14 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
            align 64 context <function_decl 0x7f4956939b00 main> chain <function_decl 0x7f4956945300 time>>>
    arg 1 <field_decl 0x7f495693a260 p type <pointer_type 0x7f4956938930>
        unsigned DI file test.c line 17 col 9 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f4956df2c18 constant 0> bit offset <integer_cst 0x7f4956df2be8 64> context <record_type 0x7f49569389d8 string>
        chain <field_decl 0x7f495693a1c8 e type <pointer_type 0x7f4956938930>
            unsigned DI file test.c line 18 col 9 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
            align 64 offset_align 128
            offset <integer_cst 0x7f4956df2c48 constant 16>
            bit offset <integer_cst 0x7f4956df2c60 constant 0> context <record_type 0x7f49569389d8 string>>>
    test.c:24:11 start: test.c:24:11 finish: test.c:24:11>
test.c:24:11: warning: use location
   s->b = s->p = s->e = NULL;
           ^
============gimple assign==================
# .MEM_249 = VDEF <.MEM_248>
s.b = _20;
 <ssa_name 0x7f4956958630
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    def_stmt _20 = s.p;
    version 20
    ptr-info 0x7f495696d870>
============gimple assign==================
_13 = _12 % 2;
 <ssa_name 0x7f49569581b0
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _12 = rand ();
    version 12>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569581b0
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _12 = rand ();
    version 12>
test.c:313:6: warning: use location
  if (__RANDBOOL)
      ^
============gimple assign==================
_15 = mangled_278;
 <ssa_name 0x7f4956990708
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4957b87bd0 mangled>
    def_stmt mangled_278 = "123456";
    version 278
    ptr-info 0x7f4956991000>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956990708
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4957b87bd0 mangled>
    def_stmt mangled_278 = "123456";
    version 278
    ptr-info 0x7f4956991000>
test.c:316:4: warning: use location
    strncpy (p, *mangled, symbol_len);
    ^
============gimple assign==================
# .MEM_253 = VDEF <.MEM_252>
MEM[(char *)p_14 + 3B] = 0;
 <integer_cst 0x7f495693bdf8 type <integer_type 0x7f4956938888 char> constant 0>
============gimple assign==================
_22 = _21 % 2;
 <ssa_name 0x7f4956958ab0
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _21 = rand ();
    version 21>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956958ab0
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _21 = rand ();
    version 21>
test.c:299:6: warning: use location
  if (__RANDBOOL)
      ^
============gimple assign==================
_25 = _24 % 2;
 <ssa_name 0x7f4956958b88
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _24 = rand ();
    version 24>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956958b88
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _24 = rand ();
    version 24>
test.c:302:6: warning: use location
  if (__RANDBOOL)
      ^
============gimple assign==================
mangled_29 = p_14 + 5;
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>
test.c:45:11: warning: use location
   mangled += 5;
           ^
============gimple assign==================
# VUSE <.MEM_255>
_31 = *mangled_30;
 <mem_ref 0x7f495696e870
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956969e58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f495695ef30 mangled>
        def_stmt mangled_30 = PHI <p_14(6), mangled_29(7)>
        version 30
        ptr-info 0x7f495696d8e8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696e870
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956969e58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f495695ef30 mangled>
        def_stmt mangled_30 = PHI <p_14(6), mangled_29(7)>
        version 30
        ptr-info 0x7f495696d8e8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:48:7: warning: use location
  if (!ISLOWER (mangled[0]))
       ^
============gimple assign==================
_32 = (unsigned char) _31;
 <ssa_name 0x7f4956969ea0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _31 = *mangled_30;
    version 31>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956969ea0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _31 = *mangled_30;
    version 31>
test.c:48:6: warning: use location
  if (!ISLOWER (mangled[0]))
      ^
============gimple assign==================
_33 = _32 + 159;
 <ssa_name 0x7f4956969ee8
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _32 = (unsigned char) _31;
    version 32>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956969ee8
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _32 = (unsigned char) _31;
    version 32>
test.c:48:6: warning: use location
============gimple assign==================
_35 = (unsigned int) _34;
 <ssa_name 0x7f4956969f78
    type <integer_type 0x7f4956e067e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f4956e06738 precision 64 min <integer_cst 0x7f4956df2eb8 0> max <integer_cst 0x7f4956df4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4956e129d8>>
   
    def_stmt _34 = strlen (mangled_30);
    version 34>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956969f78
    type <integer_type 0x7f4956e067e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f4956e06738 precision 64 min <integer_cst 0x7f4956df2eb8 0> max <integer_cst 0x7f4956df4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4956e129d8>>
   
    def_stmt _34 = strlen (mangled_30);
    version 34>
test.c:52:30: warning: use location
  len0 = strlen (mangled) + 7 + 1;
                              ^
============gimple assign==================
_36 = _35 + 8;
 <ssa_name 0x7f4956976000
    type <integer_type 0x7f4956942a80 public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f495693b318 0> max <integer_cst 0x7f495693b300 4294967295>>
   
    def_stmt _35 = (unsigned int) _34;
    version 35>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976000
    type <integer_type 0x7f4956942a80 public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f495693b318 0> max <integer_cst 0x7f495693b300 4294967295>>
   
    def_stmt _35 = (unsigned int) _34;
    version 35>
test.c:52:30: warning: use location
============gimple assign==================
len0_37 = (int) _36;
 <ssa_name 0x7f4956976048
    type <integer_type 0x7f4956942a80 public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f495693b318 0> max <integer_cst 0x7f495693b300 4294967295>>
   
    def_stmt _36 = _35 + 8;
    version 36>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976048
    type <integer_type 0x7f4956942a80 public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f495693b318 0> max <integer_cst 0x7f495693b300 4294967295>>
   
    def_stmt _36 = _35 + 8;
    version 36>
test.c:52:7: warning: use location
  len0 = strlen (mangled) + 7 + 1;
       ^
============gimple assign==================
_38 = (long unsigned int) len0_37;
 <ssa_name 0x7f4956976090
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
    var <var_decl 0x7f4956974000 len0>
    def_stmt len0_37 = (int) _36;
    version 37>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976090
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
    var <var_decl 0x7f4956974000 len0>
    def_stmt len0_37 = (int) _36;
    version 37>
test.c:53:14: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
              ^
============gimple assign==================
d_40 = demangled_39;
 <ssa_name 0x7f4956976120
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_39 = malloc (_38);
    version 39
    ptr-info 0x7f495696d900>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976120
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_39 = malloc (_38);
    version 39
    ptr-info 0x7f495696d900>
test.c:55:4: warning: use location
  d = demangled;
    ^
============gimple assign==================
# VUSE <.MEM_235>
_42 = *p_41;
 <mem_ref 0x7f495696e8c0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f49569761b0
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_41 = PHI <mangled_30(9), p_222(10)>
        version 41
        ptr-info 0x7f495696d930>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696e8c0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f49569761b0
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_41 = PHI <mangled_30(9), p_222(10)>
        version 41
        ptr-info 0x7f495696d930>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:61:9: warning: use location
    if (!ISLOWER (*p))
         ^
============gimple assign==================
_43 = (unsigned char) _42;
 <ssa_name 0x7f49569761f8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _42 = *p_41;
    version 42>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569761f8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _42 = *p_41;
    version 42>
test.c:61:8: warning: use location
    if (!ISLOWER (*p))
        ^
============gimple assign==================
_44 = _43 + 159;
 <ssa_name 0x7f4956976240
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _43 = (unsigned char) _42;
    version 43>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976240
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _43 = (unsigned char) _42;
    version 43>
test.c:61:8: warning: use location
============gimple assign==================
_46 = p_45;
 <ssa_name 0x7f49569762d0
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_45 = PHI <p_41(12), p_224(13)>
    version 45
    ptr-info 0x7f495696d948>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569762d0
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_45 = PHI <p_41(12), p_224(13)>
    version 45
    ptr-info 0x7f495696d948>
test.c:65:16: warning: use location
       *d++ = *p++;
                ^
============gimple assign==================
p_47 = p_45 + 1;
 <ssa_name 0x7f49569762d0
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_45 = PHI <p_41(12), p_224(13)>
    version 45
    ptr-info 0x7f495696d948>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569762d0
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_45 = PHI <p_41(12), p_224(13)>
    version 45
    ptr-info 0x7f495696d948>
test.c:65:16: warning: use location
============gimple assign==================
_49 = d_48;
 <ssa_name 0x7f49569763a8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_48 = PHI <d_80(12), d_225(13)>
    version 48
    ptr-info 0x7f495696d990>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569763a8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_48 = PHI <d_80(12), d_225(13)>
    version 48
    ptr-info 0x7f495696d990>
test.c:65:9: warning: use location
       *d++ = *p++;
         ^
============gimple assign==================
d_50 = d_48 + 1;
 <ssa_name 0x7f49569763a8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_48 = PHI <d_80(12), d_225(13)>
    version 48
    ptr-info 0x7f495696d990>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569763a8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_48 = PHI <d_80(12), d_225(13)>
    version 48
    ptr-info 0x7f495696d990>
test.c:65:9: warning: use location
============gimple assign==================
# VUSE <.MEM_236>
_51 = *_46;
 <mem_ref 0x7f495696e910
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696e910
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:65:14: warning: use location
       *d++ = *p++;
              ^
============gimple assign==================
# .MEM_260 = VDEF <.MEM_236>
*_49 = _51;
 <ssa_name 0x7f4956976480
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _51 = *_46;
    version 51>
============gimple assign==================
# VUSE <.MEM_260>
_52 = MEM[(const char *)_46 + 1B];
 <mem_ref 0x7f495696e9b0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696e9b0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:66:13: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
             ^
============gimple assign==================
_53 = (unsigned char) _52;
 <ssa_name 0x7f49569764c8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _52 = MEM[(const char *)_46 + 1B];
    version 52>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569764c8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _52 = MEM[(const char *)_46 + 1B];
    version 52>
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
============gimple assign==================
_54 = _53 + 159;
 <ssa_name 0x7f4956976510
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _53 = (unsigned char) _52;
    version 53>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976510
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _53 = (unsigned char) _52;
    version 53>
test.c:66:26: warning: use location
============gimple assign==================
_55 = _54 <= 25;
 <ssa_name 0x7f4956976558
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _54 = _53 + 159;
    version 54>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976558
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _54 = _53 + 159;
    version 54>
test.c:66:26: warning: use location
============gimple assign==================
# VUSE <.MEM_260>
_56 = MEM[(const char *)_46 + 1B];
 <mem_ref 0x7f495696ea00
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696ea00
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:66:13: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
             ^
============gimple assign==================
_57 = (unsigned char) _56;
 <ssa_name 0x7f49569765e8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _56 = MEM[(const char *)_46 + 1B];
    version 56>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569765e8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _56 = MEM[(const char *)_46 + 1B];
    version 56>
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
============gimple assign==================
_58 = _57 + 208;
 <ssa_name 0x7f4956976630
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _57 = (unsigned char) _56;
    version 57>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976630
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _57 = (unsigned char) _56;
    version 57>
test.c:66:26: warning: use location
============gimple assign==================
_59 = _58 <= 9;
 <ssa_name 0x7f4956976678
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _58 = _57 + 208;
    version 58>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976678
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _58 = _57 + 208;
    version 58>
test.c:66:26: warning: use location
============gimple assign==================
_60 = _55 | _59;
 <ssa_name 0x7f49569765a0
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _55 = _54 <= 25;
    version 55>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569765a0
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _55 = _54 <= 25;
    version 55>
test.c:66:26: warning: use location
============gimple assign==================
# VUSE <.MEM_260>
_61 = MEM[(const char *)_46 + 1B];
 <mem_ref 0x7f495696ea50
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696ea50
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:67:13: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
             ^
============gimple assign==================
# VUSE <.MEM_260>
_62 = MEM[(const char *)_46 + 2B];
 <mem_ref 0x7f495696eaa0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696eaa0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
test.c:67:28: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                            ^
============gimple assign==================
_63 = (unsigned char) _62;
 <ssa_name 0x7f4956976798
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _62 = MEM[(const char *)_46 + 2B];
    version 62>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976798
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _62 = MEM[(const char *)_46 + 2B];
    version 62>
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
============gimple assign==================
_64 = _63 + 159;
 <ssa_name 0x7f49569767e0
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _63 = (unsigned char) _62;
    version 63>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569767e0
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _63 = (unsigned char) _62;
    version 63>
test.c:67:43: warning: use location
============gimple assign==================
_65 = _64 <= 25;
 <ssa_name 0x7f4956976828
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _64 = _63 + 159;
    version 64>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976828
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _64 = _63 + 159;
    version 64>
test.c:67:43: warning: use location
============gimple assign==================
# VUSE <.MEM_260>
_66 = MEM[(const char *)_46 + 2B];
 <mem_ref 0x7f495696eaf0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696eaf0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
test.c:67:28: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                            ^
============gimple assign==================
_67 = (unsigned char) _66;
 <ssa_name 0x7f49569768b8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _66 = MEM[(const char *)_46 + 2B];
    version 66>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569768b8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _66 = MEM[(const char *)_46 + 2B];
    version 66>
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
============gimple assign==================
_68 = _67 + 208;
 <ssa_name 0x7f4956976900
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _67 = (unsigned char) _66;
    version 67>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976900
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _67 = (unsigned char) _66;
    version 67>
test.c:67:43: warning: use location
============gimple assign==================
_69 = _68 <= 9;
 <ssa_name 0x7f4956976948
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _68 = _67 + 208;
    version 68>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976948
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _68 = _67 + 208;
    version 68>
test.c:67:43: warning: use location
============gimple assign==================
_70 = _65 | _69;
 <ssa_name 0x7f4956976870
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _65 = _64 <= 25;
    version 65>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976870
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _65 = _64 <= 25;
    version 65>
test.c:67:43: warning: use location
============gimple assign==================
# VUSE <.MEM_235>
_71 = *p_41;
 <mem_ref 0x7f495696eb40
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f49569761b0
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_41 = PHI <mangled_30(9), p_222(10)>
        version 41
        ptr-info 0x7f495696d930>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696eb40
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f49569761b0
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_41 = PHI <mangled_30(9), p_222(10)>
        version 41
        ptr-info 0x7f495696d930>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:70:14: warning: use location
    else if (p[0] == 'O')
              ^
============gimple assign==================
# VUSE <.MEM_235>
_73 = operators[k_72][0];
 <array_ref 0x7f4956965d90
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956965dc8
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:85:46 start: test.c:85:46 finish: test.c:85:46>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:85:29 start: test.c:85:29 finish: test.c:85:29>
============COMPONEN2T_REF==================
 <array_ref 0x7f4956965d90
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956965dc8
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:85:46 start: test.c:85:46 finish: test.c:85:46>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:85:29 start: test.c:85:29 finish: test.c:85:29>
test.c:85:29: warning: use location
               size_t slen = strlen (operators[k][0]);
                             ^
============gimple assign==================
# VUSE <.MEM_235>
_75 = operators[k_72][0];
 <array_ref 0x7f4956965e70
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956965ea8
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:86:40 start: test.c:86:40 finish: test.c:86:40>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:86:19 start: test.c:86:19 finish: test.c:86:19>
============COMPONEN2T_REF==================
 <array_ref 0x7f4956965e70
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956965ea8
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:86:40 start: test.c:86:40 finish: test.c:86:40>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:86:19 start: test.c:86:19 finish: test.c:86:19>
test.c:86:19: warning: use location
               if (strncmp (p, operators[k][0], slen) == 0)
                   ^
============gimple assign==================
p_77 = p_41 + slen_74;
 <ssa_name 0x7f49569761b0
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_41 = PHI <mangled_30(9), p_222(10)>
    version 41
    ptr-info 0x7f495696d930>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569761b0
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_41 = PHI <mangled_30(9), p_222(10)>
    version 41
    ptr-info 0x7f495696d930>
test.c:88:21: warning: use location
                   p += slen;
                     ^
============gimple assign==================
# VUSE <.MEM_235>
_78 = operators[k_72][1];
 <array_ref 0x7f4956965f50
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956965f88
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:89:43 start: test.c:89:43 finish: test.c:89:43>
    arg 1 <integer_cst 0x7f4956df2f90 type <integer_type 0x7f4956e065e8 int> constant 1>
    test.c:89:26 start: test.c:89:26 finish: test.c:89:26>
============COMPONEN2T_REF==================
 <array_ref 0x7f4956965f50
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956965f88
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:89:43 start: test.c:89:43 finish: test.c:89:43>
    arg 1 <integer_cst 0x7f4956df2f90 type <integer_type 0x7f4956e065e8 int> constant 1>
    test.c:89:26 start: test.c:89:26 finish: test.c:89:26>
test.c:89:26: warning: use location
                   slen = strlen (operators[k][1]);
                          ^
============gimple assign==================
_81 = d_80;
 <ssa_name 0x7f4956976ca8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_80 = PHI <demangled_39(9), d_223(10)>
    version 80
    ptr-info 0x7f495696da38>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976ca8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_80 = PHI <demangled_39(9), d_223(10)>
    version 80
    ptr-info 0x7f495696da38>
test.c:90:21: warning: use location
                   *d++ = '"';
                     ^
============gimple assign==================
d_82 = d_80 + 1;
 <ssa_name 0x7f4956976ca8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_80 = PHI <demangled_39(9), d_223(10)>
    version 80
    ptr-info 0x7f495696da38>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976ca8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_80 = PHI <demangled_39(9), d_223(10)>
    version 80
    ptr-info 0x7f495696da38>
test.c:90:21: warning: use location
============gimple assign==================
# .MEM_257 = VDEF <.MEM_235>
*_81 = 34;
 <integer_cst 0x7f495693bf78 type <integer_type 0x7f4956938888 char> constant 34>
============gimple assign==================
# VUSE <.MEM_257>
_83 = operators[k_72][1];
 <array_ref 0x7f4956978000
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978038
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:91:39 start: test.c:91:39 finish: test.c:91:39>
    arg 1 <integer_cst 0x7f4956df2f90 type <integer_type 0x7f4956e065e8 int> constant 1>
    test.c:91:42 start: test.c:91:42 finish: test.c:91:42>
============COMPONEN2T_REF==================
 <array_ref 0x7f4956978000
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978038
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:91:39 start: test.c:91:39 finish: test.c:91:39>
    arg 1 <integer_cst 0x7f4956df2f90 type <integer_type 0x7f4956e065e8 int> constant 1>
    test.c:91:42 start: test.c:91:42 finish: test.c:91:42>
test.c:91:42: warning: use location
                   memcpy (d, operators[k][1], slen);
                                          ^
============gimple assign==================
d_84 = d_82 + slen_79;
 <ssa_name 0x7f4956976d38
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_82 = d_80 + 1;
    version 82
    ptr-info 0x7f495696da68>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976d38
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_82 = d_80 + 1;
    version 82
    ptr-info 0x7f495696da68>
test.c:92:21: warning: use location
                   d += slen;
                     ^
============gimple assign==================
d_85 = d_84 + 1;
 <ssa_name 0x7f4956976dc8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_84 = d_82 + slen_79;
    version 84
    ptr-info 0x7f495696da98>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976dc8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_84 = d_82 + slen_79;
    version 84
    ptr-info 0x7f495696da98>
test.c:93:21: warning: use location
                   *d++ = '"';
                     ^
============gimple assign==================
# .MEM_259 = VDEF <.MEM_258>
*d_84 = 34;
 <integer_cst 0x7f495693bf78 type <integer_type 0x7f4956938888 char> constant 34>
============gimple assign==================
k_86 = k_72 + 1;
 <ssa_name 0x7f4956976a68
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
    var <var_decl 0x7f4956974240 k>
    def_stmt k_72 = PHI <0(18), k_86(21)>
    version 72>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976a68
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
    var <var_decl 0x7f4956974240 k>
    def_stmt k_72 = PHI <0(18), k_86(21)>
    version 72>
test.c:83:44: warning: use location
      for (k = 0; operators[k][0] != NULL; k++)
                                            ^
============gimple assign==================
# VUSE <.MEM_235>
_87 = operators[k_72][0];
 <array_ref 0x7f49569780e0
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978118
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:83:27 start: test.c:83:27 finish: test.c:83:27>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:83:30 start: test.c:83:30 finish: test.c:83:30>
============COMPONEN2T_REF==================
 <array_ref 0x7f49569780e0
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978118
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:83:27 start: test.c:83:27 finish: test.c:83:27>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:83:30 start: test.c:83:30 finish: test.c:83:30>
test.c:83:30: warning: use location
      for (k = 0; operators[k][0] != NULL; k++)
                              ^
============gimple assign==================
# VUSE <.MEM_237>
_88 = operators[k_72][0];
 <array_ref 0x7f49569781c0
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f49569781f8
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:98:24 start: test.c:98:24 finish: test.c:98:24>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:98:27 start: test.c:98:27 finish: test.c:98:27>
============COMPONEN2T_REF==================
 <array_ref 0x7f49569781c0
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f49569781f8
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:98:24 start: test.c:98:24 finish: test.c:98:24>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:98:27 start: test.c:98:27 finish: test.c:98:27>
test.c:98:27: warning: use location
           if (operators[k][0] == NULL)
                           ^
============gimple assign==================
# VUSE <.MEM_238>
_90 = *p_89;
 <mem_ref 0x7f495696ec30
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696ec30
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:109:12: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
            ^
============gimple assign==================
# VUSE <.MEM_238>
_91 = MEM[(const char *)p_89 + 1B];
 <mem_ref 0x7f495696ec80
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696ec80
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:109:27: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
                           ^
============gimple assign==================
# VUSE <.MEM_238>
_92 = MEM[(const char *)p_89 + 2B];
 <mem_ref 0x7f495696ecd0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696ecd0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
test.c:112:16: warning: use location
           if (p[2] == 'B' && p[3] == 0)
                ^
============gimple assign==================
# VUSE <.MEM_238>
_93 = MEM[(const char *)p_89 + 3B];
 <mem_ref 0x7f495696ed20
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bf30 type <pointer_type 0x7f4956938c78> constant 3>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696ed20
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bf30 type <pointer_type 0x7f4956938c78> constant 3>>
test.c:112:31: warning: use location
           if (p[2] == 'B' && p[3] == 0)
                               ^
============gimple assign==================
# VUSE <.MEM_238>
_94 = MEM[(const char *)p_89 + 2B];
 <mem_ref 0x7f495696ed70
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696ed70
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
test.c:117:21: warning: use location
           else if (p[2] == '_' && p[3] == '_')
                     ^
============gimple assign==================
# VUSE <.MEM_238>
_95 = MEM[(const char *)p_89 + 3B];
 <mem_ref 0x7f495696edc0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bf30 type <pointer_type 0x7f4956938c78> constant 3>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696edc0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bf30 type <pointer_type 0x7f4956938c78> constant 3>>
test.c:117:36: warning: use location
           else if (p[2] == '_' && p[3] == '_')
                                    ^
============gimple assign==================
p_96 = p_89 + 4;
 <ssa_name 0x7f4956976f30
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
    version 89
    ptr-info 0x7f495696daf8>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976f30
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
    version 89
    ptr-info 0x7f495696daf8>
test.c:120:17: warning: use location
               p += 4;
                 ^
============gimple assign==================
d_98 = d_97 + 1;
 <ssa_name 0x7f495697b1b0
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_97 = PHI <d_50(15), d_50(16), d_227(23)>
    version 97
    ptr-info 0x7f495696db28>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b1b0
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_97 = PHI <d_50(15), d_50(16), d_227(23)>
    version 97
    ptr-info 0x7f495696db28>
test.c:121:17: warning: use location
               *d++ = '.';
                 ^
============gimple assign==================
# .MEM_261 = VDEF <.MEM_238>
*d_97 = 46;
 <integer_cst 0x7f495696d030 type <integer_type 0x7f4956938888 char> constant 46>
============gimple assign==================
# VUSE <.MEM_238>
_99 = *p_89;
 <mem_ref 0x7f495696ee88
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696ee88
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:127:12: warning: use location
       if (p[0] == 'E' && p[1] == 0)
            ^
============gimple assign==================
# VUSE <.MEM_238>
_100 = MEM[(const char *)p_89 + 1B];
 <mem_ref 0x7f495696eed8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696eed8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:127:27: warning: use location
       if (p[0] == 'E' && p[1] == 0)
                           ^
============gimple assign==================
# VUSE <.MEM_238>
_101 = *p_89;
 <mem_ref 0x7f495696ef28
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696ef28
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:132:13: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
             ^
============gimple assign==================
_102 = _101 == 80;
 <ssa_name 0x7f495697b2d0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _101 = *p_89;
    version 101>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b2d0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _101 = *p_89;
    version 101>
test.c:132:24: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
                        ^
============gimple assign==================
# VUSE <.MEM_238>
_103 = *p_89;
 <mem_ref 0x7f495696ef78
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696ef78
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:132:13: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
             ^
============gimple assign==================
_104 = _103 == 78;
 <ssa_name 0x7f495697b360
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _103 = *p_89;
    version 103>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b360
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _103 = *p_89;
    version 103>
test.c:132:24: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
                        ^
============gimple assign==================
_105 = _102 | _104;
 <ssa_name 0x7f495697b318
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _102 = _101 == 80;
    version 102>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b318
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _102 = _101 == 80;
    version 102>
test.c:132:24: warning: use location
============gimple assign==================
# VUSE <.MEM_238>
_106 = MEM[(const char *)p_89 + 1B];
 <mem_ref 0x7f495696efc8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495696efc8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:132:44: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
                                            ^
============gimple assign==================
# VUSE <.MEM_238>
_107 = *p_89;
 <mem_ref 0x7f495697d028
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d028
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:137:12: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
            ^
============gimple assign==================
_108 = _107 == 78;
 <ssa_name 0x7f495697b480
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _107 = *p_89;
    version 107>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b480
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _107 = *p_89;
    version 107>
test.c:137:22: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                      ^
============gimple assign==================
# VUSE <.MEM_238>
_109 = *p_89;
 <mem_ref 0x7f495697d078
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d078
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:137:12: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
            ^
============gimple assign==================
_110 = _109 == 83;
 <ssa_name 0x7f495697b510
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _109 = *p_89;
    version 109>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b510
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _109 = *p_89;
    version 109>
test.c:137:22: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                      ^
============gimple assign==================
_111 = _108 | _110;
 <ssa_name 0x7f495697b4c8
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _108 = _107 == 78;
    version 108>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b4c8
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _108 = _107 == 78;
    version 108>
test.c:137:22: warning: use location
============gimple assign==================
# VUSE <.MEM_238>
_112 = MEM[(const char *)p_89 + 1B];
 <mem_ref 0x7f495697d0c8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d0c8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:137:40: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                                        ^
============gimple assign==================
# VUSE <.MEM_238>
_113 = *p_89;
 <mem_ref 0x7f495697d118
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d118
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:142:12: warning: use location
       if (p[0] == 'X')
            ^
============gimple assign==================
p_114 = p_89 + 1;
 <ssa_name 0x7f4956976f30
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
    version 89
    ptr-info 0x7f495696daf8>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976f30
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
    version 89
    ptr-info 0x7f495696daf8>
test.c:145:12: warning: use location
           p++;
            ^
============gimple assign==================
p_116 = p_115 + 1;
 <ssa_name 0x7f495697b6c0
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_115 = PHI <p_114(38), p_116(39)>
    version 115
    ptr-info 0x7f495696db70>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b6c0
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_115 = PHI <p_114(38), p_116(39)>
    version 115
    ptr-info 0x7f495696db70>
test.c:147:14: warning: use location
             p++;
              ^
============gimple assign==================
# VUSE <.MEM_238>
_117 = *p_115;
 <mem_ref 0x7f495697d168
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b6c0
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_115 = PHI <p_114(38), p_116(39)>
        version 115
        ptr-info 0x7f495696db70>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d168
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b6c0
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_115 = PHI <p_114(38), p_116(39)>
        version 115
        ptr-info 0x7f495696db70>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:146:19: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                   ^
============gimple assign==================
_118 = _117 == 110;
 <ssa_name 0x7f495697b750
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _117 = *p_115;
    version 117>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b750
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _117 = *p_115;
    version 117>
test.c:146:30: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                              ^
============gimple assign==================
# VUSE <.MEM_238>
_119 = *p_115;
 <mem_ref 0x7f495697d1b8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b6c0
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_115 = PHI <p_114(38), p_116(39)>
        version 115
        ptr-info 0x7f495696db70>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d1b8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b6c0
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_115 = PHI <p_114(38), p_116(39)>
        version 115
        ptr-info 0x7f495696db70>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:146:19: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                   ^
============gimple assign==================
_120 = _119 == 98;
 <ssa_name 0x7f495697b7e0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _119 = *p_115;
    version 119>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b7e0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _119 = *p_115;
    version 119>
test.c:146:30: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                              ^
============gimple assign==================
_121 = _118 | _120;
 <ssa_name 0x7f495697b798
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _118 = _117 == 110;
    version 118>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b798
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _118 = _117 == 110;
    version 118>
test.c:146:30: warning: use location
============gimple assign==================
# VUSE <.MEM_238>
_123 = *p_122;
 <mem_ref 0x7f495697d208
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d208
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:149:12: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
            ^
============gimple assign==================
# VUSE <.MEM_238>
_124 = MEM[(const char *)p_122 + 1B];
 <mem_ref 0x7f495697d258
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d258
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:149:27: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                           ^
============gimple assign==================
# VUSE <.MEM_238>
_125 = MEM[(const char *)p_122 + 2B];
 <mem_ref 0x7f495697d2a8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d2a8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
test.c:149:41: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                         ^
============gimple assign==================
_126 = _125 == 95;
 <ssa_name 0x7f495697b990
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _125 = MEM[(const char *)p_122 + 2B];
    version 125>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b990
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _125 = MEM[(const char *)p_122 + 2B];
    version 125>
test.c:149:52: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                                    ^
============gimple assign==================
# VUSE <.MEM_238>
_127 = MEM[(const char *)p_122 + 2B];
 <mem_ref 0x7f495697d2f8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d2f8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
test.c:149:41: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                         ^
============gimple assign==================
_128 = _127 == 0;
 <ssa_name 0x7f495697ba20
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _127 = MEM[(const char *)p_122 + 2B];
    version 127>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697ba20
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _127 = MEM[(const char *)p_122 + 2B];
    version 127>
test.c:149:52: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                                    ^
============gimple assign==================
_129 = _126 | _128;
 <ssa_name 0x7f495697b9d8
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _126 = _125 == 95;
    version 126>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b9d8
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _126 = _125 == 95;
    version 126>
test.c:149:52: warning: use location
============gimple assign==================
# VUSE <.MEM_238>
_130 = MEM[(const char *)p_122 + 1B];
 <mem_ref 0x7f495697d348
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d348
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:153:20: warning: use location
           switch (p[1])
                    ^
============gimple assign==================
_131 = (int) _130;
 <ssa_name 0x7f495697baf8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _130 = MEM[(const char *)p_122 + 1B];
    version 130>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697baf8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _130 = MEM[(const char *)p_122 + 1B];
    version 130>
test.c:153:20: warning: use location
============gimple assign==================
p_132 = p_122 + 2;
 <ssa_name 0x7f495697b8b8
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_122 = PHI <p_89(37), p_115(40)>
    version 122
    ptr-info 0x7f495696dba0>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b8b8
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_122 = PHI <p_89(37), p_115(40)>
    version 122
    ptr-info 0x7f495696dba0>
test.c:170:13: warning: use location
           p += 2;
             ^
============gimple assign==================
d_135 = d_97 + _134;
 <ssa_name 0x7f495697b1b0
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_97 = PHI <d_50(15), d_50(16), d_227(23)>
    version 97
    ptr-info 0x7f495696db28>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b1b0
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_97 = PHI <d_50(15), d_50(16), d_227(23)>
    version 97
    ptr-info 0x7f495696db28>
test.c:172:13: warning: use location
           d += strlen (name);
             ^
============gimple assign==================
# VUSE <.MEM_238>
_136 = *p_122;
 <mem_ref 0x7f495697d398
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d398
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:174:17: warning: use location
       else if (p[0] == 'D')
                 ^
============gimple assign==================
# VUSE <.MEM_238>
_137 = MEM[(const char *)p_122 + 1B];
 <mem_ref 0x7f495697d3e8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d3e8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:178:20: warning: use location
           switch (p[1])
                    ^
============gimple assign==================
_138 = (int) _137;
 <ssa_name 0x7f495697bcf0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _137 = MEM[(const char *)p_122 + 1B];
    version 137>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697bcf0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _137 = MEM[(const char *)p_122 + 1B];
    version 137>
test.c:178:20: warning: use location
============gimple assign==================
d_141 = d_97 + _140;
 <ssa_name 0x7f495697b1b0
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_97 = PHI <d_50(15), d_50(16), d_227(23)>
    version 97
    ptr-info 0x7f495696db28>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697b1b0
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_97 = PHI <d_50(15), d_50(16), d_227(23)>
    version 97
    ptr-info 0x7f495696db28>
test.c:190:13: warning: use location
           d += strlen (name);
             ^
============gimple assign==================
# VUSE <.MEM_239>
_143 = *p_142;
 <mem_ref 0x7f495697d438
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d438
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:194:12: warning: use location
       if (p[0] == '_')
            ^
============gimple assign==================
# VUSE <.MEM_239>
_144 = MEM[(const char *)p_142 + 1B];
 <mem_ref 0x7f495697d488
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d488
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:197:16: warning: use location
           if (p[1] == '_')
                ^
============gimple assign==================
p_145 = p_142 + 2;
 <ssa_name 0x7f495697be58
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_142 = PHI <p_132(48), p_122(49)>
    version 142
    ptr-info 0x7f495696dc30>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697be58
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_142 = PHI <p_132(48), p_122(49)>
    version 142
    ptr-info 0x7f495696dc30>
test.c:200:17: warning: use location
               p += 2;
                 ^
============gimple assign==================
# VUSE <.MEM_239>
_146 = MEM[(const char *)p_142 + 2B];
 <mem_ref 0x7f495697d4d8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d4d8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
test.c:202:19: warning: use location
               if (ISDIGIT (*p))
                   ^
============gimple assign==================
_147 = (unsigned int) _146;
 <ssa_name 0x7f495697bf78
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _146 = MEM[(const char *)p_142 + 2B];
    version 146>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697bf78
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _146 = MEM[(const char *)p_142 + 2B];
    version 146>
test.c:202:19: warning: use location
============gimple assign==================
_148 = _147 + 4294967248;
 <ssa_name 0x7f495697f000
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _147 = (unsigned int) _146;
    version 147>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f000
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _147 = (unsigned int) _146;
    version 147>
test.c:202:19: warning: use location
============gimple assign==================
p_150 = p_149 + 1;
 <ssa_name 0x7f495697f090
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_149 = PHI <p_145(55), p_228(56)>
    version 149
    ptr-info 0x7f495696dc60>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f090
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_149 = PHI <p_145(55), p_228(56)>
    version 149
    ptr-info 0x7f495696dc60>
test.c:206:22: warning: use location
                     p++;
                      ^
============gimple assign==================
# VUSE <.MEM_239>
_151 = *p_150;
 <mem_ref 0x7f495697d528
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f0d8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_150 = p_149 + 1;
        version 150
        ptr-info 0x7f495696dc78>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d528
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f0d8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_150 = p_149 + 1;
        version 150
        ptr-info 0x7f495696dc78>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:207:26: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                          ^
============gimple assign==================
_152 = (unsigned int) _151;
 <ssa_name 0x7f495697f120
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _151 = *p_150;
    version 151>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f120
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _151 = *p_150;
    version 151>
test.c:207:26: warning: use location
============gimple assign==================
_153 = _152 + 4294967248;
 <ssa_name 0x7f495697f168
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _152 = (unsigned int) _151;
    version 152>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f168
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _152 = (unsigned int) _151;
    version 152>
test.c:207:26: warning: use location
============gimple assign==================
# VUSE <.MEM_239>
_154 = *p_150;
 <mem_ref 0x7f495697d578
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f0d8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_150 = p_149 + 1;
        version 150
        ptr-info 0x7f495696dc78>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d578
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f0d8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_150 = p_149 + 1;
        version 150
        ptr-info 0x7f495696dc78>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:207:44: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                                            ^
============gimple assign==================
# VUSE <.MEM_239>
_155 = MEM[(const char *)p_150 + 1B];
 <mem_ref 0x7f495697d5c8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f0d8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_150 = p_149 + 1;
        version 150
        ptr-info 0x7f495696dc78>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d5c8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f0d8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_150 = p_149 + 1;
        version 150
        ptr-info 0x7f495696dc78>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:207:58: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                                                          ^
============gimple assign==================
_156 = (unsigned int) _155;
 <ssa_name 0x7f495697f240
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _155 = MEM[(const char *)p_150 + 1B];
    version 155>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f240
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _155 = MEM[(const char *)p_150 + 1B];
    version 155>
test.c:207:58: warning: use location
============gimple assign==================
_157 = _156 + 4294967248;
 <ssa_name 0x7f495697f288
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _156 = (unsigned int) _155;
    version 156>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f288
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _156 = (unsigned int) _155;
    version 156>
test.c:207:58: warning: use location
============gimple assign==================
# VUSE <.MEM_239>
_158 = *p_150;
 <mem_ref 0x7f495697d618
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f0d8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_150 = p_149 + 1;
        version 150
        ptr-info 0x7f495696dc78>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d618
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f0d8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_150 = p_149 + 1;
        version 150
        ptr-info 0x7f495696dc78>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:208:23: warning: use location
                   if (*p == 'X')
                       ^
============gimple assign==================
p_159 = p_149 + 2;
 <ssa_name 0x7f495697f090
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_149 = PHI <p_145(55), p_228(56)>
    version 149
    ptr-info 0x7f495696dc60>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f090
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_149 = PHI <p_145(55), p_228(56)>
    version 149
    ptr-info 0x7f495696dc60>
test.c:210:24: warning: use location
                       p++;
                        ^
============gimple assign==================
p_161 = p_160 + 1;
 <ssa_name 0x7f495697f3a8
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_160 = PHI <p_159(61), p_161(62)>
    version 160
    ptr-info 0x7f495696dca8>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f3a8
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_160 = PHI <p_159(61), p_161(62)>
    version 160
    ptr-info 0x7f495696dca8>
test.c:212:26: warning: use location
                         p++;
                          ^
============gimple assign==================
# VUSE <.MEM_239>
_162 = *p_160;
 <mem_ref 0x7f495697d668
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f3a8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_160 = PHI <p_159(61), p_161(62)>
        version 160
        ptr-info 0x7f495696dca8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d668
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f3a8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_160 = PHI <p_159(61), p_161(62)>
        version 160
        ptr-info 0x7f495696dca8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:211:31: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                               ^
============gimple assign==================
_163 = _162 == 110;
 <ssa_name 0x7f495697f438
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _162 = *p_160;
    version 162>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f438
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _162 = *p_160;
    version 162>
test.c:211:42: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                                          ^
============gimple assign==================
# VUSE <.MEM_239>
_164 = *p_160;
 <mem_ref 0x7f495697d6b8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f3a8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_160 = PHI <p_159(61), p_161(62)>
        version 160
        ptr-info 0x7f495696dca8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d6b8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f3a8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_160 = PHI <p_159(61), p_161(62)>
        version 160
        ptr-info 0x7f495696dca8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:211:31: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                               ^
============gimple assign==================
_165 = _164 == 98;
 <ssa_name 0x7f495697f4c8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _164 = *p_160;
    version 164>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f4c8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _164 = *p_160;
    version 164>
test.c:211:42: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                                          ^
============gimple assign==================
_166 = _163 | _165;
 <ssa_name 0x7f495697f480
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _163 = _162 == 110;
    version 163>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f480
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _163 = _162 == 110;
    version 163>
test.c:211:42: warning: use location
============gimple assign==================
# VUSE <.MEM_239>
_167 = MEM[(const char *)p_142 + 2B];
 <mem_ref 0x7f495697d708
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d708
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
test.c:215:25: warning: use location
               else if (p[0] == '_' && p[1] != '_')
                         ^
============gimple assign==================
# VUSE <.MEM_239>
_168 = MEM[(const char *)p_142 + 3B];
 <mem_ref 0x7f495697d758
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bf30 type <pointer_type 0x7f4956938c78> constant 3>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d758
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bf30 type <pointer_type 0x7f4956938c78> constant 3>>
test.c:215:40: warning: use location
               else if (p[0] == '_' && p[1] != '_')
                                        ^
============gimple assign==================
# VUSE <.MEM_239>
_170 = special[k_169][0];
 <array_ref 0x7f4956978770
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f49569787a8
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:230:52 start: test.c:230:52 finish: test.c:230:52>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:230:37 start: test.c:230:37 finish: test.c:230:37>
============COMPONEN2T_REF==================
 <array_ref 0x7f4956978770
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f49569787a8
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:230:52 start: test.c:230:52 finish: test.c:230:52>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:230:37 start: test.c:230:37 finish: test.c:230:37>
test.c:230:37: warning: use location
                       size_t slen = strlen (special[k][0]);
                                     ^
============gimple assign==================
# VUSE <.MEM_239>
_172 = special[k_169][0];
 <array_ref 0x7f4956978850
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978888
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:231:46 start: test.c:231:46 finish: test.c:231:46>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:231:27 start: test.c:231:27 finish: test.c:231:27>
============COMPONEN2T_REF==================
 <array_ref 0x7f4956978850
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978888
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:231:46 start: test.c:231:46 finish: test.c:231:46>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:231:27 start: test.c:231:27 finish: test.c:231:27>
test.c:231:27: warning: use location
                       if (strncmp (p, special[k][0], slen) == 0)
                           ^
============gimple assign==================
p_174 = p_145 + slen_171;
 <ssa_name 0x7f495697bf30
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_145 = p_142 + 2;
    version 145
    ptr-info 0x7f495696dc48>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697bf30
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_145 = p_142 + 2;
    version 145
    ptr-info 0x7f495696dc48>
test.c:233:29: warning: use location
                           p += slen;
                             ^
============gimple assign==================
# VUSE <.MEM_239>
_175 = special[k_169][1];
 <array_ref 0x7f4956978930
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978968
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:234:49 start: test.c:234:49 finish: test.c:234:49>
    arg 1 <integer_cst 0x7f4956df2f90 type <integer_type 0x7f4956e065e8 int> constant 1>
    test.c:234:34 start: test.c:234:34 finish: test.c:234:34>
============COMPONEN2T_REF==================
 <array_ref 0x7f4956978930
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978968
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:234:49 start: test.c:234:49 finish: test.c:234:49>
    arg 1 <integer_cst 0x7f4956df2f90 type <integer_type 0x7f4956e065e8 int> constant 1>
    test.c:234:34 start: test.c:234:34 finish: test.c:234:34>
test.c:234:34: warning: use location
                           slen = strlen (special[k][1]);
                                  ^
============gimple assign==================
# VUSE <.MEM_239>
_177 = special[k_169][1];
 <array_ref 0x7f4956978a10
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978a48
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:235:45 start: test.c:235:45 finish: test.c:235:45>
    arg 1 <integer_cst 0x7f4956df2f90 type <integer_type 0x7f4956e065e8 int> constant 1>
    test.c:235:48 start: test.c:235:48 finish: test.c:235:48>
============COMPONEN2T_REF==================
 <array_ref 0x7f4956978a10
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978a48
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:235:45 start: test.c:235:45 finish: test.c:235:45>
    arg 1 <integer_cst 0x7f4956df2f90 type <integer_type 0x7f4956e065e8 int> constant 1>
    test.c:235:48 start: test.c:235:48 finish: test.c:235:48>
test.c:235:48: warning: use location
                           memcpy (d, special[k][1], slen);
                                                ^
============gimple assign==================
d_179 = d_178 + slen_176;
 <ssa_name 0x7f495697f8b8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_178 = PHI <d_135(48), d_97(49)>
    version 178
    ptr-info 0x7f495696dd50>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f8b8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_178 = PHI <d_135(48), d_97(49)>
    version 178
    ptr-info 0x7f495696dd50>
test.c:236:29: warning: use location
                           d += slen;
                             ^
============gimple assign==================
k_180 = k_169 + 1;
 <ssa_name 0x7f495697f630
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
    var <var_decl 0x7f4956974360 k>
    def_stmt k_169 = PHI <0(65), k_180(68)>
    version 169>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f630
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
    var <var_decl 0x7f4956974360 k>
    def_stmt k_169 = PHI <0(65), k_180(68)>
    version 169>
test.c:228:55: warning: use location
                   for (k = 0; special[k][0] != NULL; k++)
                                                       ^
============gimple assign==================
# VUSE <.MEM_239>
_181 = special[k_169][0];
 <array_ref 0x7f4956978af0
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978b28
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:228:38 start: test.c:228:38 finish: test.c:228:38>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:228:41 start: test.c:228:41 finish: test.c:228:41>
============COMPONEN2T_REF==================
 <array_ref 0x7f4956978af0
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978b28
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:228:38 start: test.c:228:38 finish: test.c:228:38>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:228:41 start: test.c:228:41 finish: test.c:228:41>
test.c:228:41: warning: use location
                   for (k = 0; special[k][0] != NULL; k++)
                                         ^
============gimple assign==================
# VUSE <.MEM_240>
_182 = special[k_169][0];
 <array_ref 0x7f4956978bd0
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978c08
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:240:30 start: test.c:240:30 finish: test.c:240:30>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:240:33 start: test.c:240:33 finish: test.c:240:33>
============COMPONEN2T_REF==================
 <array_ref 0x7f4956978bd0
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978c08
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:240:30 start: test.c:240:30 finish: test.c:240:30>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:240:33 start: test.c:240:33 finish: test.c:240:33>
test.c:240:33: warning: use location
                   if (special[k][0] != NULL)
                                 ^
============gimple assign==================
d_183 = d_178 + 1;
 <ssa_name 0x7f495697f8b8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_178 = PHI <d_135(48), d_97(49)>
    version 178
    ptr-info 0x7f495696dd50>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697f8b8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_178 = PHI <d_135(48), d_97(49)>
    version 178
    ptr-info 0x7f495696dd50>
test.c:247:21: warning: use location
                   *d++ = '.';
                     ^
============gimple assign==================
# .MEM_265 = VDEF <.MEM_239>
*d_178 = 46;
 <integer_cst 0x7f495696d030 type <integer_type 0x7f4956938888 char> constant 46>
============gimple assign==================
# VUSE <.MEM_239>
_184 = MEM[(const char *)p_142 + 1B];
 <mem_ref 0x7f495697d820
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d820
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:251:21: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                     ^
============gimple assign==================
_185 = _184 == 66;
 <ssa_name 0x7f495697fa68
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _184 = MEM[(const char *)p_142 + 1B];
    version 184>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697fa68
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _184 = MEM[(const char *)p_142 + 1B];
    version 184>
test.c:251:32: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                                ^
============gimple assign==================
# VUSE <.MEM_239>
_186 = MEM[(const char *)p_142 + 1B];
 <mem_ref 0x7f495697d870
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d870
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:251:21: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                     ^
============gimple assign==================
_187 = _186 == 69;
 <ssa_name 0x7f495697faf8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _186 = MEM[(const char *)p_142 + 1B];
    version 186>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697faf8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _186 = MEM[(const char *)p_142 + 1B];
    version 186>
test.c:251:32: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                                ^
============gimple assign==================
_188 = _185 | _187;
 <ssa_name 0x7f495697fab0
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _185 = _184 == 66;
    version 185>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697fab0
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _185 = _184 == 66;
    version 185>
test.c:251:32: warning: use location
============gimple assign==================
p_189 = p_142 + 2;
 <ssa_name 0x7f495697be58
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_142 = PHI <p_132(48), p_122(49)>
    version 142
    ptr-info 0x7f495696dc30>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697be58
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_142 = PHI <p_132(48), p_122(49)>
    version 142
    ptr-info 0x7f495696dc30>
test.c:254:17: warning: use location
               p += 2;
                 ^
============gimple assign==================
p_191 = p_190 + 1;
 <ssa_name 0x7f495697fc18
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_190 = PHI <p_189(73), p_191(74)>
    version 190
    ptr-info 0x7f495696dde0>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697fc18
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_190 = PHI <p_189(73), p_191(74)>
    version 190
    ptr-info 0x7f495696dde0>
test.c:256:18: warning: use location
                 p++;
                  ^
============gimple assign==================
# VUSE <.MEM_239>
_192 = *p_190;
 <mem_ref 0x7f495697d8c0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fc18
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_190 = PHI <p_189(73), p_191(74)>
        version 190
        ptr-info 0x7f495696dde0>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d8c0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fc18
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_190 = PHI <p_189(73), p_191(74)>
        version 190
        ptr-info 0x7f495696dde0>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:255:22: warning: use location
               while (ISDIGIT (*p))
                      ^
============gimple assign==================
_193 = (unsigned int) _192;
 <ssa_name 0x7f495697fca8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _192 = *p_190;
    version 192>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697fca8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _192 = *p_190;
    version 192>
test.c:255:22: warning: use location
============gimple assign==================
_194 = _193 + 4294967248;
 <ssa_name 0x7f495697fcf0
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _193 = (unsigned int) _192;
    version 193>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697fcf0
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _193 = (unsigned int) _192;
    version 193>
test.c:255:22: warning: use location
============gimple assign==================
# VUSE <.MEM_239>
_195 = *p_190;
 <mem_ref 0x7f495697d910
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fc18
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_190 = PHI <p_189(73), p_191(74)>
        version 190
        ptr-info 0x7f495696dde0>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d910
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fc18
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_190 = PHI <p_189(73), p_191(74)>
        version 190
        ptr-info 0x7f495696dde0>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:257:20: warning: use location
               if (p[0] == 's' && p[1] == 0)
                    ^
============gimple assign==================
# VUSE <.MEM_239>
_196 = MEM[(const char *)p_190 + 1B];
 <mem_ref 0x7f495697d960
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fc18
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_190 = PHI <p_189(73), p_191(74)>
        version 190
        ptr-info 0x7f495696dde0>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d960
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fc18
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_190 = PHI <p_189(73), p_191(74)>
        version 190
        ptr-info 0x7f495696dde0>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:257:35: warning: use location
               if (p[0] == 's' && p[1] == 0)
                                   ^
============gimple assign==================
# VUSE <.MEM_239>
_198 = *p_197;
 <mem_ref 0x7f495697d9b0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fe10
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_197 = PHI <p_142(53), p_150(60), p_160(63)>
        version 197
        ptr-info 0x7f495696de10>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697d9b0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fe10
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_197 = PHI <p_142(53), p_150(60), p_160(63)>
        version 197
        ptr-info 0x7f495696de10>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:266:12: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
            ^
============gimple assign==================
# VUSE <.MEM_239>
_199 = MEM[(const char *)p_197 + 1B];
 <mem_ref 0x7f495697da00
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fe10
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_197 = PHI <p_142(53), p_150(60), p_160(63)>
        version 197
        ptr-info 0x7f495696de10>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697da00
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fe10
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_197 = PHI <p_142(53), p_150(60), p_160(63)>
        version 197
        ptr-info 0x7f495696de10>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
test.c:266:26: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
                          ^
============gimple assign==================
_200 = (unsigned int) _199;
 <ssa_name 0x7f495697fea0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _199 = MEM[(const char *)p_197 + 1B];
    version 199>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697fea0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _199 = MEM[(const char *)p_197 + 1B];
    version 199>
test.c:266:26: warning: use location
============gimple assign==================
_201 = _200 + 4294967248;
 <ssa_name 0x7f495697fee8
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _200 = (unsigned int) _199;
    version 200>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697fee8
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _200 = (unsigned int) _199;
    version 200>
test.c:266:26: warning: use location
============gimple assign==================
p_202 = p_197 + 2;
 <ssa_name 0x7f495697fe10
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_197 = PHI <p_142(53), p_150(60), p_160(63)>
    version 197
    ptr-info 0x7f495696de10>
============COMPONEN2T_REF==================
 <ssa_name 0x7f495697fe10
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_197 = PHI <p_142(53), p_150(60), p_160(63)>
    version 197
    ptr-info 0x7f495696de10>
test.c:269:13: warning: use location
           p += 2;
             ^
============gimple assign==================
p_204 = p_203 + 1;
 <ssa_name 0x7f4956982000
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_203 = PHI <p_202(80), p_204(81)>
    version 203
    ptr-info 0x7f495696de40>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956982000
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_203 = PHI <p_202(80), p_204(81)>
    version 203
    ptr-info 0x7f495696de40>
test.c:271:14: warning: use location
             p++;
              ^
============gimple assign==================
# VUSE <.MEM_239>
_205 = *p_203;
 <mem_ref 0x7f495697da50
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956982000
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_203 = PHI <p_202(80), p_204(81)>
        version 203
        ptr-info 0x7f495696de40>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697da50
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956982000
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_203 = PHI <p_202(80), p_204(81)>
        version 203
        ptr-info 0x7f495696de40>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:270:18: warning: use location
           while (ISDIGIT (*p))
                  ^
============gimple assign==================
_206 = (unsigned int) _205;
 <ssa_name 0x7f4956982090
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _205 = *p_203;
    version 205>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956982090
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _205 = *p_203;
    version 205>
test.c:270:18: warning: use location
============gimple assign==================
_207 = _206 + 4294967248;
 <ssa_name 0x7f49569820d8
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _206 = (unsigned int) _205;
    version 206>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569820d8
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _206 = (unsigned int) _205;
    version 206>
test.c:270:18: warning: use location
============gimple assign==================
# VUSE <.MEM_239>
_209 = *p_208;
 <mem_ref 0x7f495697daa0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956982168
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_208 = PHI <p_197(78), p_197(79), p_203(82)>
        version 208
        ptr-info 0x7f495696de70>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697daa0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956982168
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_208 = PHI <p_197(78), p_197(79), p_203(82)>
        version 208
        ptr-info 0x7f495696de70>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:273:11: warning: use location
       if (*p == 0)
           ^
============gimple assign==================
# .MEM_266 = VDEF <.MEM_241>
*d_210 = 0;
 <integer_cst 0x7f495693bdf8 type <integer_type 0x7f4956938888 char> constant 0>
============gimple assign==================
_211 = demangled_39;
 <ssa_name 0x7f4956976120
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_39 = malloc (_38);
    version 39
    ptr-info 0x7f495696d900>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956976120
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_39 = malloc (_38);
    version 39
    ptr-info 0x7f495696d900>
test.c:282:10: warning: use location
   return demangled;
          ^
============gimple assign==================
len0_213 = (int) _212;
 <ssa_name 0x7f4956982288
    type <integer_type 0x7f4956e067e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f4956e06738 precision 64 min <integer_cst 0x7f4956df2eb8 0> max <integer_cst 0x7f4956df4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4956e129d8>>
   
    def_stmt _212 = strlen (mangled_30);
    version 212>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956982288
    type <integer_type 0x7f4956e067e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f4956e06738 precision 64 min <integer_cst 0x7f4956df2eb8 0> max <integer_cst 0x7f4956df4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4956e129d8>>
   
    def_stmt _212 = strlen (mangled_30);
    version 212>
test.c:285:8: warning: use location
   len0 = strlen (mangled);
        ^
============gimple assign==================
_214 = len0_213 + 3;
 <ssa_name 0x7f49569822d0
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
    var <var_decl 0x7f4956974000 len0>
    def_stmt len0_213 = (int) _212;
    version 213>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569822d0
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
    var <var_decl 0x7f4956974000 len0>
    def_stmt len0_213 = (int) _212;
    version 213>
test.c:286:15: warning: use location
   demangled = XNEWVEC (char, len0 + 3); /* memory leak */
               ^
============gimple assign==================
_215 = (long unsigned int) _214;
 <ssa_name 0x7f4956982318
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _214 = len0_213 + 3;
    version 214>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956982318
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _214 = len0_213 + 3;
    version 214>
test.c:286:15: warning: use location
============gimple assign==================
# VUSE <.MEM_267>
_217 = *mangled_30;
 <mem_ref 0x7f495697db40
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956969e58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f495695ef30 mangled>
        def_stmt mangled_30 = PHI <p_14(6), mangled_29(7)>
        version 30
        ptr-info 0x7f495696d8e8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f495697db40
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956969e58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f495695ef30 mangled>
        def_stmt mangled_30 = PHI <p_14(6), mangled_29(7)>
        version 30
        ptr-info 0x7f495696d8e8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
test.c:288:14: warning: use location
   if (mangled[0] == '<')
              ^
============gimple assign==================
_220 = demangled_216;
 <ssa_name 0x7f49569823a8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_216 = malloc (_215);
    version 216
    ptr-info 0x7f495696deb8>
============COMPONEN2T_REF==================
 <ssa_name 0x7f49569823a8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_216 = malloc (_215);
    version 216
    ptr-info 0x7f495696deb8>
test.c:293:10: warning: use location
   return demangled;
          ^
============gimple assign==================
_270 = _221;
 <ssa_name 0x7f4956982510
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    def_stmt _221 = PHI <demangled_39(84), demangled_216(88)>
    version 221
    ptr-info 0x7f495696dee8>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956982510
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    def_stmt _221 = PHI <demangled_39(84), demangled_216(88)>
    version 221
    ptr-info 0x7f495696dee8>
lto1: warning: use location
============gimple assign==================
_26 = _270;
 <ssa_name 0x7f4956990480
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569745a0 D.4091>
    def_stmt _270 = _221;
    version 270
    ptr-info 0x7f495696dfc0>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956990480
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569745a0 D.4091>
    def_stmt _270 = _221;
    version 270
    ptr-info 0x7f495696dfc0>
test.c:303:10: warning: use location
   return ada_demangle (mangled);
          ^
============gimple assign==================
_272 = _27;
 <ssa_name 0x7f4956958c60
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    def_stmt _27 = PHI <_23(4), 0B(5), _26(89)>
    version 27
    ptr-info 0x7f495696d8b8>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956958c60
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    def_stmt _27 = PHI <_23(4), 0B(5), _26(89)>
    version 27
    ptr-info 0x7f495696d8b8>
lto1: warning: use location
============gimple assign==================
q_16 = _272;
 <ssa_name 0x7f4956990510
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956955ea0 D.4052>
    def_stmt _272 = _27;
    version 272
    ptr-info 0x7f495696dfd8>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956990510
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956955ea0 D.4052>
    def_stmt _272 = _27;
    version 272
    ptr-info 0x7f495696dfd8>
test.c:319:6: warning: use location
    q = cplus_demangle (p);
      ^
============gimple assign==================
# VUSE <.MEM_245>
_230 = MEM[(int *)q_16];
 <mem_ref 0x7f49569877a8
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    arg 0 <ssa_name 0x7f49569582d0
        type <pointer_type 0x7f4956938930 type <integer_type 0x7f4956938888 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
        var <var_decl 0x7f4956955750 q>
        def_stmt q_16 = _272;
        version 16
        ptr-info 0x7f495696d810>
    arg 1 <integer_cst 0x7f495696d228 type <pointer_type 0x7f4956e0da80> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f49569877a8
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    arg 0 <ssa_name 0x7f49569582d0
        type <pointer_type 0x7f4956938930 type <integer_type 0x7f4956938888 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
        var <var_decl 0x7f4956955750 q>
        def_stmt q_16 = _272;
        version 16
        ptr-info 0x7f495696d810>
    arg 1 <integer_cst 0x7f495696d228 type <pointer_type 0x7f4956e0da80> constant 0>>
test.c:32:2: warning: use location
  __USE(s);
  ^
============gimple assign==================
# VUSE <.MEM_245>
_232 = MEM[(int *)p_14];
 <mem_ref 0x7f4956987898
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    arg 0 <ssa_name 0x7f4956958240
        type <pointer_type 0x7f4956938930 type <integer_type 0x7f4956938888 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
        var <var_decl 0x7f49569556c0 p>
        def_stmt p_14 = malloc (4);
        version 14
        ptr-info 0x7f495696d7e0>
    arg 1 <integer_cst 0x7f495696d228 type <pointer_type 0x7f4956e0da80> constant 0>>
============COMPONEN2T_REF==================
 <mem_ref 0x7f4956987898
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    arg 0 <ssa_name 0x7f4956958240
        type <pointer_type 0x7f4956938930 type <integer_type 0x7f4956938888 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
        var <var_decl 0x7f49569556c0 p>
        def_stmt p_14 = malloc (4);
        version 14
        ptr-info 0x7f495696d7e0>
    arg 1 <integer_cst 0x7f495696d228 type <pointer_type 0x7f4956e0da80> constant 0>>
test.c:32:2: warning: use location
  __USE(s);
  ^
============gimple assign==================
_17 = mangled_278;
 <ssa_name 0x7f4956990708
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4957b87bd0 mangled>
    def_stmt mangled_278 = "123456";
    version 278
    ptr-info 0x7f4956991000>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956990708
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4957b87bd0 mangled>
    def_stmt mangled_278 = "123456";
    version 278
    ptr-info 0x7f4956991000>
test.c:330:12: warning: use location
   *mangled += symbol_len;
            ^
============gimple assign==================
_18 = _17 + 3;
 <ssa_name 0x7f4956958318
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
   
    def_stmt _17 = mangled_278;
    version 17
    ptr-info 0x7f495696d828>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956958318
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
   
    def_stmt _17 = mangled_278;
    version 17
    ptr-info 0x7f495696d828>
test.c:330:12: warning: use location
============gimple assign==================
mangled_279 = _18;
 <ssa_name 0x7f4956958360
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
   
    def_stmt _18 = _17 + 3;
    version 18
    ptr-info 0x7f495696d840>
============COMPONEN2T_REF==================
 <ssa_name 0x7f4956958360
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
   
    def_stmt _18 = _17 + 3;
    version 18
    ptr-info 0x7f495696d840>
test.c:330:12: warning: use location
============gimple assign==================
# .MEM_9 = VDEF <.MEM_246>
t ={v} {CLOBBER};
 <constructor 0x7f495693bd38
    type <integer_type 0x7f4956941b28 time_t DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f4956e06738 precision 64 min <integer_cst 0x7f4956df2e70 -9223372036854775808> max <integer_cst 0x7f4956df2e88 9223372036854775807> context <translation_unit_decl 0x7f4956dfd168 test.c>
        pointer_to_this <pointer_type 0x7f4956941e70>>
    constant volatile lngt 0>
============gimple assign==================
# .MEM_10 = VDEF <.MEM_9>
s ={v} {CLOBBER};
 <constructor 0x7f495693bd50
    type <record_type 0x7f4956938a80 string BLK
        size <integer_cst 0x7f4956e0e0a8 constant 192>
        unit size <integer_cst 0x7f4956e0e078 constant 24>
        align 64 symtab 0 alias set -1 canonical type 0x7f49569389d8
        fields <field_decl 0x7f495693a2f8 b type <pointer_type 0x7f4956938930>
            unsigned DI file test.c line 16 col 9
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 offset_align 128
            offset <integer_cst 0x7f4956df2c18 constant 0>
            bit offset <integer_cst 0x7f4956df2c60 constant 0> context <record_type 0x7f49569389d8 string> chain <field_decl 0x7f495693a260 p>> context <translation_unit_decl 0x7f4956dfd168 test.c>
        pointer_to_this <pointer_type 0x7f4956938b28> chain <type_decl 0x7f495693a390 D.3990>>
    constant volatile lngt 0>
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
------------------------------
mangled_278 = "123456";
 <addr_expr 0x7f495692c9a0
    type <pointer_type 0x7f4956941d20
        type <array_type 0x7f4956941c78 type <integer_type 0x7f4956938888 char>
            BLK
            size <integer_cst 0x7f495693b288 constant 56>
            unit size <integer_cst 0x7f495693b270 constant 7>
            align 8 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941bd0>
            pointer_to_this <pointer_type 0x7f4956941d20>>
        unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly constant
    arg 0 <string_cst 0x7f495692c980 type <array_type 0x7f4956941c78>
        readonly constant static "123456\000">
    test.c:340:24 start: test.c:340:24 finish: test.c:340:24>
------------------------------
_2 = (unsigned int) _1;
 <ssa_name 0x7f4956dfa8b8
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _1 = time (&t);
    version 1>
------------------------------
# VUSE <.MEM_247>
_19 = s.e;
 <component_ref 0x7f4956df1720
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    arg 0 <var_decl 0x7f4957b87c60 s
        type <record_type 0x7f4956938a80 string BLK
            size <integer_cst 0x7f4956e0e0a8 constant 192>
            unit size <integer_cst 0x7f4956e0e078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f49569389d8 fields <field_decl 0x7f495693a2f8 b> context <translation_unit_decl 0x7f4956dfd168 test.c>
            pointer_to_this <pointer_type 0x7f4956938b28> chain <type_decl 0x7f495693a390 D.3990>>
        BLK file test.c line 339 col 9 size <integer_cst 0x7f4956e0e0a8 192> unit size <integer_cst 0x7f4956e0e078 24>
        align 128 context <function_decl 0x7f4956939b00 main>
        chain <var_decl 0x7f4957b87bd0 mangled type <pointer_type 0x7f4956938c78>
            unsigned DI file test.c line 340 col 14 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
            align 64 context <function_decl 0x7f4956939b00 main> chain <function_decl 0x7f4956945300 time>>>
    arg 1 <field_decl 0x7f495693a1c8 e type <pointer_type 0x7f4956938930>
        unsigned DI file test.c line 18 col 9 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f4956df2c48 constant 16>
        bit offset <integer_cst 0x7f4956df2c60 constant 0> context <record_type 0x7f49569389d8 string>>
    test.c:24:18 start: test.c:24:18 finish: test.c:24:18>
------------------------------
# VUSE <.MEM_248>
_20 = s.p;
 <component_ref 0x7f4956df17e0
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    arg 0 <var_decl 0x7f4957b87c60 s
        type <record_type 0x7f4956938a80 string BLK
            size <integer_cst 0x7f4956e0e0a8 constant 192>
            unit size <integer_cst 0x7f4956e0e078 constant 24>
            align 64 symtab 0 alias set -1 canonical type 0x7f49569389d8 fields <field_decl 0x7f495693a2f8 b> context <translation_unit_decl 0x7f4956dfd168 test.c>
            pointer_to_this <pointer_type 0x7f4956938b28> chain <type_decl 0x7f495693a390 D.3990>>
        BLK file test.c line 339 col 9 size <integer_cst 0x7f4956e0e0a8 192> unit size <integer_cst 0x7f4956e0e078 24>
        align 128 context <function_decl 0x7f4956939b00 main>
        chain <var_decl 0x7f4957b87bd0 mangled type <pointer_type 0x7f4956938c78>
            unsigned DI file test.c line 340 col 14 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
            align 64 context <function_decl 0x7f4956939b00 main> chain <function_decl 0x7f4956945300 time>>>
    arg 1 <field_decl 0x7f495693a260 p type <pointer_type 0x7f4956938930>
        unsigned DI file test.c line 17 col 9 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
        align 64 offset_align 128
        offset <integer_cst 0x7f4956df2c18 constant 0> bit offset <integer_cst 0x7f4956df2be8 64> context <record_type 0x7f49569389d8 string>
        chain <field_decl 0x7f495693a1c8 e type <pointer_type 0x7f4956938930>
            unsigned DI file test.c line 18 col 9 size <integer_cst 0x7f4956df2be8 64> unit size <integer_cst 0x7f4956df2c00 8>
            align 64 offset_align 128
            offset <integer_cst 0x7f4956df2c48 constant 16>
            bit offset <integer_cst 0x7f4956df2c60 constant 0> context <record_type 0x7f49569389d8 string>>>
    test.c:24:11 start: test.c:24:11 finish: test.c:24:11>
------------------------------
_13 = _12 % 2;
 <ssa_name 0x7f49569581b0
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _12 = rand ();
    version 12>
------------------------------
_15 = mangled_278;
 <ssa_name 0x7f4956990708
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4957b87bd0 mangled>
    def_stmt mangled_278 = "123456";
    version 278
    ptr-info 0x7f4956991000>
------------------------------
_22 = _21 % 2;
 <ssa_name 0x7f4956958ab0
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _21 = rand ();
    version 21>
------------------------------
_25 = _24 % 2;
 <ssa_name 0x7f4956958b88
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _24 = rand ();
    version 24>
------------------------------
mangled_29 = p_14 + 5;
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>
------------------------------
# VUSE <.MEM_255>
_31 = *mangled_30;
 <mem_ref 0x7f495696e870
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956969e58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f495695ef30 mangled>
        def_stmt mangled_30 = PHI <p_14(6), mangled_29(7)>
        version 30
        ptr-info 0x7f495696d8e8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_32 = (unsigned char) _31;
 <ssa_name 0x7f4956969ea0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _31 = *mangled_30;
    version 31>
------------------------------
_33 = _32 + 159;
 <ssa_name 0x7f4956969ee8
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _32 = (unsigned char) _31;
    version 32>
------------------------------
_35 = (unsigned int) _34;
 <ssa_name 0x7f4956969f78
    type <integer_type 0x7f4956e067e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f4956e06738 precision 64 min <integer_cst 0x7f4956df2eb8 0> max <integer_cst 0x7f4956df4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4956e129d8>>
   
    def_stmt _34 = strlen (mangled_30);
    version 34>
------------------------------
_36 = _35 + 8;
 <ssa_name 0x7f4956976000
    type <integer_type 0x7f4956942a80 public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f495693b318 0> max <integer_cst 0x7f495693b300 4294967295>>
   
    def_stmt _35 = (unsigned int) _34;
    version 35>
------------------------------
len0_37 = (int) _36;
 <ssa_name 0x7f4956976048
    type <integer_type 0x7f4956942a80 public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f495693b318 0> max <integer_cst 0x7f495693b300 4294967295>>
   
    def_stmt _36 = _35 + 8;
    version 36>
------------------------------
_38 = (long unsigned int) len0_37;
 <ssa_name 0x7f4956976090
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
    var <var_decl 0x7f4956974000 len0>
    def_stmt len0_37 = (int) _36;
    version 37>
------------------------------
d_40 = demangled_39;
 <ssa_name 0x7f4956976120
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_39 = malloc (_38);
    version 39
    ptr-info 0x7f495696d900>
------------------------------
# VUSE <.MEM_235>
_42 = *p_41;
 <mem_ref 0x7f495696e8c0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f49569761b0
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_41 = PHI <mangled_30(9), p_222(10)>
        version 41
        ptr-info 0x7f495696d930>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_43 = (unsigned char) _42;
 <ssa_name 0x7f49569761f8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _42 = *p_41;
    version 42>
------------------------------
_44 = _43 + 159;
 <ssa_name 0x7f4956976240
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _43 = (unsigned char) _42;
    version 43>
------------------------------
_46 = p_45;
 <ssa_name 0x7f49569762d0
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_45 = PHI <p_41(12), p_224(13)>
    version 45
    ptr-info 0x7f495696d948>
------------------------------
p_47 = p_45 + 1;
 <ssa_name 0x7f49569762d0
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_45 = PHI <p_41(12), p_224(13)>
    version 45
    ptr-info 0x7f495696d948>
------------------------------
_49 = d_48;
 <ssa_name 0x7f49569763a8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_48 = PHI <d_80(12), d_225(13)>
    version 48
    ptr-info 0x7f495696d990>
------------------------------
d_50 = d_48 + 1;
 <ssa_name 0x7f49569763a8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_48 = PHI <d_80(12), d_225(13)>
    version 48
    ptr-info 0x7f495696d990>
------------------------------
# VUSE <.MEM_236>
_51 = *_46;
 <mem_ref 0x7f495696e910
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
# VUSE <.MEM_260>
_52 = MEM[(const char *)_46 + 1B];
 <mem_ref 0x7f495696e9b0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
_53 = (unsigned char) _52;
 <ssa_name 0x7f49569764c8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _52 = MEM[(const char *)_46 + 1B];
    version 52>
------------------------------
_54 = _53 + 159;
 <ssa_name 0x7f4956976510
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _53 = (unsigned char) _52;
    version 53>
------------------------------
_55 = _54 <= 25;
 <ssa_name 0x7f4956976558
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _54 = _53 + 159;
    version 54>
------------------------------
# VUSE <.MEM_260>
_56 = MEM[(const char *)_46 + 1B];
 <mem_ref 0x7f495696ea00
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
_57 = (unsigned char) _56;
 <ssa_name 0x7f49569765e8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _56 = MEM[(const char *)_46 + 1B];
    version 56>
------------------------------
_58 = _57 + 208;
 <ssa_name 0x7f4956976630
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _57 = (unsigned char) _56;
    version 57>
------------------------------
_59 = _58 <= 9;
 <ssa_name 0x7f4956976678
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _58 = _57 + 208;
    version 58>
------------------------------
_60 = _55 | _59;
 <ssa_name 0x7f49569765a0
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _55 = _54 <= 25;
    version 55>
------------------------------
# VUSE <.MEM_260>
_61 = MEM[(const char *)_46 + 1B];
 <mem_ref 0x7f495696ea50
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
# VUSE <.MEM_260>
_62 = MEM[(const char *)_46 + 2B];
 <mem_ref 0x7f495696eaa0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
------------------------------
_63 = (unsigned char) _62;
 <ssa_name 0x7f4956976798
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _62 = MEM[(const char *)_46 + 2B];
    version 62>
------------------------------
_64 = _63 + 159;
 <ssa_name 0x7f49569767e0
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _63 = (unsigned char) _62;
    version 63>
------------------------------
_65 = _64 <= 25;
 <ssa_name 0x7f4956976828
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _64 = _63 + 159;
    version 64>
------------------------------
# VUSE <.MEM_260>
_66 = MEM[(const char *)_46 + 2B];
 <mem_ref 0x7f495696eaf0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976318
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
       
        def_stmt _46 = p_45;
        version 46
        ptr-info 0x7f495696d960>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
------------------------------
_67 = (unsigned char) _66;
 <ssa_name 0x7f49569768b8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _66 = MEM[(const char *)_46 + 2B];
    version 66>
------------------------------
_68 = _67 + 208;
 <ssa_name 0x7f4956976900
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _67 = (unsigned char) _66;
    version 67>
------------------------------
_69 = _68 <= 9;
 <ssa_name 0x7f4956976948
    type <integer_type 0x7f49569429d8 public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b2e8 0> max <integer_cst 0x7f495693b2d0 255>>
   
    def_stmt _68 = _67 + 208;
    version 68>
------------------------------
_70 = _65 | _69;
 <ssa_name 0x7f4956976870
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _65 = _64 <= 25;
    version 65>
------------------------------
# VUSE <.MEM_235>
_71 = *p_41;
 <mem_ref 0x7f495696eb40
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f49569761b0
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_41 = PHI <mangled_30(9), p_222(10)>
        version 41
        ptr-info 0x7f495696d930>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
# VUSE <.MEM_235>
_73 = operators[k_72][0];
 <array_ref 0x7f4956965d90
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956965dc8
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:85:46 start: test.c:85:46 finish: test.c:85:46>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:85:29 start: test.c:85:29 finish: test.c:85:29>
------------------------------
# VUSE <.MEM_235>
_75 = operators[k_72][0];
 <array_ref 0x7f4956965e70
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956965ea8
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:86:40 start: test.c:86:40 finish: test.c:86:40>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:86:19 start: test.c:86:19 finish: test.c:86:19>
------------------------------
p_77 = p_41 + slen_74;
 <ssa_name 0x7f49569761b0
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_41 = PHI <mangled_30(9), p_222(10)>
    version 41
    ptr-info 0x7f495696d930>
------------------------------
# VUSE <.MEM_235>
_78 = operators[k_72][1];
 <array_ref 0x7f4956965f50
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956965f88
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:89:43 start: test.c:89:43 finish: test.c:89:43>
    arg 1 <integer_cst 0x7f4956df2f90 type <integer_type 0x7f4956e065e8 int> constant 1>
    test.c:89:26 start: test.c:89:26 finish: test.c:89:26>
------------------------------
_81 = d_80;
 <ssa_name 0x7f4956976ca8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_80 = PHI <demangled_39(9), d_223(10)>
    version 80
    ptr-info 0x7f495696da38>
------------------------------
d_82 = d_80 + 1;
 <ssa_name 0x7f4956976ca8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_80 = PHI <demangled_39(9), d_223(10)>
    version 80
    ptr-info 0x7f495696da38>
------------------------------
# VUSE <.MEM_257>
_83 = operators[k_72][1];
 <array_ref 0x7f4956978000
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978038
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:91:39 start: test.c:91:39 finish: test.c:91:39>
    arg 1 <integer_cst 0x7f4956df2f90 type <integer_type 0x7f4956e065e8 int> constant 1>
    test.c:91:42 start: test.c:91:42 finish: test.c:91:42>
------------------------------
d_84 = d_82 + slen_79;
 <ssa_name 0x7f4956976d38
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_82 = d_80 + 1;
    version 82
    ptr-info 0x7f495696da68>
------------------------------
d_85 = d_84 + 1;
 <ssa_name 0x7f4956976dc8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_84 = d_82 + slen_79;
    version 84
    ptr-info 0x7f495696da98>
------------------------------
k_86 = k_72 + 1;
 <ssa_name 0x7f4956976a68
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
    var <var_decl 0x7f4956974240 k>
    def_stmt k_72 = PHI <0(18), k_86(21)>
    version 72>
------------------------------
# VUSE <.MEM_235>
_87 = operators[k_72][0];
 <array_ref 0x7f49569780e0
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978118
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:83:27 start: test.c:83:27 finish: test.c:83:27>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:83:30 start: test.c:83:30 finish: test.c:83:30>
------------------------------
# VUSE <.MEM_237>
_88 = operators[k_72][0];
 <array_ref 0x7f49569781c0
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f49569781f8
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87ab0 operators type <array_type 0x7f49569417e0>
            readonly static BLK file test.c line 73 col 37
            size <integer_cst 0x7f495693b1c8 constant 2560>
            unit size <integer_cst 0x7f4956eabc30 constant 320>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d6a8> chain <var_decl 0x7f495695e510 k>>
        arg 1 <ssa_name 0x7f4956976a68 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974240 k>
            def_stmt k_72 = PHI <0(18), k_86(21)>
            version 72>
        test.c:98:24 start: test.c:98:24 finish: test.c:98:24>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:98:27 start: test.c:98:27 finish: test.c:98:27>
------------------------------
# VUSE <.MEM_238>
_90 = *p_89;
 <mem_ref 0x7f495696ec30
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
# VUSE <.MEM_238>
_91 = MEM[(const char *)p_89 + 1B];
 <mem_ref 0x7f495696ec80
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
# VUSE <.MEM_238>
_92 = MEM[(const char *)p_89 + 2B];
 <mem_ref 0x7f495696ecd0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
------------------------------
# VUSE <.MEM_238>
_93 = MEM[(const char *)p_89 + 3B];
 <mem_ref 0x7f495696ed20
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bf30 type <pointer_type 0x7f4956938c78> constant 3>>
------------------------------
# VUSE <.MEM_238>
_94 = MEM[(const char *)p_89 + 2B];
 <mem_ref 0x7f495696ed70
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
------------------------------
# VUSE <.MEM_238>
_95 = MEM[(const char *)p_89 + 3B];
 <mem_ref 0x7f495696edc0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bf30 type <pointer_type 0x7f4956938c78> constant 3>>
------------------------------
p_96 = p_89 + 4;
 <ssa_name 0x7f4956976f30
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
    version 89
    ptr-info 0x7f495696daf8>
------------------------------
d_98 = d_97 + 1;
 <ssa_name 0x7f495697b1b0
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_97 = PHI <d_50(15), d_50(16), d_227(23)>
    version 97
    ptr-info 0x7f495696db28>
------------------------------
# VUSE <.MEM_238>
_99 = *p_89;
 <mem_ref 0x7f495696ee88
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
# VUSE <.MEM_238>
_100 = MEM[(const char *)p_89 + 1B];
 <mem_ref 0x7f495696eed8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
# VUSE <.MEM_238>
_101 = *p_89;
 <mem_ref 0x7f495696ef28
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_102 = _101 == 80;
 <ssa_name 0x7f495697b2d0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _101 = *p_89;
    version 101>
------------------------------
# VUSE <.MEM_238>
_103 = *p_89;
 <mem_ref 0x7f495696ef78
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_104 = _103 == 78;
 <ssa_name 0x7f495697b360
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _103 = *p_89;
    version 103>
------------------------------
_105 = _102 | _104;
 <ssa_name 0x7f495697b318
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _102 = _101 == 80;
    version 102>
------------------------------
# VUSE <.MEM_238>
_106 = MEM[(const char *)p_89 + 1B];
 <mem_ref 0x7f495696efc8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
# VUSE <.MEM_238>
_107 = *p_89;
 <mem_ref 0x7f495697d028
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_108 = _107 == 78;
 <ssa_name 0x7f495697b480
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _107 = *p_89;
    version 107>
------------------------------
# VUSE <.MEM_238>
_109 = *p_89;
 <mem_ref 0x7f495697d078
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_110 = _109 == 83;
 <ssa_name 0x7f495697b510
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _109 = *p_89;
    version 109>
------------------------------
_111 = _108 | _110;
 <ssa_name 0x7f495697b4c8
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _108 = _107 == 78;
    version 108>
------------------------------
# VUSE <.MEM_238>
_112 = MEM[(const char *)p_89 + 1B];
 <mem_ref 0x7f495697d0c8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
# VUSE <.MEM_238>
_113 = *p_89;
 <mem_ref 0x7f495697d118
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956976f30
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
        version 89
        ptr-info 0x7f495696daf8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
p_114 = p_89 + 1;
 <ssa_name 0x7f4956976f30
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_89 = PHI <p_47(15), p_47(16), p_226(23)>
    version 89
    ptr-info 0x7f495696daf8>
------------------------------
p_116 = p_115 + 1;
 <ssa_name 0x7f495697b6c0
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_115 = PHI <p_114(38), p_116(39)>
    version 115
    ptr-info 0x7f495696db70>
------------------------------
# VUSE <.MEM_238>
_117 = *p_115;
 <mem_ref 0x7f495697d168
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b6c0
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_115 = PHI <p_114(38), p_116(39)>
        version 115
        ptr-info 0x7f495696db70>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_118 = _117 == 110;
 <ssa_name 0x7f495697b750
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _117 = *p_115;
    version 117>
------------------------------
# VUSE <.MEM_238>
_119 = *p_115;
 <mem_ref 0x7f495697d1b8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b6c0
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_115 = PHI <p_114(38), p_116(39)>
        version 115
        ptr-info 0x7f495696db70>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_120 = _119 == 98;
 <ssa_name 0x7f495697b7e0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _119 = *p_115;
    version 119>
------------------------------
_121 = _118 | _120;
 <ssa_name 0x7f495697b798
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _118 = _117 == 110;
    version 118>
------------------------------
# VUSE <.MEM_238>
_123 = *p_122;
 <mem_ref 0x7f495697d208
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
# VUSE <.MEM_238>
_124 = MEM[(const char *)p_122 + 1B];
 <mem_ref 0x7f495697d258
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
# VUSE <.MEM_238>
_125 = MEM[(const char *)p_122 + 2B];
 <mem_ref 0x7f495697d2a8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
------------------------------
_126 = _125 == 95;
 <ssa_name 0x7f495697b990
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _125 = MEM[(const char *)p_122 + 2B];
    version 125>
------------------------------
# VUSE <.MEM_238>
_127 = MEM[(const char *)p_122 + 2B];
 <mem_ref 0x7f495697d2f8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
------------------------------
_128 = _127 == 0;
 <ssa_name 0x7f495697ba20
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _127 = MEM[(const char *)p_122 + 2B];
    version 127>
------------------------------
_129 = _126 | _128;
 <ssa_name 0x7f495697b9d8
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _126 = _125 == 95;
    version 126>
------------------------------
# VUSE <.MEM_238>
_130 = MEM[(const char *)p_122 + 1B];
 <mem_ref 0x7f495697d348
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
_131 = (int) _130;
 <ssa_name 0x7f495697baf8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _130 = MEM[(const char *)p_122 + 1B];
    version 130>
------------------------------
p_132 = p_122 + 2;
 <ssa_name 0x7f495697b8b8
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_122 = PHI <p_89(37), p_115(40)>
    version 122
    ptr-info 0x7f495696dba0>
------------------------------
d_135 = d_97 + _134;
 <ssa_name 0x7f495697b1b0
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_97 = PHI <d_50(15), d_50(16), d_227(23)>
    version 97
    ptr-info 0x7f495696db28>
------------------------------
# VUSE <.MEM_238>
_136 = *p_122;
 <mem_ref 0x7f495697d398
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
# VUSE <.MEM_238>
_137 = MEM[(const char *)p_122 + 1B];
 <mem_ref 0x7f495697d3e8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697b8b8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_122 = PHI <p_89(37), p_115(40)>
        version 122
        ptr-info 0x7f495696dba0>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
_138 = (int) _137;
 <ssa_name 0x7f495697bcf0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _137 = MEM[(const char *)p_122 + 1B];
    version 137>
------------------------------
d_141 = d_97 + _140;
 <ssa_name 0x7f495697b1b0
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_97 = PHI <d_50(15), d_50(16), d_227(23)>
    version 97
    ptr-info 0x7f495696db28>
------------------------------
# VUSE <.MEM_239>
_143 = *p_142;
 <mem_ref 0x7f495697d438
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
# VUSE <.MEM_239>
_144 = MEM[(const char *)p_142 + 1B];
 <mem_ref 0x7f495697d488
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
p_145 = p_142 + 2;
 <ssa_name 0x7f495697be58
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_142 = PHI <p_132(48), p_122(49)>
    version 142
    ptr-info 0x7f495696dc30>
------------------------------
# VUSE <.MEM_239>
_146 = MEM[(const char *)p_142 + 2B];
 <mem_ref 0x7f495697d4d8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
------------------------------
_147 = (unsigned int) _146;
 <ssa_name 0x7f495697bf78
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _146 = MEM[(const char *)p_142 + 2B];
    version 146>
------------------------------
_148 = _147 + 4294967248;
 <ssa_name 0x7f495697f000
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _147 = (unsigned int) _146;
    version 147>
------------------------------
p_150 = p_149 + 1;
 <ssa_name 0x7f495697f090
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_149 = PHI <p_145(55), p_228(56)>
    version 149
    ptr-info 0x7f495696dc60>
------------------------------
# VUSE <.MEM_239>
_151 = *p_150;
 <mem_ref 0x7f495697d528
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f0d8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_150 = p_149 + 1;
        version 150
        ptr-info 0x7f495696dc78>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_152 = (unsigned int) _151;
 <ssa_name 0x7f495697f120
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _151 = *p_150;
    version 151>
------------------------------
_153 = _152 + 4294967248;
 <ssa_name 0x7f495697f168
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _152 = (unsigned int) _151;
    version 152>
------------------------------
# VUSE <.MEM_239>
_154 = *p_150;
 <mem_ref 0x7f495697d578
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f0d8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_150 = p_149 + 1;
        version 150
        ptr-info 0x7f495696dc78>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
# VUSE <.MEM_239>
_155 = MEM[(const char *)p_150 + 1B];
 <mem_ref 0x7f495697d5c8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f0d8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_150 = p_149 + 1;
        version 150
        ptr-info 0x7f495696dc78>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
_156 = (unsigned int) _155;
 <ssa_name 0x7f495697f240
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _155 = MEM[(const char *)p_150 + 1B];
    version 155>
------------------------------
_157 = _156 + 4294967248;
 <ssa_name 0x7f495697f288
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _156 = (unsigned int) _155;
    version 156>
------------------------------
# VUSE <.MEM_239>
_158 = *p_150;
 <mem_ref 0x7f495697d618
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f0d8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_150 = p_149 + 1;
        version 150
        ptr-info 0x7f495696dc78>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
p_159 = p_149 + 2;
 <ssa_name 0x7f495697f090
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_149 = PHI <p_145(55), p_228(56)>
    version 149
    ptr-info 0x7f495696dc60>
------------------------------
p_161 = p_160 + 1;
 <ssa_name 0x7f495697f3a8
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_160 = PHI <p_159(61), p_161(62)>
    version 160
    ptr-info 0x7f495696dca8>
------------------------------
# VUSE <.MEM_239>
_162 = *p_160;
 <mem_ref 0x7f495697d668
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f3a8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_160 = PHI <p_159(61), p_161(62)>
        version 160
        ptr-info 0x7f495696dca8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_163 = _162 == 110;
 <ssa_name 0x7f495697f438
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _162 = *p_160;
    version 162>
------------------------------
# VUSE <.MEM_239>
_164 = *p_160;
 <mem_ref 0x7f495697d6b8
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697f3a8
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_160 = PHI <p_159(61), p_161(62)>
        version 160
        ptr-info 0x7f495696dca8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_165 = _164 == 98;
 <ssa_name 0x7f495697f4c8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _164 = *p_160;
    version 164>
------------------------------
_166 = _163 | _165;
 <ssa_name 0x7f495697f480
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _163 = _162 == 110;
    version 163>
------------------------------
# VUSE <.MEM_239>
_167 = MEM[(const char *)p_142 + 2B];
 <mem_ref 0x7f495697d708
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bed0 type <pointer_type 0x7f4956938c78> constant 2>>
------------------------------
# VUSE <.MEM_239>
_168 = MEM[(const char *)p_142 + 3B];
 <mem_ref 0x7f495697d758
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bf30 type <pointer_type 0x7f4956938c78> constant 3>>
------------------------------
# VUSE <.MEM_239>
_170 = special[k_169][0];
 <array_ref 0x7f4956978770
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f49569787a8
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:230:52 start: test.c:230:52 finish: test.c:230:52>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:230:37 start: test.c:230:37 finish: test.c:230:37>
------------------------------
# VUSE <.MEM_239>
_172 = special[k_169][0];
 <array_ref 0x7f4956978850
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978888
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:231:46 start: test.c:231:46 finish: test.c:231:46>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:231:27 start: test.c:231:27 finish: test.c:231:27>
------------------------------
p_174 = p_145 + slen_171;
 <ssa_name 0x7f495697bf30
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_145 = p_142 + 2;
    version 145
    ptr-info 0x7f495696dc48>
------------------------------
# VUSE <.MEM_239>
_175 = special[k_169][1];
 <array_ref 0x7f4956978930
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978968
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:234:49 start: test.c:234:49 finish: test.c:234:49>
    arg 1 <integer_cst 0x7f4956df2f90 type <integer_type 0x7f4956e065e8 int> constant 1>
    test.c:234:34 start: test.c:234:34 finish: test.c:234:34>
------------------------------
# VUSE <.MEM_239>
_177 = special[k_169][1];
 <array_ref 0x7f4956978a10
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978a48
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:235:45 start: test.c:235:45 finish: test.c:235:45>
    arg 1 <integer_cst 0x7f4956df2f90 type <integer_type 0x7f4956e065e8 int> constant 1>
    test.c:235:48 start: test.c:235:48 finish: test.c:235:48>
------------------------------
d_179 = d_178 + slen_176;
 <ssa_name 0x7f495697f8b8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_178 = PHI <d_135(48), d_97(49)>
    version 178
    ptr-info 0x7f495696dd50>
------------------------------
k_180 = k_169 + 1;
 <ssa_name 0x7f495697f630
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
    var <var_decl 0x7f4956974360 k>
    def_stmt k_169 = PHI <0(65), k_180(68)>
    version 169>
------------------------------
# VUSE <.MEM_239>
_181 = special[k_169][0];
 <array_ref 0x7f4956978af0
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978b28
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:228:38 start: test.c:228:38 finish: test.c:228:38>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:228:41 start: test.c:228:41 finish: test.c:228:41>
------------------------------
# VUSE <.MEM_240>
_182 = special[k_169][0];
 <array_ref 0x7f4956978bd0
    type <pointer_type 0x7f4956941690
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        readonly public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality>
    readonly
    arg 0 <array_ref 0x7f4956978c08
        type <array_type 0x7f4956941738 type <pointer_type 0x7f4956941690>
            TI
            size <integer_cst 0x7f4956df2c30 constant 128>
            unit size <integer_cst 0x7f4956df2c48 constant 16>
            align 64 symtab 0 alias set -1 structural equality domain <integer_type 0x7f4956941498>>
        readonly
        arg 0 <var_decl 0x7f4957b87b40 special type <array_type 0x7f49569419d8>
            readonly static BLK file test.c line 218 col 45
            size <integer_cst 0x7f495693b1e0 constant 768>
            unit size <integer_cst 0x7f495693b210 constant 96>
            align 256 context <function_decl 0x7f4956939f00 ada_demangle> initial <constructor 0x7f495696d7c8> chain <var_decl 0x7f495695e3f0 k>>
        arg 1 <ssa_name 0x7f495697f630 type <integer_type 0x7f4956e065e8 int>
            var <var_decl 0x7f4956974360 k>
            def_stmt k_169 = PHI <0(65), k_180(68)>
            version 169>
        test.c:240:30 start: test.c:240:30 finish: test.c:240:30>
    arg 1 <integer_cst 0x7f4956df2f78 type <integer_type 0x7f4956e065e8 int> constant 0>
    test.c:240:33 start: test.c:240:33 finish: test.c:240:33>
------------------------------
d_183 = d_178 + 1;
 <ssa_name 0x7f495697f8b8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956974120 d>
    def_stmt d_178 = PHI <d_135(48), d_97(49)>
    version 178
    ptr-info 0x7f495696dd50>
------------------------------
# VUSE <.MEM_239>
_184 = MEM[(const char *)p_142 + 1B];
 <mem_ref 0x7f495697d820
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
_185 = _184 == 66;
 <ssa_name 0x7f495697fa68
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _184 = MEM[(const char *)p_142 + 1B];
    version 184>
------------------------------
# VUSE <.MEM_239>
_186 = MEM[(const char *)p_142 + 1B];
 <mem_ref 0x7f495697d870
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697be58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_142 = PHI <p_132(48), p_122(49)>
        version 142
        ptr-info 0x7f495696dc30>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
_187 = _186 == 69;
 <ssa_name 0x7f495697faf8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _186 = MEM[(const char *)p_142 + 1B];
    version 186>
------------------------------
_188 = _185 | _187;
 <ssa_name 0x7f495697fab0
    type <boolean_type 0x7f4956942b28 _Bool public unsigned QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e06b28 precision 1 min <integer_cst 0x7f495693b348 0> max <integer_cst 0x7f495693b330 1>>
   
    def_stmt _185 = _184 == 66;
    version 185>
------------------------------
p_189 = p_142 + 2;
 <ssa_name 0x7f495697be58
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_142 = PHI <p_132(48), p_122(49)>
    version 142
    ptr-info 0x7f495696dc30>
------------------------------
p_191 = p_190 + 1;
 <ssa_name 0x7f495697fc18
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_190 = PHI <p_189(73), p_191(74)>
    version 190
    ptr-info 0x7f495696dde0>
------------------------------
# VUSE <.MEM_239>
_192 = *p_190;
 <mem_ref 0x7f495697d8c0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fc18
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_190 = PHI <p_189(73), p_191(74)>
        version 190
        ptr-info 0x7f495696dde0>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_193 = (unsigned int) _192;
 <ssa_name 0x7f495697fca8
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _192 = *p_190;
    version 192>
------------------------------
_194 = _193 + 4294967248;
 <ssa_name 0x7f495697fcf0
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _193 = (unsigned int) _192;
    version 193>
------------------------------
# VUSE <.MEM_239>
_195 = *p_190;
 <mem_ref 0x7f495697d910
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fc18
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_190 = PHI <p_189(73), p_191(74)>
        version 190
        ptr-info 0x7f495696dde0>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
# VUSE <.MEM_239>
_196 = MEM[(const char *)p_190 + 1B];
 <mem_ref 0x7f495697d960
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fc18
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_190 = PHI <p_189(73), p_191(74)>
        version 190
        ptr-info 0x7f495696dde0>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
# VUSE <.MEM_239>
_198 = *p_197;
 <mem_ref 0x7f495697d9b0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fe10
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_197 = PHI <p_142(53), p_150(60), p_160(63)>
        version 197
        ptr-info 0x7f495696de10>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
# VUSE <.MEM_239>
_199 = MEM[(const char *)p_197 + 1B];
 <mem_ref 0x7f495697da00
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f495697fe10
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_197 = PHI <p_142(53), p_150(60), p_160(63)>
        version 197
        ptr-info 0x7f495696de10>
    arg 1 <integer_cst 0x7f495693bde0 type <pointer_type 0x7f4956938c78> constant 1>>
------------------------------
_200 = (unsigned int) _199;
 <ssa_name 0x7f495697fea0
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _199 = MEM[(const char *)p_197 + 1B];
    version 199>
------------------------------
_201 = _200 + 4294967248;
 <ssa_name 0x7f495697fee8
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _200 = (unsigned int) _199;
    version 200>
------------------------------
p_202 = p_197 + 2;
 <ssa_name 0x7f495697fe10
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_197 = PHI <p_142(53), p_150(60), p_160(63)>
    version 197
    ptr-info 0x7f495696de10>
------------------------------
p_204 = p_203 + 1;
 <ssa_name 0x7f4956982000
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4956974090 p>
    def_stmt p_203 = PHI <p_202(80), p_204(81)>
    version 203
    ptr-info 0x7f495696de40>
------------------------------
# VUSE <.MEM_239>
_205 = *p_203;
 <mem_ref 0x7f495697da50
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956982000
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_203 = PHI <p_202(80), p_204(81)>
        version 203
        ptr-info 0x7f495696de40>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_206 = (unsigned int) _205;
 <ssa_name 0x7f4956982090
    type <integer_type 0x7f4956938888 char public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938930>>
   
    def_stmt _205 = *p_203;
    version 205>
------------------------------
_207 = _206 + 4294967248;
 <ssa_name 0x7f49569820d8
    type <integer_type 0x7f4956e06690 unsigned int public unsigned SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e06690 precision 32 min <integer_cst 0x7f4956df2e58 0> max <integer_cst 0x7f4956df2e10 4294967295>
        pointer_to_this <pointer_type 0x7f4956e12888>>
   
    def_stmt _206 = (unsigned int) _205;
    version 206>
------------------------------
# VUSE <.MEM_239>
_209 = *p_208;
 <mem_ref 0x7f495697daa0
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956982168
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f4956974090 p>
        def_stmt p_208 = PHI <p_197(78), p_197(79), p_203(82)>
        version 208
        ptr-info 0x7f495696de70>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_211 = demangled_39;
 <ssa_name 0x7f4956976120
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_39 = malloc (_38);
    version 39
    ptr-info 0x7f495696d900>
------------------------------
len0_213 = (int) _212;
 <ssa_name 0x7f4956982288
    type <integer_type 0x7f4956e067e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 canonical type 0x7f4956e06738 precision 64 min <integer_cst 0x7f4956df2eb8 0> max <integer_cst 0x7f4956df4500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4956e129d8>>
   
    def_stmt _212 = strlen (mangled_30);
    version 212>
------------------------------
_214 = len0_213 + 3;
 <ssa_name 0x7f49569822d0
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
    var <var_decl 0x7f4956974000 len0>
    def_stmt len0_213 = (int) _212;
    version 213>
------------------------------
_215 = (long unsigned int) _214;
 <ssa_name 0x7f4956982318
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    def_stmt _214 = len0_213 + 3;
    version 214>
------------------------------
# VUSE <.MEM_267>
_217 = *mangled_30;
 <mem_ref 0x7f495697db40
    type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
        pointer_to_this <pointer_type 0x7f4956938c78>>
   
    arg 0 <ssa_name 0x7f4956969e58
        type <pointer_type 0x7f4956938c78 type <integer_type 0x7f4956938bd0 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality
            pointer_to_this <pointer_type 0x7f4956938d20>>
        var <var_decl 0x7f495695ef30 mangled>
        def_stmt mangled_30 = PHI <p_14(6), mangled_29(7)>
        version 30
        ptr-info 0x7f495696d8e8>
    arg 1 <integer_cst 0x7f495693be70 type <pointer_type 0x7f4956938c78> constant 0>>
------------------------------
_220 = demangled_216;
 <ssa_name 0x7f49569823a8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_216 = malloc (_215);
    version 216
    ptr-info 0x7f495696deb8>
------------------------------
_270 = _221;
 <ssa_name 0x7f4956982510
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    def_stmt _221 = PHI <demangled_39(84), demangled_216(88)>
    version 221
    ptr-info 0x7f495696dee8>
------------------------------
_26 = _270;
 <ssa_name 0x7f4956990480
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569745a0 D.4091>
    def_stmt _270 = _221;
    version 270
    ptr-info 0x7f495696dfc0>
------------------------------
_272 = _27;
 <ssa_name 0x7f4956958c60
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    def_stmt _27 = PHI <_23(4), 0B(5), _26(89)>
    version 27
    ptr-info 0x7f495696d8b8>
------------------------------
q_16 = _272;
 <ssa_name 0x7f4956990510
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f4956955ea0 D.4052>
    def_stmt _272 = _27;
    version 272
    ptr-info 0x7f495696dfd8>
------------------------------
# VUSE <.MEM_245>
_230 = MEM[(int *)q_16];
 <mem_ref 0x7f49569877a8
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    arg 0 <ssa_name 0x7f49569582d0
        type <pointer_type 0x7f4956938930 type <integer_type 0x7f4956938888 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
        var <var_decl 0x7f4956955750 q>
        def_stmt q_16 = _272;
        version 16
        ptr-info 0x7f495696d810>
    arg 1 <integer_cst 0x7f495696d228 type <pointer_type 0x7f4956e0da80> constant 0>>
------------------------------
# VUSE <.MEM_245>
_232 = MEM[(int *)p_14];
 <mem_ref 0x7f4956987898
    type <integer_type 0x7f4956e065e8 int public SI
        size <integer_cst 0x7f4956df2e28 constant 32>
        unit size <integer_cst 0x7f4956df2e40 constant 4>
        align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
        pointer_to_this <pointer_type 0x7f4956e0da80>>
   
    arg 0 <ssa_name 0x7f4956958240
        type <pointer_type 0x7f4956938930 type <integer_type 0x7f4956938888 char>
            public unsigned DI
            size <integer_cst 0x7f4956df2be8 constant 64>
            unit size <integer_cst 0x7f4956df2c00 constant 8>
            align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
        var <var_decl 0x7f49569556c0 p>
        def_stmt p_14 = malloc (4);
        version 14
        ptr-info 0x7f495696d7e0>
    arg 1 <integer_cst 0x7f495696d228 type <pointer_type 0x7f4956e0da80> constant 0>>
------------------------------
_17 = mangled_278;
 <ssa_name 0x7f4956990708
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
    var <var_decl 0x7f4957b87bd0 mangled>
    def_stmt mangled_278 = "123456";
    version 278
    ptr-info 0x7f4956991000>
------------------------------
_18 = _17 + 3;
 <ssa_name 0x7f4956958318
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
   
    def_stmt _17 = mangled_278;
    version 17
    ptr-info 0x7f495696d828>
------------------------------
mangled_279 = _18;
 <ssa_name 0x7f4956958360
    type <pointer_type 0x7f4956938c78
        type <integer_type 0x7f4956938bd0 char readonly public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938c78>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality
        pointer_to_this <pointer_type 0x7f4956938d20>>
   
    def_stmt _18 = _17 + 3;
    version 18
    ptr-info 0x7f495696d840>
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
tewtw
if (_217 == 60)
if (_33 > 25)
tewtw
if (_71 == 79)
if (_44 > 25)
tewtw
tewtw
if (_113 == 88)
if (_112 == 0)
if (_111 != 0)
if (_106 == 0)
if (_105 != 0)
if (_100 == 0)
if (_99 == 69)
if (_95 == 95)
if (_94 == 95)
if (_93 == 0)
if (_92 == 66)
if (_91 == 75)
if (_90 == 84)
tewtw
if (_136 == 68)
if (_129 != 0)
if (_124 != 0)
if (_123 == 83)
tewtw
if (_188 != 0)
if (_168 != 95)
if (_167 == 95)
if (_148 <= 9)
if (_144 == 95)
if (_143 == 95)
tewtw
if (_201 <= 9)
if (_198 == 46)
tewtw
if (_209 == 0)
tewtw
if (_207 <= 9)
tewtw
if (_196 == 0)
if (_195 == 115)
if (_194 <= 9)
tewtw
tewtw
if (_166 != 0)
if (_158 == 88)
if (_157 <= 9)
if (_154 == 95)
if (_153 <= 9)
tewtw
tewtw
tewtw
if (_121 != 0)
tewtw
tewtw
if (_70 != 0)
if (_61 == 95)
if (_60 != 0)
tewtw
if (q_16 != 0B)
tewtw
tewtw
tewtw
tewtw
tewtw
tewtw
tewtw
tewtw
tewtw
tewtw
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
=======================================================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 14 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:__printf_chk========= [0m
[40;33m =======POP node_fun stack:__printf_chk========= [0m
[40;42m =======pre add _ fucntion:__builtin___sprintf_chk========= [0m
[40;33m =======POP node_fun stack:__builtin___sprintf_chk========= [0m
[40;42m =======pre add _ fucntion:__builtin_object_size========= [0m
[40;33m =======POP node_fun stack:__builtin_object_size========= [0m
[40;42m =======pre add _ fucntion:strcpy========= [0m
[40;33m =======POP node_fun stack:strcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:strncmp========= [0m
[40;33m =======POP node_fun stack:strncmp========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:strncpy========= [0m
[40;33m =======POP node_fun stack:strncpy========= [0m
[40;42m =======pre add _ fucntion:srand========= [0m
[40;33m =======POP node_fun stack:srand========= [0m
[40;42m =======pre add _ fucntion:time========= [0m
[40;33m =======POP node_fun stack:time========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m
 <function_decl 0x7f4956939b00 main
    type <function_type 0x7f49569387e0
        type <integer_type 0x7f4956e065e8 int public SI
            size <integer_cst 0x7f4956df2e28 constant 32>
            unit size <integer_cst 0x7f4956df2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
            pointer_to_this <pointer_type 0x7f4956e0da80>>
        QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 335 col 5 align 8 context <translation_unit_decl 0x7f4956dfd168 test.c> initial <block 0x7f49569470c0>
    result <result_decl 0x7f4956dfd1e0 D.4026 type <integer_type 0x7f4956e065e8 int>
        ignored SI file test.c line 335 col 5 size <integer_cst 0x7f4956df2e28 32> unit size <integer_cst 0x7f4956df2e40 4>
        align 32 context <function_decl 0x7f4956939b00 main>>
    struct-function 0x7f4956951000>
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

free (p_14);
test.c:327:5: warning: use location
     free(p);
     ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 92: free (p_14);
test.c:327:5: warning: use location
     free(p);
     ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 92dot graph target basicblock en1

dot graph stmt start free (p_14);
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start free (p_14);
test.c:327:5: warning: use location
     free(p);
     ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (p_14);
test.c:327:5: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

_232 = MEM[(int *)p_14];
test.c:32:2: warning: use location
  __USE(s);
  ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 92: _232 = MEM[(int *)p_14];
test.c:32:2: warning: use location
  __USE(s);
  ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 92dot graph target basicblock en1

dot graph stmt start _232 = MEM[(int *)p_14];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _232 = MEM[(int *)p_14];
test.c:32:2: warning: use location
  __USE(s);
  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_233 = __printf_chk (1, "%d\n", _232);
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 92: _233 = __printf_chk (1, "%d\n", _232);
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 92dot graph target basicblock en1

dot graph stmt start _233 = __printf_chk (1, "%d\n", _232);
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _233 = __printf_chk (1, "%d\n", _232);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_28 = strncmp (p_14, "_ada_", 5);
test.c:44:6: warning: use location
  if (strncmp (mangled, "_ada_", 5) == 0)
      ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 6: _28 = strncmp (p_14, "_ada_", 5);
test.c:44:6: warning: use location
  if (strncmp (mangled, "_ada_", 5) == 0)
      ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 6dot graph target basicblock en1

dot graph stmt start _28 = strncmp (p_14, "_ada_", 5);
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _28 = strncmp (p_14, "_ada_", 5);
test.c:44:6: warning: use location
  if (strncmp (mangled, "_ada_", 5) == 0)
      ^
dot graph stmt end

this stmt is child function---strncmp-----

 ================== trace ================== 
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>
trace fucntion name:strncmp 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_23 = strdup (p_14);
test.c:300:10: warning: use location
   return xstrdup (mangled);
          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 4: _23 = strdup (p_14);
test.c:300:10: warning: use location
   return xstrdup (mangled);
          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 4dot graph target basicblock en1

dot graph stmt start _23 = strdup (p_14);
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _23 = strdup (p_14);
test.c:300:10: warning: use location
   return xstrdup (mangled);
          ^
dot graph stmt end

this stmt is child function---strdup-----

 ================== trace ================== 
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>
trace fucntion name:strdup 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

MEM[(char *)p_14 + 3B] = 0;
test.c:317:19: warning: use location
    p [symbol_len] = '\0';
                   ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 3: MEM[(char *)p_14 + 3B] = 0;
test.c:317:19: warning: use location
    p [symbol_len] = '\0';
                   ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start MEM[(char *)p_14 + 3B] = 0;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start MEM[(char *)p_14 + 3B] = 0;
test.c:317:19: warning: use location
    p [symbol_len] = '\0';
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

strncpy (p_14, _15, 3);
test.c:316:4: warning: use location
    strncpy (p, *mangled, symbol_len);
    ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 3: strncpy (p_14, _15, 3);
test.c:316:4: warning: use location
    strncpy (p, *mangled, symbol_len);
    ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 3dot graph target basicblock en1

dot graph stmt start strncpy (p_14, _15, 3);
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start strncpy (p_14, _15, 3);
test.c:316:4: warning: use location
    strncpy (p, *mangled, symbol_len);
    ^
dot graph stmt end

this stmt is child function---strncpy-----

 ================== trace ================== 
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>
trace fucntion name:strncpy 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

mangled_30 = PHI <p_14(6), mangled_29(7)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 8: mangled_30 = PHI <p_14(6), mangled_29(7)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start mangled_30 = PHI <p_14(6), mangled_29(7)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start mangled_30 = PHI <p_14(6), mangled_29(7)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncpy-----
dot graph entry main
dot graph target entry end

_219 = __builtin___sprintf_chk (demangled_216, 1, _218, "<%s>", mangled_30);
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 87: _219 = __builtin___sprintf_chk (demangled_216, 1, _218, "<%s>", mangled_30);
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 87dot graph target basicblock en1

dot graph stmt start _219 = __builtin___sprintf_chk (demangled_216, 1, _218, "<%s>", mangled_30);
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _219 = __builtin___sprintf_chk (demangled_216, 1, _218, "<%s>", mangled_30);
dot graph stmt end

this stmt is child function---__builtin___sprintf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>
trace fucntion name:__builtin___sprintf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

strcpy (demangled_216, mangled_30);
test.c:289:6: warning: use location
      strcpy (demangled, mangled);
      ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 86: strcpy (demangled_216, mangled_30);
test.c:289:6: warning: use location
      strcpy (demangled, mangled);
      ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 86dot graph target basicblock en1

dot graph stmt start strcpy (demangled_216, mangled_30);
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start strcpy (demangled_216, mangled_30);
test.c:289:6: warning: use location
      strcpy (demangled, mangled);
      ^
dot graph stmt end

this stmt is child function---strcpy-----

 ================== trace ================== 
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>
trace fucntion name:strcpy 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_217 = *mangled_30;
test.c:288:14: warning: use location
   if (mangled[0] == '<')
              ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 85: _217 = *mangled_30;
test.c:288:14: warning: use location
   if (mangled[0] == '<')
              ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 85dot graph target basicblock en1

dot graph stmt start _217 = *mangled_30;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _217 = *mangled_30;
test.c:288:14: warning: use location
   if (mangled[0] == '<')
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_217 == 60)
test.c:288:6: warning: use location
   if (mangled[0] == '<')
      ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 85: if (_217 == 60)
test.c:288:6: warning: use location
   if (mangled[0] == '<')
      ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 85dot graph target basicblock en1

dot graph stmt start if (_217 == 60)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_217 == 60)
test.c:288:6: warning: use location
   if (mangled[0] == '<')
      ^
dot graph stmt end

if (_217 == 60)

 ================== find cond branch ================= 
if (_217 == 60)
Cond in fucntion main basic block 85
 ================== possiable direct basic block ================= 
from main basic block 86
 ================== possiable direct basic block ================= 
from main basic block 87
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_212 = strlen (mangled_30);
test.c:285:10: warning: use location
   len0 = strlen (mangled);
          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 85: _212 = strlen (mangled_30);
test.c:285:10: warning: use location
   len0 = strlen (mangled);
          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 85dot graph target basicblock en1

dot graph stmt start _212 = strlen (mangled_30);
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _212 = strlen (mangled_30);
test.c:285:10: warning: use location
   len0 = strlen (mangled);
          ^
dot graph stmt end

this stmt is child function---strlen-----

 ================== trace ================== 
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>
trace fucntion name:strlen 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_34 = strlen (mangled_30);
test.c:52:9: warning: use location
  len0 = strlen (mangled) + 7 + 1;
         ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 9: _34 = strlen (mangled_30);
test.c:52:9: warning: use location
  len0 = strlen (mangled) + 7 + 1;
         ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 9dot graph target basicblock en1

dot graph stmt start _34 = strlen (mangled_30);
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _34 = strlen (mangled_30);
test.c:52:9: warning: use location
  len0 = strlen (mangled) + 7 + 1;
         ^
dot graph stmt end

this stmt is child function---strlen-----

 ================== trace ================== 
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>
trace fucntion name:strlen 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_31 = *mangled_30;
test.c:48:7: warning: use location
  if (!ISLOWER (mangled[0]))
       ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 8: _31 = *mangled_30;
test.c:48:7: warning: use location
  if (!ISLOWER (mangled[0]))
       ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start _31 = *mangled_30;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _31 = *mangled_30;
test.c:48:7: warning: use location
  if (!ISLOWER (mangled[0]))
       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_32 = (unsigned char) _31;
test.c:48:6: warning: use location
  if (!ISLOWER (mangled[0]))
      ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 8: _32 = (unsigned char) _31;
test.c:48:6: warning: use location
  if (!ISLOWER (mangled[0]))
      ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start _32 = (unsigned char) _31;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _32 = (unsigned char) _31;
test.c:48:6: warning: use location
  if (!ISLOWER (mangled[0]))
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_33 = _32 + 159;
test.c:48:6: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 8: _33 = _32 + 159;
test.c:48:6: warning: use location
  if (!ISLOWER (mangled[0]))
      ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start _33 = _32 + 159;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _33 = _32 + 159;
test.c:48:6: warning: use location
  if (!ISLOWER (mangled[0]))
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_33 > 25)
test.c:48:5: warning: use location
  if (!ISLOWER (mangled[0]))
     ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 8: if (_33 > 25)
test.c:48:5: warning: use location
  if (!ISLOWER (mangled[0]))
     ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 8dot graph target basicblock en1

dot graph stmt start if (_33 > 25)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_33 > 25)
test.c:48:5: warning: use location
  if (!ISLOWER (mangled[0]))
     ^
dot graph stmt end

if (_33 > 25)

 ================== find cond branch ================= 
if (_33 > 25)
Cond in fucntion main basic block 8
 ================== possiable direct basic block ================= 
from main basic block 85
 ================== possiable direct basic block ================= 
from main basic block 9
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

p_41 = PHI <mangled_30(9), p_222(10)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 11: p_41 = PHI <mangled_30(9), p_222(10)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start p_41 = PHI <mangled_30(9), p_222(10)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_41 = PHI <mangled_30(9), p_222(10)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strlen-----
dot graph entry main
dot graph target entry end

_76 = strncmp (p_41, _75, slen_74);
test.c:86:19: warning: use location
               if (strncmp (p, operators[k][0], slen) == 0)
                   ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 19: _76 = strncmp (p_41, _75, slen_74);
test.c:86:19: warning: use location
               if (strncmp (p, operators[k][0], slen) == 0)
                   ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 19dot graph target basicblock en1

dot graph stmt start _76 = strncmp (p_41, _75, slen_74);
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _76 = strncmp (p_41, _75, slen_74);
test.c:86:19: warning: use location
               if (strncmp (p, operators[k][0], slen) == 0)
                   ^
dot graph stmt end

this stmt is child function---strncmp-----

 ================== trace ================== 
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>
trace fucntion name:strncmp 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_71 = *p_41;
test.c:70:14: warning: use location
    else if (p[0] == 'O')
              ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 17: _71 = *p_41;
test.c:70:14: warning: use location
    else if (p[0] == 'O')
              ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start _71 = *p_41;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _71 = *p_41;
test.c:70:14: warning: use location
    else if (p[0] == 'O')
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_71 == 79)
test.c:70:12: warning: use location
    else if (p[0] == 'O')
            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 17: if (_71 == 79)
test.c:70:12: warning: use location
    else if (p[0] == 'O')
            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 17dot graph target basicblock en1

dot graph stmt start if (_71 == 79)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_71 == 79)
test.c:70:12: warning: use location
    else if (p[0] == 'O')
            ^
dot graph stmt end

if (_71 == 79)

 ================== find cond branch ================= 
if (_71 == 79)
Cond in fucntion main basic block 17
 ================== possiable direct basic block ================= 
from main basic block 18
 ================== possiable direct basic block ================= 
from main basic block 85
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_42 = *p_41;
test.c:61:9: warning: use location
    if (!ISLOWER (*p))
         ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 11: _42 = *p_41;
test.c:61:9: warning: use location
    if (!ISLOWER (*p))
         ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start _42 = *p_41;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _42 = *p_41;
test.c:61:9: warning: use location
    if (!ISLOWER (*p))
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_43 = (unsigned char) _42;
test.c:61:8: warning: use location
    if (!ISLOWER (*p))
        ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 11: _43 = (unsigned char) _42;
test.c:61:8: warning: use location
    if (!ISLOWER (*p))
        ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start _43 = (unsigned char) _42;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _43 = (unsigned char) _42;
test.c:61:8: warning: use location
    if (!ISLOWER (*p))
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_44 = _43 + 159;
test.c:61:8: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 11: _44 = _43 + 159;
test.c:61:8: warning: use location
    if (!ISLOWER (*p))
        ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start _44 = _43 + 159;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _44 = _43 + 159;
test.c:61:8: warning: use location
    if (!ISLOWER (*p))
        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_226 = PHI <p_77(20), p_41(22)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 23: p_226 = PHI <p_77(20), p_41(22)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start p_226 = PHI <p_77(20), p_41(22)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_226 = PHI <p_77(20), p_41(22)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

p_89 = PHI <p_47(15), p_47(16), p_226(23)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 24: p_89 = PHI <p_47(15), p_47(16), p_226(23)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 24dot graph target basicblock en1

dot graph stmt start p_89 = PHI <p_47(15), p_47(16), p_226(23)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_89 = PHI <p_47(15), p_47(16), p_226(23)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

_113 = *p_89;
test.c:142:12: warning: use location
       if (p[0] == 'X')
            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 37: _113 = *p_89;
test.c:142:12: warning: use location
       if (p[0] == 'X')
            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 37dot graph target basicblock en1

dot graph stmt start _113 = *p_89;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _113 = *p_89;
test.c:142:12: warning: use location
       if (p[0] == 'X')
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_113 == 88)
test.c:142:10: warning: use location
       if (p[0] == 'X')
          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 37: if (_113 == 88)
test.c:142:10: warning: use location
       if (p[0] == 'X')
          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 37dot graph target basicblock en1

dot graph stmt start if (_113 == 88)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_113 == 88)
test.c:142:10: warning: use location
       if (p[0] == 'X')
          ^
dot graph stmt end

if (_113 == 88)

 ================== find cond branch ================= 
if (_113 == 88)
Cond in fucntion main basic block 37
 ================== possiable direct basic block ================= 
from main basic block 38
 ================== possiable direct basic block ================= 
from main basic block 41
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_112 = MEM[(const char *)p_89 + 1B];
test.c:137:40: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                                        ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 36: _112 = MEM[(const char *)p_89 + 1B];
test.c:137:40: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                                        ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

dot graph stmt start _112 = MEM[(const char *)p_89 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _112 = MEM[(const char *)p_89 + 1B];
test.c:137:40: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                                        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_112 == 0)
test.c:137:36: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                                    ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 36: if (_112 == 0)
test.c:137:36: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                                    ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 36dot graph target basicblock en1

dot graph stmt start if (_112 == 0)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_112 == 0)
test.c:137:36: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                                    ^
dot graph stmt end

if (_112 == 0)

 ================== find cond branch ================= 
if (_112 == 0)
Cond in fucntion main basic block 36
 ================== possiable direct basic block ================= 
from main basic block 85
 ================== possiable direct basic block ================= 
from main basic block 37
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_109 = *p_89;
test.c:137:12: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 35: _109 = *p_89;
test.c:137:12: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _109 = *p_89;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _109 = *p_89;
test.c:137:12: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_110 = _109 == 83;
test.c:137:22: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                      ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 35: _110 = _109 == 83;
test.c:137:22: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                      ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _110 = _109 == 83;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _110 = _109 == 83;
test.c:137:22: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_111 = _108 | _110;
test.c:137:22: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 35: _111 = _108 | _110;
test.c:137:22: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                      ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _111 = _108 | _110;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _111 = _108 | _110;
test.c:137:22: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
                      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_111 != 0)
test.c:137:10: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 35: if (_111 != 0)
test.c:137:10: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start if (_111 != 0)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_111 != 0)
test.c:137:10: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
          ^
dot graph stmt end

if (_111 != 0)

 ================== find cond branch ================= 
if (_111 != 0)
Cond in fucntion main basic block 35
 ================== possiable direct basic block ================= 
from main basic block 36
 ================== possiable direct basic block ================= 
from main basic block 37
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_107 = *p_89;
test.c:137:12: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 35: _107 = *p_89;
test.c:137:12: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 35dot graph target basicblock en1

dot graph stmt start _107 = *p_89;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _107 = *p_89;
test.c:137:12: warning: use location
       if ((*p == 'N' || *p == 'S') && p[1] == 0)
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_106 = MEM[(const char *)p_89 + 1B];
test.c:132:44: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
                                            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 34: _106 = MEM[(const char *)p_89 + 1B];
test.c:132:44: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
                                            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 34dot graph target basicblock en1

dot graph stmt start _106 = MEM[(const char *)p_89 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _106 = MEM[(const char *)p_89 + 1B];
test.c:132:44: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
                                            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_103 = *p_89;
test.c:132:13: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
             ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 33: _103 = *p_89;
test.c:132:13: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
             ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 33dot graph target basicblock en1

dot graph stmt start _103 = *p_89;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _103 = *p_89;
test.c:132:13: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_104 = _103 == 78;
test.c:132:24: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
                        ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 33: _104 = _103 == 78;
test.c:132:24: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
                        ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 33dot graph target basicblock en1

dot graph stmt start _104 = _103 == 78;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _104 = _103 == 78;
test.c:132:24: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
                        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_105 = _102 | _104;
test.c:132:24: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 33: _105 = _102 | _104;
test.c:132:24: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
                        ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 33dot graph target basicblock en1

dot graph stmt start _105 = _102 | _104;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _105 = _102 | _104;
test.c:132:24: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
                        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_101 = *p_89;
test.c:132:13: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
             ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 33: _101 = *p_89;
test.c:132:13: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
             ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 33dot graph target basicblock en1

dot graph stmt start _101 = *p_89;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _101 = *p_89;
test.c:132:13: warning: use location
       if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)
             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_100 = MEM[(const char *)p_89 + 1B];
test.c:127:27: warning: use location
       if (p[0] == 'E' && p[1] == 0)
                           ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 32: _100 = MEM[(const char *)p_89 + 1B];
test.c:127:27: warning: use location
       if (p[0] == 'E' && p[1] == 0)
                           ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 32dot graph target basicblock en1

dot graph stmt start _100 = MEM[(const char *)p_89 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _100 = MEM[(const char *)p_89 + 1B];
test.c:127:27: warning: use location
       if (p[0] == 'E' && p[1] == 0)
                           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_99 = *p_89;
test.c:127:12: warning: use location
       if (p[0] == 'E' && p[1] == 0)
            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 31: _99 = *p_89;
test.c:127:12: warning: use location
       if (p[0] == 'E' && p[1] == 0)
            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start _99 = *p_89;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _99 = *p_89;
test.c:127:12: warning: use location
       if (p[0] == 'E' && p[1] == 0)
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_99 == 69)
test.c:127:10: warning: use location
       if (p[0] == 'E' && p[1] == 0)
          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 31: if (_99 == 69)
test.c:127:10: warning: use location
       if (p[0] == 'E' && p[1] == 0)
          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 31dot graph target basicblock en1

dot graph stmt start if (_99 == 69)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_99 == 69)
test.c:127:10: warning: use location
       if (p[0] == 'E' && p[1] == 0)
          ^
dot graph stmt end

if (_99 == 69)

 ================== find cond branch ================= 
if (_99 == 69)
Cond in fucntion main basic block 31
 ================== possiable direct basic block ================= 
from main basic block 32
 ================== possiable direct basic block ================= 
from main basic block 33
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_95 = MEM[(const char *)p_89 + 3B];
test.c:117:36: warning: use location
           else if (p[2] == '_' && p[3] == '_')
                                    ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 29: _95 = MEM[(const char *)p_89 + 3B];
test.c:117:36: warning: use location
           else if (p[2] == '_' && p[3] == '_')
                                    ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start _95 = MEM[(const char *)p_89 + 3B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _95 = MEM[(const char *)p_89 + 3B];
test.c:117:36: warning: use location
           else if (p[2] == '_' && p[3] == '_')
                                    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_95 == 95)
test.c:117:32: warning: use location
           else if (p[2] == '_' && p[3] == '_')
                                ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 29: if (_95 == 95)
test.c:117:32: warning: use location
           else if (p[2] == '_' && p[3] == '_')
                                ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 29dot graph target basicblock en1

dot graph stmt start if (_95 == 95)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_95 == 95)
test.c:117:32: warning: use location
           else if (p[2] == '_' && p[3] == '_')
                                ^
dot graph stmt end

if (_95 == 95)

 ================== find cond branch ================= 
if (_95 == 95)
Cond in fucntion main basic block 29
 ================== possiable direct basic block ================= 
from main basic block 30
 ================== possiable direct basic block ================= 
from main basic block 85
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_94 = MEM[(const char *)p_89 + 2B];
test.c:117:21: warning: use location
           else if (p[2] == '_' && p[3] == '_')
                     ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 28: _94 = MEM[(const char *)p_89 + 2B];
test.c:117:21: warning: use location
           else if (p[2] == '_' && p[3] == '_')
                     ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 28dot graph target basicblock en1

dot graph stmt start _94 = MEM[(const char *)p_89 + 2B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _94 = MEM[(const char *)p_89 + 2B];
test.c:117:21: warning: use location
           else if (p[2] == '_' && p[3] == '_')
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_93 = MEM[(const char *)p_89 + 3B];
test.c:112:31: warning: use location
           if (p[2] == 'B' && p[3] == 0)
                               ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 27: _93 = MEM[(const char *)p_89 + 3B];
test.c:112:31: warning: use location
           if (p[2] == 'B' && p[3] == 0)
                               ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 27dot graph target basicblock en1

dot graph stmt start _93 = MEM[(const char *)p_89 + 3B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _93 = MEM[(const char *)p_89 + 3B];
test.c:112:31: warning: use location
           if (p[2] == 'B' && p[3] == 0)
                               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_92 = MEM[(const char *)p_89 + 2B];
test.c:112:16: warning: use location
           if (p[2] == 'B' && p[3] == 0)
                ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 26: _92 = MEM[(const char *)p_89 + 2B];
test.c:112:16: warning: use location
           if (p[2] == 'B' && p[3] == 0)
                ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start _92 = MEM[(const char *)p_89 + 2B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _92 = MEM[(const char *)p_89 + 2B];
test.c:112:16: warning: use location
           if (p[2] == 'B' && p[3] == 0)
                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_92 == 66)
test.c:112:14: warning: use location
           if (p[2] == 'B' && p[3] == 0)
              ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 26: if (_92 == 66)
test.c:112:14: warning: use location
           if (p[2] == 'B' && p[3] == 0)
              ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 26dot graph target basicblock en1

dot graph stmt start if (_92 == 66)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_92 == 66)
test.c:112:14: warning: use location
           if (p[2] == 'B' && p[3] == 0)
              ^
dot graph stmt end

if (_92 == 66)

 ================== find cond branch ================= 
if (_92 == 66)
Cond in fucntion main basic block 26
 ================== possiable direct basic block ================= 
from main basic block 27
 ================== possiable direct basic block ================= 
from main basic block 28
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_91 = MEM[(const char *)p_89 + 1B];
test.c:109:27: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
                           ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 25: _91 = MEM[(const char *)p_89 + 1B];
test.c:109:27: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
                           ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph stmt start _91 = MEM[(const char *)p_89 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _91 = MEM[(const char *)p_89 + 1B];
test.c:109:27: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
                           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_91 == 75)
test.c:109:23: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
                       ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 25: if (_91 == 75)
test.c:109:23: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
                       ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 25dot graph target basicblock en1

dot graph stmt start if (_91 == 75)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_91 == 75)
test.c:109:23: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
                       ^
dot graph stmt end

if (_91 == 75)

 ================== find cond branch ================= 
if (_91 == 75)
Cond in fucntion main basic block 25
 ================== possiable direct basic block ================= 
from main basic block 26
 ================== possiable direct basic block ================= 
from main basic block 31
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_90 = *p_89;
test.c:109:12: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 24: _90 = *p_89;
test.c:109:12: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 24dot graph target basicblock en1

dot graph stmt start _90 = *p_89;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _90 = *p_89;
test.c:109:12: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_90 == 84)
test.c:109:10: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 24: if (_90 == 84)
test.c:109:10: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 24dot graph target basicblock en1

dot graph stmt start if (_90 == 84)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_90 == 84)
test.c:109:10: warning: use location
       if (p[0] == 'T' && p[1] == 'K')
          ^
dot graph stmt end

if (_90 == 84)

 ================== find cond branch ================= 
if (_90 == 84)
Cond in fucntion main basic block 24
 ================== possiable direct basic block ================= 
from main basic block 25
 ================== possiable direct basic block ================= 
from main basic block 31
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

p_122 = PHI <p_89(37), p_115(40)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 41: p_122 = PHI <p_89(37), p_115(40)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 41dot graph target basicblock en1

dot graph stmt start p_122 = PHI <p_89(37), p_115(40)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_122 = PHI <p_89(37), p_115(40)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

_137 = MEM[(const char *)p_122 + 1B];
test.c:178:20: warning: use location
           switch (p[1])
                    ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 50: _137 = MEM[(const char *)p_122 + 1B];
test.c:178:20: warning: use location
           switch (p[1])
                    ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 50dot graph target basicblock en1

dot graph stmt start _137 = MEM[(const char *)p_122 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _137 = MEM[(const char *)p_122 + 1B];
test.c:178:20: warning: use location
           switch (p[1])
                    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_138 = (int) _137;
test.c:178:20: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 50: _138 = (int) _137;
test.c:178:20: warning: use location
           switch (p[1])
                    ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 50dot graph target basicblock en1

dot graph stmt start _138 = (int) _137;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _138 = (int) _137;
test.c:178:20: warning: use location
           switch (p[1])
                    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_136 = *p_122;
test.c:174:17: warning: use location
       else if (p[0] == 'D')
                 ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 49: _136 = *p_122;
test.c:174:17: warning: use location
       else if (p[0] == 'D')
                 ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 49dot graph target basicblock en1

dot graph stmt start _136 = *p_122;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _136 = *p_122;
test.c:174:17: warning: use location
       else if (p[0] == 'D')
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_136 == 68)
test.c:174:15: warning: use location
       else if (p[0] == 'D')
               ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 49: if (_136 == 68)
test.c:174:15: warning: use location
       else if (p[0] == 'D')
               ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 49dot graph target basicblock en1

dot graph stmt start if (_136 == 68)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_136 == 68)
test.c:174:15: warning: use location
       else if (p[0] == 'D')
               ^
dot graph stmt end

if (_136 == 68)

 ================== find cond branch ================= 
if (_136 == 68)
Cond in fucntion main basic block 49
 ================== possiable direct basic block ================= 
from main basic block 50
 ================== possiable direct basic block ================= 
from main basic block 53
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_130 = MEM[(const char *)p_122 + 1B];
test.c:153:20: warning: use location
           switch (p[1])
                    ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 44: _130 = MEM[(const char *)p_122 + 1B];
test.c:153:20: warning: use location
           switch (p[1])
                    ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 44dot graph target basicblock en1

dot graph stmt start _130 = MEM[(const char *)p_122 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _130 = MEM[(const char *)p_122 + 1B];
test.c:153:20: warning: use location
           switch (p[1])
                    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_131 = (int) _130;
test.c:153:20: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 44: _131 = (int) _130;
test.c:153:20: warning: use location
           switch (p[1])
                    ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 44dot graph target basicblock en1

dot graph stmt start _131 = (int) _130;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _131 = (int) _130;
test.c:153:20: warning: use location
           switch (p[1])
                    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_127 = MEM[(const char *)p_122 + 2B];
test.c:149:41: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                         ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 43: _127 = MEM[(const char *)p_122 + 2B];
test.c:149:41: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                         ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 43dot graph target basicblock en1

dot graph stmt start _127 = MEM[(const char *)p_122 + 2B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _127 = MEM[(const char *)p_122 + 2B];
test.c:149:41: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_128 = _127 == 0;
test.c:149:52: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                                    ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 43: _128 = _127 == 0;
test.c:149:52: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                                    ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 43dot graph target basicblock en1

dot graph stmt start _128 = _127 == 0;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _128 = _127 == 0;
test.c:149:52: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                                    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_129 = _126 | _128;
test.c:149:52: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 43: _129 = _126 | _128;
test.c:149:52: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                                    ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 43dot graph target basicblock en1

dot graph stmt start _129 = _126 | _128;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _129 = _126 | _128;
test.c:149:52: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                                    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_125 = MEM[(const char *)p_122 + 2B];
test.c:149:41: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                         ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 43: _125 = MEM[(const char *)p_122 + 2B];
test.c:149:41: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                         ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 43dot graph target basicblock en1

dot graph stmt start _125 = MEM[(const char *)p_122 + 2B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _125 = MEM[(const char *)p_122 + 2B];
test.c:149:41: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                                         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_124 = MEM[(const char *)p_122 + 1B];
test.c:149:27: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                           ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 42: _124 = MEM[(const char *)p_122 + 1B];
test.c:149:27: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                           ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 42dot graph target basicblock en1

dot graph stmt start _124 = MEM[(const char *)p_122 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _124 = MEM[(const char *)p_122 + 1B];
test.c:149:27: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
                           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_123 = *p_122;
test.c:149:12: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 41: _123 = *p_122;
test.c:149:12: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 41dot graph target basicblock en1

dot graph stmt start _123 = *p_122;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _123 = *p_122;
test.c:149:12: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_123 == 83)
test.c:149:10: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 41: if (_123 == 83)
test.c:149:10: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 41dot graph target basicblock en1

dot graph stmt start if (_123 == 83)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_123 == 83)
test.c:149:10: warning: use location
       if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))
          ^
dot graph stmt end

if (_123 == 83)

 ================== find cond branch ================= 
if (_123 == 83)
Cond in fucntion main basic block 41
 ================== possiable direct basic block ================= 
from main basic block 42
 ================== possiable direct basic block ================= 
from main basic block 49
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

p_142 = PHI <p_132(48), p_122(49)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 53: p_142 = PHI <p_132(48), p_122(49)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 53dot graph target basicblock en1

dot graph stmt start p_142 = PHI <p_132(48), p_122(49)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_142 = PHI <p_132(48), p_122(49)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

_186 = MEM[(const char *)p_142 + 1B];
test.c:251:21: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                     ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 72: _186 = MEM[(const char *)p_142 + 1B];
test.c:251:21: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                     ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 72dot graph target basicblock en1

dot graph stmt start _186 = MEM[(const char *)p_142 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _186 = MEM[(const char *)p_142 + 1B];
test.c:251:21: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_187 = _186 == 69;
test.c:251:32: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                                ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 72: _187 = _186 == 69;
test.c:251:32: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                                ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 72dot graph target basicblock en1

dot graph stmt start _187 = _186 == 69;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _187 = _186 == 69;
test.c:251:32: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_188 = _185 | _187;
test.c:251:32: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 72: _188 = _185 | _187;
test.c:251:32: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                                ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 72dot graph target basicblock en1

dot graph stmt start _188 = _185 | _187;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _188 = _185 | _187;
test.c:251:32: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_184 = MEM[(const char *)p_142 + 1B];
test.c:251:21: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                     ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 72: _184 = MEM[(const char *)p_142 + 1B];
test.c:251:21: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                     ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 72dot graph target basicblock en1

dot graph stmt start _184 = MEM[(const char *)p_142 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _184 = MEM[(const char *)p_142 + 1B];
test.c:251:21: warning: use location
           else if (p[1] == 'B' || p[1] == 'E')
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_168 = MEM[(const char *)p_142 + 3B];
test.c:215:40: warning: use location
               else if (p[0] == '_' && p[1] != '_')
                                        ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 65: _168 = MEM[(const char *)p_142 + 3B];
test.c:215:40: warning: use location
               else if (p[0] == '_' && p[1] != '_')
                                        ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 65dot graph target basicblock en1

dot graph stmt start _168 = MEM[(const char *)p_142 + 3B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _168 = MEM[(const char *)p_142 + 3B];
test.c:215:40: warning: use location
               else if (p[0] == '_' && p[1] != '_')
                                        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_167 = MEM[(const char *)p_142 + 2B];
test.c:215:25: warning: use location
               else if (p[0] == '_' && p[1] != '_')
                         ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 64: _167 = MEM[(const char *)p_142 + 2B];
test.c:215:25: warning: use location
               else if (p[0] == '_' && p[1] != '_')
                         ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 64dot graph target basicblock en1

dot graph stmt start _167 = MEM[(const char *)p_142 + 2B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _167 = MEM[(const char *)p_142 + 2B];
test.c:215:25: warning: use location
               else if (p[0] == '_' && p[1] != '_')
                         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_146 = MEM[(const char *)p_142 + 2B];
test.c:202:19: warning: use location
               if (ISDIGIT (*p))
                   ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 55: _146 = MEM[(const char *)p_142 + 2B];
test.c:202:19: warning: use location
               if (ISDIGIT (*p))
                   ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 55dot graph target basicblock en1

dot graph stmt start _146 = MEM[(const char *)p_142 + 2B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _146 = MEM[(const char *)p_142 + 2B];
test.c:202:19: warning: use location
               if (ISDIGIT (*p))
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_147 = (unsigned int) _146;
test.c:202:19: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 55: _147 = (unsigned int) _146;
test.c:202:19: warning: use location
               if (ISDIGIT (*p))
                   ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 55dot graph target basicblock en1

dot graph stmt start _147 = (unsigned int) _146;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _147 = (unsigned int) _146;
test.c:202:19: warning: use location
               if (ISDIGIT (*p))
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_148 = _147 + 4294967248;
test.c:202:19: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 55: _148 = _147 + 4294967248;
test.c:202:19: warning: use location
               if (ISDIGIT (*p))
                   ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 55dot graph target basicblock en1

dot graph stmt start _148 = _147 + 4294967248;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _148 = _147 + 4294967248;
test.c:202:19: warning: use location
               if (ISDIGIT (*p))
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_148 <= 9)
test.c:202:18: warning: use location
               if (ISDIGIT (*p))
                  ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 55: if (_148 <= 9)
test.c:202:18: warning: use location
               if (ISDIGIT (*p))
                  ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 55dot graph target basicblock en1

dot graph stmt start if (_148 <= 9)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_148 <= 9)
test.c:202:18: warning: use location
               if (ISDIGIT (*p))
                  ^
dot graph stmt end

if (_148 <= 9)

 ================== find cond branch ================= 
if (_148 <= 9)
Cond in fucntion main basic block 55
 ================== possiable direct basic block ================= 
from main basic block 57
 ================== possiable direct basic block ================= 
from main basic block 64
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_144 = MEM[(const char *)p_142 + 1B];
test.c:197:16: warning: use location
           if (p[1] == '_')
                ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 54: _144 = MEM[(const char *)p_142 + 1B];
test.c:197:16: warning: use location
           if (p[1] == '_')
                ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 54dot graph target basicblock en1

dot graph stmt start _144 = MEM[(const char *)p_142 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _144 = MEM[(const char *)p_142 + 1B];
test.c:197:16: warning: use location
           if (p[1] == '_')
                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_143 = *p_142;
test.c:194:12: warning: use location
       if (p[0] == '_')
            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 53: _143 = *p_142;
test.c:194:12: warning: use location
       if (p[0] == '_')
            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 53dot graph target basicblock en1

dot graph stmt start _143 = *p_142;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _143 = *p_142;
test.c:194:12: warning: use location
       if (p[0] == '_')
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_197 = PHI <p_142(53), p_150(60), p_160(63)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 78: p_197 = PHI <p_142(53), p_150(60), p_160(63)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 78dot graph target basicblock en1

dot graph stmt start p_197 = PHI <p_142(53), p_150(60), p_160(63)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_197 = PHI <p_142(53), p_150(60), p_160(63)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

_199 = MEM[(const char *)p_197 + 1B];
test.c:266:26: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
                          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 79: _199 = MEM[(const char *)p_197 + 1B];
test.c:266:26: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 79dot graph target basicblock en1

dot graph stmt start _199 = MEM[(const char *)p_197 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _199 = MEM[(const char *)p_197 + 1B];
test.c:266:26: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_200 = (unsigned int) _199;
test.c:266:26: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 79: _200 = (unsigned int) _199;
test.c:266:26: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 79dot graph target basicblock en1

dot graph stmt start _200 = (unsigned int) _199;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _200 = (unsigned int) _199;
test.c:266:26: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_201 = _200 + 4294967248;
test.c:266:26: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 79: _201 = _200 + 4294967248;
test.c:266:26: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 79dot graph target basicblock en1

dot graph stmt start _201 = _200 + 4294967248;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _201 = _200 + 4294967248;
test.c:266:26: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_198 = *p_197;
test.c:266:12: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 78: _198 = *p_197;
test.c:266:12: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 78dot graph target basicblock en1

dot graph stmt start _198 = *p_197;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _198 = *p_197;
test.c:266:12: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_198 == 46)
test.c:266:10: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 78: if (_198 == 46)
test.c:266:10: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 78dot graph target basicblock en1

dot graph stmt start if (_198 == 46)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_198 == 46)
test.c:266:10: warning: use location
       if (p[0] == '.' && ISDIGIT (p[1]))
          ^
dot graph stmt end

if (_198 == 46)

 ================== find cond branch ================= 
if (_198 == 46)
Cond in fucntion main basic block 78
 ================== possiable direct basic block ================= 
from main basic block 79
 ================== possiable direct basic block ================= 
from main basic block 83
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

p_208 = PHI <p_197(78), p_197(79), p_203(82)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 83: p_208 = PHI <p_197(78), p_197(79), p_203(82)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 83dot graph target basicblock en1

dot graph stmt start p_208 = PHI <p_197(78), p_197(79), p_203(82)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_208 = PHI <p_197(78), p_197(79), p_203(82)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

_209 = *p_208;
test.c:273:11: warning: use location
       if (*p == 0)
           ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 83: _209 = *p_208;
test.c:273:11: warning: use location
       if (*p == 0)
           ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 83dot graph target basicblock en1

dot graph stmt start _209 = *p_208;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _209 = *p_208;
test.c:273:11: warning: use location
       if (*p == 0)
           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_202 = p_197 + 2;
test.c:269:13: warning: use location
           p += 2;
             ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 80: p_202 = p_197 + 2;
test.c:269:13: warning: use location
           p += 2;
             ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 80dot graph target basicblock en1

dot graph stmt start p_202 = p_197 + 2;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_202 = p_197 + 2;
test.c:269:13: warning: use location
           p += 2;
             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_203 = PHI <p_202(80), p_204(81)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 82: p_203 = PHI <p_202(80), p_204(81)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 82dot graph target basicblock en1

dot graph stmt start p_203 = PHI <p_202(80), p_204(81)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_203 = PHI <p_202(80), p_204(81)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

_205 = *p_203;
test.c:270:18: warning: use location
           while (ISDIGIT (*p))
                  ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 82: _205 = *p_203;
test.c:270:18: warning: use location
           while (ISDIGIT (*p))
                  ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 82dot graph target basicblock en1

dot graph stmt start _205 = *p_203;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _205 = *p_203;
test.c:270:18: warning: use location
           while (ISDIGIT (*p))
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_206 = (unsigned int) _205;
test.c:270:18: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 82: _206 = (unsigned int) _205;
test.c:270:18: warning: use location
           while (ISDIGIT (*p))
                  ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 82dot graph target basicblock en1

dot graph stmt start _206 = (unsigned int) _205;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _206 = (unsigned int) _205;
test.c:270:18: warning: use location
           while (ISDIGIT (*p))
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_207 = _206 + 4294967248;
test.c:270:18: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 82: _207 = _206 + 4294967248;
test.c:270:18: warning: use location
           while (ISDIGIT (*p))
                  ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 82dot graph target basicblock en1

dot graph stmt start _207 = _206 + 4294967248;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _207 = _206 + 4294967248;
test.c:270:18: warning: use location
           while (ISDIGIT (*p))
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_204 = p_203 + 1;
test.c:271:14: warning: use location
             p++;
              ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 81: p_204 = p_203 + 1;
test.c:271:14: warning: use location
             p++;
              ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 81dot graph target basicblock en1

dot graph stmt start p_204 = p_203 + 1;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_204 = p_203 + 1;
test.c:271:14: warning: use location
             p++;
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_189 = p_142 + 2;
test.c:254:17: warning: use location
               p += 2;
                 ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 73: p_189 = p_142 + 2;
test.c:254:17: warning: use location
               p += 2;
                 ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 73dot graph target basicblock en1

dot graph stmt start p_189 = p_142 + 2;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_189 = p_142 + 2;
test.c:254:17: warning: use location
               p += 2;
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_190 = PHI <p_189(73), p_191(74)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 75: p_190 = PHI <p_189(73), p_191(74)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 75dot graph target basicblock en1

dot graph stmt start p_190 = PHI <p_189(73), p_191(74)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_190 = PHI <p_189(73), p_191(74)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

_196 = MEM[(const char *)p_190 + 1B];
test.c:257:35: warning: use location
               if (p[0] == 's' && p[1] == 0)
                                   ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 77: _196 = MEM[(const char *)p_190 + 1B];
test.c:257:35: warning: use location
               if (p[0] == 's' && p[1] == 0)
                                   ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 77dot graph target basicblock en1

dot graph stmt start _196 = MEM[(const char *)p_190 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _196 = MEM[(const char *)p_190 + 1B];
test.c:257:35: warning: use location
               if (p[0] == 's' && p[1] == 0)
                                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_195 = *p_190;
test.c:257:20: warning: use location
               if (p[0] == 's' && p[1] == 0)
                    ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 76: _195 = *p_190;
test.c:257:20: warning: use location
               if (p[0] == 's' && p[1] == 0)
                    ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 76dot graph target basicblock en1

dot graph stmt start _195 = *p_190;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _195 = *p_190;
test.c:257:20: warning: use location
               if (p[0] == 's' && p[1] == 0)
                    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

if (_195 == 115)
test.c:257:18: warning: use location
               if (p[0] == 's' && p[1] == 0)
                  ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 76: if (_195 == 115)
test.c:257:18: warning: use location
               if (p[0] == 's' && p[1] == 0)
                  ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 76dot graph target basicblock en1

dot graph stmt start if (_195 == 115)
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start if (_195 == 115)
test.c:257:18: warning: use location
               if (p[0] == 's' && p[1] == 0)
                  ^
dot graph stmt end

if (_195 == 115)

 ================== find cond branch ================= 
if (_195 == 115)
Cond in fucntion main basic block 76
 ================== possiable direct basic block ================= 
from main basic block 77
 ================== possiable direct basic block ================= 
from main basic block 85
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph entry main
dot graph target entry end

_192 = *p_190;
test.c:255:22: warning: use location
               while (ISDIGIT (*p))
                      ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 75: _192 = *p_190;
test.c:255:22: warning: use location
               while (ISDIGIT (*p))
                      ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 75dot graph target basicblock en1

dot graph stmt start _192 = *p_190;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _192 = *p_190;
test.c:255:22: warning: use location
               while (ISDIGIT (*p))
                      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_193 = (unsigned int) _192;
test.c:255:22: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 75: _193 = (unsigned int) _192;
test.c:255:22: warning: use location
               while (ISDIGIT (*p))
                      ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 75dot graph target basicblock en1

dot graph stmt start _193 = (unsigned int) _192;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _193 = (unsigned int) _192;
test.c:255:22: warning: use location
               while (ISDIGIT (*p))
                      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_194 = _193 + 4294967248;
test.c:255:22: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 75: _194 = _193 + 4294967248;
test.c:255:22: warning: use location
               while (ISDIGIT (*p))
                      ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 75dot graph target basicblock en1

dot graph stmt start _194 = _193 + 4294967248;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _194 = _193 + 4294967248;
test.c:255:22: warning: use location
               while (ISDIGIT (*p))
                      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_191 = p_190 + 1;
test.c:256:18: warning: use location
                 p++;
                  ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 74: p_191 = p_190 + 1;
test.c:256:18: warning: use location
                 p++;
                  ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 74dot graph target basicblock en1

dot graph stmt start p_191 = p_190 + 1;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_191 = p_190 + 1;
test.c:256:18: warning: use location
                 p++;
                  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_145 = p_142 + 2;
test.c:200:17: warning: use location
               p += 2;
                 ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 55: p_145 = p_142 + 2;
test.c:200:17: warning: use location
               p += 2;
                 ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 55dot graph target basicblock en1

dot graph stmt start p_145 = p_142 + 2;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_145 = p_142 + 2;
test.c:200:17: warning: use location
               p += 2;
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_173 = strncmp (p_145, _172, slen_171);
test.c:231:27: warning: use location
                       if (strncmp (p, special[k][0], slen) == 0)
                           ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 66: _173 = strncmp (p_145, _172, slen_171);
test.c:231:27: warning: use location
                       if (strncmp (p, special[k][0], slen) == 0)
                           ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 66dot graph target basicblock en1

dot graph stmt start _173 = strncmp (p_145, _172, slen_171);
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _173 = strncmp (p_145, _172, slen_171);
test.c:231:27: warning: use location
                       if (strncmp (p, special[k][0], slen) == 0)
                           ^
dot graph stmt end

this stmt is child function---strncmp-----

 ================== trace ================== 
 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>
trace fucntion name:strncmp 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

p_149 = PHI <p_145(55), p_228(56)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 57: p_149 = PHI <p_145(55), p_228(56)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 57dot graph target basicblock en1

dot graph stmt start p_149 = PHI <p_145(55), p_228(56)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_149 = PHI <p_145(55), p_228(56)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

p_159 = p_149 + 2;
test.c:210:24: warning: use location
                       p++;
                        ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 61: p_159 = p_149 + 2;
test.c:210:24: warning: use location
                       p++;
                        ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 61dot graph target basicblock en1

dot graph stmt start p_159 = p_149 + 2;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_159 = p_149 + 2;
test.c:210:24: warning: use location
                       p++;
                        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_160 = PHI <p_159(61), p_161(62)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 63: p_160 = PHI <p_159(61), p_161(62)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 63dot graph target basicblock en1

dot graph stmt start p_160 = PHI <p_159(61), p_161(62)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_160 = PHI <p_159(61), p_161(62)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

_164 = *p_160;
test.c:211:31: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                               ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 63: _164 = *p_160;
test.c:211:31: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                               ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 63dot graph target basicblock en1

dot graph stmt start _164 = *p_160;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _164 = *p_160;
test.c:211:31: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_165 = _164 == 98;
test.c:211:42: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                                          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 63: _165 = _164 == 98;
test.c:211:42: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 63dot graph target basicblock en1

dot graph stmt start _165 = _164 == 98;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _165 = _164 == 98;
test.c:211:42: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_166 = _163 | _165;
test.c:211:42: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 63: _166 = _163 | _165;
test.c:211:42: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 63dot graph target basicblock en1

dot graph stmt start _166 = _163 | _165;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _166 = _163 | _165;
test.c:211:42: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_162 = *p_160;
test.c:211:31: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                               ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 63: _162 = *p_160;
test.c:211:31: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                               ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 63dot graph target basicblock en1

dot graph stmt start _162 = *p_160;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _162 = *p_160;
test.c:211:31: warning: use location
                       while (p[0] == 'n' || p[0] == 'b')
                               ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_161 = p_160 + 1;
test.c:212:26: warning: use location
                         p++;
                          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 62: p_161 = p_160 + 1;
test.c:212:26: warning: use location
                         p++;
                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 62dot graph target basicblock en1

dot graph stmt start p_161 = p_160 + 1;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_161 = p_160 + 1;
test.c:212:26: warning: use location
                         p++;
                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_150 = p_149 + 1;
test.c:206:22: warning: use location
                     p++;
                      ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 57: p_150 = p_149 + 1;
test.c:206:22: warning: use location
                     p++;
                      ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 57dot graph target basicblock en1

dot graph stmt start p_150 = p_149 + 1;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_150 = p_149 + 1;
test.c:206:22: warning: use location
                     p++;
                      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_158 = *p_150;
test.c:208:23: warning: use location
                   if (*p == 'X')
                       ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 60: _158 = *p_150;
test.c:208:23: warning: use location
                   if (*p == 'X')
                       ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 60dot graph target basicblock en1

dot graph stmt start _158 = *p_150;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _158 = *p_150;
test.c:208:23: warning: use location
                   if (*p == 'X')
                       ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_155 = MEM[(const char *)p_150 + 1B];
test.c:207:58: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                                                          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 59: _155 = MEM[(const char *)p_150 + 1B];
test.c:207:58: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                                                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 59dot graph target basicblock en1

dot graph stmt start _155 = MEM[(const char *)p_150 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _155 = MEM[(const char *)p_150 + 1B];
test.c:207:58: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                                                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_156 = (unsigned int) _155;
test.c:207:58: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 59: _156 = (unsigned int) _155;
test.c:207:58: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                                                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 59dot graph target basicblock en1

dot graph stmt start _156 = (unsigned int) _155;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _156 = (unsigned int) _155;
test.c:207:58: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                                                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_157 = _156 + 4294967248;
test.c:207:58: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 59: _157 = _156 + 4294967248;
test.c:207:58: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                                                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 59dot graph target basicblock en1

dot graph stmt start _157 = _156 + 4294967248;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _157 = _156 + 4294967248;
test.c:207:58: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                                                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_154 = *p_150;
test.c:207:44: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                                            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 58: _154 = *p_150;
test.c:207:44: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                                            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 58dot graph target basicblock en1

dot graph stmt start _154 = *p_150;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _154 = *p_150;
test.c:207:44: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                                            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_151 = *p_150;
test.c:207:26: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 57: _151 = *p_150;
test.c:207:26: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 57dot graph target basicblock en1

dot graph stmt start _151 = *p_150;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _151 = *p_150;
test.c:207:26: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_152 = (unsigned int) _151;
test.c:207:26: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 57: _152 = (unsigned int) _151;
test.c:207:26: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 57dot graph target basicblock en1

dot graph stmt start _152 = (unsigned int) _151;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _152 = (unsigned int) _151;
test.c:207:26: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_153 = _152 + 4294967248;
test.c:207:26: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 57: _153 = _152 + 4294967248;
test.c:207:26: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 57dot graph target basicblock en1

dot graph stmt start _153 = _152 + 4294967248;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _153 = _152 + 4294967248;
test.c:207:26: warning: use location
                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));
                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_228 = PHI <p_150(57), p_150(59)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 56: p_228 = PHI <p_150(57), p_150(59)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 56dot graph target basicblock en1

dot graph stmt start p_228 = PHI <p_150(57), p_150(59)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_228 = PHI <p_150(57), p_150(59)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

p_222 = PHI <p_96(30), p_145(71)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 10: p_222 = PHI <p_96(30), p_145(71)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 10dot graph target basicblock en1

dot graph stmt start p_222 = PHI <p_96(30), p_145(71)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_222 = PHI <p_96(30), p_145(71)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

p_174 = p_145 + slen_171;
test.c:233:29: warning: use location
                           p += slen;
                             ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 67: p_174 = p_145 + slen_171;
test.c:233:29: warning: use location
                           p += slen;
                             ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 67dot graph target basicblock en1

dot graph stmt start p_174 = p_145 + slen_171;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_174 = p_145 + slen_171;
test.c:233:29: warning: use location
                           p += slen;
                             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_132 = p_122 + 2;
test.c:170:13: warning: use location
           p += 2;
             ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 48: p_132 = p_122 + 2;
test.c:170:13: warning: use location
           p += 2;
             ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 48dot graph target basicblock en1

dot graph stmt start p_132 = p_122 + 2;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_132 = p_122 + 2;
test.c:170:13: warning: use location
           p += 2;
             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_114 = p_89 + 1;
test.c:145:12: warning: use location
           p++;
            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 38: p_114 = p_89 + 1;
test.c:145:12: warning: use location
           p++;
            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 38dot graph target basicblock en1

dot graph stmt start p_114 = p_89 + 1;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_114 = p_89 + 1;
test.c:145:12: warning: use location
           p++;
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_115 = PHI <p_114(38), p_116(39)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 40: p_115 = PHI <p_114(38), p_116(39)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 40dot graph target basicblock en1

dot graph stmt start p_115 = PHI <p_114(38), p_116(39)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_115 = PHI <p_114(38), p_116(39)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

_119 = *p_115;
test.c:146:19: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                   ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 40: _119 = *p_115;
test.c:146:19: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                   ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 40dot graph target basicblock en1

dot graph stmt start _119 = *p_115;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _119 = *p_115;
test.c:146:19: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_120 = _119 == 98;
test.c:146:30: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                              ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 40: _120 = _119 == 98;
test.c:146:30: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                              ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 40dot graph target basicblock en1

dot graph stmt start _120 = _119 == 98;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _120 = _119 == 98;
test.c:146:30: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_121 = _118 | _120;
test.c:146:30: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 40: _121 = _118 | _120;
test.c:146:30: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                              ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 40dot graph target basicblock en1

dot graph stmt start _121 = _118 | _120;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _121 = _118 | _120;
test.c:146:30: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_117 = *p_115;
test.c:146:19: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                   ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 40: _117 = *p_115;
test.c:146:19: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                   ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 40dot graph target basicblock en1

dot graph stmt start _117 = *p_115;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _117 = *p_115;
test.c:146:19: warning: use location
           while (p[0] == 'n' || p[0] == 'b')
                   ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_116 = p_115 + 1;
test.c:147:14: warning: use location
             p++;
              ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 39: p_116 = p_115 + 1;
test.c:147:14: warning: use location
             p++;
              ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 39dot graph target basicblock en1

dot graph stmt start p_116 = p_115 + 1;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_116 = p_115 + 1;
test.c:147:14: warning: use location
             p++;
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_96 = p_89 + 4;
test.c:120:17: warning: use location
               p += 4;
                 ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 30: p_96 = p_89 + 4;
test.c:120:17: warning: use location
               p += 4;
                 ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 30dot graph target basicblock en1

dot graph stmt start p_96 = p_89 + 4;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_96 = p_89 + 4;
test.c:120:17: warning: use location
               p += 4;
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_45 = PHI <p_41(12), p_224(13)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: p_45 = PHI <p_41(12), p_224(13)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start p_45 = PHI <p_41(12), p_224(13)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_45 = PHI <p_41(12), p_224(13)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

p_47 = p_45 + 1;
test.c:65:16: warning: use location
       *d++ = *p++;
                ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: p_47 = p_45 + 1;
test.c:65:16: warning: use location
       *d++ = *p++;
                ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start p_47 = p_45 + 1;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_47 = p_45 + 1;
test.c:65:16: warning: use location
       *d++ = *p++;
                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_224 = PHI <p_47(14), p_47(16)>
lto1: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 13: p_224 = PHI <p_47(14), p_47(16)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 13dot graph target basicblock en1

dot graph stmt start p_224 = PHI <p_47(14), p_47(16)>
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_224 = PHI <p_47(14), p_47(16)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strncmp-----
dot graph entry main
dot graph target entry end

_46 = p_45;
test.c:65:16: warning: use location
       *d++ = *p++;
                ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: _46 = p_45;
test.c:65:16: warning: use location
       *d++ = *p++;
                ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _46 = p_45;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _46 = p_45;
test.c:65:16: warning: use location
       *d++ = *p++;
                ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_66 = MEM[(const char *)_46 + 2B];
test.c:67:28: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 16: _66 = MEM[(const char *)_46 + 2B];
test.c:67:28: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start _66 = MEM[(const char *)_46 + 2B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _66 = MEM[(const char *)_46 + 2B];
test.c:67:28: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_67 = (unsigned char) _66;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 16: _67 = (unsigned char) _66;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start _67 = (unsigned char) _66;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _67 = (unsigned char) _66;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_68 = _67 + 208;
test.c:67:43: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 16: _68 = _67 + 208;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start _68 = _67 + 208;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _68 = _67 + 208;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_69 = _68 <= 9;
test.c:67:43: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 16: _69 = _68 <= 9;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start _69 = _68 <= 9;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _69 = _68 <= 9;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_70 = _65 | _69;
test.c:67:43: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 16: _70 = _65 | _69;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start _70 = _65 | _69;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _70 = _65 | _69;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_62 = MEM[(const char *)_46 + 2B];
test.c:67:28: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 16: _62 = MEM[(const char *)_46 + 2B];
test.c:67:28: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start _62 = MEM[(const char *)_46 + 2B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _62 = MEM[(const char *)_46 + 2B];
test.c:67:28: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_63 = (unsigned char) _62;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 16: _63 = (unsigned char) _62;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start _63 = (unsigned char) _62;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _63 = (unsigned char) _62;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_64 = _63 + 159;
test.c:67:43: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 16: _64 = _63 + 159;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 16dot graph target basicblock en1

dot graph stmt start _64 = _63 + 159;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _64 = _63 + 159;
test.c:67:43: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
                                           ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_61 = MEM[(const char *)_46 + 1B];
test.c:67:13: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
             ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 15: _61 = MEM[(const char *)_46 + 1B];
test.c:67:13: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
             ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 15dot graph target basicblock en1

dot graph stmt start _61 = MEM[(const char *)_46 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _61 = MEM[(const char *)_46 + 1B];
test.c:67:13: warning: use location
        || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));
             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_56 = MEM[(const char *)_46 + 1B];
test.c:66:13: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
             ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: _56 = MEM[(const char *)_46 + 1B];
test.c:66:13: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
             ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _56 = MEM[(const char *)_46 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _56 = MEM[(const char *)_46 + 1B];
test.c:66:13: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_57 = (unsigned char) _56;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: _57 = (unsigned char) _56;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _57 = (unsigned char) _56;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _57 = (unsigned char) _56;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_58 = _57 + 208;
test.c:66:26: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: _58 = _57 + 208;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _58 = _57 + 208;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _58 = _57 + 208;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_59 = _58 <= 9;
test.c:66:26: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: _59 = _58 <= 9;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _59 = _58 <= 9;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _59 = _58 <= 9;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_60 = _55 | _59;
test.c:66:26: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: _60 = _55 | _59;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _60 = _55 | _59;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _60 = _55 | _59;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_52 = MEM[(const char *)_46 + 1B];
test.c:66:13: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
             ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: _52 = MEM[(const char *)_46 + 1B];
test.c:66:13: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
             ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _52 = MEM[(const char *)_46 + 1B];
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _52 = MEM[(const char *)_46 + 1B];
test.c:66:13: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_53 = (unsigned char) _52;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: _53 = (unsigned char) _52;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _53 = (unsigned char) _52;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _53 = (unsigned char) _52;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_54 = _53 + 159;
test.c:66:26: warning: use location
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: _54 = _53 + 159;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _54 = _53 + 159;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _54 = _53 + 159;
test.c:66:26: warning: use location
      while (ISLOWER (*p) || ISDIGIT (*p)
                          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_51 = *_46;
test.c:65:14: warning: use location
       *d++ = *p++;
              ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: _51 = *_46;
test.c:65:14: warning: use location
       *d++ = *p++;
              ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _51 = *_46;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start _51 = *_46;
test.c:65:14: warning: use location
       *d++ = *p++;
              ^
dot graph stmt end

dot graph entry main
dot graph target entry end

*_49 = _51;
test.c:65:12: warning: use location
       *d++ = *p++;
            ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 14: *_49 = _51;
test.c:65:12: warning: use location
       *d++ = *p++;
            ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start *_49 = _51;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start *_49 = _51;
test.c:65:12: warning: use location
       *d++ = *p++;
            ^
dot graph stmt end

dot graph entry main
dot graph target entry end

p_77 = p_41 + slen_74;
test.c:88:21: warning: use location
                   p += slen;
                     ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 20: p_77 = p_41 + slen_74;
test.c:88:21: warning: use location
                   p += slen;
                     ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start p_77 = p_41 + slen_74;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start p_77 = p_41 + slen_74;
test.c:88:21: warning: use location
                   p += slen;
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

mangled_29 = p_14 + 5;
test.c:45:11: warning: use location
   mangled += 5;
           ^
dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc en1

dot graph target line desc form basic block 7: mangled_29 = p_14 + 5;
test.c:45:11: warning: use location
   mangled += 5;
           ^
dot graph target line desend

dot graph target loc start # .MEM_251 = VDEF <.MEM_250>
p_14 = malloc (4);
test.c:315:10: warning: use location
    char *p = XNEWVEC (char, symbol_len + 1), *q;
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 7dot graph target basicblock en1

dot graph stmt start mangled_29 = p_14 + 5;
p_14 = malloc (4);
dot graph stmt end

dot graph stmt start mangled_29 = p_14 + 5;
test.c:45:11: warning: use location
   mangled += 5;
           ^
dot graph stmt end

dot graph target basicblock start from main basic block 92dot graph target basicblock en1

dot graph arrowsubgraph cluster_1276509629 dot graph subgraph  free (p_14);
p_14 = malloc (4);
dot graph subgrapend

dot graph target basicblock start from main basic block 92dot graph target basicblock en1

dot graph arrowsubgraph cluster_1116842497 dot graph subgraph  _232 = MEM[(int *)p_14];
p_14 = malloc (4);
dot graph subgrapend

dot graph target basicblock start from main basic block 92dot graph target basicblock en1

dot graph arrowsubgraph cluster_1813935200 dot graph subgraph  _233 = __printf_chk (1, "%d\n", _232);
_232 = MEM[(int *)p_14];
dot graph subgrapend

 <ssa_name 0x7f4956958240
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569556c0 p>
    def_stmt p_14 = malloc (4);
    version 14
    ptr-info 0x7f495696d7e0>

 ================== Start Use after free Check ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
     free(p);
     ^
mangled_30 = PHI <p_14(6), mangled_29(7)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_41 = PHI <mangled_30(9), p_222(10)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_226 = PHI <p_77(20), p_41(22)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_89 = PHI <p_47(15), p_47(16), p_226(23)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_122 = PHI <p_89(37), p_115(40)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_142 = PHI <p_132(48), p_122(49)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_197 = PHI <p_142(53), p_150(60), p_160(63)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_208 = PHI <p_197(78), p_197(79), p_203(82)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_203 = PHI <p_202(80), p_204(81)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_190 = PHI <p_189(73), p_191(74)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_149 = PHI <p_145(55), p_228(56)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_160 = PHI <p_159(61), p_161(62)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_228 = PHI <p_150(57), p_150(59)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_222 = PHI <p_96(30), p_145(71)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_115 = PHI <p_114(38), p_116(39)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_45 = PHI <p_41(12), p_224(13)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 
# .MEM_274 = VDEF <.MEM_273>
free (p_14);
test.c:327:5: warning: Use after free error!: free location 
p_224 = PHI <p_47(14), p_47(16)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================

 <function_decl 0x7f4956939b00 main
    type <function_type 0x7f49569387e0
        type <integer_type 0x7f4956e065e8 int public SI
            size <integer_cst 0x7f4956df2e28 constant 32>
            unit size <integer_cst 0x7f4956df2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
            pointer_to_this <pointer_type 0x7f4956e0da80>>
        QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 335 col 5 align 8 context <translation_unit_decl 0x7f4956dfd168 test.c> initial <block 0x7f49569470c0>
    result <result_decl 0x7f4956dfd1e0 D.4026 type <integer_type 0x7f4956e065e8 int>
        ignored SI file test.c line 335 col 5 size <integer_cst 0x7f4956df2e28 32> unit size <integer_cst 0x7f4956df2e40 4>
        align 32 context <function_decl 0x7f4956939b00 main>>
    struct-function 0x7f4956951000>
 <ssa_name 0x7f4956958b40
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    def_stmt _23 = strdup (p_14);
    version 23
    ptr-info 0x7f495696d888>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_27 = PHI <_23(4), 0B(5), _26(89)>
lto1: warning: use location
dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
   return xstrdup (mangled);
          ^
dot graph target loc en1

dot graph target line desc form basic block 90: _27 = PHI <_23(4), 0B(5), _26(89)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 90dot graph target basicblock en1

dot graph stmt start _27 = PHI <_23(4), 0B(5), _26(89)>
_23 = strdup (p_14);
dot graph stmt end

dot graph stmt start _27 = PHI <_23(4), 0B(5), _26(89)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strdup-----
dot graph entry main
dot graph target entry end

_272 = _27;
lto1: warning: use location
dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 90: _272 = _27;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 90dot graph target basicblock en1

dot graph stmt start _272 = _27;
_23 = strdup (p_14);
dot graph stmt end

dot graph stmt start _272 = _27;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

q_16 = _272;
test.c:319:6: warning: use location
    q = cplus_demangle (p);
      ^
dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
   return xstrdup (mangled);
          ^
dot graph target loc en1

dot graph target line desc form basic block 90: q_16 = _272;
test.c:319:6: warning: use location
    q = cplus_demangle (p);
      ^
dot graph target line desend

dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
   return xstrdup (mangled);
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 90dot graph target basicblock en1

dot graph stmt start q_16 = _272;
_23 = strdup (p_14);
dot graph stmt end

dot graph stmt start q_16 = _272;
test.c:319:6: warning: use location
    q = cplus_demangle (p);
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

free (q_16);
test.c:323:6: warning: use location
      free (q);
      ^
dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
   return xstrdup (mangled);
          ^
dot graph target loc en1

dot graph target line desc form basic block 91: free (q_16);
test.c:323:6: warning: use location
      free (q);
      ^
dot graph target line desend

dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
   return xstrdup (mangled);
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 91dot graph target basicblock en1

dot graph stmt start free (q_16);
_23 = strdup (p_14);
dot graph stmt end

dot graph stmt start free (q_16);
test.c:323:6: warning: use location
      free (q);
      ^
dot graph stmt end

dot graph target color descgreendot graph target color desend

this stmt is child function---free-----

 ================== find ================== 
free (q_16);
test.c:323:6: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
dot graph entry main
dot graph target entry end

_230 = MEM[(int *)q_16];
test.c:32:2: warning: use location
  __USE(s);
  ^
dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
   return xstrdup (mangled);
          ^
dot graph target loc en1

dot graph target line desc form basic block 91: _230 = MEM[(int *)q_16];
test.c:32:2: warning: use location
  __USE(s);
  ^
dot graph target line desend

dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
   return xstrdup (mangled);
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 91dot graph target basicblock en1

dot graph stmt start _230 = MEM[(int *)q_16];
_23 = strdup (p_14);
dot graph stmt end

dot graph stmt start _230 = MEM[(int *)q_16];
test.c:32:2: warning: use location
  __USE(s);
  ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_231 = __printf_chk (1, "%d\n", _230);
dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
   return xstrdup (mangled);
          ^
dot graph target loc en1

dot graph target line desc form basic block 91: _231 = __printf_chk (1, "%d\n", _230);
dot graph target line desend

dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 91dot graph target basicblock en1

dot graph stmt start _231 = __printf_chk (1, "%d\n", _230);
_23 = strdup (p_14);
dot graph stmt end

dot graph stmt start _231 = __printf_chk (1, "%d\n", _230);
dot graph stmt end

this stmt is child function---__printf_chk-----

 ================== trace ================== 
 <ssa_name 0x7f4956958b40
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    def_stmt _23 = strdup (p_14);
    version 23
    ptr-info 0x7f495696d888>
trace fucntion name:__printf_chk 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

if (q_16 != 0B)
test.c:320:7: warning: use location
    if (q)
       ^
dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
   return xstrdup (mangled);
          ^
dot graph target loc en1

dot graph target line desc form basic block 90: if (q_16 != 0B)
test.c:320:7: warning: use location
    if (q)
       ^
dot graph target line desend

dot graph target loc start # .MEM_271 = VDEF <.MEM_254>
_23 = strdup (p_14);
test.c:300:10: warning: use location
   return xstrdup (mangled);
          ^
dot graph target loc end

dot graph target basicblock start from main basic block 90dot graph target basicblock en1

dot graph stmt start if (q_16 != 0B)
_23 = strdup (p_14);
dot graph stmt end

dot graph stmt start if (q_16 != 0B)
test.c:320:7: warning: use location
    if (q)
       ^
dot graph stmt end

if (q_16 != 0B)

 ================== find cond branch ================= 
if (q_16 != 0B)
Cond in fucntion main basic block 90
 ================== possiable direct basic block ================= 
from main basic block 91
 ================== possiable direct basic block ================= 
from main basic block 92
 ================== warring ================== 
[40;35m    need check this branch possiable have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
dot graph target basicblock start from main basic block 91dot graph target basicblock en1

dot graph arrowsubgraph cluster_1167289759 dot graph subgraph  free (q_16);
q_16 = _272;
dot graph subgrapend

dot graph target basicblock start from main basic block 91dot graph target basicblock en1

dot graph arrowsubgraph cluster_1193805364 dot graph subgraph  _230 = MEM[(int *)q_16];
q_16 = _272;
dot graph subgrapend

dot graph target basicblock start from main basic block 91dot graph target basicblock en1

dot graph arrowsubgraph cluster_1597382132 dot graph subgraph  _231 = __printf_chk (1, "%d\n", _230);
_230 = MEM[(int *)q_16];
dot graph subgrapend

 <ssa_name 0x7f4956958b40
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
   
    def_stmt _23 = strdup (p_14);
    version 23
    ptr-info 0x7f495696d888>

 ================== Start Use after free Check ================== 
# .MEM_276 = VDEF <.MEM_275>
free (q_16);
test.c:323:6: warning: Use after free error!: free location 
      free (q);
      ^
_27 = PHI <_23(4), 0B(5), _26(89)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================

 <function_decl 0x7f4956939b00 main
    type <function_type 0x7f49569387e0
        type <integer_type 0x7f4956e065e8 int public SI
            size <integer_cst 0x7f4956df2e28 constant 32>
            unit size <integer_cst 0x7f4956df2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
            pointer_to_this <pointer_type 0x7f4956e0da80>>
        QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 335 col 5 align 8 context <translation_unit_decl 0x7f4956dfd168 test.c> initial <block 0x7f49569470c0>
    result <result_decl 0x7f4956dfd1e0 D.4026 type <integer_type 0x7f4956e065e8 int>
        ignored SI file test.c line 335 col 5 size <integer_cst 0x7f4956df2e28 32> unit size <integer_cst 0x7f4956df2e40 4>
        align 32 context <function_decl 0x7f4956939b00 main>>
    struct-function 0x7f4956951000>
 <ssa_name 0x7f4956976120
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_39 = malloc (_38);
    version 39
    ptr-info 0x7f495696d900>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_221 = PHI <demangled_39(84), demangled_216(88)>
lto1: warning: use location
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 89: _221 = PHI <demangled_39(84), demangled_216(88)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 89dot graph target basicblock en1

dot graph stmt start _221 = PHI <demangled_39(84), demangled_216(88)>
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start _221 = PHI <demangled_39(84), demangled_216(88)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

_270 = _221;
lto1: warning: use location
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 89: _270 = _221;
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 89dot graph target basicblock en1

dot graph stmt start _270 = _221;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start _270 = _221;
lto1: warning: use location
dot graph stmt end

dot graph entry main
dot graph target entry end

_26 = _270;
test.c:303:10: warning: use location
   return ada_demangle (mangled);
          ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 89: _26 = _270;
test.c:303:10: warning: use location
   return ada_demangle (mangled);
          ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 89dot graph target basicblock en1

dot graph stmt start _26 = _270;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start _26 = _270;
test.c:303:10: warning: use location
   return ada_demangle (mangled);
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

d_80 = PHI <demangled_39(9), d_223(10)>
lto1: warning: use location
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 11: d_80 = PHI <demangled_39(9), d_223(10)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 11dot graph target basicblock en1

dot graph stmt start d_80 = PHI <demangled_39(9), d_223(10)>
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_80 = PHI <demangled_39(9), d_223(10)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

d_227 = PHI <d_85(20), d_80(22)>
lto1: warning: use location
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 23: d_227 = PHI <d_85(20), d_80(22)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 23dot graph target basicblock en1

dot graph stmt start d_227 = PHI <d_85(20), d_80(22)>
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_227 = PHI <d_85(20), d_80(22)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

d_97 = PHI <d_50(15), d_50(16), d_227(23)>
lto1: warning: use location
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc en1

dot graph target line desc form basic block 24: d_97 = PHI <d_50(15), d_50(16), d_227(23)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 24dot graph target basicblock en1

dot graph stmt start d_97 = PHI <d_50(15), d_50(16), d_227(23)>
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_97 = PHI <d_50(15), d_50(16), d_227(23)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---malloc-----
dot graph entry main
dot graph target entry end

strcpy (d_97, name_139);
test.c:189:11: warning: use location
           strcpy (d, name);
           ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 52: strcpy (d_97, name_139);
test.c:189:11: warning: use location
           strcpy (d, name);
           ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 52dot graph target basicblock en1

dot graph stmt start strcpy (d_97, name_139);
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start strcpy (d_97, name_139);
test.c:189:11: warning: use location
           strcpy (d, name);
           ^
dot graph stmt end

this stmt is child function---strcpy-----

 ================== trace ================== 
 <ssa_name 0x7f4956976120
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_39 = malloc (_38);
    version 39
    ptr-info 0x7f495696d900>
trace fucntion name:strcpy 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

strcpy (d_97, name_133);
test.c:171:11: warning: use location
           strcpy (d, name);
           ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 48: strcpy (d_97, name_133);
test.c:171:11: warning: use location
           strcpy (d, name);
           ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 48dot graph target basicblock en1

dot graph stmt start strcpy (d_97, name_133);
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start strcpy (d_97, name_133);
test.c:171:11: warning: use location
           strcpy (d, name);
           ^
dot graph stmt end

this stmt is child function---strcpy-----

 ================== trace ================== 
 <ssa_name 0x7f4956976120
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_39 = malloc (_38);
    version 39
    ptr-info 0x7f495696d900>
trace fucntion name:strcpy 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

*d_97 = 46;
test.c:121:20: warning: use location
               *d++ = '.';
                    ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 30: *d_97 = 46;
test.c:121:20: warning: use location
               *d++ = '.';
                    ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 30dot graph target basicblock en1

dot graph stmt start *d_97 = 46;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start *d_97 = 46;
test.c:121:20: warning: use location
               *d++ = '.';
                    ^
dot graph stmt end

dot graph entry main
dot graph target entry end

d_210 = PHI <d_97(27), d_97(34), d_141(52), d_229(70), d_178(77), d_178(83)>
lto1: warning: use location
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 84: d_210 = PHI <d_97(27), d_97(34), d_141(52), d_229(70), d_178(77), d_178(83)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 84dot graph target basicblock en1

dot graph stmt start d_210 = PHI <d_97(27), d_97(34), d_141(52), d_229(70), d_178(77), d_178(83)>
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_210 = PHI <d_97(27), d_97(34), d_141(52), d_229(70), d_178(77), d_178(83)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strcpy-----
dot graph entry main
dot graph target entry end

*d_210 = 0;
test.c:281:6: warning: use location
   *d = 0;
      ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 84: *d_210 = 0;
test.c:281:6: warning: use location
   *d = 0;
      ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 84dot graph target basicblock en1

dot graph stmt start *d_210 = 0;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start *d_210 = 0;
test.c:281:6: warning: use location
   *d = 0;
      ^
dot graph stmt end

dot graph entry main
dot graph target entry end

d_178 = PHI <d_135(48), d_97(49)>
lto1: warning: use location
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 53: d_178 = PHI <d_135(48), d_97(49)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 53dot graph target basicblock en1

dot graph stmt start d_178 = PHI <d_135(48), d_97(49)>
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_178 = PHI <d_135(48), d_97(49)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---strcpy-----
dot graph entry main
dot graph target entry end

*d_178 = 46;
test.c:247:24: warning: use location
                   *d++ = '.';
                        ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 71: *d_178 = 46;
test.c:247:24: warning: use location
                   *d++ = '.';
                        ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

dot graph stmt start *d_178 = 46;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start *d_178 = 46;
test.c:247:24: warning: use location
                   *d++ = '.';
                        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

memcpy (d_178, _177, slen_176);
test.c:235:27: warning: use location
                           memcpy (d, special[k][1], slen);
                           ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 67: memcpy (d_178, _177, slen_176);
test.c:235:27: warning: use location
                           memcpy (d, special[k][1], slen);
                           ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 67dot graph target basicblock en1

dot graph stmt start memcpy (d_178, _177, slen_176);
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start memcpy (d_178, _177, slen_176);
test.c:235:27: warning: use location
                           memcpy (d, special[k][1], slen);
                           ^
dot graph stmt end

this stmt is child function---memcpy-----

 ================== trace ================== 
 <ssa_name 0x7f4956976120
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_39 = malloc (_38);
    version 39
    ptr-info 0x7f495696d900>
trace fucntion name:memcpy 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

d_229 = PHI <d_179(67), d_178(69)>
lto1: warning: use location
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 70: d_229 = PHI <d_179(67), d_178(69)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 70dot graph target basicblock en1

dot graph stmt start d_229 = PHI <d_179(67), d_178(69)>
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_229 = PHI <d_179(67), d_178(69)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---memcpy-----
dot graph entry main
dot graph target entry end

d_183 = d_178 + 1;
test.c:247:21: warning: use location
                   *d++ = '.';
                     ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 71: d_183 = d_178 + 1;
test.c:247:21: warning: use location
                   *d++ = '.';
                     ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 71dot graph target basicblock en1

dot graph stmt start d_183 = d_178 + 1;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_183 = d_178 + 1;
test.c:247:21: warning: use location
                   *d++ = '.';
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

d_223 = PHI <d_98(30), d_183(71)>
lto1: warning: use location
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 10: d_223 = PHI <d_98(30), d_183(71)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 10dot graph target basicblock en1

dot graph stmt start d_223 = PHI <d_98(30), d_183(71)>
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_223 = PHI <d_98(30), d_183(71)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---memcpy-----
dot graph entry main
dot graph target entry end

d_179 = d_178 + slen_176;
test.c:236:29: warning: use location
                           d += slen;
                             ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 67: d_179 = d_178 + slen_176;
test.c:236:29: warning: use location
                           d += slen;
                             ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 67dot graph target basicblock en1

dot graph stmt start d_179 = d_178 + slen_176;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_179 = d_178 + slen_176;
test.c:236:29: warning: use location
                           d += slen;
                             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

d_141 = d_97 + _140;
test.c:190:13: warning: use location
           d += strlen (name);
             ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 52: d_141 = d_97 + _140;
test.c:190:13: warning: use location
           d += strlen (name);
             ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 52dot graph target basicblock en1

dot graph stmt start d_141 = d_97 + _140;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_141 = d_97 + _140;
test.c:190:13: warning: use location
           d += strlen (name);
             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

d_135 = d_97 + _134;
test.c:172:13: warning: use location
           d += strlen (name);
             ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 48: d_135 = d_97 + _134;
test.c:172:13: warning: use location
           d += strlen (name);
             ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 48dot graph target basicblock en1

dot graph stmt start d_135 = d_97 + _134;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_135 = d_97 + _134;
test.c:172:13: warning: use location
           d += strlen (name);
             ^
dot graph stmt end

dot graph entry main
dot graph target entry end

d_98 = d_97 + 1;
test.c:121:17: warning: use location
               *d++ = '.';
                 ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 30: d_98 = d_97 + 1;
test.c:121:17: warning: use location
               *d++ = '.';
                 ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 30dot graph target basicblock en1

dot graph stmt start d_98 = d_97 + 1;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_98 = d_97 + 1;
test.c:121:17: warning: use location
               *d++ = '.';
                 ^
dot graph stmt end

dot graph entry main
dot graph target entry end

d_48 = PHI <d_80(12), d_225(13)>
lto1: warning: use location
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 14: d_48 = PHI <d_80(12), d_225(13)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start d_48 = PHI <d_80(12), d_225(13)>
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_48 = PHI <d_80(12), d_225(13)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---memcpy-----
dot graph entry main
dot graph target entry end

d_50 = d_48 + 1;
test.c:65:9: warning: use location
       *d++ = *p++;
         ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 14: d_50 = d_48 + 1;
test.c:65:9: warning: use location
       *d++ = *p++;
         ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start d_50 = d_48 + 1;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_50 = d_48 + 1;
test.c:65:9: warning: use location
       *d++ = *p++;
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

d_225 = PHI <d_50(14), d_50(16)>
lto1: warning: use location
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 13: d_225 = PHI <d_50(14), d_50(16)>
lto1: warning: use location
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 13dot graph target basicblock en1

dot graph stmt start d_225 = PHI <d_50(14), d_50(16)>
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_225 = PHI <d_50(14), d_50(16)>
lto1: warning: use location
dot graph stmt end

this stmt have mutiple branch ---memcpy-----
dot graph entry main
dot graph target entry end

_49 = d_48;
test.c:65:9: warning: use location
       *d++ = *p++;
         ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 14: _49 = d_48;
test.c:65:9: warning: use location
       *d++ = *p++;
         ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 14dot graph target basicblock en1

dot graph stmt start _49 = d_48;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start _49 = d_48;
test.c:65:9: warning: use location
       *d++ = *p++;
         ^
dot graph stmt end

dot graph entry main
dot graph target entry end

d_82 = d_80 + 1;
test.c:90:21: warning: use location
                   *d++ = '"';
                     ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 20: d_82 = d_80 + 1;
test.c:90:21: warning: use location
                   *d++ = '"';
                     ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start d_82 = d_80 + 1;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_82 = d_80 + 1;
test.c:90:21: warning: use location
                   *d++ = '"';
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

memcpy (d_82, _83, slen_79);
test.c:91:19: warning: use location
                   memcpy (d, operators[k][1], slen);
                   ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 20: memcpy (d_82, _83, slen_79);
test.c:91:19: warning: use location
                   memcpy (d, operators[k][1], slen);
                   ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start memcpy (d_82, _83, slen_79);
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start memcpy (d_82, _83, slen_79);
test.c:91:19: warning: use location
                   memcpy (d, operators[k][1], slen);
                   ^
dot graph stmt end

this stmt is child function---memcpy-----

 ================== trace ================== 
 <ssa_name 0x7f4956976120
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_39 = malloc (_38);
    version 39
    ptr-info 0x7f495696d900>
trace fucntion name:memcpy 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

d_84 = d_82 + slen_79;
test.c:92:21: warning: use location
                   d += slen;
                     ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 20: d_84 = d_82 + slen_79;
test.c:92:21: warning: use location
                   d += slen;
                     ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start d_84 = d_82 + slen_79;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_84 = d_82 + slen_79;
test.c:92:21: warning: use location
                   d += slen;
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

*d_84 = 34;
test.c:93:24: warning: use location
                   *d++ = '"';
                        ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 20: *d_84 = 34;
test.c:93:24: warning: use location
                   *d++ = '"';
                        ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start *d_84 = 34;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start *d_84 = 34;
test.c:93:24: warning: use location
                   *d++ = '"';
                        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

d_85 = d_84 + 1;
test.c:93:21: warning: use location
                   *d++ = '"';
                     ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 20: d_85 = d_84 + 1;
test.c:93:21: warning: use location
                   *d++ = '"';
                     ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start d_85 = d_84 + 1;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_85 = d_84 + 1;
test.c:93:21: warning: use location
                   *d++ = '"';
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_81 = d_80;
test.c:90:21: warning: use location
                   *d++ = '"';
                     ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 20: _81 = d_80;
test.c:90:21: warning: use location
                   *d++ = '"';
                     ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start _81 = d_80;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start _81 = d_80;
test.c:90:21: warning: use location
                   *d++ = '"';
                     ^
dot graph stmt end

dot graph entry main
dot graph target entry end

*_81 = 34;
test.c:90:24: warning: use location
                   *d++ = '"';
                        ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 20: *_81 = 34;
test.c:90:24: warning: use location
                   *d++ = '"';
                        ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 20dot graph target basicblock en1

dot graph stmt start *_81 = 34;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start *_81 = 34;
test.c:90:24: warning: use location
                   *d++ = '"';
                        ^
dot graph stmt end

dot graph entry main
dot graph target entry end

_211 = demangled_39;
test.c:282:10: warning: use location
   return demangled;
          ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 84: _211 = demangled_39;
test.c:282:10: warning: use location
   return demangled;
          ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 84dot graph target basicblock en1

dot graph stmt start _211 = demangled_39;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start _211 = demangled_39;
test.c:282:10: warning: use location
   return demangled;
          ^
dot graph stmt end

dot graph entry main
dot graph target entry end

d_40 = demangled_39;
test.c:55:4: warning: use location
  d = demangled;
    ^
dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc en1

dot graph target line desc form basic block 9: d_40 = demangled_39;
test.c:55:4: warning: use location
  d = demangled;
    ^
dot graph target line desend

dot graph target loc start # .MEM_256 = VDEF <.MEM_255>
demangled_39 = malloc (_38);
test.c:53:12: warning: use location
  demangled = XNEWVEC (char, len0); // allocation site
            ^
dot graph target loc end

dot graph target basicblock start from main basic block 9dot graph target basicblock en1

dot graph stmt start d_40 = demangled_39;
demangled_39 = malloc (_38);
dot graph stmt end

dot graph stmt start d_40 = demangled_39;
test.c:55:4: warning: use location
  d = demangled;
    ^
dot graph stmt end

dot graph target basicblock start from main basic block 89dot graph target basicblock en1

dot graph arrowsubgraph cluster_2034924237 dot graph subgraph  _221 = PHI <demangled_39(84), demangled_216(88)>
demangled_39 = malloc (_38);
dot graph subgrapend

dot graph target basicblock start from main basic block 89dot graph target basicblock en1

dot graph arrowsubgraph cluster_1030512117 dot graph subgraph  _270 = _221;
_221 = PHI <demangled_39(84), demangled_216(88)>
dot graph subgrapend

dot graph target basicblock start from main basic block 89dot graph target basicblock en1

dot graph arrowsubgraph cluster_1614716572 dot graph subgraph  _26 = _270;
_270 = _221;
dot graph subgrapend

 <ssa_name 0x7f4956976120
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_39 = malloc (_38);
    version 39
    ptr-info 0x7f495696d900>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
 <function_decl 0x7f4956939b00 main
    type <function_type 0x7f49569387e0
        type <integer_type 0x7f4956e065e8 int public SI
            size <integer_cst 0x7f4956df2e28 constant 32>
            unit size <integer_cst 0x7f4956df2e40 constant 4>
            align 32 symtab 0 alias set -1 canonical type 0x7f4956e065e8 precision 32 min <integer_cst 0x7f4956df2de0 -2147483648> max <integer_cst 0x7f4956df2df8 2147483647>
            pointer_to_this <pointer_type 0x7f4956e0da80>>
        QI
        size <integer_cst 0x7f4956df2cd8 constant 8>
        unit size <integer_cst 0x7f4956df2cf0 constant 1>
        align 8 symtab 0 alias set -1 structural equality>
    nothrow public static function-specific-target function-specific-opt QI file test.c line 335 col 5 align 8 context <translation_unit_decl 0x7f4956dfd168 test.c> initial <block 0x7f49569470c0>
    result <result_decl 0x7f4956dfd1e0 D.4026 type <integer_type 0x7f4956e065e8 int>
        ignored SI file test.c line 335 col 5 size <integer_cst 0x7f4956df2e28 32> unit size <integer_cst 0x7f4956df2e40 4>
        align 32 context <function_decl 0x7f4956939b00 main>>
    struct-function 0x7f4956951000>
 <ssa_name 0x7f49569823a8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_216 = malloc (_215);
    version 216
    ptr-info 0x7f495696deb8>

dot graph START

======================================================================

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
dot graph entry main
dot graph target entry end

_218 = __builtin_object_size (demangled_216, 1);
dot graph target loc start # .MEM_267 = VDEF <.MEM_242>
demangled_216 = malloc (_215);
test.c:286:13: warning: use location
   demangled = XNEWVEC (char, len0 + 3); /* memory leak */
             ^
dot graph target loc en1

dot graph target line desc form basic block 87: _218 = __builtin_object_size (demangled_216, 1);
dot graph target line desend

dot graph target loc start # .MEM_267 = VDEF <.MEM_242>
demangled_216 = malloc (_215);
test.c:286:13: warning: use location
dot graph target loc end

dot graph target basicblock start from main basic block 87dot graph target basicblock en1

dot graph stmt start _218 = __builtin_object_size (demangled_216, 1);
demangled_216 = malloc (_215);
dot graph stmt end

dot graph stmt start _218 = __builtin_object_size (demangled_216, 1);
dot graph stmt end

this stmt is child function---__builtin_object_size-----

 ================== trace ================== 
 <ssa_name 0x7f49569823a8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_216 = malloc (_215);
    version 216
    ptr-info 0x7f495696deb8>
trace fucntion name:__builtin_object_size 

 ================== trace ================== 
dot graph entry main
dot graph target entry end

_220 = demangled_216;
test.c:293:10: warning: use location
   return demangled;
          ^
dot graph target loc start # .MEM_267 = VDEF <.MEM_242>
demangled_216 = malloc (_215);
test.c:286:13: warning: use location
   demangled = XNEWVEC (char, len0 + 3); /* memory leak */
             ^
dot graph target loc en1

dot graph target line desc form basic block 88: _220 = demangled_216;
test.c:293:10: warning: use location
   return demangled;
          ^
dot graph target line desend

dot graph target loc start # .MEM_267 = VDEF <.MEM_242>
demangled_216 = malloc (_215);
test.c:286:13: warning: use location
   demangled = XNEWVEC (char, len0 + 3); /* memory leak */
             ^
dot graph target loc end

dot graph target basicblock start from main basic block 88dot graph target basicblock en1

dot graph stmt start _220 = demangled_216;
demangled_216 = malloc (_215);
dot graph stmt end

dot graph stmt start _220 = demangled_216;
test.c:293:10: warning: use location
   return demangled;
          ^
dot graph stmt end

dot graph target basicblock start from main basic block 88dot graph target basicblock en1

dot graph arrowsubgraph cluster_1725339898 dot graph subgraph  _220 = demangled_216;
demangled_216 = malloc (_215);
dot graph subgrapend

 <ssa_name 0x7f49569823a8
    type <pointer_type 0x7f4956938930
        type <integer_type 0x7f4956938888 char public string-flag QI
            size <integer_cst 0x7f4956df2cd8 constant 8>
            unit size <integer_cst 0x7f4956df2cf0 constant 1>
            align 8 symtab 0 alias set -1 canonical type 0x7f4956e063f0 precision 8 min <integer_cst 0x7f495693b180 -128> max <integer_cst 0x7f495693b168 127>
            pointer_to_this <pointer_type 0x7f4956938930>>
        public unsigned DI
        size <integer_cst 0x7f4956df2be8 constant 64>
        unit size <integer_cst 0x7f4956df2c00 constant 8>
        align 64 symtab 0 alias set -1 structural equality context <translation_unit_decl 0x7f4956dfd168 test.c>>
    var <var_decl 0x7f49569741b0 demangled>
    def_stmt demangled_216 = malloc (_215);
    version 216
    ptr-info 0x7f495696deb8>

 ================== Start Use after free Check ================== 

dot graph END

 ================== Start Use after free Check ================== 

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
fucntion collect path finsh
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    find Entry point : 4
 [0m
[40;34m    used_stmt array stack totalsize of : 1936
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
algorithm time: 0.048703 s
=======Mapping node_fun:main=========
<bb 2> [100.00%]:
mangled_278 = "123456";
_1 = time (&t);
_2 = (unsigned int) _1;
srand (_2);
s.e = 0B;
_19 = s.e;
s.p = _19;
_20 = s.p;
s.b = _20;
_12 = rand ();
_13 = _12 % 2;
if (_13 == 1)
  goto <bb 3>; [22.95%]
else
  goto <bb 93>; [77.05%]

=======is loop:0=========
<bb 3> [22.95%]:
p_14 = malloc (4);
_15 = mangled_278;
strncpy (p_14, _15, 3);
MEM[(char *)p_14 + 3B] = 0;
_21 = rand ();
_22 = _21 % 2;
if (_22 == 1)
  goto <bb 4>; [30.50%]
else
  goto <bb 5>; [69.50%]

=======is loop:0=========
<bb 4> [7.00%]:
_23 = strdup (p_14);
goto <bb 90>; [100.00%]

=======is loop:0=========
<bb 5> [15.95%]:
_24 = rand ();
_25 = _24 % 2;
if (_25 == 1)
  goto <bb 6>; [71.96%]
else
  goto <bb 90>; [28.04%]

=======is loop:0=========
<bb 6> [11.48%]:
_28 = strncmp (p_14, "_ada_", 5);
if (_28 == 0)
  goto <bb 7>; [50.00%]
else
  goto <bb 8>; [50.00%]

=======is loop:0=========
<bb 7> [5.74%]:
mangled_29 = p_14 + 5;

=======is loop:0=========
<bb 8> [11.48%]:
# mangled_30 = PHI <p_14(6), mangled_29(7)>
_31 = *mangled_30;
_32 = (unsigned char) _31;
_33 = _32 + 159;
if (_33 > 25)
  goto <bb 85> (unknown); [50.00%]
else
  goto <bb 9>; [50.00%]

=======is loop:0=========
<bb 9> [5.74%]:
_34 = strlen (mangled_30);
_35 = (unsigned int) _34;
_36 = _35 + 8;
len0_37 = (int) _36;
_38 = (long unsigned int) len0_37;
demangled_39 = malloc (_38);
d_40 = demangled_39;
goto <bb 11>; [100.00%]

=======is loop:0=========
<bb 10> [5.22%]:
# p_222 = PHI <p_96(30), p_145(71)>
# d_223 = PHI <d_98(30), d_183(71)>

=======is loop:1=========
<bb 11> [10.95%]:
# p_41 = PHI <mangled_30(9), p_222(10)>
# d_80 = PHI <demangled_39(9), d_223(10)>
_42 = *p_41;
_43 = (unsigned char) _42;
_44 = _43 + 159;
if (_44 > 25)
  goto <bb 12>; [50.00%]
else
  goto <bb 17>; [50.00%]

=======is loop:1=========
<bb 12> [5.48%]:
goto <bb 14>; [100.00%]

=======is loop:1=========
<bb 13> [70.40%]:
# p_224 = PHI <p_47(14), p_47(16)>
# d_225 = PHI <d_50(14), d_50(16)>

=======is loop:1=========
<bb 14> [75.88%]:
# p_45 = PHI <p_41(12), p_224(13)>
# d_48 = PHI <d_80(12), d_225(13)>
_46 = p_45;
p_47 = p_45 + 1;
_49 = d_48;
d_50 = d_48 + 1;
_51 = *_46;
*_49 = _51;
_52 = MEM[(const char *)_46 + 1B];
_53 = (unsigned char) _52;
_54 = _53 + 159;
_55 = _54 <= 25;
_56 = MEM[(const char *)_46 + 1B];
_57 = (unsigned char) _56;
_58 = _57 + 208;
_59 = _58 <= 9;
_60 = _55 | _59;
if (_60 != 0)
  goto <bb 13>; [50.00%]
else
  goto <bb 15>; [50.00%]

=======is loop:1=========
<bb 15> [37.94%]:
_61 = MEM[(const char *)_46 + 1B];
if (_61 == 95)
  goto <bb 16>; [92.50%]
else
  goto <bb 24>; [7.50%]

=======is loop:1=========
<bb 16> [35.09%]:
_62 = MEM[(const char *)_46 + 2B];
_63 = (unsigned char) _62;
_64 = _63 + 159;
_65 = _64 <= 25;
_66 = MEM[(const char *)_46 + 2B];
_67 = (unsigned char) _66;
_68 = _67 + 208;
_69 = _68 <= 9;
_70 = _65 | _69;
if (_70 != 0)
  goto <bb 13>; [92.50%]
else
  goto <bb 24>; [7.50%]

=======is loop:1=========
<bb 17> [5.48%]:
_71 = *p_41;
if (_71 == 79)
  goto <bb 18>; [98.00%]
else
  goto <bb 85> (unknown); [2.00%]

=======is loop:1=========
<bb 18> [5.37%]:
goto <bb 22>; [100.00%]

=======is loop:1=========
<bb 19> [34.39%]:
_73 = operators[k_72][0];
slen_74 = strlen (_73);
_75 = operators[k_72][0];
_76 = strncmp (p_41, _75, slen_74);
if (_76 == 0)
  goto <bb 20>; [7.50%]
else
  goto <bb 21>; [92.50%]

=======is loop:1=========
<bb 20> [2.58%]:
p_77 = p_41 + slen_74;
_78 = operators[k_72][1];
slen_79 = strlen (_78);
_81 = d_80;
d_82 = d_80 + 1;
*_81 = 34;
_83 = operators[k_72][1];
memcpy (d_82, _83, slen_79);
d_84 = d_82 + slen_79;
d_85 = d_84 + 1;
*d_84 = 34;
goto <bb 23>; [100.00%]

=======is loop:1=========
<bb 21> [31.81%]:
k_86 = k_72 + 1;

=======is loop:1=========
<bb 22> [37.18%]:
# k_72 = PHI <0(18), k_86(21)>
_87 = operators[k_72][0];
if (_87 != 0B)
  goto <bb 19>; [92.50%]
else
  goto <bb 23>; [7.50%]

=======is loop:1=========
<bb 23> [5.37%]:
# p_226 = PHI <p_77(20), p_41(22)>
# d_227 = PHI <d_85(20), d_80(22)>
_88 = operators[k_72][0];
if (_88 == 0B)
  goto <bb 85> (unknown); [2.00%]
else
  goto <bb 24>; [98.00%]

=======is loop:1=========
<bb 24> [10.74%]:
# p_89 = PHI <p_47(15), p_47(16), p_226(23)>
# d_97 = PHI <d_50(15), d_50(16), d_227(23)>
_90 = *p_89;
if (_90 == 84)
  goto <bb 25>; [34.00%]
else
  goto <bb 31>; [66.00%]

=======is loop:1=========
<bb 25> [3.65%]:
_91 = MEM[(const char *)p_89 + 1B];
if (_91 == 75)
  goto <bb 26>; [34.00%]
else
  goto <bb 31>; [66.00%]

=======is loop:1=========
<bb 26> [1.24%]:
_92 = MEM[(const char *)p_89 + 2B];
if (_92 == 66)
  goto <bb 27>; [34.00%]
else
  goto <bb 28>; [66.00%]

=======is loop:1=========
<bb 27> [0.42%]:
_93 = MEM[(const char *)p_89 + 3B];
if (_93 == 0)
  goto <bb 84>; [2.00%]
else
  goto <bb 28>; [98.00%]

=======is loop:1=========
<bb 28> [1.23%]:
_94 = MEM[(const char *)p_89 + 2B];
if (_94 == 95)
  goto <bb 29>; [98.00%]
else
  goto <bb 85> (unknown); [2.00%]

=======is loop:1=========
<bb 29> [1.21%]:
_95 = MEM[(const char *)p_89 + 3B];
if (_95 == 95)
  goto <bb 30>; [20.24%]
else
  goto <bb 85> (unknown); [79.76%]

=======is loop:1=========
<bb 30> [0.24%]:
p_96 = p_89 + 4;
d_98 = d_97 + 1;
*d_97 = 46;
// predicted unlikely by continue predictor.
goto <bb 10>; [100.00%]

=======is loop:1=========
<bb 31> [9.50%]:
_99 = *p_89;
if (_99 == 69)
  goto <bb 32>; [34.00%]
else
  goto <bb 33>; [66.00%]

=======is loop:1=========
<bb 32> [3.23%]:
_100 = MEM[(const char *)p_89 + 1B];
if (_100 == 0)
  goto <bb 85> (unknown); [2.00%]
else
  goto <bb 33>; [98.00%]

=======is loop:1=========
<bb 33> [9.43%]:
_101 = *p_89;
_102 = _101 == 80;
_103 = *p_89;
_104 = _103 == 78;
_105 = _102 | _104;
if (_105 != 0)
  goto <bb 34>; [50.00%]
else
  goto <bb 35>; [50.00%]

=======is loop:1=========
<bb 34> [4.72%]:
_106 = MEM[(const char *)p_89 + 1B];
if (_106 == 0)
  goto <bb 84>; [2.00%]
else
  goto <bb 35>; [98.00%]

=======is loop:1=========
<bb 35> [9.34%]:
_107 = *p_89;
_108 = _107 == 78;
_109 = *p_89;
_110 = _109 == 83;
_111 = _108 | _110;
if (_111 != 0)
  goto <bb 36>; [50.00%]
else
  goto <bb 37>; [50.00%]

=======is loop:1=========
<bb 36> [4.67%]:
_112 = MEM[(const char *)p_89 + 1B];
if (_112 == 0)
  goto <bb 85> (unknown); [2.00%]
else
  goto <bb 37>; [98.00%]

=======is loop:1=========
<bb 37> [9.24%]:
_113 = *p_89;
if (_113 == 88)
  goto <bb 38>; [20.97%]
else
  goto <bb 41>; [79.03%]

=======is loop:1=========
<bb 38> [1.94%]:
p_114 = p_89 + 1;
goto <bb 40>; [100.00%]

=======is loop:1=========
<bb 39> [10.98%]:
p_116 = p_115 + 1;

=======is loop:1=========
<bb 40> [12.92%]:
# p_115 = PHI <p_114(38), p_116(39)>
_117 = *p_115;
_118 = _117 == 110;
_119 = *p_115;
_120 = _119 == 98;
_121 = _118 | _120;
if (_121 != 0)
  goto <bb 39>; [85.00%]
else
  goto <bb 41>; [15.00%]

=======is loop:1=========
<bb 41> [9.24%]:
# p_122 = PHI <p_89(37), p_115(40)>
_123 = *p_122;
if (_123 == 83)
  goto <bb 42>; [34.00%]
else
  goto <bb 49>; [66.00%]

=======is loop:1=========
<bb 42> [3.14%]:
_124 = MEM[(const char *)p_122 + 1B];
if (_124 != 0)
  goto <bb 43>; [50.00%]
else
  goto <bb 49>; [50.00%]

=======is loop:1=========
<bb 43> [1.57%]:
_125 = MEM[(const char *)p_122 + 2B];
_126 = _125 == 95;
_127 = MEM[(const char *)p_122 + 2B];
_128 = _127 == 0;
_129 = _126 | _128;
if (_129 != 0)
  goto <bb 44>; [50.00%]
else
  goto <bb 49>; [50.00%]

=======is loop:1=========
<bb 44> [0.79%]:
_130 = MEM[(const char *)p_122 + 1B];
_131 = (int) _130;
switch (_130) <default: unknown [20.00%], case 73: <L1> [20.00%], case 79: <L2> [20.00%], case 82: <L3> [20.00%], case 87: <L0> [20.00%]>

=======is loop:1=========
<L0> [0.16%]:
goto <bb 48> (<L3>); [100.00%]

=======is loop:1=========
<L1> [0.16%]:
goto <bb 48> (<L3>); [100.00%]

=======is loop:1=========
<L2> [0.16%]:

=======is loop:1=========
# name_133 = PHI <"\'Read"(44), "\'Write"(45), "\'Input"(46), "\'Output"(47)>
<L3> [0.63%]:
p_132 = p_122 + 2;
strcpy (d_97, name_133);
_134 = strlen (name_133);
d_135 = d_97 + _134;
goto <bb 53>; [100.00%]

=======is loop:1=========
<bb 49> [8.46%]:
_136 = *p_122;
if (_136 == 68)
  goto <bb 50>; [2.00%]
else
  goto <bb 53>; [98.00%]

=======is loop:1=========
<bb 50> [0.17%]:
_137 = MEM[(const char *)p_122 + 1B];
_138 = (int) _137;
switch (_137) <default: unknown [33.33%], case 65: <L4> [33.33%], case 70: <L5> [33.33%]>

=======is loop:0=========
<L4> [0.06%]:

=======is loop:0=========
# name_139 = PHI <".Finalize"(50), ".Adjust"(51)>
<L5> [0.11%]:
strcpy (d_97, name_139);
_140 = strlen (name_139);
d_141 = d_97 + _140;
goto <bb 84>; [100.00%]

=======is loop:0=========
<bb 53> [8.92%]:
# p_142 = PHI <p_132(48), p_122(49)>
# d_178 = PHI <d_135(48), d_97(49)>
_143 = *p_142;
if (_143 == 95)
  goto <bb 54>; [98.00%]
else
  goto <bb 78>; [2.00%]

=======is loop:1=========
<bb 54> [8.74%]:
_144 = MEM[(const char *)p_142 + 1B];
if (_144 == 95)
  goto <bb 55>; [98.00%]
else
  goto <bb 72>; [2.00%]

=======is loop:1=========
<bb 55> [8.56%]:
p_145 = p_142 + 2;
_146 = MEM[(const char *)p_142 + 2B];
_147 = (unsigned int) _146;
_148 = _147 + 4294967248;
if (_148 <= 9)
  goto <bb 57>; [2.00%]
else
  goto <bb 64>; [98.00%]

=======is loop:1=========
<bb 56> [2.20%]:
# p_228 = PHI <p_150(57), p_150(59)>

=======is loop:1=========
<bb 57> [2.37%]:
# p_149 = PHI <p_145(55), p_228(56)>
p_150 = p_149 + 1;
_151 = *p_150;
_152 = (unsigned int) _151;
_153 = _152 + 4294967248;
if (_153 <= 9)
  goto <bb 56>; [50.00%]
else
  goto <bb 58>; [50.00%]

=======is loop:1=========
<bb 58> [1.19%]:
_154 = *p_150;
if (_154 == 95)
  goto <bb 59>; [92.50%]
else
  goto <bb 60>; [7.50%]

=======is loop:1=========
<bb 59> [1.10%]:
_155 = MEM[(const char *)p_150 + 1B];
_156 = (unsigned int) _155;
_157 = _156 + 4294967248;
if (_157 <= 9)
  goto <bb 56>; [92.50%]
else
  goto <bb 60>; [7.50%]

=======is loop:1=========
<bb 60> [0.17%]:
_158 = *p_150;
if (_158 == 88)
  goto <bb 61>; [34.00%]
else
  goto <bb 78>; [66.00%]

=======is loop:0=========
<bb 61> [0.06%]:
p_159 = p_149 + 2;
goto <bb 63>; [100.00%]

=======is loop:0=========
<bb 62> [0.33%]:
p_161 = p_160 + 1;

=======is loop:1=========
<bb 63> [0.39%]:
# p_160 = PHI <p_159(61), p_161(62)>
_162 = *p_160;
_163 = _162 == 110;
_164 = *p_160;
_165 = _164 == 98;
_166 = _163 | _165;
if (_166 != 0)
  goto <bb 62>; [85.00%]
else
  goto <bb 78>; [15.00%]

=======is loop:1=========
<bb 64> [8.39%]:
_167 = MEM[(const char *)p_142 + 2B];
if (_167 == 95)
  goto <bb 65>; [51.12%]
else
  goto <bb 71>; [48.88%]

=======is loop:1=========
<bb 65> [4.29%]:
_168 = MEM[(const char *)p_142 + 3B];
if (_168 != 95)
  goto <bb 69>; [79.76%]
else
  goto <bb 71>; [20.24%]

=======is loop:1=========
<bb 66> [21.93%]:
_170 = special[k_169][0];
slen_171 = strlen (_170);
_172 = special[k_169][0];
_173 = strncmp (p_145, _172, slen_171);
if (_173 == 0)
  goto <bb 67>; [7.50%]
else
  goto <bb 68>; [92.50%]

=======is loop:1=========
<bb 67> [1.64%]:
p_174 = p_145 + slen_171;
_175 = special[k_169][1];
slen_176 = strlen (_175);
_177 = special[k_169][1];
memcpy (d_178, _177, slen_176);
d_179 = d_178 + slen_176;
goto <bb 70>; [100.00%]

=======is loop:0=========
<bb 68> [20.28%]:
k_180 = k_169 + 1;

=======is loop:1=========
<bb 69> [23.70%]:
# k_169 = PHI <0(65), k_180(68)>
_181 = special[k_169][0];
if (_181 != 0B)
  goto <bb 66>; [92.50%]
else
  goto <bb 70>; [7.50%]

=======is loop:1=========
<bb 70> [3.42%]:
# d_229 = PHI <d_179(67), d_178(69)>
_182 = special[k_169][0];
if (_182 != 0B)
  goto <bb 84>; [66.53%]
else
  goto <bb 85> (unknown); [33.47%]

=======is loop:0=========
<bb 71> [4.97%]:
d_183 = d_178 + 1;
*d_178 = 46;
// predicted unlikely by continue predictor.
goto <bb 10>; [100.00%]

=======is loop:1=========
<bb 72> [0.17%]:
_184 = MEM[(const char *)p_142 + 1B];
_185 = _184 == 66;
_186 = MEM[(const char *)p_142 + 1B];
_187 = _186 == 69;
_188 = _185 | _187;
if (_188 != 0)
  goto <bb 73>; [50.00%]
else
  goto <bb 85> (unknown); [50.00%]

=======is loop:0=========
<bb 73> [0.09%]:
p_189 = p_142 + 2;
goto <bb 75>; [100.00%]

=======is loop:0=========
<bb 74> [0.50%]:
p_191 = p_190 + 1;

=======is loop:1=========
<bb 75> [0.58%]:
# p_190 = PHI <p_189(73), p_191(74)>
_192 = *p_190;
_193 = (unsigned int) _192;
_194 = _193 + 4294967248;
if (_194 <= 9)
  goto <bb 74>; [85.00%]
else
  goto <bb 76>; [15.00%]

=======is loop:1=========
<bb 76> [0.09%]:
_195 = *p_190;
if (_195 == 115)
  goto <bb 77>; [34.00%]
else
  goto <bb 85> (unknown); [66.00%]

=======is loop:0=========
<bb 77> [0.03%]:
_196 = MEM[(const char *)p_190 + 1B];
if (_196 == 0)
  goto <bb 84>; [46.00%]
else
  goto <bb 85> (unknown); [54.00%]

=======is loop:0=========
<bb 78> [0.35%]:
# p_197 = PHI <p_142(53), p_150(60), p_160(63)>
_198 = *p_197;
if (_198 == 46)
  goto <bb 79>; [34.00%]
else
  goto <bb 83>; [66.00%]

=======is loop:0=========
<bb 79> [0.12%]:
_199 = MEM[(const char *)p_197 + 1B];
_200 = (unsigned int) _199;
_201 = _200 + 4294967248;
if (_201 <= 9)
  goto <bb 80>; [50.00%]
else
  goto <bb 83>; [50.00%]

=======is loop:0=========
<bb 80> [0.06%]:
p_202 = p_197 + 2;
goto <bb 82>; [100.00%]

=======is loop:0=========
<bb 81> [0.34%]:
p_204 = p_203 + 1;

=======is loop:1=========
<bb 82> [0.40%]:
# p_203 = PHI <p_202(80), p_204(81)>
_205 = *p_203;
_206 = (unsigned int) _205;
_207 = _206 + 4294967248;
if (_207 <= 9)
  goto <bb 81>; [85.00%]
else
  goto <bb 83>; [15.00%]

=======is loop:1=========
<bb 83> [0.35%]:
# p_208 = PHI <p_197(78), p_197(79), p_203(82)>
_209 = *p_208;
if (_209 == 0)
  goto <bb 84>; [46.00%]
else
  goto <bb 85> (unknown); [54.00%]

=======is loop:0=========
<bb 84> [2.67%]:
# d_210 = PHI <d_97(27), d_97(34), d_141(52), d_229(70), d_178(77), d_178(83)>
*d_210 = 0;
_211 = demangled_39;
goto <bb 89>; [100.00%]

=======is loop:0=========
unknown [8.81%]:
_212 = strlen (mangled_30);
len0_213 = (int) _212;
_214 = len0_213 + 3;
_215 = (long unsigned int) _214;
demangled_216 = malloc (_215);
_217 = *mangled_30;
if (_217 == 60)
  goto <bb 86>; [34.00%]
else
  goto <bb 87>; [66.00%]

=======is loop:0=========
<bb 86> [3.00%]:
strcpy (demangled_216, mangled_30);
goto <bb 88>; [100.00%]

=======is loop:0=========
<bb 87> [5.82%]:
_218 = __builtin_object_size (demangled_216, 1);
_219 = __builtin___sprintf_chk (demangled_216, 1, _218, "<%s>", mangled_30);

=======is loop:0=========
<bb 88> [8.81%]:
_220 = demangled_216;

=======is loop:0=========
<bb 89> [11.48%]:
# _221 = PHI <demangled_39(84), demangled_216(88)>
_270 = _221;
_26 = _270;

=======is loop:0=========
<bb 90> [22.95%]:
# _27 = PHI <_23(4), 0B(5), _26(89)>
_272 = _27;
q_16 = _272;
if (q_16 != 0B)
  goto <bb 91>; [66.53%]
else
  goto <bb 92>; [33.47%]

=======is loop:0=========
<bb 91> [15.27%]:
_230 = MEM[(int *)q_16];
_231 = __printf_chk (1, "%d\n", _230);
free (q_16);
goto <bb 93>; [100.00%]

=======is loop:0=========
<bb 92> [7.68%]:
_232 = MEM[(int *)p_14];
_233 = __printf_chk (1, "%d\n", _232);
free (p_14);

=======is loop:0=========
<bb 93> [100.00%]:
_17 = mangled_278;
_18 = _17 + 3;
mangled_279 = _18;
t ={v} {CLOBBER};
s ={v} {CLOBBER};
return 0;

=======is loop:0=========
time: 0.255813 s
