
;; Function parse_forward (parse_forward, funcdef_no=22, decl_uid=3494, cgraph_uid=23, symbol_order=25)

Removing basic block 20
Merging blocks 36 and 37
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
;;
;; Loop 2
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 8 }
;; 6 succs { 9 7 }
;; 7 succs { 8 }
;; 8 succs { 6 9 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 16 12 13 14 15 }
;; 12 succs { 17 }
;; 13 succs { 17 }
;; 14 succs { 17 }
;; 15 succs { 17 }
;; 16 succs { 17 }
;; 17 succs { 18 20 }
;; 18 succs { 19 24 }
;; 19 succs { 30 }
;; 20 succs { 21 22 }
;; 21 succs { 30 }
;; 22 succs { 23 24 }
;; 23 succs { 30 }
;; 24 succs { 25 26 }
;; 25 succs { 30 }
;; 26 succs { 27 29 }
;; 27 succs { 28 29 }
;; 28 succs { 30 }
;; 29 succs { 35 }
;; 30 succs { 31 32 }
;; 31 succs { 32 }
;; 32 succs { 33 34 }
;; 33 succs { 34 }
;; 34 succs { 35 }
;; 35 succs { 1 }
int parse_forward (struct Forward * fwd, const char * fwdspec, int dynamicfwd)
{
  char * fwdarg[4];
  char * cp;
  char * p;
  int i;
  int D.3597;

  <bb 2> :
  memset (fwd, 0, 32);
  p = strdup (fwdspec);
  cp = p;
  goto <bb 4>; [INV]

  <bb 3> :
  cp.0_1 = cp;
  _2 = cp.0_1 + 1;
  cp = _2;

  <bb 4> :
  cp.1_3 = cp;
  _4 = *cp.1_3;
  _5 = (int) _4;
  _6 = isspace (_5);
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  i = 0;
  goto <bb 8>; [INV]

  <bb 6> :
  _7 = hpdelim (&cp);
  _8 = (long int) _7;
  _9 = (char *) _8;
  fwdarg[i] = _9;
  _10 = fwdarg[i];
  if (_10 == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  i = i + 1;

  <bb 8> :
  if (i <= 3)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  cp.2_11 = cp;
  if (cp.2_11 != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  i = 0;

  <bb 11> :
  switch (i) <default: <L13> [INV], case 1: <L9> [INV], case 2: <L10> [INV], case 3: <L11> [INV], case 4: <L12> [INV]>

  <bb 12> :
<L9>:
  fwd->listen_host = 0B;
  _12 = fwdarg[0];
  _13 = a2port (_12);
  _14 = (short unsigned int) _13;
  fwd->listen_port = _14;
  _15 = strdup ("socks");
  fwd->connect_host = _15;
  goto <bb 17>; [INV]

  <bb 13> :
<L10>:
  _16 = fwdarg[0];
  _17 = cleanhostname (_16);
  _18 = (long int) _17;
  _19 = (const char *) _18;
  _20 = strdup (_19);
  fwd->listen_host = _20;
  _21 = fwdarg[1];
  _22 = a2port (_21);
  _23 = (short unsigned int) _22;
  fwd->listen_port = _23;
  _24 = strdup ("socks");
  fwd->connect_host = _24;
  goto <bb 17>; [INV]

  <bb 14> :
<L11>:
  fwd->listen_host = 0B;
  _25 = fwdarg[0];
  _26 = a2port (_25);
  _27 = (short unsigned int) _26;
  fwd->listen_port = _27;
  _28 = fwdarg[1];
  _29 = cleanhostname (_28);
  _30 = (long int) _29;
  _31 = (const char *) _30;
  _32 = strdup (_31);
  fwd->connect_host = _32;
  _33 = fwdarg[2];
  _34 = a2port (_33);
  _35 = (short unsigned int) _34;
  fwd->connect_port = _35;
  goto <bb 17>; [INV]

  <bb 15> :
<L12>:
  _36 = fwdarg[0];
  _37 = cleanhostname (_36);
  _38 = (long int) _37;
  _39 = (const char *) _38;
  _40 = strdup (_39);
  fwd->listen_host = _40;
  _41 = fwdarg[1];
  _42 = a2port (_41);
  _43 = (short unsigned int) _42;
  fwd->listen_port = _43;
  _44 = fwdarg[2];
  _45 = cleanhostname (_44);
  _46 = (long int) _45;
  _47 = (const char *) _46;
  _48 = strdup (_47);
  fwd->connect_host = _48;
  _49 = fwdarg[3];
  _50 = a2port (_49);
  _51 = (short unsigned int) _50;
  fwd->connect_port = _51;
  goto <bb 17>; [INV]

  <bb 16> :
<L13>:
  i = 0;

  <bb 17> :
  free (p);
  if (dynamicfwd != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  i.3_52 = (unsigned int) i;
  _53 = i.3_52 + 4294967295;
  if (_53 > 1)
    goto <bb 19>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 19> :
  // predicted unlikely by goto predictor.
  goto <bb 30>; [INV]

  <bb 20> :
  i.4_54 = (unsigned int) i;
  _55 = i.4_54 + 4294967293;
  if (_55 > 1)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  // predicted unlikely by goto predictor.
  goto <bb 30>; [INV]

  <bb 22> :
  _56 = fwd->connect_port;
  if (_56 == 0)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  // predicted unlikely by goto predictor.
  goto <bb 30>; [INV]

  <bb 24> :
  _57 = fwd->listen_port;
  if (_57 == 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  // predicted unlikely by goto predictor.
  goto <bb 30>; [INV]

  <bb 26> :
  _58 = fwd->connect_host;
  if (_58 != 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 27> :
  _59 = fwd->connect_host;
  _60 = strlen (_59);
  if (_60 > 1024)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  // predicted unlikely by goto predictor.
  goto <bb 30>; [INV]

  <bb 29> :
  D.3597 = i;
  goto <bb 35>; [INV]

  <bb 30> :
fail_free:
  _61 = fwd->connect_host;
  if (_61 != 0B)
    goto <bb 31>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 31> :
  _62 = fwd->connect_host;
  free (_62);

  <bb 32> :
  _63 = fwd->listen_host;
  if (_63 != 0B)
    goto <bb 33>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 33> :
  _64 = fwd->listen_host;
  free (_64);

  <bb 34> :
  D.3597 = 0;

  <bb 35> :
  cp = {CLOBBER};
  fwdarg = {CLOBBER};
  return D.3597;

}



;; Function main (main, funcdef_no=24, decl_uid=3576, cgraph_uid=25, symbol_order=27)

Removing basic block 3
Merging blocks 2 and 4
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int main ()
{
  int D.3604;

  <bb 2> :
  process_cmdline ();
  D.3604 = 0;
  return D.3604;

}



;; Function process_cmdline (process_cmdline, funcdef_no=23, decl_uid=3525, cgraph_uid=24, symbol_order=26)

Removing basic block 4
Removing basic block 31
Removing basic block 45
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52
;;
;; Loop 2
;;  header 30, latch 30
;;  depth 1, outer 0
;;  nodes: 30
;;
;; Loop 1
;;  header 5, latch 4
;;  depth 1, outer 0
;;  nodes: 5 4
;; 2 succs { 3 5 }
;; 3 succs { 46 }
;; 4 succs { 5 }
;; 5 succs { 4 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 10 }
;; 9 succs { 46 }
;; 10 succs { 12 11 }
;; 11 succs { 12 13 }
;; 12 succs { 46 }
;; 13 succs { 14 15 }
;; 14 succs { 46 }
;; 15 succs { 16 17 }
;; 16 succs { 17 }
;; 17 succs { 18 19 }
;; 18 succs { 24 }
;; 19 succs { 20 21 }
;; 20 succs { 24 }
;; 21 succs { 22 23 }
;; 22 succs { 24 }
;; 23 succs { 46 }
;; 24 succs { 25 27 }
;; 25 succs { 26 27 }
;; 26 succs { 46 }
;; 27 succs { 28 30 }
;; 28 succs { 29 30 }
;; 29 succs { 46 }
;; 30 succs { 30 31 }
;; 31 succs { 32 38 }
;; 32 succs { 33 34 }
;; 33 succs { 35 }
;; 34 succs { 35 }
;; 35 succs { 36 37 }
;; 36 succs { 46 }
;; 37 succs { 46 }
;; 38 succs { 39 40 }
;; 39 succs { 46 }
;; 40 succs { 41 43 }
;; 41 succs { 42 45 }
;; 42 succs { 46 }
;; 43 succs { 44 45 }
;; 44 succs { 46 }
;; 45 succs { 46 }
;; 46 succs { 47 48 }
;; 47 succs { 48 }
;; 48 succs { 49 50 }
;; 49 succs { 50 }
;; 50 succs { 51 52 }
;; 51 succs { 52 }
;; 52 succs { 1 }
void process_cmdline ()
{
  struct Forward fwd;
  u_short cancel_port;
  int dynamic;
  int remote;
  int local;
  int delete;
  char * cancel_host;
  char * cmd;
  char * s;
  void (*<T613>) (int) handler;
  char D.3614;

  <bb 2> :
  delete = 0;
  local = 0;
  remote = 0;
  dynamic = 0;
  __builtin_memset (&fwd, 0, 32);
  fwd.connect_host = 0B;
  _1 = fwd.connect_host;
  fwd.listen_host = _1;
  leave_raw_mode ();
  _2 = read_passphrase ("\r\nssh> ", 1);
  _3 = (long int) _2;
  _4 = (char *) _3;
  s = _4;
  cmd = s;
  s.5_5 = s;
  if (s.5_5 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  // predicted unlikely by goto predictor.
  goto <bb 46>; [INV]

  <bb 4> :
  s.6_6 = s;
  _7 = s.6_6 + 1;
  s = _7;

  <bb 5> :
  s.7_8 = s;
  _9 = *s.7_8;
  _10 = (int) _9;
  _11 = isspace (_10);
  if (_11 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  s.8_12 = s;
  _13 = *s.8_12;
  if (_13 == 45)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  s.9_14 = s;
  _15 = s.9_14 + 1;
  s = _15;

  <bb 8> :
  s.10_16 = s;
  _17 = *s.10_16;
  if (_17 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  // predicted unlikely by goto predictor.
  goto <bb 46>; [INV]

  <bb 10> :
  s.11_18 = s;
  D.3614 = *s.11_18;
  _19 = D.3614 == 104;
  _20 = D.3614 == 72;
  _21 = _19 | _20;
  if (_21 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  s.12_22 = s;
  _23 = *s.12_22;
  if (_23 == 63)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  logit ("Commands:");
  logit ("      -L[bind_address:]port:host:hostport    Request local forward");
  logit ("      -R[bind_address:]port:host:hostport    Request remote forward");
  logit ("      -D[bind_address:]port                  Request dynamic forward");
  logit ("      -KR[bind_address:]port                 Cancel remote forward");
  logit ("      !args                                  Execute local command");
  // predicted unlikely by goto predictor.
  goto <bb 46>; [INV]

  <bb 13> :
  s.13_24 = s;
  _25 = *s.13_24;
  if (_25 == 33)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  s.14_26 = s;
  _27 = s.14_26 + 1;
  s = _27;
  s.15_28 = s;
  ssh_local_cmd (s.15_28);
  // predicted unlikely by goto predictor.
  goto <bb 46>; [INV]

  <bb 15> :
  s.16_29 = s;
  _30 = *s.16_29;
  if (_30 == 75)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  delete = 1;
  s.17_31 = s;
  _32 = s.17_31 + 1;
  s = _32;

  <bb 17> :
  s.18_33 = s;
  _34 = *s.18_33;
  if (_34 == 76)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  local = 1;
  goto <bb 24>; [INV]

  <bb 19> :
  s.19_35 = s;
  _36 = *s.19_35;
  if (_36 == 82)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  remote = 1;
  goto <bb 24>; [INV]

  <bb 21> :
  s.20_37 = s;
  _38 = *s.20_37;
  if (_38 == 68)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  dynamic = 1;
  goto <bb 24>; [INV]

  <bb 23> :
  logit ("Invalid command.");
  // predicted unlikely by goto predictor.
  goto <bb 46>; [INV]

  <bb 24> :
  _39 = local | dynamic;
  if (_39 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 25> :
  if (delete != 0)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  logit ("Not supported.");
  // predicted unlikely by goto predictor.
  goto <bb 46>; [INV]

  <bb 27> :
  _40 = remote != 0;
  _41 = delete != 0;
  _42 = _40 & _41;
  if (_42 != 0)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 28> :
  compat20.21_43 = compat20;
  if (compat20.21_43 == 0)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  logit ("Not supported for SSH protocol version 1.");
  // predicted unlikely by goto predictor.
  goto <bb 46>; [INV]

  <bb 30> :
  s.22_44 = s;
  _45 = s.22_44 + 1;
  s = _45;
  s.23_46 = s;
  _47 = *s.23_46;
  _48 = (int) _47;
  _49 = isspace (_48);
  if (_49 != 0)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 31> :
  if (delete != 0)
    goto <bb 32>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 32> :
  cancel_port = 0;
  _50 = hpdelim (&s);
  _51 = (long int) _50;
  cancel_host = (char *) _51;
  s.24_52 = s;
  if (s.24_52 != 0B)
    goto <bb 33>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 33> :
  s.25_53 = s;
  _54 = a2port (s.25_53);
  cancel_port = (u_short) _54;
  _55 = cleanhostname (cancel_host);
  _56 = (long int) _55;
  cancel_host = (char *) _56;
  goto <bb 35>; [INV]

  <bb 34> :
  _57 = a2port (cancel_host);
  cancel_port = (u_short) _57;
  cancel_host = 0B;

  <bb 35> :
  if (cancel_port == 0)
    goto <bb 36>; [INV]
  else
    goto <bb 37>; [INV]

  <bb 36> :
  logit ("Bad forwarding close port");
  // predicted unlikely by goto predictor.
  goto <bb 46>; [INV]

  <bb 37> :
  _58 = (int) cancel_port;
  channel_request_rforward_cancel (cancel_host, _58);
  goto <bb 46>; [INV]

  <bb 38> :
  _59 = dynamic != 0;
  _60 = (int) _59;
  s.26_61 = s;
  _62 = parse_forward (&fwd, s.26_61, _60);
  if (_62 == 0)
    goto <bb 39>; [INV]
  else
    goto <bb 40>; [INV]

  <bb 39> :
  logit ("Bad forwarding specification.");
  // predicted unlikely by goto predictor.
  goto <bb 46>; [INV]

  <bb 40> :
  _63 = local | dynamic;
  if (_63 != 0)
    goto <bb 41>; [INV]
  else
    goto <bb 43>; [INV]

  <bb 41> :
  _64 = fwd.connect_port;
  _65 = (int) _64;
  _66 = fwd.connect_host;
  _67 = fwd.listen_port;
  _68 = (int) _67;
  _69 = fwd.listen_host;
  _70 = channel_setup_local_fwd_listener (_69, _68, _66, _65);
  if (_70 < 0)
    goto <bb 42>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 42> :
  logit ("Port forwarding failed.");
  // predicted unlikely by goto predictor.
  goto <bb 46>; [INV]

  <bb 43> :
  _71 = fwd.connect_port;
  _72 = (int) _71;
  _73 = fwd.connect_host;
  _74 = fwd.listen_port;
  _75 = (int) _74;
  _76 = fwd.listen_host;
  _77 = channel_request_remote_forwarding (_76, _75, _73, _72);
  if (_77 < 0)
    goto <bb 44>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 44> :
  logit ("Port forwarding failed.");
  // predicted unlikely by goto predictor.
  goto <bb 46>; [INV]

  <bb 45> :
  logit ("Forwarding port.");

  <bb 46> :
out:
  enter_raw_mode ();
  if (cmd != 0B)
    goto <bb 47>; [INV]
  else
    goto <bb 48>; [INV]

  <bb 47> :
  free (cmd);

  <bb 48> :
  _78 = fwd.listen_host;
  if (_78 != 0B)
    goto <bb 49>; [INV]
  else
    goto <bb 50>; [INV]

  <bb 49> :
  _79 = fwd.listen_host;
  free (_79);

  <bb 50> :
  _80 = fwd.connect_host;
  if (_80 != 0B)
    goto <bb 51>; [INV]
  else
    goto <bb 52>; [INV]

  <bb 51> :
  _81 = fwd.connect_host;
  free (_81);

  <bb 52> :
  s = {CLOBBER};
  fwd = {CLOBBER};
  return;

}


