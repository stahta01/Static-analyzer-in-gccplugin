
;; Function xrealloc (xrealloc, funcdef_no=22, decl_uid=4039, cgraph_uid=23, symbol_order=26)

Merging blocks 8 and 9
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 5 6 }
;; 5 succs { }
;; 6 succs { 7 8 }
;; 7 succs { }
;; 8 succs { 1 }
void * xrealloc (void * oldptr, size_t nmemb, size_t size)
{
  void * newptr;
  size_t newsize;
  void * D.4194;

  <bb 2> :
  newsize = nmemb * size;
  if (newsize == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  printf ("zero size%s", "");
  exit (1);

  <bb 4> :
  _1 = 30 / nmemb;
  _2 = (unsigned int) _1;
  _3 = 1 << _2;
  _4 = (long unsigned int) _3;
  if (size > _4)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  printf ("nmemb * size > SIZE_MAX%s", "");
  exit (1);

  <bb 6> :
  newptr = realloc (oldptr, newsize);
  if (newptr == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  printf ("xrealloc failed%s", "");
  exit (1);

  <bb 8> :
  D.4194 = newptr;
  return D.4194;

}



;; Function cmd_string_getc (cmd_string_getc, funcdef_no=23, decl_uid=4045, cgraph_uid=24, symbol_order=27)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
int cmd_string_getc (const char * s, size_t * p)
{
  const u_char * ucs;
  int D.4198;

  <bb 2> :
  ucs = s;
  _1 = *p;
  _2 = ucs + _1;
  _3 = *_2;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.4198 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  _4 = *p;
  _5 = _4;
  _6 = _5 + 1;
  *p = _6;
  _7 = ucs + _5;
  _8 = *_7;
  D.4198 = (int) _8;

  <bb 5> :
  return D.4198;

}



;; Function cmd_string_ungetc (cmd_string_ungetc, funcdef_no=24, decl_uid=4049, cgraph_uid=25, symbol_order=28)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void cmd_string_ungetc (size_t * p)
{
  <bb 2> :
  _1 = *p;
  _2 = _1 + 18446744073709551615;
  *p = _2;
  return;

}



;; Function cmd_string_variable (cmd_string_variable, funcdef_no=25, decl_uid=4053, cgraph_uid=26, symbol_order=29)

Removing basic block 15
Merging blocks 18 and 19
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
;;
;; Loop 1
;;  header 11, latch 17
;;  depth 1, outer 0
;;  nodes: 11 17 15 12 13 14
;; 2 succs { 7 3 4 }
;; 3 succs { 25 }
;; 4 succs { 5 7 }
;; 5 succs { 6 7 }
;; 6 succs { 25 }
;; 7 succs { 8 10 }
;; 8 succs { 9 10 }
;; 9 succs { 26 }
;; 10 succs { 11 }
;; 11 succs { 18 12 }
;; 12 succs { 13 15 }
;; 13 succs { 14 15 }
;; 14 succs { 18 15 }
;; 15 succs { 16 17 }
;; 16 succs { 25 }
;; 17 succs { 11 }
;; 18 succs { 19 20 }
;; 19 succs { 25 }
;; 20 succs { 21 22 }
;; 21 succs { 22 }
;; 22 succs { 23 24 }
;; 23 succs { 26 }
;; 24 succs { 26 }
;; 25 succs { 26 }
;; 26 succs { 1 }
char * cmd_string_variable (const char * s, size_t * p)
{
  struct environ_entry * envent;
  size_t len;
  char * t;
  char * buf;
  int fch;
  int ch;
  char * D.4208;

  <bb 2> :
  buf = 0B;
  len = 0;
  fch = -1;
  ch = cmd_string_getc (s, p);
  switch (ch) <default: <L4> [INV], case -1: <L0> [INV], case 123: <L1> [INV]>

  <bb 3> :
<L0>:
  // predicted unlikely by goto predictor.
  goto <bb 25>; [INV]

  <bb 4> :
<L1>:
  fch = 123;
  ch = cmd_string_getc (s, p);
  _1 = ch != 95;
  ch.0_2 = (unsigned int) ch;
  _3 = ch.0_2 + 4294967199;
  _4 = _3 > 25;
  _5 = _1 & _4;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  ch.1_6 = (unsigned int) ch;
  _7 = ch.1_6 + 4294967231;
  if (_7 > 25)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  // predicted unlikely by goto predictor.
  goto <bb 25>; [INV]

  <bb 7> :
<L4>:
  _8 = ch != 95;
  ch.2_9 = (unsigned int) ch;
  _10 = ch.2_9 + 4294967199;
  _11 = _10 > 25;
  _12 = _8 & _11;
  if (_12 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  ch.3_13 = (unsigned int) ch;
  _14 = ch.3_13 + 4294967231;
  if (_14 > 25)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  D.4208 = t;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 26>; [INV]

  <bb 10> :
  _15 = len + 1;
  buf = xrealloc (buf, 1, _15);
  len.4_16 = len;
  len = len.4_16 + 1;
  _17 = buf + len.4_16;
  _18 = (char) ch;
  *_17 = _18;

  <bb 11> :
  ch = cmd_string_getc (s, p);
  if (ch == -1)
    goto <bb 18>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _19 = ch != 95;
  ch.5_20 = (unsigned int) ch;
  _21 = ch.5_20 + 4294967199;
  _22 = _21 > 25;
  _23 = _19 & _22;
  if (_23 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  ch.6_24 = (unsigned int) ch;
  _25 = ch.6_24 + 4294967231;
  if (_25 > 25)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  ch.7_26 = (unsigned int) ch;
  _27 = ch.7_26 + 4294967248;
  if (_27 > 9)
    goto <bb 18>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  if (len > 1073741820)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  // predicted unlikely by goto predictor.
  goto <bb 25>; [INV]

  <bb 17> :
  _28 = len + 1;
  buf = xrealloc (buf, 1, _28);
  len.8_29 = len;
  len = len.8_29 + 1;
  _30 = buf + len.8_29;
  _31 = (char) ch;
  *_30 = _31;
  goto <bb 11>; [INV]

  <bb 18> :
  _32 = fch == 123;
  _33 = ch != 125;
  _34 = _32 & _33;
  if (_34 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  // predicted unlikely by goto predictor.
  goto <bb 25>; [INV]

  <bb 20> :
  _35 = ch != -1;
  _36 = fch != 123;
  _37 = _35 & _36;
  if (_37 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  cmd_string_ungetc (p);

  <bb 22> :
  _38 = len + 1;
  buf = xrealloc (buf, 1, _38);
  _39 = buf + len;
  *_39 = 0;
  free (buf);
  if (envent == 0B)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  D.4208 = strdup ("");
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 26>; [INV]

  <bb 24> :
  _40 = envent->value;
  D.4208 = strdup (_40);
  goto <bb 26>; [INV]

  <bb 25> :
error:
  free (buf);
  D.4208 = 0B;

  <bb 26> :
  return D.4208;

}



;; Function cmd_string_string (cmd_string_string, funcdef_no=26, decl_uid=4075, cgraph_uid=27, symbol_order=30)

Removing basic block 12
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
;;
;; Loop 1
;;  header 19, multiple latches: 15 18
;;  depth 1, outer 0
;;  nodes: 19 15 18 16 3 5 8 12 6 11 10 9 13
;; 2 succs { 19 }
;; 3 succs { 16 4 12 5 }
;; 4 succs { 21 }
;; 5 succs { 16 6 }
;; 6 succs { 16 7 8 10 9 11 }
;; 7 succs { 21 }
;; 8 succs { 16 }
;; 9 succs { 16 }
;; 10 succs { 16 }
;; 11 succs { 16 }
;; 12 succs { 16 13 }
;; 13 succs { 14 15 }
;; 14 succs { 21 }
;; 15 succs { 19 }
;; 16 succs { 17 18 }
;; 17 succs { 21 }
;; 18 succs { 19 }
;; 19 succs { 3 20 }
;; 20 succs { 22 }
;; 21 succs { 22 }
;; 22 succs { 1 }
char * cmd_string_string (const char * s, size_t * p, char endch, int esc)
{
  size_t len;
  char * t;
  char * buf;
  int ch;
  char * D.4231;

  <bb 2> :
  buf = 0B;
  len = 0;
  goto <bb 19>; [INV]

  <bb 3> :
  switch (ch) <default: <L15> [INV], case -1: <L1> [INV], case 36: <L11> [INV], case 92: <L2> [INV]>

  <bb 4> :
<L1>:
  // predicted unlikely by goto predictor.
  goto <bb 21>; [INV]

  <bb 5> :
<L2>:
  if (esc == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  ch = cmd_string_getc (s, p);
  switch (ch) <default: <L15> [INV], case -1: <L4> [INV], case 101: <L5> [INV], case 110: <L7> [INV], case 114: <L6> [INV], case 116: <L8> [INV]>

  <bb 7> :
<L4>:
  // predicted unlikely by goto predictor.
  goto <bb 21>; [INV]

  <bb 8> :
<L5>:
  ch = 27;
  goto <bb 16>; [INV]

  <bb 9> :
<L6>:
  ch = 13;
  goto <bb 16>; [INV]

  <bb 10> :
<L7>:
  ch = 10;
  goto <bb 16>; [INV]

  <bb 11> :
<L8>:
  ch = 9;
  goto <bb 16>; [INV]

  <bb 12> :
<L11>:
  if (esc == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  t = cmd_string_variable (s, p);
  if (t == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  // predicted unlikely by goto predictor.
  goto <bb 21>; [INV]

  <bb 15> :
  // predicted unlikely by continue predictor.
  goto <bb 19>; [INV]

  <bb 16> :
<L15>:
  if (len > 1073741821)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  // predicted unlikely by goto predictor.
  goto <bb 21>; [INV]

  <bb 18> :
  _1 = len + 1;
  buf = xrealloc (buf, 1, _1);
  len.9_2 = len;
  len = len.9_2 + 1;
  _3 = buf + len.9_2;
  _4 = (char) ch;
  *_3 = _4;

  <bb 19> :
  ch = cmd_string_getc (s, p);
  _5 = (int) endch;
  if (ch != _5)
    goto <bb 3>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  _6 = len + 1;
  buf = xrealloc (buf, 1, _6);
  _7 = buf + len;
  *_7 = 0;
  D.4231 = buf;
  goto <bb 22>; [INV]

  <bb 21> :
error:
  free (buf);
  D.4231 = 0B;

  <bb 22> :
  return D.4231;

}



;; Function cmd_string_expand_tilde (cmd_string_expand_tilde, funcdef_no=27, decl_uid=4097, cgraph_uid=28, symbol_order=31)

Removing basic block 8
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
;; 2 succs { 3 8 }
;; 3 succs { 4 6 }
;; 4 succs { 5 6 }
;; 5 succs { 13 }
;; 6 succs { 7 13 }
;; 7 succs { 13 }
;; 8 succs { 9 10 }
;; 9 succs { 16 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 }
;; 13 succs { 14 15 }
;; 14 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 1 }
char * cmd_string_expand_tilde (const char * s, size_t * p)
{
  char * username;
  char * path;
  char * home;
  struct environ_entry * envent;
  struct passwd * pw;
  char * D.4244;

  <bb 2> :
  home = 0B;
  _1 = cmd_string_getc (s, p);
  if (_1 == 47)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  if (envent != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _2 = envent->value;
  _3 = *_2;
  if (_3 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  home = envent->value;
  goto <bb 13>; [INV]

  <bb 6> :
  _4 = getuid ();
  _5 = getpwuid (_4);
  _6 = (long int) _5;
  pw = (struct passwd *) _6;
  if (pw != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 7> :
  home = pw->pw_dir;
  goto <bb 13>; [INV]

  <bb 8> :
  cmd_string_ungetc (p);
  username = cmd_string_string (s, p, 47, 0);
  if (username == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  D.4244 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]

  <bb 10> :
  _7 = getpwnam (username);
  _8 = (long int) _7;
  pw = (struct passwd *) _8;
  if (pw != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  home = pw->pw_dir;

  <bb 12> :
  free (username);

  <bb 13> :
  if (home == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  D.4244 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]

  <bb 15> :
  D.4244 = strdup (home);

  <bb 16> :
  return D.4244;

}



;; Function cmd_string_parse (cmd_string_parse, funcdef_no=28, decl_uid=4114, cgraph_uid=29, symbol_order=32)

Removing basic block 6
Removing basic block 9
Removing basic block 12
Removing basic block 13
Removing basic block 18
Removing basic block 30
Removing basic block 34
Removing basic block 35
Merging blocks 41 and 42
Merging blocks 41 and 43
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
;;
;; Loop 4
;;  header 31, latch 30
;;  depth 1, outer 0
;;  nodes: 31 30
;;
;; Loop 3
;;  header 16, latch 15
;;  depth 1, outer 0
;;  nodes: 16 15 14
;;
;; Loop 1
;;  header 3, multiple latches: 6 4 27 23 13 8
;;  depth 1, outer 0
;;  nodes: 3 6 4 27 23 13 8 11 12 10 22 25
;;
;; Loop 2
;;  header 10, latch 10
;;  depth 2, outer 1
;;  nodes: 10
;; 2 succs { 3 }
;; 3 succs { 25 11 6 10 8 4 22 }
;; 4 succs { 5 3 }
;; 5 succs { 28 }
;; 6 succs { 7 3 }
;; 7 succs { 28 }
;; 8 succs { 9 3 }
;; 9 succs { 28 }
;; 10 succs { 10 11 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 3 16 }
;; 14 succs { 17 15 }
;; 15 succs { 16 }
;; 16 succs { 14 17 }
;; 17 succs { 18 19 }
;; 18 succs { 28 }
;; 19 succs { 20 21 }
;; 20 succs { 28 }
;; 21 succs { 28 }
;; 22 succs { 23 25 }
;; 23 succs { 24 3 }
;; 24 succs { 28 }
;; 25 succs { 26 27 }
;; 26 succs { 28 }
;; 27 succs { 3 }
;; 28 succs { 29 33 }
;; 29 succs { 31 }
;; 30 succs { 31 }
;; 31 succs { 30 32 }
;; 32 succs { 33 }
;; 33 succs { 1 }
int cmd_string_parse (const char * s, struct cmd_list * * cmdlist, char * * cause)
{
  size_t len;
  const char * equals;
  const char * whitespace;
  char * t;
  char * buf;
  char * * argv;
  int rval;
  int argc;
  int i;
  int ch;
  size_t p;
  int D.4272;

  <bb 2> :
  argv = 0B;
  argc = 0;
  buf = 0B;
  len = 0;
  *cause = 0B;
  *cmdlist = 0B;
  rval = -1;
  p = 0;

  <bb 3> :
  ch = cmd_string_getc (s, &p);
  switch (ch) <default: <L32> [INV], case -1: <L13> [INV], case 9: <L13> [INV], case 32: <L13> [INV], case 34: <L4> [INV], case 35: <L46> [INV], case 36: <L7> [INV], case 39: <L1> [INV], case 126: <L28> [INV]>

  <bb 4> :
<L1>:
  t = cmd_string_string (s, &p, 39, 0);
  if (t == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 5> :
  // predicted unlikely by goto predictor.
  goto <bb 28>; [INV]

  <bb 6> :
<L4>:
  t = cmd_string_string (s, &p, 34, 1);
  if (t == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 7> :
  // predicted unlikely by goto predictor.
  goto <bb 28>; [INV]

  <bb 8> :
<L7>:
  t = cmd_string_variable (s, &p);
  if (t == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 9> :
  // predicted unlikely by goto predictor.
  goto <bb 28>; [INV]

  <bb 10> :
<L46>:
  ch = cmd_string_getc (s, &p);
  if (ch != -1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
<L13>:
  if (buf != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _1 = len + 1;
  buf = xrealloc (buf, 1, _1);
  _2 = buf + len;
  *_2 = 0;
  _3 = argc + 1;
  _4 = (long unsigned int) _3;
  argv = xrealloc (argv, _4, 8);
  argc.10_5 = argc;
  argc = argc.10_5 + 1;
  _6 = (long unsigned int) argc.10_5;
  _7 = _6 * 8;
  _8 = argv + _7;
  *_8 = buf;
  buf = 0B;
  len = 0;

  <bb 13> :
  if (ch != -1)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _9 = *argv;
  equals = strchr (_9, 61);
  _10 = *argv;
  _11 = *argv;
  _12 = strcspn (_11, " \t");
  whitespace = _10 + _12;
  _13 = equals == 0B;
  _14 = equals > whitespace;
  _15 = _13 | _14;
  if (_15 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  argc = argc + -1;
  _16 = (long unsigned int) argc;
  _17 = _16 * 8;
  _18 = argv + 8;
  memmove (argv, _18, _17);

  <bb 16> :
  if (argc != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  if (argc == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  // predicted unlikely by goto predictor.
  goto <bb 28>; [INV]

  <bb 19> :
  _19 = *cmdlist;
  if (_19 == 0B)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  // predicted unlikely by goto predictor.
  goto <bb 28>; [INV]

  <bb 21> :
  rval = 0;
  // predicted unlikely by goto predictor.
  goto <bb 28>; [INV]

  <bb 22> :
<L28>:
  if (buf == 0B)
    goto <bb 23>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 23> :
  t = cmd_string_expand_tilde (s, &p);
  if (t == 0B)
    goto <bb 24>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 24> :
  // predicted unlikely by goto predictor.
  goto <bb 28>; [INV]

  <bb 25> :
<L32>:
  if (len > 1073741821)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  // predicted unlikely by goto predictor.
  goto <bb 28>; [INV]

  <bb 27> :
  _20 = len + 1;
  buf = xrealloc (buf, 1, _20);
  len.11_21 = len;
  len = len.11_21 + 1;
  _22 = buf + len.11_21;
  _23 = (char) ch;
  *_22 = _23;
  goto <bb 3>; [INV]

  <bb 28> :
error:
out:
  free (buf);
  if (argv != 0B)
    goto <bb 29>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 29> :
  i = 0;
  goto <bb 31>; [INV]

  <bb 30> :
  _24 = (long unsigned int) i;
  _25 = _24 * 8;
  _26 = argv + _25;
  _27 = *_26;
  free (_27);
  i = i + 1;

  <bb 31> :
  if (i < argc)
    goto <bb 30>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 32> :
  free (argv);

  <bb 33> :
  D.4272 = rval;
  p = {CLOBBER};
  return D.4272;

}



;; Function load_cfg (load_cfg, funcdef_no=29, decl_uid=4158, cgraph_uid=30, symbol_order=33)

Merging blocks 34 and 35
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
;;
;; Loop 1
;;  header 30, multiple latches: 14 19 22 23 25 29
;;  depth 1, outer 0
;;  nodes: 30 14 19 22 23 25 29 27 28 26 24 20 18 17 15 16 10 11 12 13 8 9 7 5 6 21
;;
;; Loop 2
;;  header 17, latch 16
;;  depth 2, outer 1
;;  nodes: 17 16
;; 2 succs { 3 4 }
;; 3 succs { 34 }
;; 4 succs { 30 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 9 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 11 15 }
;; 11 succs { 12 15 }
;; 12 succs { 13 15 }
;; 13 succs { 14 15 }
;; 14 succs { 30 }
;; 15 succs { 17 }
;; 16 succs { 17 }
;; 17 succs { 16 18 }
;; 18 succs { 19 20 }
;; 19 succs { 30 }
;; 20 succs { 21 24 }
;; 21 succs { 22 23 }
;; 22 succs { 30 }
;; 23 succs { 30 }
;; 24 succs { 25 26 }
;; 25 succs { 30 }
;; 26 succs { 27 28 }
;; 27 succs { 29 }
;; 28 succs { 29 }
;; 29 succs { 30 }
;; 30 succs { 5 31 }
;; 31 succs { 32 33 }
;; 32 succs { 33 }
;; 33 succs { 34 }
;; 34 succs { 1 }
cmd_retval load_cfg (const char * path, struct cmd_ctx * ctxin, struct causelist * causes)
{
  cmd_retval retval;
  struct cmd_ctx ctx;
  struct cmd_list * cmdlist;
  size_t oldlen;
  size_t len;
  char * cause;
  char * line;
  char * copy;
  char * buf;
  u_int n;
  struct FILE * f;
  cmd_retval D.4278;

  <bb 2> :
  f = fopen (path, "rb");
  if (f == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.4278 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 34>; [INV]

  <bb 4> :
  cfg_references.12_1 = cfg_references;
  _2 = cfg_references.12_1 + 1;
  cfg_references = _2;
  n = 0;
  line = 0B;
  retval = 0;
  goto <bb 30>; [INV]

  <bb 5> :
  _3 = len + 18446744073709551615;
  _4 = buf + _3;
  _5 = *_4;
  if (_5 == 10)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  len = len + 18446744073709551615;

  <bb 7> :
  printf ("%s: %s", path, buf);
  if (line != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  oldlen = strlen (line);
  _6 = oldlen + len;
  _7 = _6 + 1;
  line = xrealloc (line, 1, _7);
  goto <bb 10>; [INV]

  <bb 9> :
  oldlen = 0;
  _8 = len + 1;
  line = malloc (_8);

  <bb 10> :
  _9 = line + oldlen;
  memcpy (_9, buf, len);
  _10 = oldlen + len;
  _11 = line + _10;
  *_11 = 0;
  n = n + 1;
  len = strlen (line);
  if (len != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 11> :
  _12 = len + 18446744073709551615;
  _13 = line + _12;
  _14 = *_13;
  if (_14 == 92)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  _15 = len + 18446744073709551615;
  _16 = line + _15;
  *_16 = 0;
  if (len > 1)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _17 = len + 18446744073709551614;
  _18 = line + _17;
  _19 = *_18;
  if (_19 != 92)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  // predicted unlikely by continue predictor.
  goto <bb 30>; [INV]

  <bb 15> :
  copy = line;
  line = 0B;
  buf = copy;
  goto <bb 17>; [INV]

  <bb 16> :
  buf = buf + 1;

  <bb 17> :
  _20 = *buf;
  _21 = (unsigned char) _20;
  _22 = (int) _21;
  _23 = isspace (_22);
  if (_23 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _24 = *buf;
  if (_24 == 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  // predicted unlikely by continue predictor.
  goto <bb 30>; [INV]

  <bb 20> :
  _25 = cmd_string_parse (buf, &cmdlist, &cause);
  if (_25 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 21> :
  free (copy);
  cause.13_26 = cause;
  if (cause.13_26 == 0B)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  // predicted unlikely by continue predictor.
  goto <bb 30>; [INV]

  <bb 23> :
  cause.14_27 = cause;
  free (cause.14_27);
  // predicted unlikely by continue predictor.
  goto <bb 30>; [INV]

  <bb 24> :
  free (copy);
  cmdlist.15_28 = cmdlist;
  if (cmdlist.15_28 == 0B)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  // predicted unlikely by continue predictor.
  goto <bb 30>; [INV]

  <bb 26> :
  if (ctxin == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 27> :
  ctx.msgdata = 0B;
  ctx.curclient = 0B;
  ctx.cmdclient = 0B;
  goto <bb 29>; [INV]

  <bb 28> :
  _29 = ctxin->msgdata;
  ctx.msgdata = _29;
  _30 = ctxin->curclient;
  ctx.curclient = _30;
  _31 = ctxin->cmdclient;
  ctx.cmdclient = _31;

  <bb 29> :
  cfg_cause = 0B;

  <bb 30> :
  _32 = (int) len;
  buf = fgets (buf, _32, f);
  if (buf != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 31> :
  if (line != 0B)
    goto <bb 32>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 32> :
  free (line);

  <bb 33> :
  fclose (f);
  cfg_references.16_33 = cfg_references;
  _34 = cfg_references.16_33 + -1;
  cfg_references = _34;
  D.4278 = retval;

  <bb 34> :
  cause = {CLOBBER};
  cmdlist = {CLOBBER};
  ctx = {CLOBBER};
  return D.4278;

}



;; Function main (main, funcdef_no=30, decl_uid=4181, cgraph_uid=31, symbol_order=34)

Removing basic block 4
Merging blocks 2 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int main ()
{
  struct causelist causes;
  struct cmd_ctx ctxin;
  int D.4307;

  <bb 2> :
  _1 = malloc (1);
  causes.list = _1;
  causes.num = 0;
  causes.list = 0B;
  causes.space = 0;
  load_cfg ("path", &ctxin, &causes);
  D.4307 = 0;
  ctxin = {CLOBBER};
  causes = {CLOBBER};
  return D.4307;

}


