./benchmarks/binutils/leak_9/binutils_leak_9.c: In function ‘ada_demangle’:
./benchmarks/binutils/leak_9/binutils_leak_9.c:44:13: warning: implicit declaration of function ‘strncmp’ [-Wimplicit-function-declaration]
   44 |         if (strncmp (mangled, "_ada_", 5) == 0)
      |             ^~~~~~~
./benchmarks/binutils/leak_9/binutils_leak_9.c:8:1: note: include ‘<string.h>’ or provide a declaration of ‘strncmp’
    7 | #include "../include/binutils.h"
  +++ |+#include <string.h>
    8 | 
./benchmarks/binutils/leak_9/binutils_leak_9.c:44:40: warning: ‘strncmp’ argument 3 type is ‘int’ where ‘long unsigned int’ is expected in a call to built-in function declared without prototype [-Wbuiltin-declaration-mismatch]
   44 |         if (strncmp (mangled, "_ada_", 5) == 0)
      |                                        ^
<built-in>: note: built-in ‘strncmp’ declared here
./benchmarks/binutils/leak_9/binutils_leak_9.c:52:16: warning: implicit declaration of function ‘strlen’ [-Wimplicit-function-declaration]
   52 |         len0 = strlen (mangled) + 7 + 1;
      |                ^~~~~~
./benchmarks/binutils/leak_9/binutils_leak_9.c:52:16: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/binutils/leak_9/binutils_leak_9.c:52:16: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
./benchmarks/binutils/leak_9/binutils_leak_9.c:52:16: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/binutils/leak_9/binutils_leak_9.c:12:36: warning: implicit declaration of function ‘isdigit’ [-Wimplicit-function-declaration]
   12 | #define ISDIGIT(c) (ISASCII (c) && isdigit (c))
      |                                    ^~~~~~~
./benchmarks/binutils/leak_9/binutils_leak_9.c:66:64: note: in expansion of macro ‘ISDIGIT’
   66 |                                         while (ISLOWER (*p) || ISDIGIT (*p)
      |                                                                ^~~~~~~
./benchmarks/binutils/leak_9/binutils_leak_9.c:8:1: note: include ‘<ctype.h>’ or provide a declaration of ‘isdigit’
    7 | #include "../include/binutils.h"
  +++ |+#include <ctype.h>
    8 | 
./benchmarks/binutils/leak_9/binutils_leak_9.c:91:19: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
   91 |                   memcpy (d, operators[k][1], slen);
      |                   ^~~~~~
./benchmarks/binutils/leak_9/binutils_leak_9.c:91:19: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/binutils/leak_9/binutils_leak_9.c:91:19: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
./benchmarks/binutils/leak_9/binutils_leak_9.c:91:19: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/binutils/leak_9/binutils_leak_9.c:171:11: warning: implicit declaration of function ‘strcpy’ [-Wimplicit-function-declaration]
  171 |           strcpy (d, name);
      |           ^~~~~~
./benchmarks/binutils/leak_9/binutils_leak_9.c:171:11: note: include ‘<string.h>’ or provide a declaration of ‘strcpy’
./benchmarks/binutils/leak_9/binutils_leak_9.c:171:11: warning: incompatible implicit declaration of built-in function ‘strcpy’ [-Wbuiltin-declaration-mismatch]
./benchmarks/binutils/leak_9/binutils_leak_9.c:171:11: note: include ‘<string.h>’ or provide a declaration of ‘strcpy’
./benchmarks/binutils/leak_9/binutils_leak_9.c:189:11: warning: incompatible implicit declaration of built-in function ‘strcpy’ [-Wbuiltin-declaration-mismatch]
  189 |           strcpy (d, name);
      |           ^~~~~~
./benchmarks/binutils/leak_9/binutils_leak_9.c:189:11: note: include ‘<string.h>’ or provide a declaration of ‘strcpy’
./benchmarks/binutils/leak_9/binutils_leak_9.c:235:27: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  235 |                           memcpy (d, special[k][1], slen);
      |                           ^~~~~~
./benchmarks/binutils/leak_9/binutils_leak_9.c:235:27: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/binutils/leak_9/binutils_leak_9.c:289:6: warning: incompatible implicit declaration of built-in function ‘strcpy’ [-Wbuiltin-declaration-mismatch]
  289 |      strcpy (demangled, mangled);
      |      ^~~~~~
./benchmarks/binutils/leak_9/binutils_leak_9.c:289:6: note: include ‘<string.h>’ or provide a declaration of ‘strcpy’
In file included from ./benchmarks/binutils/leak_9/binutils_leak_9.c:6:
./benchmarks/binutils/leak_9/binutils_leak_9.c: In function ‘cplus_demangle’:
./benchmarks/binutils/leak_9/../include/common.h:22:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
   22 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/binutils/leak_9/binutils_leak_9.c:300:24: note: in expansion of macro ‘xstrdup’
  300 |                 return xstrdup (mangled);
      |                        ^~~~~~~
./benchmarks/binutils/leak_9/../include/common.h:22:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
   22 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/binutils/leak_9/binutils_leak_9.c:300:24: note: in expansion of macro ‘xstrdup’
  300 |                 return xstrdup (mangled);
      |                        ^~~~~~~
./benchmarks/binutils/leak_9/binutils_leak_9.c: In function ‘demangle_template_value_parm’:
./benchmarks/binutils/leak_9/binutils_leak_9.c:316:25: warning: implicit declaration of function ‘strncpy’ [-Wimplicit-function-declaration]
  316 |                         strncpy (p, *mangled, symbol_len);
      |                         ^~~~~~~
./benchmarks/binutils/leak_9/binutils_leak_9.c:316:25: note: include ‘<string.h>’ or provide a declaration of ‘strncpy’
./benchmarks/binutils/leak_9/binutils_leak_9.c:316:25: warning: incompatible implicit declaration of built-in function ‘strncpy’ [-Wbuiltin-declaration-mismatch]
./benchmarks/binutils/leak_9/binutils_leak_9.c:316:25: note: include ‘<string.h>’ or provide a declaration of ‘strncpy’
./benchmarks/binutils/leak_9/binutils_leak_9.c: In function ‘main’:
./benchmarks/binutils/leak_9/binutils_leak_9.c:341:15: warning: implicit declaration of function ‘time’ [-Wimplicit-function-declaration]
  341 |         srand(time(&t));
      |               ^~~~

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  1298k ( 43%)
 phase parsing                      :   0.03 ( 75%)   0.01 (100%)   0.04 ( 80%)  1232k ( 41%)
 phase opt and generate             :   0.01 ( 25%)   0.00 (  0%)   0.01 ( 20%)   455k ( 15%)
 callgraph ipa passes               :   0.01 ( 25%)   0.00 (  0%)   0.01 ( 20%)   191k (  6%)
 preprocessing                      :   0.01 ( 25%)   0.00 (  0%)   0.02 ( 40%)   372k ( 12%)
 lexical analysis                   :   0.01 ( 25%)   0.01 (100%)   0.02 ( 40%)     0  (  0%)
 parser (global)                    :   0.01 ( 25%)   0.00 (  0%)   0.00 (  0%)   597k ( 20%)
 tree CFG cleanup                   :   0.01 ( 25%)   0.00 (  0%)   0.00 (  0%)  1056  (  0%)
 tree forward propagate             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)  5648  (  0%)
 TOTAL                              :   0.04          0.01          0.05         2995k
./benchmarks/binutils/leak_9/binutils_leak_9.c: In function ‘demangle_template_value_parm’:
./benchmarks/binutils/leak_9/binutils_leak_9.c:316:25: warning: use of possibly-NULL ‘p_10’ where non-null expected [CWE-690] [-Wanalyzer-possible-null-argument]
  316 |                         strncpy (p, *mangled, symbol_len);
      |                         ^
  ‘demangle_template_value_parm’: events 1-4
    |
    |  313 |         if (__RANDBOOL)
    |      |            ^
    |      |            |
    |      |            (1) following ‘true’ branch...
    |  314 |                 {
    |  315 |                         char *p = XNEWVEC (char, symbol_len + 1), *q;
    |      |                                   ~
    |      |                                   |
    |      |                                   (2) ...to here
    |      |                                   (3) this call could return NULL
    |  316 |                         strncpy (p, *mangled, symbol_len);
    |      |                         ~
    |      |                         |
    |      |                         (4) argument 1 (‘p_10’) from (3) could be NULL where non-null expected
    |
<built-in>: note: argument 1 of ‘strncpy’ must be non-null
./benchmarks/binutils/leak_9/binutils_leak_9.c: In function ‘ada_demangle’:
./benchmarks/binutils/leak_9/binutils_leak_9.c:90:24: warning: dereference of possibly-NULL ‘d_145’ [CWE-690] [-Wanalyzer-possible-null-dereference]
   90 |                   *d++ = '"';
      |                        ^
  ‘cplus_demangle’: events 1-6
    |
    |  297 | cplus_demangle (const char *mangled)
    |      | ^
    |      | |
    |      | (1) entry to ‘cplus_demangle’
    |  298 | {
    |  299 |         if (__RANDBOOL)
    |      |            ~
    |      |            |
    |      |            (2) following ‘false’ branch...
    |......
    |  302 |         if (__RANDBOOL)
    |      |            ~~
    |      |            ||
    |      |            |(3) ...to here
    |      |            (4) following ‘true’ branch...
    |  303 |                 return ada_demangle (mangled);
    |      |                        ~
    |      |                        |
    |      |                        (5) ...to here
    |      |                        (6) calling ‘ada_demangle’ from ‘cplus_demangle’
    |
    +--> ‘ada_demangle’: events 7-13
           |
           |   36 | ada_demangle (const char *mangled)
           |      | ^
           |      | |
           |      | (7) entry to ‘ada_demangle’
           |......
           |   48 |         if (!ISLOWER (mangled[0]))
           |      |            ~
           |      |            |
           |      |            (8) following ‘false’ branch...
           |......
           |   52 |         len0 = strlen (mangled) + 7 + 1;
           |      |                ~
           |      |                |
           |      |                (9) ...to here
           |   53 |         demangled = XNEWVEC (char, len0); // allocation site
           |      |                     ~
           |      |                     |
           |      |                     (10) this call could return NULL
           |......
           |   61 |                         if (!ISLOWER (*p))
           |      |                            ~
           |      |                            |
           |      |                            (11) following ‘false’ branch...
           |......
           |   70 |                         else if (p[0] == 'O')
           |      |                                 ~ ~
           |      |                                 | |
           |      |                                 | (12) ...to here
           |      |                                 (13) following ‘true’ branch...
           |
         ‘ada_demangle’: event 14
           |
           |lto1:
           | (14): ...to here
           |
         ‘ada_demangle’: events 15-19
           |
           |   83 |                                         for (k = 0; operators[k][0] != NULL; k++)
           |      |                                                                     ^
           |      |                                                                     |
           |      |                                                                     (15) following ‘true’ branch...
           |   84 |             {
           |   85 |               size_t slen = strlen (operators[k][0]);
           |      |                                                 ~                    
           |      |                                                 |
           |      |                                                 (16) ...to here
           |   86 |               if (strncmp (p, operators[k][0], slen) == 0)
           |      |                  ~                                                   
           |      |                  |
           |      |                  (17) following ‘true’ branch...
           |   87 |                 {
           |   88 |                   p += slen;
           |      |                     ~                                                
           |      |                     |
           |      |                     (18) ...to here
           |   89 |                   slen = strlen (operators[k][1]);
           |   90 |                   *d++ = '"';
           |      |                        ~                                             
           |      |                        |
           |      |                        (19) ‘d_145’ could be NULL: unchecked value from (10)
           |
./benchmarks/binutils/leak_9/binutils_leak_9.c:289:6: warning: use of possibly-NULL ‘demangled_216’ where non-null expected [CWE-690] [-Wanalyzer-possible-null-argument]
  289 |      strcpy (demangled, mangled);
      |      ^
  ‘demangle_template_value_parm’: events 1-4
    |
    |  309 | demangle_template_value_parm (const char **mangled, string *s)
    |      | ^
    |      | |
    |      | (1) entry to ‘demangle_template_value_parm’
    |......
    |  313 |         if (__RANDBOOL)
    |      |            ~
    |      |            |
    |      |            (2) following ‘true’ branch...
    |  314 |                 {
    |  315 |                         char *p = XNEWVEC (char, symbol_len + 1), *q;
    |      |                                   ~
    |      |                                   |
    |      |                                   (3) ...to here
    |......
    |  319 |                         q = cplus_demangle (p);
    |      |                             ~
    |      |                             |
    |      |                             (4) calling ‘cplus_demangle’ from ‘demangle_template_value_parm’
    |
    +--> ‘cplus_demangle’: events 5-10
           |
           |  297 | cplus_demangle (const char *mangled)
           |      | ^
           |      | |
           |      | (5) entry to ‘cplus_demangle’
           |  298 | {
           |  299 |         if (__RANDBOOL)
           |      |            ~
           |      |            |
           |      |            (6) following ‘false’ branch...
           |......
           |  302 |         if (__RANDBOOL)
           |      |            ~~
           |      |            ||
           |      |            |(7) ...to here
           |      |            (8) following ‘true’ branch...
           |  303 |                 return ada_demangle (mangled);
           |      |                        ~
           |      |                        |
           |      |                        (9) ...to here
           |      |                        (10) calling ‘ada_demangle’ from ‘cplus_demangle’
           |
           +--> ‘ada_demangle’: events 11-17
                  |
                  |   36 | ada_demangle (const char *mangled)
                  |      | ^
                  |      | |
                  |      | (11) entry to ‘ada_demangle’
                  |......
                  |   48 |         if (!ISLOWER (mangled[0]))
                  |      |            ~
                  |      |            |
                  |      |            (12) following ‘true’ branch...
                  |   49 |                 goto unknown;
                  |      |                 ~
                  |      |                 |
                  |      |                 (13) ...to here
                  |......
                  |  286 |   demangled = XNEWVEC (char, len0 + 3); /* memory leak */
                  |      |               ~
                  |      |               |
                  |      |               (14) this call could return NULL
                  |  287 | 
                  |  288 |   if (mangled[0] == '<')
                  |      |      ~
                  |      |      |
                  |      |      (15) following ‘true’ branch...
                  |  289 |      strcpy (demangled, mangled);
                  |      |      ~
                  |      |      |
                  |      |      (16) ...to here
                  |      |      (17) argument 1 (‘demangled_216’) from (14) could be NULL where non-null expected
                  |
<built-in>: note: argument 1 of ‘strcpy’ must be non-null
./benchmarks/binutils/leak_9/binutils_leak_9.c: In function ‘cplus_demangle’:
./benchmarks/binutils/leak_9/binutils_leak_9.c:289:6: warning: leak of ‘<unknown>’ [CWE-401] [-Wanalyzer-malloc-leak]
  289 |      strcpy (demangled, mangled);
      |      ^
  ‘demangle_template_value_parm’: events 1-4
    |
    |  309 | demangle_template_value_parm (const char **mangled, string *s)
    |      | ^
    |      | |
    |      | (1) entry to ‘demangle_template_value_parm’
    |......
    |  313 |         if (__RANDBOOL)
    |      |            ~
    |      |            |
    |      |            (2) following ‘true’ branch...
    |  314 |                 {
    |  315 |                         char *p = XNEWVEC (char, symbol_len + 1), *q;
    |      |                                   ~
    |      |                                   |
    |      |                                   (3) ...to here
    |......
    |  319 |                         q = cplus_demangle (p);
    |      |                             ~
    |      |                             |
    |      |                             (4) calling ‘cplus_demangle’ from ‘demangle_template_value_parm’
    |
    +--> ‘cplus_demangle’: events 5-10
           |
           |  297 | cplus_demangle (const char *mangled)
           |      | ^
           |      | |
           |      | (5) entry to ‘cplus_demangle’
           |  298 | {
           |  299 |         if (__RANDBOOL)
           |      |            ~
           |      |            |
           |      |            (6) following ‘false’ branch...
           |......
           |  302 |         if (__RANDBOOL)
           |      |            ~~
           |      |            ||
           |      |            |(7) ...to here
           |      |            (8) following ‘true’ branch...
           |  303 |                 return ada_demangle (mangled);
           |      |                        ~
           |      |                        |
           |      |                        (9) ...to here
           |      |                        (10) calling ‘ada_demangle’ from ‘cplus_demangle’
           |
           +--> ‘ada_demangle’: events 11-18
                  |
                  |   36 | ada_demangle (const char *mangled)
                  |      | ^
                  |      | |
                  |      | (11) entry to ‘ada_demangle’
                  |......
                  |   48 |         if (!ISLOWER (mangled[0]))
                  |      |            ~
                  |      |            |
                  |      |            (12) following ‘false’ branch...
                  |......
                  |   52 |         len0 = strlen (mangled) + 7 + 1;
                  |      |                ~
                  |      |                |
                  |      |                (13) ...to here
                  |   53 |         demangled = XNEWVEC (char, len0); // allocation site
                  |      |                     ~
                  |      |                     |
                  |      |                     (14) allocated here
                  |......
                  |   61 |                         if (!ISLOWER (*p))
                  |      |                            ~
                  |      |                            |
                  |      |                            (15) following ‘false’ branch...
                  |......
                  |   70 |                         else if (p[0] == 'O')
                  |      |                                   ~
                  |      |                                   |
                  |      |                                   (16) ...to here
                  |......
                  |  288 |   if (mangled[0] == '<')
                  |      |      ~
                  |      |      |
                  |      |      (17) following ‘true’ branch...
                  |  289 |      strcpy (demangled, mangled);
                  |      |      ~
                  |      |      |
                  |      |      (18) ...to here
                  |
           <------+
           |
         ‘cplus_demangle’: events 19-20
           |
           |  289 |      strcpy (demangled, mangled);
           |      |      ~                  
           |      |      |
           |      |      (20) ‘<unknown>’ leaks here; was allocated at (14)
           |......
           |  303 |                 return ada_demangle (mangled);
           |      |                        ^
           |      |                        |
           |      |                        (19) returning to ‘cplus_demangle’ from ‘ada_demangle’
           |
./benchmarks/binutils/leak_9/binutils_leak_9.c: In function ‘ada_demangle’:
./benchmarks/binutils/leak_9/binutils_leak_9.c:291:5: warning: use of possibly-NULL ‘demangled_216’ where non-null expected [CWE-690] [-Wanalyzer-possible-null-argument]
  291 |     sprintf (demangled, "<%s>", mangled);
      |     ^
  ‘demangle_template_value_parm’: events 1-4
    |
    |  309 | demangle_template_value_parm (const char **mangled, string *s)
    |      | ^
    |      | |
    |      | (1) entry to ‘demangle_template_value_parm’
    |......
    |  313 |         if (__RANDBOOL)
    |      |            ~
    |      |            |
    |      |            (2) following ‘true’ branch...
    |  314 |                 {
    |  315 |                         char *p = XNEWVEC (char, symbol_len + 1), *q;
    |      |                                   ~
    |      |                                   |
    |      |                                   (3) ...to here
    |......
    |  319 |                         q = cplus_demangle (p);
    |      |                             ~
    |      |                             |
    |      |                             (4) calling ‘cplus_demangle’ from ‘demangle_template_value_parm’
    |
    +--> ‘cplus_demangle’: events 5-10
           |
           |  297 | cplus_demangle (const char *mangled)
           |      | ^
           |      | |
           |      | (5) entry to ‘cplus_demangle’
           |  298 | {
           |  299 |         if (__RANDBOOL)
           |      |            ~
           |      |            |
           |      |            (6) following ‘false’ branch...
           |......
           |  302 |         if (__RANDBOOL)
           |      |            ~~
           |      |            ||
           |      |            |(7) ...to here
           |      |            (8) following ‘true’ branch...
           |  303 |                 return ada_demangle (mangled);
           |      |                        ~
           |      |                        |
           |      |                        (9) ...to here
           |      |                        (10) calling ‘ada_demangle’ from ‘cplus_demangle’
           |
           +--> ‘ada_demangle’: events 11-17
                  |
                  |   36 | ada_demangle (const char *mangled)
                  |      | ^
                  |      | |
                  |      | (11) entry to ‘ada_demangle’
                  |......
                  |   48 |         if (!ISLOWER (mangled[0]))
                  |      |            ~
                  |      |            |
                  |      |            (12) following ‘true’ branch...
                  |   49 |                 goto unknown;
                  |      |                 ~
                  |      |                 |
                  |      |                 (13) ...to here
                  |......
                  |  286 |   demangled = XNEWVEC (char, len0 + 3); /* memory leak */
                  |      |               ~
                  |      |               |
                  |      |               (14) this call could return NULL
                  |  287 | 
                  |  288 |   if (mangled[0] == '<')
                  |      |      ~
                  |      |      |
                  |      |      (15) following ‘false’ branch...
                  |......
                  |  291 |     sprintf (demangled, "<%s>", mangled);
                  |      |     ~
                  |      |     |
                  |      |     (16) ...to here
                  |      |     (17) argument 1 (‘demangled_216’) from (14) could be NULL where non-null expected
                  |
/usr/include/stdio.h:334:12: note: argument 1 of ‘sprintf’ must be non-null
  334 | extern int sprintf (char *__restrict __s,
      |            ^

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  2157k ( 87%)
 phase opt and generate             :   0.35 (100%)   0.01 (100%)   0.37 (100%)   243k ( 10%)
 analyzer                           :   0.02 (  6%)   0.00 (  0%)   0.02 (  5%)     0  (  0%)
 analyzer: processing worklist      :   0.19 ( 54%)   0.01 (100%)   0.21 ( 57%)   144  (  0%)
 analyzer: emitting diagnostics     :   0.13 ( 37%)   0.00 (  0%)   0.13 ( 35%)     0  (  0%)
 analyzer: shortest paths           :   0.01 (  3%)   0.00 (  0%)   0.01 (  3%)     0  (  0%)
 TOTAL                              :   0.35          0.01          0.37         2484k

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 ( 25%)  2157k ( 74%)
 phase opt and generate             :   0.02 (100%)   0.01 (100%)   0.03 ( 75%)   714k ( 24%)
 callgraph functions expansion      :   0.02 (100%)   0.01 (100%)   0.03 ( 75%)   510k ( 17%)
 dominator optimization             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 25%)    49k (  2%)
 integrated RA                      :   0.00 (  0%)   0.00 (  0%)   0.01 ( 25%)   147k (  5%)
 initialize rtl                     :   0.01 ( 50%)   0.00 (  0%)   0.00 (  0%)    12k (  0%)
 rest of compilation                :   0.01 ( 50%)   0.01 (100%)   0.00 (  0%)    18k (  1%)
 address taken                      :   0.00 (  0%)   0.00 (  0%)   0.01 ( 25%)     0  (  0%)
 TOTAL                              :   0.02          0.01          0.04         2929k
