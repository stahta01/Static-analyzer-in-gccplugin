In file included from ./benchmarks/git/leak_4/git_leak_4.c:10:
./benchmarks/git/leak_4/../git.h: In function ‘copy_array’:
./benchmarks/git/leak_4/../git.h:161:17: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/leak_4/../git.h:1:1: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  +++ |+#include <string.h>
    1 | #define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
./benchmarks/git/leak_4/../git.h:161:17: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^~~~~~
./benchmarks/git/leak_4/../git.h:161:17: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
./benchmarks/git/leak_4/../git.h:161:34: warning: implicit declaration of function ‘st_mult’ [-Wimplicit-function-declaration]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                                  ^~~~~~~
./benchmarks/git/leak_4/../git.h: In function ‘move_array’:
./benchmarks/git/leak_4/../git.h:169:17: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  169 |                 memmove(dst, src, st_mult(size, n));
      |                 ^~~~~~~
./benchmarks/git/leak_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
./benchmarks/git/leak_4/../git.h:169:17: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/leak_4/../git.h:169:17: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
In file included from ./benchmarks/git/leak_4/git_leak_4.c:9:
./benchmarks/git/leak_4/../git.h: In function ‘xstrdup_or_null’:
./benchmarks/git/leak_4/../stdio.h:138:20: warning: implicit declaration of function ‘strdup’ [-Wimplicit-function-declaration]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/leak_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
./benchmarks/git/leak_4/../stdio.h:138:20: warning: incompatible implicit declaration of built-in function ‘strdup’ [-Wbuiltin-declaration-mismatch]
  138 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/git/leak_4/../git.h:174:22: note: in expansion of macro ‘xstrdup’
  174 |         return str ? xstrdup(str) : NULL;
      |                      ^~~~~~~
In file included from ./benchmarks/git/leak_4/git_leak_4.c:10:
./benchmarks/git/leak_4/../git.h: At top level:
./benchmarks/git/leak_4/../git.h:236:62: warning: ‘struct archiver_args’ declared inside parameter list will not be visible outside of this definition or declaration
  236 |         int (*write_archive)(const struct archiver *, struct archiver_args *);
      |                                                              ^~~~~~~~~~~~~
./benchmarks/git/leak_4/../git.h: In function ‘strbuf_swap’:
./benchmarks/git/leak_4/../git.h:126:9: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/leak_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/leak_4/../git.h:126:9: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  126 |         memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
      |         ^~~~~~
./benchmarks/git/leak_4/../git.h:407:9: note: in expansion of macro ‘SWAP’
  407 |         SWAP(*a, *b);
      |         ^~~~
./benchmarks/git/leak_4/git_leak_4.c: In function ‘remove_redundant’:
./benchmarks/git/leak_4/git_leak_4.c:39:17: warning: implicit declaration of function ‘parse_commit’ [-Wimplicit-function-declaration]
   39 |                 parse_commit(array[i]);
      |                 ^~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:51:26: warning: implicit declaration of function ‘paint_down_to_common’ [-Wimplicit-function-declaration]
   51 |                 common = paint_down_to_common(array[i], filled, work);
      |                          ^~~~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:51:24: warning: assignment to ‘struct commit_list *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
   51 |                 common = paint_down_to_common(array[i], filled, work);
      |                        ^
./benchmarks/git/leak_4/git_leak_4.c:57:17: warning: implicit declaration of function ‘clear_commit_marks’ [-Wimplicit-function-declaration]
   57 |                 clear_commit_marks(array[i], all_flags);
      |                 ^~~~~~~~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:60:17: warning: implicit declaration of function ‘free_commit_list’ [-Wimplicit-function-declaration]
   60 |                 free_commit_list(common);
      |                 ^~~~~~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c: In function ‘find_merge_parents’:
./benchmarks/git/leak_4/git_leak_4.c:121:33: warning: implicit declaration of function ‘strchr’ [-Wimplicit-function-declaration]
  121 |                 char *newline = strchr(p, '\n');
      |                                 ^~~~~~
./benchmarks/git/leak_4/git_leak_4.c:11:1: note: include ‘<string.h>’ or provide a declaration of ‘strchr’
   10 | #include "../git.h"
  +++ |+#include <string.h>
   11 | 
./benchmarks/git/leak_4/git_leak_4.c:121:33: warning: incompatible implicit declaration of built-in function ‘strchr’ [-Wbuiltin-declaration-mismatch]
  121 |                 char *newline = strchr(p, '\n');
      |                                 ^~~~~~
./benchmarks/git/leak_4/git_leak_4.c:121:33: note: include ‘<string.h>’ or provide a declaration of ‘strchr’
./benchmarks/git/leak_4/git_leak_4.c:126:47: warning: implicit declaration of function ‘strlen’ [-Wimplicit-function-declaration]
  126 |                 len = newline ? newline - p : strlen(p);
      |                                               ^~~~~~
./benchmarks/git/leak_4/git_leak_4.c:126:47: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/leak_4/git_leak_4.c:126:47: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
./benchmarks/git/leak_4/git_leak_4.c:126:47: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/git/leak_4/git_leak_4.c:130:21: warning: implicit declaration of function ‘get_oid_hex’ [-Wimplicit-function-declaration]
  130 |                     get_oid_hex(p, &oid) ||
      |                     ^~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:139:23: warning: implicit declaration of function ‘parse_object’ [-Wimplicit-function-declaration]
  139 |                 obj = parse_object(&oid);
      |                       ^~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:139:21: warning: assignment to ‘struct object *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
  139 |                 obj = parse_object(&oid);
      |                     ^
./benchmarks/git/leak_4/git_leak_4.c:140:43: warning: implicit declaration of function ‘peel_to_type’ [-Wimplicit-function-declaration]
  140 |                 parent = (struct commit *)peel_to_type(NULL, 0, obj, OBJ_COMMIT);
      |                                           ^~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:140:26: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
  140 |                 parent = (struct commit *)peel_to_type(NULL, 0, obj, OBJ_COMMIT);
      |                          ^
./benchmarks/git/leak_4/git_leak_4.c:144:17: warning: implicit declaration of function ‘add_merge_parent’; did you mean ‘find_merge_parents’? [-Wimplicit-function-declaration]
  144 |                 add_merge_parent(result, &obj->oid, &parent->object.oid);
      |                 ^~~~~~~~~~~~~~~~
      |                 find_merge_parents
./benchmarks/git/leak_4/git_leak_4.c:146:23: warning: implicit declaration of function ‘lookup_commit’ [-Wimplicit-function-declaration]
  146 |         head_commit = lookup_commit(head);
      |                       ^~~~~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:146:21: warning: assignment to ‘struct commit *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
  146 |         head_commit = lookup_commit(head);
      |                     ^
./benchmarks/git/leak_4/git_leak_4.c:152:39: warning: implicit declaration of function ‘pop_commit’ [-Wimplicit-function-declaration]
  152 |                 struct commit *cmit = pop_commit(&parents);
      |                                       ^~~~~~~~~~
./benchmarks/git/leak_4/git_leak_4.c:152:39: warning: initialization of ‘struct commit *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]
./benchmarks/git/leak_4/git_leak_4.c:154:30: warning: implicit declaration of function ‘oidcmp’ [-Wimplicit-function-declaration]
  154 |                         if (!oidcmp(&result->item[i].commit, &cmit->object.oid))
      |                              ^~~~~~
./benchmarks/git/leak_4/git_leak_4.c: In function ‘mark_redundant_parents’:
./benchmarks/git/leak_4/git_leak_4.c:175:24: warning: implicit declaration of function ‘commit_list_count’; did you mean ‘commit_list_insert’? [-Wimplicit-function-declaration]
  175 |         int orig_cnt = commit_list_count(commit->parents);
      |                        ^~~~~~~~~~~~~~~~~
      |                        commit_list_insert

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  1298k ( 45%)
 phase parsing                      :   0.04 ( 80%)   0.01 (100%)   0.04 ( 67%)  1112k ( 39%)
 phase opt and generate             :   0.01 ( 20%)   0.00 (  0%)   0.02 ( 33%)   456k ( 16%)
 callgraph ipa passes               :   0.01 ( 20%)   0.00 (  0%)   0.01 ( 17%)   219k (  8%)
 ipa function summary               :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)    26k (  1%)
 preprocessing                      :   0.00 (  0%)   0.00 (  0%)   0.02 ( 33%)   324k ( 11%)
 lexical analysis                   :   0.02 ( 40%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 parser struct body                 :   0.00 (  0%)   0.01 (100%)   0.00 (  0%)    73k (  3%)
 parser function body               :   0.02 ( 40%)   0.00 (  0%)   0.01 ( 17%)   115k (  4%)
 parser inl. func. body             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)    23k (  1%)
 tree gimplify                      :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)   106k (  4%)
 tree aggressive DCE                :   0.01 ( 20%)   0.00 (  0%)   0.00 (  0%)   152  (  0%)
 TOTAL                              :   0.05          0.01          0.06         2877k
./benchmarks/git/leak_4/git_leak_4.c: In function ‘reduce_heads’:
./benchmarks/git/leak_4/git_leak_4.c:99:36: warning: dereference of possibly-NULL ‘array_50’ [CWE-690] [-Wanalyzer-possible-null-dereference]
   99 |                         array[i++] = p->item;
      |                                    ^
  ‘mark_redundant_parents’: events 1-2
    |
    |  168 | static int mark_redundant_parents(struct rev_info *revs, struct commit *commit)
    |      |            ^
    |      |            |
    |      |            (1) entry to ‘mark_redundant_parents’
    |  169 | {
    |  170 |         struct commit_list *h = reduce_heads(commit->parents);
    |      |                                 ~
    |      |                                 |
    |      |                                 (2) calling ‘reduce_heads’ from ‘mark_redundant_parents’
    |
    +--> ‘reduce_heads’: events 3-4
           |
           |   77 | struct commit_list *reduce_heads(struct commit_list *heads)
           |      |                     ^
           |      |                     |
           |      |                     (3) entry to ‘reduce_heads’
           |......
           |   84 |         if (!heads)
           |      |            ~         
           |      |            |
           |      |            (4) following ‘false’ branch (when ‘heads_47(D)’ is non-NULL)...
           |
         ‘reduce_heads’: event 5
           |
           |lto1:
           | (5): ...to here
           |
         ‘reduce_heads’: events 6-15
           |
           |   88 |         for (p = heads; p; p = p->next)
           |      |                         ^
           |      |                         |
           |      |                         (6) following ‘true’ branch (when ‘p_27’ is non-NULL)...
           |   89 |                 p->item->object.flags &= ~STALE;
           |      |                  ~       
           |      |                  |
           |      |                  (7) ...to here
           |   90 |         for (p = heads, num_head = 0; p; p = p->next) {
           |      |                                       ~
           |      |                                       |
           |      |                                       (8) following ‘true’ branch (when ‘p_28’ is non-NULL)...
           |   91 |                 if (p->item->object.flags & STALE)
           |      |                      ~   
           |      |                      |
           |      |                      (9) ...to here
           |......
           |   96 |         array = xcalloc(num_head, sizeof(*array));
           |      |                 ~        
           |      |                 |
           |      |                 (10) this call could return NULL
           |   97 |         for (p = heads, i = 0; p; p = p->next) {
           |      |                                ~
           |      |                                |
           |      |                                (11) following ‘true’ branch (when ‘p_29’ is non-NULL)...
           |   98 |                 if (p->item->object.flags & STALE) {
           |      |                    ~ ~   
           |      |                    | |
           |      |                    | (12) ...to here
           |      |                    (13) following ‘true’ branch...
           |   99 |                         array[i++] = p->item;
           |      |                                ~   ~
           |      |                                |   |
           |      |                                |   (15) ‘array_50 + (long unsigned int) i_34 * 8’ could be NULL: unchecked value from (10)
           |      |                                (14) ...to here
           |
./benchmarks/git/leak_4/git_leak_4.c: In function ‘commit_list_insert’:
./benchmarks/git/leak_4/git_leak_4.c:15:24: warning: dereference of possibly-NULL ‘new_list_4’ [CWE-690] [-Wanalyzer-possible-null-dereference]
   15 |         new_list->item = item;
      |                        ^
  ‘main’: events 1-4
    |
    |  204 | int main ()
    |      |     ^
    |      |     |
    |      |     (1) entry to ‘main’
    |......
    |  211 |     for(int i = 0; i < 10; i++)
    |      |                      ~
    |      |                      |
    |      |                      (2) following ‘true’ branch (when ‘i_4 <= 9’)...
    |  212 |     {
    |  213 |         commit_list_insert(NULL, &list);
    |      |         ~
    |      |         |
    |      |         (3) ...to here
    |      |         (4) calling ‘commit_list_insert’ from ‘main’
    |
    +--> ‘commit_list_insert’: events 5-7
           |
           |   12 | struct commit_list *commit_list_insert(struct commit *item, struct commit_list **list_p)
           |      |                     ^
           |      |                     |
           |      |                     (5) entry to ‘commit_list_insert’
           |   13 | {
           |   14 |         struct commit_list *new_list = xmalloc(sizeof(struct commit_list));
           |      |                                        ~
           |      |                                        |
           |      |                                        (6) this call could return NULL
           |   15 |         new_list->item = item;
           |      |                        ~
           |      |                        |
           |      |                        (7) ‘new_list_4’ could be NULL: unchecked value from (6)
           |
./benchmarks/git/leak_4/git_leak_4.c: In function ‘remove_redundant’:
./benchmarks/git/leak_4/git_leak_4.c:39:17: warning: dereference of possibly-NULL ‘array_116(D)’ [CWE-690] [-Wanalyzer-possible-null-dereference]
   39 |                 parse_commit(array[i]);
      |                 ^
  ‘mark_redundant_parents’: events 1-2
    |
    |  168 | static int mark_redundant_parents(struct rev_info *revs, struct commit *commit)
    |      |            ^
    |      |            |
    |      |            (1) entry to ‘mark_redundant_parents’
    |  169 | {
    |  170 |         struct commit_list *h = reduce_heads(commit->parents);
    |      |                                 ~
    |      |                                 |
    |      |                                 (2) calling ‘reduce_heads’ from ‘mark_redundant_parents’
    |
    +--> ‘reduce_heads’: events 3-4
           |
           |   77 | struct commit_list *reduce_heads(struct commit_list *heads)
           |      |                     ^
           |      |                     |
           |      |                     (3) entry to ‘reduce_heads’
           |......
           |   84 |         if (!heads)
           |      |            ~         
           |      |            |
           |      |            (4) following ‘false’ branch (when ‘heads_47(D)’ is non-NULL)...
           |
         ‘reduce_heads’: event 5
           |
           |lto1:
           | (5): ...to here
           |
         ‘reduce_heads’: events 6-15
           |
           |   88 |         for (p = heads; p; p = p->next)
           |      |                         ^
           |      |                         |
           |      |                         (6) following ‘true’ branch (when ‘p_27’ is non-NULL)...
           |   89 |                 p->item->object.flags &= ~STALE;
           |      |                  ~       
           |      |                  |
           |      |                  (7) ...to here
           |   90 |         for (p = heads, num_head = 0; p; p = p->next) {
           |      |                                       ~
           |      |                                       |
           |      |                                       (8) following ‘true’ branch (when ‘p_28’ is non-NULL)...
           |   91 |                 if (p->item->object.flags & STALE)
           |      |                      ~   
           |      |                      |
           |      |                      (9) ...to here
           |......
           |   96 |         array = xcalloc(num_head, sizeof(*array));
           |      |                 ~        
           |      |                 |
           |      |                 (10) this call could return NULL
           |   97 |         for (p = heads, i = 0; p; p = p->next) {
           |      |                                ~    ~
           |      |                                |    |
           |      |                                |    (14) ...to here
           |      |                                (11) following ‘true’ branch (when ‘p_29’ is non-NULL)...
           |   98 |                 if (p->item->object.flags & STALE) {
           |      |                    ~ ~   
           |      |                    | |
           |      |                    | (12) ...to here
           |      |                    (13) following ‘false’ branch...
           |......
           |  103 |         num_head = remove_redundant(array, num_head);
           |      |                    ~     
           |      |                    |
           |      |                    (15) calling ‘remove_redundant’ from ‘reduce_heads’
           |
           +--> ‘remove_redundant’: events 16-19
                  |
                  |   21 | static int remove_redundant(struct commit **array, int cnt)
                  |      |            ^
                  |      |            |
                  |      |            (16) entry to ‘remove_redundant’
                  |......
                  |   38 |         for (i = 0; i < cnt; i++)
                  |      |                       ~
                  |      |                       |
                  |      |                       (17) following ‘true’ branch (when ‘i_79 < cnt_105(D)’)...
                  |   39 |                 parse_commit(array[i]);
                  |      |                 ~                 ~
                  |      |                 |                 |
                  |      |                 |                 (18) ...to here
                  |      |                 (19) ‘array_116(D) + (long unsigned int) i_79 * 8’ could be NULL: unchecked value from (10)
                  |
./benchmarks/git/leak_4/git_leak_4.c:43:30: warning: dereference of possibly-NULL ‘redundant_110’ [CWE-690] [-Wanalyzer-possible-null-dereference]
   43 |                 if (redundant[i])
      |                              ^
  ‘mark_redundant_parents’: events 1-2
    |
    |  168 | static int mark_redundant_parents(struct rev_info *revs, struct commit *commit)
    |      |            ^
    |      |            |
    |      |            (1) entry to ‘mark_redundant_parents’
    |  169 | {
    |  170 |         struct commit_list *h = reduce_heads(commit->parents);
    |      |                                 ~
    |      |                                 |
    |      |                                 (2) calling ‘reduce_heads’ from ‘mark_redundant_parents’
    |
    +--> ‘reduce_heads’: events 3-4
           |
           |   77 | struct commit_list *reduce_heads(struct commit_list *heads)
           |      |                     ^
           |      |                     |
           |      |                     (3) entry to ‘reduce_heads’
           |......
           |   84 |         if (!heads)
           |      |            ~         
           |      |            |
           |      |            (4) following ‘false’ branch (when ‘heads_47(D)’ is non-NULL)...
           |
         ‘reduce_heads’: event 5
           |
           |lto1:
           | (5): ...to here
           |
         ‘reduce_heads’: events 6-14
           |
           |   88 |         for (p = heads; p; p = p->next)
           |      |                         ^
           |      |                         |
           |      |                         (6) following ‘true’ branch (when ‘p_27’ is non-NULL)...
           |   89 |                 p->item->object.flags &= ~STALE;
           |      |                  ~       
           |      |                  |
           |      |                  (7) ...to here
           |   90 |         for (p = heads, num_head = 0; p; p = p->next) {
           |      |                                       ~
           |      |                                       |
           |      |                                       (8) following ‘true’ branch (when ‘p_28’ is non-NULL)...
           |   91 |                 if (p->item->object.flags & STALE)
           |      |                      ~   
           |      |                      |
           |      |                      (9) ...to here
           |......
           |   97 |         for (p = heads, i = 0; p; p = p->next) {
           |      |                                ~    ~
           |      |                                |    |
           |      |                                |    (13) ...to here
           |      |                                (10) following ‘true’ branch (when ‘p_29’ is non-NULL)...
           |   98 |                 if (p->item->object.flags & STALE) {
           |      |                    ~ ~   
           |      |                    | |
           |      |                    | (11) ...to here
           |      |                    (12) following ‘false’ branch...
           |......
           |  103 |         num_head = remove_redundant(array, num_head);
           |      |                    ~     
           |      |                    |
           |      |                    (14) calling ‘remove_redundant’ from ‘reduce_heads’
           |
           +--> ‘remove_redundant’: events 15-21
                  |
                  |   21 | static int remove_redundant(struct commit **array, int cnt)
                  |      |            ^
                  |      |            |
                  |      |            (15) entry to ‘remove_redundant’
                  |......
                  |   35 |         redundant = xcalloc(cnt, 1);
                  |      |                     ~
                  |      |                     |
                  |      |                     (16) this call could return NULL
                  |......
                  |   38 |         for (i = 0; i < cnt; i++)
                  |      |                       ~
                  |      |                       |
                  |      |                       (17) following ‘true’ branch (when ‘i_79 < cnt_105(D)’)...
                  |   39 |                 parse_commit(array[i]);
                  |      |                                   ~
                  |      |                                   |
                  |      |                                   (18) ...to here
                  |   40 |         for (i = 0; i < cnt; i++) {
                  |      |                       ~
                  |      |                       |
                  |      |                       (19) following ‘true’ branch (when ‘i_80 < cnt_105(D)’)...
                  |......
                  |   43 |                 if (redundant[i])
                  |      |                              ~
                  |      |                              |
                  |      |                              (20) ...to here
                  |      |                              (21) ‘redundant_110 + (sizetype) i_80’ could be NULL: unchecked value from (16)
                  |
./benchmarks/git/leak_4/git_leak_4.c:48:46: warning: dereference of possibly-NULL ‘filled_index_113’ [CWE-690] [-Wanalyzer-possible-null-dereference]
   48 |                         filled_index[filled] = j;
      |                                              ^
  ‘mark_redundant_parents’: events 1-2
    |
    |  168 | static int mark_redundant_parents(struct rev_info *revs, struct commit *commit)
    |      |            ^
    |      |            |
    |      |            (1) entry to ‘mark_redundant_parents’
    |  169 | {
    |  170 |         struct commit_list *h = reduce_heads(commit->parents);
    |      |                                 ~
    |      |                                 |
    |      |                                 (2) calling ‘reduce_heads’ from ‘mark_redundant_parents’
    |
    +--> ‘reduce_heads’: events 3-4
           |
           |   77 | struct commit_list *reduce_heads(struct commit_list *heads)
           |      |                     ^
           |      |                     |
           |      |                     (3) entry to ‘reduce_heads’
           |......
           |   84 |         if (!heads)
           |      |            ~         
           |      |            |
           |      |            (4) following ‘false’ branch (when ‘heads_47(D)’ is non-NULL)...
           |
         ‘reduce_heads’: event 5
           |
           |lto1:
           | (5): ...to here
           |
         ‘reduce_heads’: events 6-14
           |
           |   88 |         for (p = heads; p; p = p->next)
           |      |                         ^
           |      |                         |
           |      |                         (6) following ‘true’ branch (when ‘p_27’ is non-NULL)...
           |   89 |                 p->item->object.flags &= ~STALE;
           |      |                  ~       
           |      |                  |
           |      |                  (7) ...to here
           |   90 |         for (p = heads, num_head = 0; p; p = p->next) {
           |      |                                       ~
           |      |                                       |
           |      |                                       (8) following ‘true’ branch (when ‘p_28’ is non-NULL)...
           |   91 |                 if (p->item->object.flags & STALE)
           |      |                      ~   
           |      |                      |
           |      |                      (9) ...to here
           |......
           |   97 |         for (p = heads, i = 0; p; p = p->next) {
           |      |                                ~    ~
           |      |                                |    |
           |      |                                |    (13) ...to here
           |      |                                (10) following ‘true’ branch (when ‘p_29’ is non-NULL)...
           |   98 |                 if (p->item->object.flags & STALE) {
           |      |                    ~ ~   
           |      |                    | |
           |      |                    | (11) ...to here
           |      |                    (12) following ‘false’ branch...
           |......
           |  103 |         num_head = remove_redundant(array, num_head);
           |      |                    ~     
           |      |                    |
           |      |                    (14) calling ‘remove_redundant’ from ‘reduce_heads’
           |
           +--> ‘remove_redundant’: events 15-21
                  |
                  |   21 | static int remove_redundant(struct commit **array, int cnt)
                  |      |            ^
                  |      |            |
                  |      |            (15) entry to ‘remove_redundant’
                  |......
                  |   36 |         ALLOC_ARRAY(filled_index, cnt - 1);
                  |      |         ~   
                  |      |         |
                  |      |         (16) this call could return NULL
                  |   37 | 
                  |   38 |         for (i = 0; i < cnt; i++)
                  |      |                       ~
                  |      |                       |
                  |      |                       (17) following ‘true’ branch (when ‘i_79 < cnt_105(D)’)...
                  |   39 |                 parse_commit(array[i]);
                  |      |                                   ~
                  |      |                                   |
                  |      |                                   (18) ...to here
                  |   40 |         for (i = 0; i < cnt; i++) {
                  |      |                       ~
                  |      |                       |
                  |      |                       (19) following ‘true’ branch (when ‘i_80 < cnt_105(D)’)...
                  |......
                  |   43 |                 if (redundant[i])
                  |      |                    ~         ~
                  |      |                    |         |
                  |      |                    |         (20) ...to here
                  |      |                    (21) following ‘false’ branch...
                  |
                ‘remove_redundant’: event 22
                  |
                  |lto1:
                  | (22): ...to here
                  |
                ‘remove_redundant’: events 23-29
                  |
                  |   45 |                 for (j = filled = 0; j < cnt; j++) {
                  |      |                                        ^
                  |      |                                        |
                  |      |                                        (23) following ‘true’ branch (when ‘j_83 < cnt_105(D)’)...
                  |      |                                        (27) following ‘true’ branch (when ‘j_83 < cnt_105(D)’)...
                  |   46 |                         if (i == j || redundant[j])
                  |      |                            ~            
                  |      |                            |
                  |      |                            (24) ...to here
                  |      |                            (25) following ‘true’ branch (when ‘i_80 == j_83’)...
                  |      |                            (26) ...to here
                  |      |                            (28) ...to here
                  |   47 |                                 continue;
                  |   48 |                         filled_index[filled] = j;
                  |      |                                              ~
                  |      |                                              |
                  |      |                                              (29) ‘filled_index_113 + (long unsigned int) filled_89 * 4’ could be NULL: unchecked value from (16)
                  |
./benchmarks/git/leak_4/git_leak_4.c:49:40: warning: dereference of possibly-NULL ‘work_108’ [CWE-690] [-Wanalyzer-possible-null-dereference]
   49 |                         work[filled++] = array[j];
      |                                        ^
  ‘mark_redundant_parents’: events 1-2
    |
    |  168 | static int mark_redundant_parents(struct rev_info *revs, struct commit *commit)
    |      |            ^
    |      |            |
    |      |            (1) entry to ‘mark_redundant_parents’
    |  169 | {
    |  170 |         struct commit_list *h = reduce_heads(commit->parents);
    |      |                                 ~
    |      |                                 |
    |      |                                 (2) calling ‘reduce_heads’ from ‘mark_redundant_parents’
    |
    +--> ‘reduce_heads’: events 3-4
           |
           |   77 | struct commit_list *reduce_heads(struct commit_list *heads)
           |      |                     ^
           |      |                     |
           |      |                     (3) entry to ‘reduce_heads’
           |......
           |   84 |         if (!heads)
           |      |            ~         
           |      |            |
           |      |            (4) following ‘false’ branch (when ‘heads_47(D)’ is non-NULL)...
           |
         ‘reduce_heads’: event 5
           |
           |lto1:
           | (5): ...to here
           |
         ‘reduce_heads’: events 6-14
           |
           |   88 |         for (p = heads; p; p = p->next)
           |      |                         ^
           |      |                         |
           |      |                         (6) following ‘true’ branch (when ‘p_27’ is non-NULL)...
           |   89 |                 p->item->object.flags &= ~STALE;
           |      |                  ~       
           |      |                  |
           |      |                  (7) ...to here
           |   90 |         for (p = heads, num_head = 0; p; p = p->next) {
           |      |                                       ~
           |      |                                       |
           |      |                                       (8) following ‘true’ branch (when ‘p_28’ is non-NULL)...
           |   91 |                 if (p->item->object.flags & STALE)
           |      |                      ~   
           |      |                      |
           |      |                      (9) ...to here
           |......
           |   97 |         for (p = heads, i = 0; p; p = p->next) {
           |      |                                ~    ~
           |      |                                |    |
           |      |                                |    (13) ...to here
           |      |                                (10) following ‘true’ branch (when ‘p_29’ is non-NULL)...
           |   98 |                 if (p->item->object.flags & STALE) {
           |      |                    ~ ~   
           |      |                    | |
           |      |                    | (11) ...to here
           |      |                    (12) following ‘false’ branch...
           |......
           |  103 |         num_head = remove_redundant(array, num_head);
           |      |                    ~     
           |      |                    |
           |      |                    (14) calling ‘remove_redundant’ from ‘reduce_heads’
           |
           +--> ‘remove_redundant’: events 15-21
                  |
                  |   21 | static int remove_redundant(struct commit **array, int cnt)
                  |      |            ^
                  |      |            |
                  |      |            (15) entry to ‘remove_redundant’
                  |......
                  |   34 |         work = xcalloc(cnt, sizeof(*work));
                  |      |                ~
                  |      |                |
                  |      |                (16) this call could return NULL
                  |......
                  |   38 |         for (i = 0; i < cnt; i++)
                  |      |                       ~
                  |      |                       |
                  |      |                       (17) following ‘true’ branch (when ‘i_79 < cnt_105(D)’)...
                  |   39 |                 parse_commit(array[i]);
                  |      |                                   ~
                  |      |                                   |
                  |      |                                   (18) ...to here
                  |   40 |         for (i = 0; i < cnt; i++) {
                  |      |                       ~
                  |      |                       |
                  |      |                       (19) following ‘true’ branch (when ‘i_80 < cnt_105(D)’)...
                  |......
                  |   43 |                 if (redundant[i])
                  |      |                    ~         ~
                  |      |                    |         |
                  |      |                    |         (20) ...to here
                  |      |                    (21) following ‘false’ branch...
                  |
                ‘remove_redundant’: event 22
                  |
                  |lto1:
                  | (22): ...to here
                  |
                ‘remove_redundant’: events 23-29
                  |
                  |   45 |                 for (j = filled = 0; j < cnt; j++) {
                  |      |                                        ^
                  |      |                                        |
                  |      |                                        (23) following ‘true’ branch (when ‘j_83 < cnt_105(D)’)...
                  |      |                                        (27) following ‘true’ branch (when ‘j_83 < cnt_105(D)’)...
                  |   46 |                         if (i == j || redundant[j])
                  |      |                            ~            
                  |      |                            |
                  |      |                            (24) ...to here
                  |      |                            (25) following ‘true’ branch (when ‘i_80 == j_83’)...
                  |      |                            (26) ...to here
                  |      |                            (28) ...to here
                  |......
                  |   49 |                         work[filled++] = array[j];
                  |      |                                        ~
                  |      |                                        |
                  |      |                                        (29) ‘work_108 + (long unsigned int) filled_89 * 8’ could be NULL: unchecked value from (16)
                  |
./benchmarks/git/leak_4/git_leak_4.c: In function ‘copy_array’:
./benchmarks/git/leak_4/../git.h:161:17: warning: use of possibly-NULL ‘src_9(D)’ where non-null expected [CWE-690] [-Wanalyzer-possible-null-argument]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^
  ‘find_merge_parents’: events 1-16
    |
    |./benchmarks/git/leak_4/git_leak_4.c:110:13:
    |  110 | static void find_merge_parents(struct merge_parents *result,
    |      |             ^
    |      |             |
    |      |             (1) entry to ‘find_merge_parents’
    |......
    |  118 |         while (pos < in->len) {
    |      |                    ~
    |      |                    |
    |      |                    (2) following ‘true’ branch...
    |  119 |                 int len;
    |  120 |                 char *p = in->buf + pos;
    |      |                             ~
    |      |                             |
    |      |                             (3) ...to here
    |......
    |  129 |                 if (len < GIT_SHA1_HEXSZ + 3 ||
    |      |                    ~                         ~
    |      |                    |                         |
    |      |                    |                         (6) following ‘false’ branch...
    |      |                    (4) following ‘false’ branch...
    |  130 |                     get_oid_hex(p, &oid) ||
    |      |                     ~                    ~
    |      |                     |                    |
    |      |                     (5) ...to here       (8) following ‘false’ branch...
    |  131 |                     p[GIT_SHA1_HEXSZ] != '\t' ||
    |      |                      ~                        ~
    |      |                      |                        |
    |      |                      (7) ...to here           (10) following ‘false’ branch...
    |  132 |                     p[GIT_SHA1_HEXSZ + 1] != '\t')
    |      |                      ~
    |      |                      |
    |      |                      (9) ...to here
    |......
    |  139 |                 obj = parse_object(&oid);
    |      |                       ~
    |      |                       |
    |      |                       (11) ...to here
    |  140 |                 parent = (struct commit *)peel_to_type(NULL, 0, obj, OBJ_COMMIT);
    |  141 |                 if (!parent)
    |      |                    ~
    |      |                    |
    |      |                    (12) following ‘false’ branch...
    |  142 |                         continue;
    |  143 |                 commit_list_insert(parent, &parents);
    |      |                 ~
    |      |                 |
    |      |                 (13) ...to here
    |......
    |  147 |         if (head_commit)
    |      |            ~ 
    |      |            |
    |      |            (14) following ‘false’ branch...
    |  148 |                 commit_list_insert(head_commit, &parents);
    |  149 |         parents = reduce_heads(parents);
    |      |                   ~
    |      |                   |
    |      |                   (15) ...to here
    |      |                   (16) calling ‘reduce_heads’ from ‘find_merge_parents’
    |
    +--> ‘reduce_heads’: events 17-18
           |
           |   77 | struct commit_list *reduce_heads(struct commit_list *heads)
           |      |                     ^
           |      |                     |
           |      |                     (17) entry to ‘reduce_heads’
           |......
           |   84 |         if (!heads)
           |      |            ~         
           |      |            |
           |      |            (18) following ‘false’ branch (when ‘heads_47(D)’ is non-NULL)...
           |
         ‘reduce_heads’: event 19
           |
           |lto1:
           | (19): ...to here
           |
         ‘reduce_heads’: events 20-29
           |
           |   88 |         for (p = heads; p; p = p->next)
           |      |                         ^
           |      |                         |
           |      |                         (20) following ‘true’ branch (when ‘p_27’ is non-NULL)...
           |   89 |                 p->item->object.flags &= ~STALE;
           |      |                  ~       
           |      |                  |
           |      |                  (21) ...to here
           |   90 |         for (p = heads, num_head = 0; p; p = p->next) {
           |      |                                       ~
           |      |                                       |
           |      |                                       (22) following ‘true’ branch (when ‘p_28’ is non-NULL)...
           |   91 |                 if (p->item->object.flags & STALE)
           |      |                      ~   
           |      |                      |
           |      |                      (23) ...to here
           |......
           |   96 |         array = xcalloc(num_head, sizeof(*array));
           |      |                 ~        
           |      |                 |
           |      |                 (24) this call could return NULL
           |   97 |         for (p = heads, i = 0; p; p = p->next) {
           |      |                                ~    ~
           |      |                                |    |
           |      |                                |    (28) ...to here
           |      |                                (25) following ‘true’ branch (when ‘p_29’ is non-NULL)...
           |   98 |                 if (p->item->object.flags & STALE) {
           |      |                    ~ ~   
           |      |                    | |
           |      |                    | (26) ...to here
           |      |                    (27) following ‘false’ branch...
           |......
           |  103 |         num_head = remove_redundant(array, num_head);
           |      |                    ~     
           |      |                    |
           |      |                    (29) calling ‘remove_redundant’ from ‘reduce_heads’
           |
           +--> ‘remove_redundant’: events 30-31
                  |
                  |   21 | static int remove_redundant(struct commit **array, int cnt)
                  |      |            ^
                  |      |            |
                  |      |            (30) entry to ‘remove_redundant’
                  |......
                  |   38 |         for (i = 0; i < cnt; i++)
                  |      |                       ~
                  |      |                       |
                  |      |                       (31) following ‘false’ branch (when ‘i_79 >= cnt_105(D)’)...
                  |
                ‘remove_redundant’: event 32
                  |
                  |lto1:
                  | (32): ...to here
                  |
                ‘remove_redundant’: events 33-35
                  |
                  |   40 |         for (i = 0; i < cnt; i++) {
                  |      |                       ^
                  |      |                       |
                  |      |                       (33) following ‘false’ branch (when ‘i_80 >= cnt_105(D)’)...
                  |......
                  |   64 |         COPY_ARRAY(work, array, cnt);
                  |      |         ~              
                  |      |         |
                  |      |         (34) ...to here
                  |      |         (35) calling ‘copy_array’ from ‘remove_redundant’
                  |
                  +--> ‘copy_array’: events 36-39
                         |
                         |./benchmarks/git/leak_4/../git.h:158:20:
                         |  158 | static inline void copy_array(void *dst, const void *src, size_t n, size_t size)
                         |      |                    ^
                         |      |                    |
                         |      |                    (36) entry to ‘copy_array’
                         |  159 | {
                         |  160 |         if (n)
                         |      |            ~        
                         |      |            |
                         |      |            (37) following ‘true’ branch (when ‘n_4(D) != 0’)...
                         |  161 |                 memcpy(dst, src, st_mult(size, n));
                         |      |                 ~                ~
                         |      |                 |                |
                         |      |                 |                (38) ...to here
                         |      |                 (39) argument 2 (‘src_9(D)’) from (24) could be NULL where non-null expected
                         |
<built-in>: note: argument 2 of ‘memcpy’ must be non-null
./benchmarks/git/leak_4/../git.h:161:17: warning: use of possibly-NULL ‘dst_8(D)’ where non-null expected [CWE-690] [-Wanalyzer-possible-null-argument]
  161 |                 memcpy(dst, src, st_mult(size, n));
      |                 ^
  ‘find_merge_parents’: events 1-16
    |
    |./benchmarks/git/leak_4/git_leak_4.c:110:13:
    |  110 | static void find_merge_parents(struct merge_parents *result,
    |      |             ^
    |      |             |
    |      |             (1) entry to ‘find_merge_parents’
    |......
    |  118 |         while (pos < in->len) {
    |      |                    ~
    |      |                    |
    |      |                    (2) following ‘true’ branch...
    |  119 |                 int len;
    |  120 |                 char *p = in->buf + pos;
    |      |                             ~
    |      |                             |
    |      |                             (3) ...to here
    |......
    |  129 |                 if (len < GIT_SHA1_HEXSZ + 3 ||
    |      |                    ~                         ~
    |      |                    |                         |
    |      |                    |                         (6) following ‘false’ branch...
    |      |                    (4) following ‘false’ branch...
    |  130 |                     get_oid_hex(p, &oid) ||
    |      |                     ~                    ~
    |      |                     |                    |
    |      |                     (5) ...to here       (8) following ‘false’ branch...
    |  131 |                     p[GIT_SHA1_HEXSZ] != '\t' ||
    |      |                      ~                        ~
    |      |                      |                        |
    |      |                      (7) ...to here           (10) following ‘false’ branch...
    |  132 |                     p[GIT_SHA1_HEXSZ + 1] != '\t')
    |      |                      ~
    |      |                      |
    |      |                      (9) ...to here
    |......
    |  139 |                 obj = parse_object(&oid);
    |      |                       ~
    |      |                       |
    |      |                       (11) ...to here
    |  140 |                 parent = (struct commit *)peel_to_type(NULL, 0, obj, OBJ_COMMIT);
    |  141 |                 if (!parent)
    |      |                    ~
    |      |                    |
    |      |                    (12) following ‘false’ branch...
    |  142 |                         continue;
    |  143 |                 commit_list_insert(parent, &parents);
    |      |                 ~
    |      |                 |
    |      |                 (13) ...to here
    |......
    |  147 |         if (head_commit)
    |      |            ~ 
    |      |            |
    |      |            (14) following ‘false’ branch...
    |  148 |                 commit_list_insert(head_commit, &parents);
    |  149 |         parents = reduce_heads(parents);
    |      |                   ~
    |      |                   |
    |      |                   (15) ...to here
    |      |                   (16) calling ‘reduce_heads’ from ‘find_merge_parents’
    |
    +--> ‘reduce_heads’: events 17-18
           |
           |   77 | struct commit_list *reduce_heads(struct commit_list *heads)
           |      |                     ^
           |      |                     |
           |      |                     (17) entry to ‘reduce_heads’
           |......
           |   84 |         if (!heads)
           |      |            ~         
           |      |            |
           |      |            (18) following ‘false’ branch (when ‘heads_47(D)’ is non-NULL)...
           |
         ‘reduce_heads’: event 19
           |
           |lto1:
           | (19): ...to here
           |
         ‘reduce_heads’: events 20-28
           |
           |   88 |         for (p = heads; p; p = p->next)
           |      |                         ^
           |      |                         |
           |      |                         (20) following ‘true’ branch (when ‘p_27’ is non-NULL)...
           |   89 |                 p->item->object.flags &= ~STALE;
           |      |                  ~       
           |      |                  |
           |      |                  (21) ...to here
           |   90 |         for (p = heads, num_head = 0; p; p = p->next) {
           |      |                                       ~
           |      |                                       |
           |      |                                       (22) following ‘true’ branch (when ‘p_28’ is non-NULL)...
           |   91 |                 if (p->item->object.flags & STALE)
           |      |                      ~   
           |      |                      |
           |      |                      (23) ...to here
           |......
           |   97 |         for (p = heads, i = 0; p; p = p->next) {
           |      |                                ~    ~
           |      |                                |    |
           |      |                                |    (27) ...to here
           |      |                                (24) following ‘true’ branch (when ‘p_29’ is non-NULL)...
           |   98 |                 if (p->item->object.flags & STALE) {
           |      |                    ~ ~   
           |      |                    | |
           |      |                    | (25) ...to here
           |      |                    (26) following ‘false’ branch...
           |......
           |  103 |         num_head = remove_redundant(array, num_head);
           |      |                    ~     
           |      |                    |
           |      |                    (28) calling ‘remove_redundant’ from ‘reduce_heads’
           |
           +--> ‘remove_redundant’: events 29-31
                  |
                  |   21 | static int remove_redundant(struct commit **array, int cnt)
                  |      |            ^
                  |      |            |
                  |      |            (29) entry to ‘remove_redundant’
                  |......
                  |   34 |         work = xcalloc(cnt, sizeof(*work));
                  |      |                ~
                  |      |                |
                  |      |                (30) this call could return NULL
                  |......
                  |   38 |         for (i = 0; i < cnt; i++)
                  |      |                       ~
                  |      |                       |
                  |      |                       (31) following ‘false’ branch (when ‘i_79 >= cnt_105(D)’)...
                  |
                ‘remove_redundant’: event 32
                  |
                  |lto1:
                  | (32): ...to here
                  |
                ‘remove_redundant’: events 33-35
                  |
                  |   40 |         for (i = 0; i < cnt; i++) {
                  |      |                       ^
                  |      |                       |
                  |      |                       (33) following ‘false’ branch (when ‘i_80 >= cnt_105(D)’)...
                  |......
                  |   64 |         COPY_ARRAY(work, array, cnt);
                  |      |         ~              
                  |      |         |
                  |      |         (34) ...to here
                  |      |         (35) calling ‘copy_array’ from ‘remove_redundant’
                  |
                  +--> ‘copy_array’: events 36-39
                         |
                         |./benchmarks/git/leak_4/../git.h:158:20:
                         |  158 | static inline void copy_array(void *dst, const void *src, size_t n, size_t size)
                         |      |                    ^
                         |      |                    |
                         |      |                    (36) entry to ‘copy_array’
                         |  159 | {
                         |  160 |         if (n)
                         |      |            ~        
                         |      |            |
                         |      |            (37) following ‘true’ branch (when ‘n_4(D) != 0’)...
                         |  161 |                 memcpy(dst, src, st_mult(size, n));
                         |      |                 ~                ~
                         |      |                 |                |
                         |      |                 |                (38) ...to here
                         |      |                 (39) argument 1 (‘dst_8(D)’) from (30) could be NULL where non-null expected
                         |
<built-in>: note: argument 1 of ‘memcpy’ must be non-null

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  2157k ( 87%)
 phase opt and generate             :   0.80 ( 99%)   0.01 (100%)   0.82 (100%)   250k ( 10%)
 phase stream out                   :   0.01 (  1%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 ipa lto gimple out                 :   0.01 (  1%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 analyzer                           :   0.01 (  1%)   0.00 (  0%)   0.02 (  2%)     0  (  0%)
 analyzer: supergraph               :   0.00 (  0%)   0.00 (  0%)   0.01 (  1%)     0  (  0%)
 analyzer: processing worklist      :   0.20 ( 25%)   0.01 (100%)   0.20 ( 24%)   576  (  0%)
 analyzer: emitting diagnostics     :   0.57 ( 70%)   0.00 (  0%)   0.55 ( 67%)  1104  (  0%)
 analyzer: shortest paths           :   0.02 (  2%)   0.00 (  0%)   0.04 (  5%)     0  (  0%)
 TOTAL                              :   0.81          0.01          0.82         2484k

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)  2157k ( 61%)
 phase opt and generate             :   0.03 (100%)   0.02 (100%)   0.05 ( 83%)  1298k ( 37%)
 callgraph functions expansion      :   0.03 (100%)   0.02 (100%)   0.05 ( 83%)  1032k ( 29%)
 tree SSA incremental               :   0.00 (  0%)   0.01 ( 50%)   0.00 (  0%)    27k (  1%)
 dominator optimization             :   0.01 ( 33%)   0.00 (  0%)   0.00 (  0%)    60k (  2%)
 tree CCP                           :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)  1480  (  0%)
 tree canonical iv                  :   0.01 ( 33%)   0.00 (  0%)   0.00 (  0%)  8416  (  0%)
 expand                             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)   131k (  4%)
 loop init                          :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)   105k (  3%)
 combiner                           :   0.01 ( 33%)   0.00 (  0%)   0.00 (  0%)    46k (  1%)
 reload CSE regs                    :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)  9064  (  0%)
 rest of compilation                :   0.00 (  0%)   0.01 ( 50%)   0.01 ( 17%)    25k (  1%)
 TOTAL                              :   0.03          0.02          0.06         3524k
/usr/bin/ld: /tmp/cctgOD9q.ltrans0.ltrans.o: in function `copy_array':
<artificial>:(.text+0x1e): undefined reference to `st_mult'
/usr/bin/ld: /tmp/cctgOD9q.ltrans0.ltrans.o: in function `remove_redundant':
<artificial>:(.text+0xac): undefined reference to `st_mult'
/usr/bin/ld: <artificial>:(.text+0xdb): undefined reference to `parse_commit'
/usr/bin/ld: <artificial>:(.text+0x13a): undefined reference to `paint_down_to_common'
/usr/bin/ld: <artificial>:(.text+0x216): undefined reference to `clear_commit_marks'
/usr/bin/ld: <artificial>:(.text+0x23e): undefined reference to `clear_commit_marks'
/usr/bin/ld: <artificial>:(.text+0x258): undefined reference to `free_commit_list'
/usr/bin/ld: <artificial>:(.text+0x286): undefined reference to `clear_commit_marks'
/usr/bin/ld: /tmp/cctgOD9q.ltrans0.ltrans.o: in function `find_merge_parents':
<artificial>:(.text+0x456): undefined reference to `get_oid_hex'
/usr/bin/ld: <artificial>:(.text+0x46e): undefined reference to `parse_object'
/usr/bin/ld: <artificial>:(.text+0x48d): undefined reference to `peel_to_type'
/usr/bin/ld: <artificial>:(.text+0x4ba): undefined reference to `add_merge_parent'
/usr/bin/ld: <artificial>:(.text+0x4cc): undefined reference to `lookup_commit'
/usr/bin/ld: <artificial>:(.text+0x53a): undefined reference to `oidcmp'
/usr/bin/ld: <artificial>:(.text+0x561): undefined reference to `pop_commit'
/usr/bin/ld: /tmp/cctgOD9q.ltrans0.ltrans.o: in function `mark_redundant_parents':
<artificial>:(.text+0x608): undefined reference to `commit_list_count'
/usr/bin/ld: <artificial>:(.text+0x618): undefined reference to `commit_list_count'
/usr/bin/ld: <artificial>:(.text+0x67d): undefined reference to `free_commit_list'
/usr/bin/ld: /tmp/cctgOD9q.ltrans0.ltrans.o: in function `main':
<artificial>:(.text+0x6df): undefined reference to `free_commit_list'
collect2: error: ld returned 1 exit status
