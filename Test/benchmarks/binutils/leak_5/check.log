In file included from ./benchmarks/binutils/leak_5/binutils_leak_5.c:7:
./benchmarks/binutils/leak_5/binutils_leak_5.c: In function ‘VEC_btrace_insn_quick_insert’:
./benchmarks/binutils/leak_5/../include/vec.h:733:3: warning: implicit declaration of function ‘memmove’ [-Wimplicit-function-declaration]
  733 |   memmove (slot_ + 1, slot_, (vec_->num++ - ix_) * sizeof (T));           \
      |   ^~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:484:1: note: in expansion of macro ‘DEF_VEC_FUNC_P’
  484 | DEF_VEC_FUNC_P(T)                                                         \
      | ^~~~~~~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: note: in expansion of macro ‘DEF_VEC_I’
   11 | DEF_VEC_I(btrace_insn);
      | ^~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:8:1: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
    7 | #include "../include/vec.h"
  +++ |+#include <string.h>
    8 | 
In file included from ./benchmarks/binutils/leak_5/binutils_leak_5.c:7:
./benchmarks/binutils/leak_5/../include/vec.h:733:3: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
  733 |   memmove (slot_ + 1, slot_, (vec_->num++ - ix_) * sizeof (T));           \
      |   ^~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:484:1: note: in expansion of macro ‘DEF_VEC_FUNC_P’
  484 | DEF_VEC_FUNC_P(T)                                                         \
      | ^~~~~~~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: note: in expansion of macro ‘DEF_VEC_I’
   11 | DEF_VEC_I(btrace_insn);
      | ^~~~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:733:3: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
  733 |   memmove (slot_ + 1, slot_, (vec_->num++ - ix_) * sizeof (T));           \
      |   ^~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:484:1: note: in expansion of macro ‘DEF_VEC_FUNC_P’
  484 | DEF_VEC_FUNC_P(T)                                                         \
      | ^~~~~~~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: note: in expansion of macro ‘DEF_VEC_I’
   11 | DEF_VEC_I(btrace_insn);
      | ^~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c: In function ‘VEC_btrace_insn_ordered_remove’:
./benchmarks/binutils/leak_5/../include/vec.h:748:3: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
  748 |   memmove (slot_, slot_ + 1, (--vec_->num - ix_) * sizeof (T));           \
      |   ^~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:484:1: note: in expansion of macro ‘DEF_VEC_FUNC_P’
  484 | DEF_VEC_FUNC_P(T)                                                         \
      | ^~~~~~~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: note: in expansion of macro ‘DEF_VEC_I’
   11 | DEF_VEC_I(btrace_insn);
      | ^~~~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:748:3: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
  748 |   memmove (slot_, slot_ + 1, (--vec_->num - ix_) * sizeof (T));           \
      |   ^~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:484:1: note: in expansion of macro ‘DEF_VEC_FUNC_P’
  484 | DEF_VEC_FUNC_P(T)                                                         \
      | ^~~~~~~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: note: in expansion of macro ‘DEF_VEC_I’
   11 | DEF_VEC_I(btrace_insn);
      | ^~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c: In function ‘VEC_btrace_insn_block_remove’:
./benchmarks/binutils/leak_5/../include/vec.h:775:3: warning: incompatible implicit declaration of built-in function ‘memmove’ [-Wbuiltin-declaration-mismatch]
  775 |   memmove (slot_, slot_ + len_, (vec_->num - ix_) * sizeof (T));          \
      |   ^~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:484:1: note: in expansion of macro ‘DEF_VEC_FUNC_P’
  484 | DEF_VEC_FUNC_P(T)                                                         \
      | ^~~~~~~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: note: in expansion of macro ‘DEF_VEC_I’
   11 | DEF_VEC_I(btrace_insn);
      | ^~~~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:775:3: note: include ‘<string.h>’ or provide a declaration of ‘memmove’
  775 |   memmove (slot_, slot_ + len_, (vec_->num - ix_) * sizeof (T));          \
      |   ^~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:484:1: note: in expansion of macro ‘DEF_VEC_FUNC_P’
  484 | DEF_VEC_FUNC_P(T)                                                         \
      | ^~~~~~~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: note: in expansion of macro ‘DEF_VEC_I’
   11 | DEF_VEC_I(btrace_insn);
      | ^~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c: In function ‘VEC_btrace_insn_copy’:
./benchmarks/binutils/leak_5/../include/vec.h:540:7: warning: implicit declaration of function ‘memcpy’ [-Wimplicit-function-declaration]
  540 |       memcpy (new_vec_->vec, vec_->vec, sizeof (T) * len_);               \
      |       ^~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:485:1: note: in expansion of macro ‘DEF_VEC_ALLOC_FUNC_I’
  485 | DEF_VEC_ALLOC_FUNC_I(T)                                                   \
      | ^~~~~~~~~~~~~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: note: in expansion of macro ‘DEF_VEC_I’
   11 | DEF_VEC_I(btrace_insn);
      | ^~~~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:540:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  540 |       memcpy (new_vec_->vec, vec_->vec, sizeof (T) * len_);               \
      |       ^~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:485:1: note: in expansion of macro ‘DEF_VEC_ALLOC_FUNC_I’
  485 | DEF_VEC_ALLOC_FUNC_I(T)                                                   \
      | ^~~~~~~~~~~~~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: note: in expansion of macro ‘DEF_VEC_I’
   11 | DEF_VEC_I(btrace_insn);
      | ^~~~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:540:7: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  540 |       memcpy (new_vec_->vec, vec_->vec, sizeof (T) * len_);               \
      |       ^~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:485:1: note: in expansion of macro ‘DEF_VEC_ALLOC_FUNC_I’
  485 | DEF_VEC_ALLOC_FUNC_I(T)                                                   \
      | ^~~~~~~~~~~~~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: note: in expansion of macro ‘DEF_VEC_I’
   11 | DEF_VEC_I(btrace_insn);
      | ^~~~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:540:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  540 |       memcpy (new_vec_->vec, vec_->vec, sizeof (T) * len_);               \
      |       ^~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:485:1: note: in expansion of macro ‘DEF_VEC_ALLOC_FUNC_I’
  485 | DEF_VEC_ALLOC_FUNC_I(T)                                                   \
      | ^~~~~~~~~~~~~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: note: in expansion of macro ‘DEF_VEC_I’
   11 | DEF_VEC_I(btrace_insn);
      | ^~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c: In function ‘VEC_btrace_insn_merge’:
./benchmarks/binutils/leak_5/../include/vec.h:558:7: warning: incompatible implicit declaration of built-in function ‘memcpy’ [-Wbuiltin-declaration-mismatch]
  558 |       memcpy (new_vec_->vec, vec1_->vec, sizeof (T) * vec1_->num);        \
      |       ^~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:485:1: note: in expansion of macro ‘DEF_VEC_ALLOC_FUNC_I’
  485 | DEF_VEC_ALLOC_FUNC_I(T)                                                   \
      | ^~~~~~~~~~~~~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: note: in expansion of macro ‘DEF_VEC_I’
   11 | DEF_VEC_I(btrace_insn);
      | ^~~~~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:558:7: note: include ‘<string.h>’ or provide a declaration of ‘memcpy’
  558 |       memcpy (new_vec_->vec, vec1_->vec, sizeof (T) * vec1_->num);        \
      |       ^~~~~~
./benchmarks/binutils/leak_5/../include/vec.h:485:1: note: in expansion of macro ‘DEF_VEC_ALLOC_FUNC_I’
  485 | DEF_VEC_ALLOC_FUNC_I(T)                                                   \
      | ^~~~~~~~~~~~~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: note: in expansion of macro ‘DEF_VEC_I’
   11 | DEF_VEC_I(btrace_insn);
      | ^~~~~~~~~
./benchmarks/binutils/leak_5/binutils_leak_5.c: In function ‘main’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:49:15: warning: implicit declaration of function ‘time’ [-Wimplicit-function-declaration]
   49 |         srand(time(&t));
      |               ^~~~
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cfg                  ------------|      |      |      |      |          |          |
ompexp                           |      |      |      |      |   +100.0%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
ssa                              |      |      |      |      |     -3.2%|          |
nothrow                          |      |      |      |      |     -3.3%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
einline              ------------|      |      |      |      |          |          |
early_optimizations  ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
ethread              ------------|      |      |      |      |          |          |
esra                 ------------|      |      |      |      |          |          |
ealias               ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
iftoswitch           ------------|      |      |      |      |          |          |
profile_estimate     ------------|      |      |      |      |          |          |
local-pure-const                 |      |      |      |      |          |   +100.0%|
release_ssa          ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
=======node_fun:main=========
--------GIMPLE Cond -------
--------GIMPLE Cond -------
=======node_fun:btrace_clear=========
--------GIMPLE Cond -------
=======node_fun:VEC_btrace_insn_safe_push=========
=======node_fun:VEC_btrace_insn_reserve=========
--------GIMPLE Cond -------
=======node_fun:VEC_btrace_insn_alloc=========
=======node_fun:VEC_btrace_insn_quick_push=========
--------GIMPLE Cond -------
=======node_fun:VEC_btrace_insn_space=========
--------GIMPLE Cond -------
--------GIMPLE Cond -------
=======node_fun:vec_o_reserve=========
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
=======node_fun:calculate_allocation=========
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_49 = VDEF <.MEM_48(D)>
_1 = time (&t);
# .MEM_50 = VDEF <.MEM_49>
srand (_2);
# .MEM_51 = VDEF <.MEM_50>
bfunc_19 = malloc (24);
# .MEM_52 = VDEF <.MEM_51>
_3 = VEC_btrace_insn_alloc (10);
# .MEM_65 = VDEF <.MEM_58>
next_37 = malloc (24);
# .MEM_66 = VDEF <.MEM_65>
_6 = VEC_btrace_insn_alloc (10);
# .MEM_58 = VDEF <.MEM_46>
_8 = rand ();
# .MEM_64 = VDEF <.MEM_63>
VEC_btrace_insn_safe_push (&insn_vec_p, 55, "./benchmarks/binutils/leak_5/binutils_leak_5.c", 75);
# .MEM_59 = VDEF <.MEM_47>
btrace_clear (&btinfo);
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
# .MEM_12 = VDEF <.MEM_11>
_9 = VEC_btrace_insn_quick_push (_1, obj__7(D), file__4(D), line__5(D));
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = vec_o_reserve (0B, _1, 8, 4);
# .MEM_12 = VDEF <.MEM_11>
MEM <struct VEC_btrace_insn> [(btrace_insn *)vec__6(D)].vec[_3] = obj__9(D);
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 7 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:btrace_clear========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path btrace_clear  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:btrace_clear========= [0m
[40;42m =======start_check_funciton:btrace_clear========= [0m
[40;33m =======POP node_fun stack:btrace_clear========= [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_safe_push========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path VEC_btrace_insn_safe_push  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_quick_push========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path VEC_btrace_insn_quick_push  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_quick_push========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_quick_push========= [0m
[40;33m =======POP node_fun stack:VEC_btrace_insn_quick_push========= [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_reserve========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path VEC_btrace_insn_reserve  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:vec_o_reserve========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path vec_o_reserve  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path calculate_allocation  function_call count: 1 level :4========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:calculate_allocation========= [0m
[40;42m =======start_check_funciton:calculate_allocation========= [0m
[40;33m =======POP node_fun stack:calculate_allocation========= [0m
[40;42m =======pre_check_funciton:vec_o_reserve========= [0m
[40;42m =======start_check_funciton:vec_o_reserve========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f46e4051750
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt vec_13 = realloc (vec_6(D), _3);
    version:13
    ptr-info 0x7f46e403d960>
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:442:20: warning: use location
  442 |   unsigned alloc = calculate_allocation (pfx, reserve);
      |                    ^
this stmt is child function---calculate_allocation-----

 ================== trace ================== 
trace fucntion name:calculate_allocation 
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with vec ========= [0m
[40;36m ======= relate stmt argument:vec ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 15

======================================================================
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
bb index := 7
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 8

======================================================================
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 15

======================================================================
MEM[(struct vec_prefix *)vec_13].num = 0;
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
if (vec_13 == 0B)
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^
if (vec_13 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
Cond in fucntion vec_o_reserve basic block 3
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 4
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
_1 = (long unsigned int) alloc_9;
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:447:42: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |                                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
if (alloc_9 == 0)
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:444:6: warning: use location
  444 |   if (!alloc)
      |      ^
if (alloc_9 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:444:6: warning: use location
Cond in fucntion vec_o_reserve basic block 2
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 7
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 15

======================================================================
if (vec_6(D) == 0B)
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^
if (vec_6(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
Cond in fucntion vec_o_reserve basic block 5
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 6
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
vec_13 = realloc (vec_6(D), _3);
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
this stmt is child function---realloc-----

 ================== find ================== 
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e4051750
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt vec_13 = realloc (vec_6(D), _3);
    version:13
    ptr-info 0x7f46e403d960>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location

 ================== Start Use after free Check ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_13 == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_13 == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_6(D) == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_6(D) == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f46e40515e8
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f46e403d948>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:vec_o_reserve========= [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_space========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path VEC_btrace_insn_space  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_space========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_space========= [0m
[40;33m =======POP node_fun stack:VEC_btrace_insn_space========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_reserve========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_reserve========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f46e4049870
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _2 = *vec__10(D);
    version:2
    ptr-info 0x7f46e403d858>
# VUSE <.MEM_15(D)>
_2 = *vec__10(D);

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
In function ‘main’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
this stmt is child function---VEC_btrace_insn_space-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_space 
[40;44m =======trace_function_path VEC_btrace_insn_space  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_space========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
if (_3 == 0)
In function ‘main’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
if (_3 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
Cond in fucntion VEC_btrace_insn_reserve basic block 2
 ================== possible direct basic block ================= 
from VEC_btrace_insn_reserve basic block 3
 ================== possible direct basic block ================= 
from VEC_btrace_insn_reserve basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_4 = _3 == 0;
In function ‘main’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
extend_13 = (int) _4;
In function ‘main’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e4049870
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _2 = *vec__10(D);
    version:2
    ptr-info 0x7f46e403d858>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f46e4049948
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _5 = *vec__10(D);
    version:5
    ptr-info 0x7f46e403d870>
# VUSE <.MEM_15(D)>
_5 = *vec__10(D);

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
bb index := 3
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
In function ‘main’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
this stmt is child function---vec_o_reserve-----

 ================== trace ================== 
trace fucntion name:vec_o_reserve 
[40;44m =======trace_function_path vec_o_reserve  function_call count: 3 level :0========  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
[40;36m ======= node_fun:vec_o_reserve========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;46m =======add node_fun stack:calculate_allocation========= [0m
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
bb index := 3
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
*vec__10(D) = _6;
In function ‘main’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ABS_EXPR <alloc__8(D)>;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ABS_EXPR <alloc__8(D)>;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ABS_EXPR <alloc__8(D)>;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ABS_EXPR <alloc__8(D)>;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_1 = ABS_EXPR <alloc__8(D)>;
In function ‘main’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
In function ‘main’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
this stmt is child function---VEC_btrace_insn_space-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_space 
[40;44m =======trace_function_path VEC_btrace_insn_space  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_space========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
if (_3 == 0)
In function ‘main’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
if (_3 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
Cond in fucntion VEC_btrace_insn_reserve basic block 2
 ================== possible direct basic block ================= 
from VEC_btrace_insn_reserve basic block 3
 ================== possible direct basic block ================= 
from VEC_btrace_insn_reserve basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_4 = _3 == 0;
In function ‘main’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
extend_13 = (int) _4;
In function ‘main’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e4049948
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _5 = *vec__10(D);
    version:5
    ptr-info 0x7f46e403d870>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: Use after free error!: free location 
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:VEC_btrace_insn_reserve========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_safe_push========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_safe_push========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f46e40495e8
    type <pointer_type 0x7f46e4036348
        type <pointer_type 0x7f46e4036150 type <record_type 0x7f46e40360a8 VEC_btrace_insn>
            public unsigned DI
            size <integer_cst 0x7f46e4504bb8 constant 64>
            unit-size <integer_cst 0x7f46e4504bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4036348>>
        public unsigned DI size <integer_cst 0x7f46e4504bb8 64> unit-size <integer_cst 0x7f46e4504bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f46e4047100 vec_>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f46e403d810>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_1 = *vec__3(D);
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
_9 = VEC_btrace_insn_quick_push (_1, obj__7(D), file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
this stmt is child function---VEC_btrace_insn_quick_push-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_quick_push 
[40;44m =======trace_function_path VEC_btrace_insn_quick_push  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_quick_push========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
this stmt is child function---VEC_btrace_insn_reserve-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_reserve 
[40;44m =======trace_function_path VEC_btrace_insn_reserve  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_reserve========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:vec_o_reserve========= [0m
[40;46m =======add node_fun stack:vec_o_reserve========= [0m
[40;44m =======trace_function_path vec_o_reserve  function_call count: 3 level :1========  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
[40;36m ======= node_fun:vec_o_reserve========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;46m =======add node_fun stack:calculate_allocation========= [0m
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_space========= [0m
[40;46m =======add node_fun stack:VEC_btrace_insn_space========= [0m
[40;44m =======trace_function_path VEC_btrace_insn_space  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_space========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
this stmt is child function---VEC_btrace_insn_reserve-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_reserve 
[40;44m =======trace_function_path VEC_btrace_insn_reserve  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_reserve========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:vec_o_reserve========= [0m
[40;46m =======add node_fun stack:vec_o_reserve========= [0m
[40;44m =======trace_function_path vec_o_reserve  function_call count: 3 level :1========  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
[40;36m ======= node_fun:vec_o_reserve========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;46m =======add node_fun stack:calculate_allocation========= [0m
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_space========= [0m
[40;46m =======add node_fun stack:VEC_btrace_insn_space========= [0m
[40;44m =======trace_function_path VEC_btrace_insn_space  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_space========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e40495e8
    type <pointer_type 0x7f46e4036348
        type <pointer_type 0x7f46e4036150 type <record_type 0x7f46e40360a8 VEC_btrace_insn>
            public unsigned DI
            size <integer_cst 0x7f46e4504bb8 constant 64>
            unit-size <integer_cst 0x7f46e4504bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4036348>>
        public unsigned DI size <integer_cst 0x7f46e4504bb8 64> unit-size <integer_cst 0x7f46e4504bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f46e4047100 vec_>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f46e403d810>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: Use after free error!: free location 
   11 | DEF_VEC_I(btrace_insn);
      | ^
# VUSE <.MEM_11>
_1 = *vec__3(D);
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: Use after free error!: free location 
# VUSE <.MEM_11>
_1 = *vec__3(D);
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: Use after free error!: free location 
# .MEM_12 = VDEF <.MEM_11>
_9 = VEC_btrace_insn_quick_push (_1, obj__7(D), file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: Use after free error!: free location 
# .MEM_12 = VDEF <.MEM_11>
_9 = VEC_btrace_insn_quick_push (_1, obj__7(D), file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f46e40495a0
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _1 = *vec__3(D);
    version:1
    ptr-info 0x7f46e403d7f8>
# VUSE <.MEM_11>
_1 = *vec__3(D);

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_9 = VEC_btrace_insn_quick_push (_1, obj__7(D), file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
this stmt is child function---VEC_btrace_insn_quick_push-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_quick_push 
[40;44m =======trace_function_path VEC_btrace_insn_quick_push  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_quick_push========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:0 
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
this stmt is child function---VEC_btrace_insn_reserve-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_reserve 
[40;44m =======trace_function_path VEC_btrace_insn_reserve  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_reserve========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:vec_o_reserve========= [0m
[40;46m =======add node_fun stack:vec_o_reserve========= [0m
[40;44m =======trace_function_path vec_o_reserve  function_call count: 3 level :1========  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
[40;36m ======= node_fun:vec_o_reserve========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;46m =======add node_fun stack:calculate_allocation========= [0m
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_space========= [0m
[40;46m =======add node_fun stack:VEC_btrace_insn_space========= [0m
[40;44m =======trace_function_path VEC_btrace_insn_space  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_space========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e40495a0
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _1 = *vec__3(D);
    version:1
    ptr-info 0x7f46e403d7f8>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: Use after free error!: free location 
   11 | DEF_VEC_I(btrace_insn);
      | ^
# .MEM_12 = VDEF <.MEM_11>
_9 = VEC_btrace_insn_quick_push (_1, obj__7(D), file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

[40;33m =======POP node_fun stack:VEC_btrace_insn_safe_push========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_alloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path VEC_btrace_insn_alloc  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:vec_o_reserve========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path vec_o_reserve  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path calculate_allocation  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:calculate_allocation========= [0m
[40;42m =======start_check_funciton:calculate_allocation========= [0m
[40;33m =======POP node_fun stack:calculate_allocation========= [0m
[40;42m =======pre_check_funciton:vec_o_reserve========= [0m
[40;42m =======start_check_funciton:vec_o_reserve========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f46e4051750
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt vec_13 = realloc (vec_6(D), _3);
    version:13
    ptr-info 0x7f46e403d960>
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:442:20: warning: use location
  442 |   unsigned alloc = calculate_allocation (pfx, reserve);
      |                    ^
this stmt is child function---calculate_allocation-----

 ================== trace ================== 
trace fucntion name:calculate_allocation 
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with vec ========= [0m
[40;36m ======= relate stmt argument:vec ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 15

======================================================================
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
bb index := 7
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 8

======================================================================
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 15

======================================================================
MEM[(struct vec_prefix *)vec_13].num = 0;
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
if (vec_13 == 0B)
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^
if (vec_13 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
Cond in fucntion vec_o_reserve basic block 3
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 4
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
_1 = (long unsigned int) alloc_9;
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:447:42: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |                                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
if (alloc_9 == 0)
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:444:6: warning: use location
  444 |   if (!alloc)
      |      ^
if (alloc_9 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:444:6: warning: use location
Cond in fucntion vec_o_reserve basic block 2
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 7
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 15

======================================================================
if (vec_6(D) == 0B)
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^
if (vec_6(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
Cond in fucntion vec_o_reserve basic block 5
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 6
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
vec_13 = realloc (vec_6(D), _3);
In function ‘main’:
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
this stmt is child function---realloc-----

 ================== find ================== 
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e4051750
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt vec_13 = realloc (vec_6(D), _3);
    version:13
    ptr-info 0x7f46e403d960>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location

 ================== Start Use after free Check ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_13 == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_13 == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_6(D) == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_6(D) == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f46e40515e8
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f46e403d948>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:vec_o_reserve========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_alloc========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_alloc========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f46e4504fc0 type <pointer_type 0x7f46e4520000> constant 0>
[40;33m =======POP node_fun stack:VEC_btrace_insn_alloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:srand========= [0m
[40;33m =======POP node_fun stack:srand========= [0m
[40;42m =======pre add _ fucntion:time========= [0m
[40;33m =======POP node_fun stack:time========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f46e450c948
    type <pointer_type 0x7f46e40369d8
        type <record_type 0x7f46e4036930 btrace_function BLK
            size <integer_cst 0x7f46e4522078 constant 192>
            unit-size <integer_cst 0x7f46e4522048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036930 fields <field_decl 0x7f46e4030720 prev> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e40369d8>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f46e4dacc60 bfunc>
    def_stmt bfunc_19 = malloc (24);
    version:19
    ptr-info 0x7f46e403d708>
# .MEM_51 = VDEF <.MEM_50>
bfunc_19 = malloc (24);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
btinfo.end = bfunc_19;
./benchmarks/binutils/leak_5/binutils_leak_5.c:55:35: warning: use location
   55 |         btinfo.begin = btinfo.end = bfunc;
      |                                   ^
btinfo.end = bfunc_19;
./benchmarks/binutils/leak_5/binutils_leak_5.c:55:35: warning: use location
btrace_clear (&btinfo);
./benchmarks/binutils/leak_5/binutils_leak_5.c:79:9: warning: use location
   79 |         btrace_clear (&btinfo);
      |         ^
this stmt is child function---btrace_clear-----

 ================== trace ================== 
trace fucntion name:btrace_clear 
[40;44m =======trace_function_path btrace_clear  function_call count: 1 level :0========  [0m
# .MEM_13 = VDEF <.MEM_9>
free (it_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_9>
free (it_1);
./benchmarks/binutils/leak_5/binutils_leak_5.c:34:17: warning: use location
   34 |                 free (trash);
      |                 ^
[40;36m ======= node_fun:btrace_clear========= [0m
[40;36m ======= find relate stmt with bfunc ========= [0m
[40;36m ======= relate stmt argument:bfunc ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
btrace_clear (&btinfo);
./benchmarks/binutils/leak_5/binutils_leak_5.c:79:9: warning: use location
   79 |         btrace_clear (&btinfo);
      |         ^
this stmt is child function---btrace_clear-----

 ================== trace ================== 
trace fucntion name:btrace_clear 
[40;44m =======trace_function_path btrace_clear  function_call count: 1 level :0========  [0m
# .MEM_13 = VDEF <.MEM_9>
free (it_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_9>
free (it_1);
./benchmarks/binutils/leak_5/binutils_leak_5.c:34:17: warning: use location
   34 |                 free (trash);
      |                 ^
[40;36m ======= node_fun:btrace_clear========= [0m
[40;36m ======= find relate stmt with bfunc ========= [0m
[40;36m ======= relate stmt argument:bfunc ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
bfunc_19->prev = _4;
./benchmarks/binutils/leak_5/binutils_leak_5.c:53:21: warning: use location
   53 |         bfunc->prev = bfunc->next = NULL;
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_70 = VDEF <.MEM_69>
next_37->prev = it_11;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_70 = VDEF <.MEM_69>
next_37->prev = it_11;
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_70 = VDEF <.MEM_69>
next_37->prev = it_11;
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
next_37->prev = it_11;
./benchmarks/binutils/leak_5/binutils_leak_5.c:65:28: warning: use location
   65 |                 next->prev = it;
      |                            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_72>
it_45 = it_11->next;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_72>
it_45 = it_11->next;
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_72>
it_45 = it_11->next;
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
it_45 = it_11->next;
./benchmarks/binutils/leak_5/binutils_leak_5.c:69:20: warning: use location
   69 |                 it = it->next;
      |                    ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_69 = VDEF <.MEM_68>
it_11->next = next_37;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_69 = VDEF <.MEM_68>
it_11->next = next_37;
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_69 = VDEF <.MEM_68>
it_11->next = next_37;
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
it_11->next = next_37;
./benchmarks/binutils/leak_5/binutils_leak_5.c:64:26: warning: use location
   64 |                 it->next = next;
      |                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
btinfo.end = next_37;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
btinfo.end = next_37;
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
btinfo.end = next_37;
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
btinfo.end = next_37;
./benchmarks/binutils/leak_5/binutils_leak_5.c:68:28: warning: use location
   68 |                 btinfo.end = next;
      |                            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_71 = VDEF <.MEM_70>
next_37->next = 0B;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_71 = VDEF <.MEM_70>
next_37->next = 0B;
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_71 = VDEF <.MEM_70>
next_37->next = 0B;
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
next_37->next = 0B;
./benchmarks/binutils/leak_5/binutils_leak_5.c:66:28: warning: use location
   66 |                 next->next = NULL;
      |                            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
next_37->insn = _7;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
next_37->insn = _7;
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
next_37->insn = _7;
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
next_37->insn = _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:62:28: warning: use location
   62 |                 next->insn = insn_vec_p;
      |                            ^
bfunc_19->insn = _3;
./benchmarks/binutils/leak_5/binutils_leak_5.c:52:21: warning: use location
   52 |         bfunc->insn = VEC_alloc (btrace_insn, 10); /* allocation site */
      |                     ^
_4 = bfunc_19->next;
./benchmarks/binutils/leak_5/binutils_leak_5.c:53:28: warning: use location
   53 |         bfunc->prev = bfunc->next = NULL;
      |                            ^
bfunc_19->next = 0B;
./benchmarks/binutils/leak_5/binutils_leak_5.c:53:35: warning: use location
   53 |         bfunc->prev = bfunc->next = NULL;
      |                                   ^
bfunc_19 = malloc (24);
./benchmarks/binutils/leak_5/binutils_leak_5.c:51:17: warning: use location
   51 |         bfunc = xmalloc(sizeof(struct btrace_function));
      |                 ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e450c948
    type <pointer_type 0x7f46e40369d8
        type <record_type 0x7f46e4036930 btrace_function BLK
            size <integer_cst 0x7f46e4522078 constant 192>
            unit-size <integer_cst 0x7f46e4522048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036930 fields <field_decl 0x7f46e4030720 prev> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e40369d8>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f46e4dacc60 bfunc>
    def_stmt bfunc_19 = malloc (24);
    version:19
    ptr-info 0x7f46e403d708>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f46e450ca68
    type <pointer_type 0x7f46e40369d8
        type <record_type 0x7f46e4036930 btrace_function BLK
            size <integer_cst 0x7f46e4522078 constant 192>
            unit-size <integer_cst 0x7f46e4522048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036930 fields <field_decl 0x7f46e4030720 prev> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e40369d8>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f46e4daccf0 next>
    def_stmt next_37 = malloc (24);
    version:37
    ptr-info 0x7f46e403d768>
# .MEM_65 = VDEF <.MEM_58>
next_37 = malloc (24);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
btinfo.end = next_37;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
btinfo.end = next_37;
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
btinfo.end = next_37;
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
btinfo.end = next_37;
./benchmarks/binutils/leak_5/binutils_leak_5.c:68:28: warning: use location
   68 |                 btinfo.end = next;
      |                            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
btinfo.end = next_37;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
btinfo.end = next_37;
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_72 = VDEF <.MEM_71>
btinfo.end = next_37;
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
btinfo.end = next_37;
./benchmarks/binutils/leak_5/binutils_leak_5.c:68:28: warning: use location
   68 |                 btinfo.end = next;
      |                            ^
btrace_clear (&btinfo);
./benchmarks/binutils/leak_5/binutils_leak_5.c:79:9: warning: use location
   79 |         btrace_clear (&btinfo);
      |         ^
this stmt is child function---btrace_clear-----

 ================== trace ================== 
trace fucntion name:btrace_clear 
[40;44m =======trace_function_path btrace_clear  function_call count: 1 level :0========  [0m
# .MEM_13 = VDEF <.MEM_9>
free (it_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_9>
free (it_1);
./benchmarks/binutils/leak_5/binutils_leak_5.c:34:17: warning: use location
   34 |                 free (trash);
      |                 ^
[40;36m ======= node_fun:btrace_clear========= [0m
[40;36m ======= find relate stmt with next ========= [0m
[40;36m ======= relate stmt argument:next ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
btrace_clear (&btinfo);
./benchmarks/binutils/leak_5/binutils_leak_5.c:79:9: warning: use location
   79 |         btrace_clear (&btinfo);
      |         ^
this stmt is child function---btrace_clear-----

 ================== trace ================== 
trace fucntion name:btrace_clear 
[40;44m =======trace_function_path btrace_clear  function_call count: 1 level :0========  [0m
# .MEM_13 = VDEF <.MEM_9>
free (it_1);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_9>
free (it_1);
./benchmarks/binutils/leak_5/binutils_leak_5.c:34:17: warning: use location
   34 |                 free (trash);
      |                 ^
[40;36m ======= node_fun:btrace_clear========= [0m
[40;36m ======= find relate stmt with next ========= [0m
[40;36m ======= relate stmt argument:next ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
_4 = bfunc_19->next;
./benchmarks/binutils/leak_5/binutils_leak_5.c:53:28: warning: use location
   53 |         bfunc->prev = bfunc->next = NULL;
      |                            ^
bfunc_19->prev = _4;
./benchmarks/binutils/leak_5/binutils_leak_5.c:53:21: warning: use location
   53 |         bfunc->prev = bfunc->next = NULL;
      |                     ^
btinfo.end = bfunc_19;
./benchmarks/binutils/leak_5/binutils_leak_5.c:55:35: warning: use location
   55 |         btinfo.begin = btinfo.end = bfunc;
      |                                   ^
bfunc_19->next = 0B;
./benchmarks/binutils/leak_5/binutils_leak_5.c:53:35: warning: use location
   53 |         bfunc->prev = bfunc->next = NULL;
      |                                   ^
bfunc_19->insn = _3;
./benchmarks/binutils/leak_5/binutils_leak_5.c:52:21: warning: use location
   52 |         bfunc->insn = VEC_alloc (btrace_insn, 10); /* allocation site */
      |                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
next_37->insn = _7;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
next_37->insn = _7;
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_68 = VDEF <.MEM_67>
next_37->insn = _7;
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
next_37->insn = _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:62:28: warning: use location
   62 |                 next->insn = insn_vec_p;
      |                            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_70 = VDEF <.MEM_69>
next_37->prev = it_11;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_70 = VDEF <.MEM_69>
next_37->prev = it_11;
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_70 = VDEF <.MEM_69>
next_37->prev = it_11;
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
next_37->prev = it_11;
./benchmarks/binutils/leak_5/binutils_leak_5.c:65:28: warning: use location
   65 |                 next->prev = it;
      |                            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_72>
it_45 = it_11->next;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_72>
it_45 = it_11->next;
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_72>
it_45 = it_11->next;
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
it_45 = it_11->next;
./benchmarks/binutils/leak_5/binutils_leak_5.c:69:20: warning: use location
   69 |                 it = it->next;
      |                    ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_69 = VDEF <.MEM_68>
it_11->next = next_37;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_69 = VDEF <.MEM_68>
it_11->next = next_37;
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_69 = VDEF <.MEM_68>
it_11->next = next_37;
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
it_11->next = next_37;
./benchmarks/binutils/leak_5/binutils_leak_5.c:64:26: warning: use location
   64 |                 it->next = next;
      |                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_71 = VDEF <.MEM_70>
next_37->next = 0B;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_71 = VDEF <.MEM_70>
next_37->next = 0B;
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_71 = VDEF <.MEM_70>
next_37->next = 0B;
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
next_37->next = 0B;
./benchmarks/binutils/leak_5/binutils_leak_5.c:66:28: warning: use location
   66 |                 next->next = NULL;
      |                            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_65 = VDEF <.MEM_58>
next_37 = malloc (24);
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_65 = VDEF <.MEM_58>
next_37 = malloc (24);
bb index := 3
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_65 = VDEF <.MEM_58>
next_37 = malloc (24);
bb index := 3
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
next_37 = malloc (24);
./benchmarks/binutils/leak_5/binutils_leak_5.c:59:24: warning: use location
   59 |                 next = xmalloc(sizeof(struct btrace_function));
      |                        ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e450ca68
    type <pointer_type 0x7f46e40369d8
        type <record_type 0x7f46e4036930 btrace_function BLK
            size <integer_cst 0x7f46e4522078 constant 192>
            unit-size <integer_cst 0x7f46e4522048 constant 24>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036930 fields <field_decl 0x7f46e4030720 prev> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e40369d8>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f46e4daccf0 next>
    def_stmt next_37 = malloc (24);
    version:37
    ptr-info 0x7f46e403d768>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f46e4700b80
    type <pointer_type 0x7f46e4036c78
        type <integer_type 0x7f46e4036b28 time_t DI
            size <integer_cst 0x7f46e4504bb8 constant 64>
            unit-size <integer_cst 0x7f46e4504bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4519738 precision:64 min <integer_cst 0x7f46e4504e40 -9223372036854775808> max <integer_cst 0x7f46e4504e58 9223372036854775807> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036c78>>
        unsigned DI size <integer_cst 0x7f46e4504bb8 64> unit-size <integer_cst 0x7f46e4504bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7f46e4dacea0 t type <integer_type 0x7f46e4036b28 time_t>
        addressable DI ./benchmarks/binutils/leak_5/binutils_leak_5.c:43:9 size <integer_cst 0x7f46e4504bb8 64> unit-size <integer_cst 0x7f46e4504bd0 8>
        align:64 warn_if_not_align:0 context <function_decl 0x7f46e4035200 main>
        chain <var_decl 0x7f46e4dace10 btinfo type <record_type 0x7f46e40367e0 btrace_thread_info>
            addressable TI ./benchmarks/binutils/leak_5/binutils_leak_5.c:45:28
            size <integer_cst 0x7f46e4504c00 constant 128>
            unit-size <integer_cst 0x7f46e4504c18 constant 16>
            align:64 warn_if_not_align:0 context <function_decl 0x7f46e4035200 main> chain <var_decl 0x7f46e4dacd80 it>>>
    ./benchmarks/binutils/leak_5/binutils_leak_5.c:49:8 start: ./benchmarks/binutils/leak_5/binutils_leak_5.c:49:8 finish: ./benchmarks/binutils/leak_5/binutils_leak_5.c:49:8>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f46e450c630
    type <integer_type 0x7f46e4519690 unsigned int public unsigned SI
        size <integer_cst 0x7f46e4504df8 constant 32>
        unit-size <integer_cst 0x7f46e4504e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4519690 precision:32 min <integer_cst 0x7f46e4504e28 0> max <integer_cst 0x7f46e4504de0 4294967295>
        pointer_to_this <pointer_type 0x7f46e4525690>>
   
    def_stmt _2 = (unsigned int) _1;
    version:2>
_2 = (unsigned int) _1;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_50 = VDEF <.MEM_49>
srand (_2);
srand (_2);
./benchmarks/binutils/leak_5/binutils_leak_5.c:49:9: warning: use location
   49 |         srand(time(&t));
      |         ^
this stmt is child function---srand-----

 ================== trace ================== 
trace fucntion name:srand 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_50 = VDEF <.MEM_49>
srand (_2);
srand (_2);
./benchmarks/binutils/leak_5/binutils_leak_5.c:49:9: warning: use location
this stmt is child function---srand-----

 ================== trace ================== 
trace fucntion name:srand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e450c630
    type <integer_type 0x7f46e4519690 unsigned int public unsigned SI
        size <integer_cst 0x7f46e4504df8 constant 32>
        unit-size <integer_cst 0x7f46e4504e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4519690 precision:32 min <integer_cst 0x7f46e4504e28 0> max <integer_cst 0x7f46e4504de0 4294967295>
        pointer_to_this <pointer_type 0x7f46e4525690>>
   
    def_stmt _2 = (unsigned int) _1;
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f46e403d2e8 type <integer_type 0x7f46e45197e0 long unsigned int> constant 24>

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f46e403d300 type <integer_type 0x7f46e45195e8 int> constant 10>

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f46e403d300 type <integer_type 0x7f46e45195e8 int> constant 10>

dot graph START

======================================================================
 <ssa_name 0x7f46e450c7e0
    type <integer_type 0x7f46e45195e8 int public SI
        size <integer_cst 0x7f46e4504df8 constant 32>
        unit-size <integer_cst 0x7f46e4504e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e45195e8 precision:32 min <integer_cst 0x7f46e4504db0 -2147483648> max <integer_cst 0x7f46e4504dc8 2147483647>
        pointer_to_this <pointer_type 0x7f46e45209d8>>
   
    def_stmt _8 = rand ();
    version:8>
# .MEM_58 = VDEF <.MEM_46>
_8 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_9 = _8 % 2;
bb index := 4
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_9 = _8 % 2;
bb index := 4
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_9 = _8 % 2;
bb index := 4
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_9 = _8 % 2;
./benchmarks/binutils/leak_5/binutils_leak_5.c:58:16: warning: use location
   58 |         while (__RANDBOOL) {
      |                ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_9 == 1)
bb index := 4
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_9 == 1)
bb index := 4
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_9 == 1)
bb index := 4
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_9 == 1)
./benchmarks/binutils/leak_5/binutils_leak_5.c:58:16: warning: use location
   58 |         while (__RANDBOOL) {
      |                ^
if (_9 == 1)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/binutils_leak_5.c:58:16: warning: use location
Cond in fucntion main basic block 4
 ================== possible direct basic block ================= 
from main basic block 3
 ================== possible direct basic block ================= 
from main basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_58 = VDEF <.MEM_46>
_8 = rand ();
bb index := 4
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_58 = VDEF <.MEM_46>
_8 = rand ();
bb index := 4
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
   39 | }
      | ^
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return;
./benchmarks/binutils/leak_5/binutils_leak_5.c:39:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_58 = VDEF <.MEM_46>
_8 = rand ();
bb index := 4
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_13(D)>
return _7;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_8 = rand ();
./benchmarks/binutils/leak_5/binutils_leak_5.c:58:16: warning: use location
   58 |         while (__RANDBOOL) {
      |                ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e450c7e0
    type <integer_type 0x7f46e45195e8 int public SI
        size <integer_cst 0x7f46e4504df8 constant 32>
        unit-size <integer_cst 0x7f46e4504e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e45195e8 precision:32 min <integer_cst 0x7f46e4504db0 -2147483648> max <integer_cst 0x7f46e4504dc8 2147483647>
        pointer_to_this <pointer_type 0x7f46e45209d8>>
   
    def_stmt _8 = rand ();
    version:8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f46e4700c80
    type <pointer_type 0x7f46e4036348
        type <pointer_type 0x7f46e4036150 type <record_type 0x7f46e40360a8 VEC_btrace_insn>
            public unsigned DI
            size <integer_cst 0x7f46e4504bb8 constant 64>
            unit-size <integer_cst 0x7f46e4504bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4036348>>
        public unsigned DI size <integer_cst 0x7f46e4504bb8 64> unit-size <integer_cst 0x7f46e4504bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7f46e4dacbd0 insn_vec_p type <pointer_type 0x7f46e4036150>
        addressable unsigned DI ./benchmarks/binutils/leak_5/binutils_leak_5.c:47:19 size <integer_cst 0x7f46e4504bb8 64> unit-size <integer_cst 0x7f46e4504bd0 8>
        align:64 warn_if_not_align:0 context <function_decl 0x7f46e4035200 main>>
    ./benchmarks/binutils/leak_5/binutils_leak_5.c:75:3 start: ./benchmarks/binutils/leak_5/binutils_leak_5.c:75:3 finish: ./benchmarks/binutils/leak_5/binutils_leak_5.c:75:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f46e4700ce0
    type <pointer_type 0x7f46e4036888
        type <record_type 0x7f46e40367e0 btrace_thread_info TI
            size <integer_cst 0x7f46e4504c00 constant 128>
            unit-size <integer_cst 0x7f46e4504c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e40367e0 fields <field_decl 0x7f46e4030558 begin> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036888>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    arg:0 <var_decl 0x7f46e4dace10 btinfo type <record_type 0x7f46e40367e0 btrace_thread_info>
        addressable TI ./benchmarks/binutils/leak_5/binutils_leak_5.c:45:28 size <integer_cst 0x7f46e4504c00 128> unit-size <integer_cst 0x7f46e4504c18 16>
        align:64 warn_if_not_align:0 context <function_decl 0x7f46e4035200 main>
        chain <var_decl 0x7f46e4dacd80 it type <pointer_type 0x7f46e40369d8>
            unsigned DI ./benchmarks/binutils/leak_5/binutils_leak_5.c:46:26 size <integer_cst 0x7f46e4504bb8 64> unit-size <integer_cst 0x7f46e4504bd0 8>
            align:64 warn_if_not_align:0 context <function_decl 0x7f46e4035200 main> chain <var_decl 0x7f46e4daccf0 next>>>
    ./benchmarks/binutils/leak_5/binutils_leak_5.c:79:2 start: ./benchmarks/binutils/leak_5/binutils_leak_5.c:79:2 finish: ./benchmarks/binutils/leak_5/binutils_leak_5.c:79:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:btrace_clear========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path btrace_clear  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:btrace_clear========= [0m
[40;42m =======start_check_funciton:btrace_clear========= [0m
[40;33m =======POP node_fun stack:btrace_clear========= [0m
[40;44m =======node_fun:VEC_btrace_insn_safe_push========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path VEC_btrace_insn_safe_push  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_quick_push========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path VEC_btrace_insn_quick_push  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_quick_push========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_quick_push========= [0m
[40;33m =======POP node_fun stack:VEC_btrace_insn_quick_push========= [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_reserve========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path VEC_btrace_insn_reserve  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:vec_o_reserve========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path vec_o_reserve  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path calculate_allocation  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:calculate_allocation========= [0m
[40;42m =======start_check_funciton:calculate_allocation========= [0m
[40;33m =======POP node_fun stack:calculate_allocation========= [0m
[40;42m =======pre_check_funciton:vec_o_reserve========= [0m
[40;42m =======start_check_funciton:vec_o_reserve========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f46e4051750
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt vec_13 = realloc (vec_6(D), _3);
    version:13
    ptr-info 0x7f46e403d960>
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/../include/vec.h:442:20: warning: use location
  442 |   unsigned alloc = calculate_allocation (pfx, reserve);
      |                    ^
this stmt is child function---calculate_allocation-----

 ================== trace ================== 
trace fucntion name:calculate_allocation 
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with vec ========= [0m
[40;36m ======= relate stmt argument:vec ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 15

======================================================================
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
bb index := 7
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 8

======================================================================
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
In function ‘VEC_btrace_insn_safe_push’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 15

======================================================================
MEM[(struct vec_prefix *)vec_13].num = 0;
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
if (vec_13 == 0B)
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^
if (vec_13 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
Cond in fucntion vec_o_reserve basic block 3
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 4
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
_1 = (long unsigned int) alloc_9;
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/../include/vec.h:447:42: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |                                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
if (alloc_9 == 0)
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/../include/vec.h:444:6: warning: use location
  444 |   if (!alloc)
      |      ^
if (alloc_9 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:444:6: warning: use location
Cond in fucntion vec_o_reserve basic block 2
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 7
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 15

======================================================================
if (vec_6(D) == 0B)
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^
if (vec_6(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
Cond in fucntion vec_o_reserve basic block 5
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 6
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
vec_13 = realloc (vec_6(D), _3);
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
this stmt is child function---realloc-----

 ================== find ================== 
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e4051750
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt vec_13 = realloc (vec_6(D), _3);
    version:13
    ptr-info 0x7f46e403d960>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location

 ================== Start Use after free Check ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_13 == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_13 == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_6(D) == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_6(D) == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f46e40515e8
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f46e403d948>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:vec_o_reserve========= [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_space========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path VEC_btrace_insn_space  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_space========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_space========= [0m
[40;33m =======POP node_fun stack:VEC_btrace_insn_space========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_reserve========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_reserve========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f46e4049870
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _2 = *vec__10(D);
    version:2
    ptr-info 0x7f46e403d858>
# VUSE <.MEM_15(D)>
_2 = *vec__10(D);

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
this stmt is child function---VEC_btrace_insn_space-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_space 
[40;44m =======trace_function_path VEC_btrace_insn_space  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_space========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
if (_3 == 0)
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
if (_3 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
Cond in fucntion VEC_btrace_insn_reserve basic block 2
 ================== possible direct basic block ================= 
from VEC_btrace_insn_reserve basic block 3
 ================== possible direct basic block ================= 
from VEC_btrace_insn_reserve basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_4 = _3 == 0;
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
extend_13 = (int) _4;
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e4049870
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _2 = *vec__10(D);
    version:2
    ptr-info 0x7f46e403d858>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f46e4049948
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _5 = *vec__10(D);
    version:5
    ptr-info 0x7f46e403d870>
# VUSE <.MEM_15(D)>
_5 = *vec__10(D);

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
bb index := 3
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
this stmt is child function---vec_o_reserve-----

 ================== trace ================== 
trace fucntion name:vec_o_reserve 
[40;44m =======trace_function_path vec_o_reserve  function_call count: 3 level :0========  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
[40;36m ======= node_fun:vec_o_reserve========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;46m =======add node_fun stack:calculate_allocation========= [0m
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
bb index := 3
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
*vec__10(D) = _6;
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ABS_EXPR <alloc__8(D)>;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ABS_EXPR <alloc__8(D)>;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ABS_EXPR <alloc__8(D)>;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ABS_EXPR <alloc__8(D)>;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_1 = ABS_EXPR <alloc__8(D)>;
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
this stmt is child function---VEC_btrace_insn_space-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_space 
[40;44m =======trace_function_path VEC_btrace_insn_space  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_space========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
if (_3 == 0)
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
if (_3 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
Cond in fucntion VEC_btrace_insn_reserve basic block 2
 ================== possible direct basic block ================= 
from VEC_btrace_insn_reserve basic block 3
 ================== possible direct basic block ================= 
from VEC_btrace_insn_reserve basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_4 = _3 == 0;
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
extend_13 = (int) _4;
In function ‘VEC_btrace_insn_safe_push’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e4049948
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _5 = *vec__10(D);
    version:5
    ptr-info 0x7f46e403d870>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: Use after free error!: free location 
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:VEC_btrace_insn_reserve========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_safe_push========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_safe_push========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f46e40495e8
    type <pointer_type 0x7f46e4036348
        type <pointer_type 0x7f46e4036150 type <record_type 0x7f46e40360a8 VEC_btrace_insn>
            public unsigned DI
            size <integer_cst 0x7f46e4504bb8 constant 64>
            unit-size <integer_cst 0x7f46e4504bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4036348>>
        public unsigned DI size <integer_cst 0x7f46e4504bb8 64> unit-size <integer_cst 0x7f46e4504bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f46e4047100 vec_>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f46e403d810>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_1 = *vec__3(D);
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
_9 = VEC_btrace_insn_quick_push (_1, obj__7(D), file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
this stmt is child function---VEC_btrace_insn_quick_push-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_quick_push 
[40;44m =======trace_function_path VEC_btrace_insn_quick_push  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_quick_push========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
this stmt is child function---VEC_btrace_insn_reserve-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_reserve 
[40;44m =======trace_function_path VEC_btrace_insn_reserve  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_reserve========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:vec_o_reserve========= [0m
[40;46m =======add node_fun stack:vec_o_reserve========= [0m
[40;44m =======trace_function_path vec_o_reserve  function_call count: 3 level :1========  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
[40;36m ======= node_fun:vec_o_reserve========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;46m =======add node_fun stack:calculate_allocation========= [0m
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_space========= [0m
[40;46m =======add node_fun stack:VEC_btrace_insn_space========= [0m
[40;44m =======trace_function_path VEC_btrace_insn_space  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_space========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
this stmt is child function---VEC_btrace_insn_reserve-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_reserve 
[40;44m =======trace_function_path VEC_btrace_insn_reserve  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_reserve========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:vec_o_reserve========= [0m
[40;46m =======add node_fun stack:vec_o_reserve========= [0m
[40;44m =======trace_function_path vec_o_reserve  function_call count: 3 level :1========  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
[40;36m ======= node_fun:vec_o_reserve========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;46m =======add node_fun stack:calculate_allocation========= [0m
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_space========= [0m
[40;46m =======add node_fun stack:VEC_btrace_insn_space========= [0m
[40;44m =======trace_function_path VEC_btrace_insn_space  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_space========= [0m
[40;36m ======= find relate stmt with vec_ ========= [0m
[40;36m ======= relate stmt argument:vec_ ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e40495e8
    type <pointer_type 0x7f46e4036348
        type <pointer_type 0x7f46e4036150 type <record_type 0x7f46e40360a8 VEC_btrace_insn>
            public unsigned DI
            size <integer_cst 0x7f46e4504bb8 constant 64>
            unit-size <integer_cst 0x7f46e4504bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4036348>>
        public unsigned DI size <integer_cst 0x7f46e4504bb8 64> unit-size <integer_cst 0x7f46e4504bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f46e4047100 vec_>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f46e403d810>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: Use after free error!: free location 
   11 | DEF_VEC_I(btrace_insn);
      | ^
# VUSE <.MEM_11>
_1 = *vec__3(D);
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: Use after free error!: free location 
# VUSE <.MEM_11>
_1 = *vec__3(D);
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: Use after free error!: free location 
# .MEM_12 = VDEF <.MEM_11>
_9 = VEC_btrace_insn_quick_push (_1, obj__7(D), file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: Use after free error!: free location 
# .MEM_12 = VDEF <.MEM_11>
_9 = VEC_btrace_insn_quick_push (_1, obj__7(D), file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f46e40495a0
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _1 = *vec__3(D);
    version:1
    ptr-info 0x7f46e403d7f8>
# VUSE <.MEM_11>
_1 = *vec__3(D);

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_9 = VEC_btrace_insn_quick_push (_1, obj__7(D), file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
this stmt is child function---VEC_btrace_insn_quick_push-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_quick_push 
[40;44m =======trace_function_path VEC_btrace_insn_quick_push  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_quick_push========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:0 
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
this stmt is child function---VEC_btrace_insn_reserve-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_reserve 
[40;44m =======trace_function_path VEC_btrace_insn_reserve  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_reserve========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:vec_o_reserve========= [0m
[40;46m =======add node_fun stack:vec_o_reserve========= [0m
[40;44m =======trace_function_path vec_o_reserve  function_call count: 3 level :1========  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
[40;36m ======= node_fun:vec_o_reserve========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;46m =======add node_fun stack:calculate_allocation========= [0m
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_space========= [0m
[40;46m =======add node_fun stack:VEC_btrace_insn_space========= [0m
[40;44m =======trace_function_path VEC_btrace_insn_space  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_space========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e40495a0
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _1 = *vec__3(D);
    version:1
    ptr-info 0x7f46e403d7f8>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_11 = VDEF <.MEM_10(D)>
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: Use after free error!: free location 
   11 | DEF_VEC_I(btrace_insn);
      | ^
# .MEM_12 = VDEF <.MEM_11>
_9 = VEC_btrace_insn_quick_push (_1, obj__7(D), file__4(D), line__5(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================

[40;33m =======POP node_fun stack:VEC_btrace_insn_safe_push========= [0m
[40;44m =======node_fun:VEC_btrace_insn_reserve========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path VEC_btrace_insn_reserve  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:vec_o_reserve========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path vec_o_reserve  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path calculate_allocation  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:calculate_allocation========= [0m
[40;42m =======start_check_funciton:calculate_allocation========= [0m
[40;33m =======POP node_fun stack:calculate_allocation========= [0m
[40;42m =======pre_check_funciton:vec_o_reserve========= [0m
[40;42m =======start_check_funciton:vec_o_reserve========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f46e4051750
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt vec_13 = realloc (vec_6(D), _3);
    version:13
    ptr-info 0x7f46e403d960>
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/../include/vec.h:442:20: warning: use location
  442 |   unsigned alloc = calculate_allocation (pfx, reserve);
      |                    ^
this stmt is child function---calculate_allocation-----

 ================== trace ================== 
trace fucntion name:calculate_allocation 
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with vec ========= [0m
[40;36m ======= relate stmt argument:vec ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 15

======================================================================
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
bb index := 7
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 8

======================================================================
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
In function ‘VEC_btrace_insn_reserve’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 15

======================================================================
MEM[(struct vec_prefix *)vec_13].num = 0;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
if (vec_13 == 0B)
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^
if (vec_13 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
Cond in fucntion vec_o_reserve basic block 3
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 4
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
_1 = (long unsigned int) alloc_9;
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/../include/vec.h:447:42: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |                                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
if (alloc_9 == 0)
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/../include/vec.h:444:6: warning: use location
  444 |   if (!alloc)
      |      ^
if (alloc_9 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:444:6: warning: use location
Cond in fucntion vec_o_reserve basic block 2
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 7
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 15

======================================================================
if (vec_6(D) == 0B)
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^
if (vec_6(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
Cond in fucntion vec_o_reserve basic block 5
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 6
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
vec_13 = realloc (vec_6(D), _3);
In function ‘VEC_btrace_insn_reserve’:
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
this stmt is child function---realloc-----

 ================== find ================== 
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e4051750
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt vec_13 = realloc (vec_6(D), _3);
    version:13
    ptr-info 0x7f46e403d960>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location

 ================== Start Use after free Check ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_13 == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_13 == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_6(D) == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_6(D) == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f46e40515e8
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f46e403d948>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:vec_o_reserve========= [0m
[40;42m =======pre add _ fucntion:VEC_btrace_insn_space========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path VEC_btrace_insn_space  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_space========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_space========= [0m
[40;33m =======POP node_fun stack:VEC_btrace_insn_space========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_reserve========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_reserve========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f46e4049870
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _2 = *vec__10(D);
    version:2
    ptr-info 0x7f46e403d858>
# VUSE <.MEM_15(D)>
_2 = *vec__10(D);

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
this stmt is child function---VEC_btrace_insn_space-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_space 
[40;44m =======trace_function_path VEC_btrace_insn_space  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_space========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
if (_3 == 0)
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
if (_3 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
Cond in fucntion VEC_btrace_insn_reserve basic block 2
 ================== possible direct basic block ================= 
from VEC_btrace_insn_reserve basic block 3
 ================== possible direct basic block ================= 
from VEC_btrace_insn_reserve basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_4 = _3 == 0;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
extend_13 = (int) _4;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e4049870
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _2 = *vec__10(D);
    version:2
    ptr-info 0x7f46e403d858>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f46e4049948
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _5 = *vec__10(D);
    version:5
    ptr-info 0x7f46e403d870>
# VUSE <.MEM_15(D)>
_5 = *vec__10(D);

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
this stmt is child function---vec_o_reserve-----

 ================== trace ================== 
trace fucntion name:vec_o_reserve 
[40;44m =======trace_function_path vec_o_reserve  function_call count: 3 level :0========  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
[40;31m  find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
[40;36m ======= node_fun:vec_o_reserve========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;46m =======add node_fun stack:calculate_allocation========= [0m
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
*vec__10(D) = _6;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ABS_EXPR <alloc__8(D)>;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ABS_EXPR <alloc__8(D)>;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ABS_EXPR <alloc__8(D)>;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = ABS_EXPR <alloc__8(D)>;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_1 = ABS_EXPR <alloc__8(D)>;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
this stmt is child function---VEC_btrace_insn_space-----

 ================== trace ================== 
trace fucntion name:VEC_btrace_insn_space 
[40;44m =======trace_function_path VEC_btrace_insn_space  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:VEC_btrace_insn_space========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 0)
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
if (_3 == 0)
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
if (_3 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
Cond in fucntion VEC_btrace_insn_reserve basic block 2
 ================== possible direct basic block ================= 
from VEC_btrace_insn_reserve basic block 3
 ================== possible direct basic block ================= 
from VEC_btrace_insn_reserve basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = _3 == 0;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
_4 = _3 == 0;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
extend_13 = (int) _4;
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
extend_13 = (int) _4;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e4049948
    type <pointer_type 0x7f46e4036150
        type <record_type 0x7f46e40360a8 VEC_btrace_insn BLK
            size <integer_cst 0x7f46e40247c8 constant 96>
            unit-size <integer_cst 0x7f46e40247b0 constant 12>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f46e4036000 fields <field_decl 0x7f46e4030428 num> context <translation_unit_decl 0x7f46e450f168 ./benchmarks/binutils/leak_5/binutils_leak_5.c>
            pointer_to_this <pointer_type 0x7f46e4036150>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e4036348>>
   
    def_stmt _5 = *vec__10(D);
    version:5
    ptr-info 0x7f46e403d870>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: Use after free error!: free location 
# .MEM_17 = VDEF <.MEM_16>
*vec__10(D) = _6;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:VEC_btrace_insn_reserve========= [0m
[40;44m =======node_fun:VEC_btrace_insn_alloc========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path VEC_btrace_insn_alloc  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:vec_o_reserve========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path vec_o_reserve  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path calculate_allocation  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:calculate_allocation========= [0m
[40;42m =======start_check_funciton:calculate_allocation========= [0m
[40;33m =======POP node_fun stack:calculate_allocation========= [0m
[40;42m =======pre_check_funciton:vec_o_reserve========= [0m
[40;42m =======start_check_funciton:vec_o_reserve========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f46e4051750
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt vec_13 = realloc (vec_6(D), _3);
    version:13
    ptr-info 0x7f46e403d960>
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
In function ‘VEC_btrace_insn_alloc’:
./benchmarks/binutils/leak_5/../include/vec.h:442:20: warning: use location
  442 |   unsigned alloc = calculate_allocation (pfx, reserve);
      |                    ^
this stmt is child function---calculate_allocation-----

 ================== trace ================== 
trace fucntion name:calculate_allocation 
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with vec ========= [0m
[40;36m ======= relate stmt argument:vec ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 15

======================================================================
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
In function ‘VEC_btrace_insn_alloc’:
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
bb index := 7
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 8

======================================================================
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
In function ‘VEC_btrace_insn_alloc’:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 15

======================================================================
MEM[(struct vec_prefix *)vec_13].num = 0;
In function ‘VEC_btrace_insn_alloc’:
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
if (vec_13 == 0B)
In function ‘VEC_btrace_insn_alloc’:
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^
if (vec_13 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
Cond in fucntion vec_o_reserve basic block 3
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 4
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
_1 = (long unsigned int) alloc_9;
In function ‘VEC_btrace_insn_alloc’:
./benchmarks/binutils/leak_5/../include/vec.h:447:42: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |                                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
if (alloc_9 == 0)
In function ‘VEC_btrace_insn_alloc’:
./benchmarks/binutils/leak_5/../include/vec.h:444:6: warning: use location
  444 |   if (!alloc)
      |      ^
if (alloc_9 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:444:6: warning: use location
Cond in fucntion vec_o_reserve basic block 2
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 7
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_14>
return extend_13;
In function ‘vec_o_reserve’:
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 15

======================================================================
if (vec_6(D) == 0B)
In function ‘VEC_btrace_insn_alloc’:
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^
if (vec_6(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
Cond in fucntion vec_o_reserve basic block 5
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 6
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
vec_13 = realloc (vec_6(D), _3);
In function ‘VEC_btrace_insn_alloc’:
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
this stmt is child function---realloc-----

 ================== find ================== 
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e4051750
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt vec_13 = realloc (vec_6(D), _3);
    version:13
    ptr-info 0x7f46e403d960>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location

 ================== Start Use after free Check ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_13 == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_13 == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_6(D) == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_6(D) == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f46e40515e8
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f46e403d948>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:vec_o_reserve========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_alloc========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_alloc========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f46e4504fc0 type <pointer_type 0x7f46e4520000> constant 0>
[40;33m =======POP node_fun stack:VEC_btrace_insn_alloc========= [0m
[40;44m =======node_fun:VEC_btrace_insn_quick_push========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path VEC_btrace_insn_quick_push  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_quick_push========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_quick_push========= [0m
[40;33m =======POP node_fun stack:VEC_btrace_insn_quick_push========= [0m
[40;44m =======node_fun:VEC_btrace_insn_space========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path VEC_btrace_insn_space  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:VEC_btrace_insn_space========= [0m
[40;42m =======start_check_funciton:VEC_btrace_insn_space========= [0m
[40;33m =======POP node_fun stack:VEC_btrace_insn_space========= [0m
[40;44m =======node_fun:vec_o_reserve========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path vec_o_reserve  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:calculate_allocation========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path calculate_allocation  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:calculate_allocation========= [0m
[40;42m =======start_check_funciton:calculate_allocation========= [0m
[40;33m =======POP node_fun stack:calculate_allocation========= [0m
[40;42m =======pre_check_funciton:vec_o_reserve========= [0m
[40;42m =======start_check_funciton:vec_o_reserve========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f46e4051750
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt vec_13 = realloc (vec_6(D), _3);
    version:13
    ptr-info 0x7f46e403d960>
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);

 ================== trace ptable================== 
trace fucntion name:realloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---realloc-----
this Reserved word function ------realloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_62>
return 0;
In function ‘vec_o_reserve’:
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_15(D)>
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
./benchmarks/binutils/leak_5/../include/vec.h:442:20: warning: use location
  442 |   unsigned alloc = calculate_allocation (pfx, reserve);
      |                    ^
this stmt is child function---calculate_allocation-----

 ================== trace ================== 
trace fucntion name:calculate_allocation 
[40;44m =======trace_function_path calculate_allocation  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:calculate_allocation========= [0m
[40;36m ======= find relate stmt with vec ========= [0m
[40;36m ======= relate stmt argument:vec ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
bb index := 5
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 15

======================================================================
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
bb index := 7
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 7 ,possiable got to succ := 8

======================================================================
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
bb index := 6
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 6 ,possiable got to succ := 15

======================================================================
MEM[(struct vec_prefix *)vec_13].num = 0;
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_13 == 0B)
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
if (vec_13 == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^
if (vec_13 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
Cond in fucntion vec_o_reserve basic block 3
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 4
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_1 = (long unsigned int) alloc_9;
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
_1 = (long unsigned int) alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:447:42: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |                                          ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (alloc_9 == 0)
bb index := 2
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 15

======================================================================
if (alloc_9 == 0)
./benchmarks/binutils/leak_5/../include/vec.h:444:6: warning: use location
  444 |   if (!alloc)
      |      ^
if (alloc_9 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:444:6: warning: use location
Cond in fucntion vec_o_reserve basic block 2
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 7
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (vec_6(D) == 0B)
bb index := 5
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 15

======================================================================
if (vec_6(D) == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^
if (vec_6(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
Cond in fucntion vec_o_reserve basic block 5
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 6
 ================== possible direct basic block ================= 
from vec_o_reserve basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
beacuse in succ := 8 have return or exit
# VUSE <.MEM_62>
return 0;
<built-in>: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 8

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return extend_13;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
   11 | DEF_VEC_I(btrace_insn);
      | ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return slot__8;
./benchmarks/binutils/leak_5/binutils_leak_5.c:11:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_14>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
bb index := 3
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
beacuse in succ := 15 have return or exit
# VUSE <.MEM_22(D)>
return _12;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 15

======================================================================
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
this stmt is child function---realloc-----

 ================== find ================== 
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f46e4051750
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt vec_13 = realloc (vec_6(D), _3);
    version:13
    ptr-info 0x7f46e403d960>
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: use location

 ================== Start Use after free Check ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
# .MEM_17 = VDEF <.MEM_16>
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
./benchmarks/binutils/leak_5/../include/vec.h:450:37: warning: use location
  450 |   ((struct vec_prefix *)vec)->alloc = alloc;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
_4 = PHI <0B(2), vec_13(5), vec_13(6)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
# .MEM_18 = VDEF <.MEM_17>
MEM[(struct vec_prefix *)vec_13].num = 0;
./benchmarks/binutils/leak_5/../include/vec.h:452:37: warning: use location
  452 |     ((struct vec_prefix *)vec)->num = 0;
      |                                     ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_13 == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_13 == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:448:12: warning: use location
  448 |         if (!vec) exit (1);
      |            ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_6(D) == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_16 = VDEF <.MEM_15(D)>
vec_13 = realloc (vec_6(D), _3);
./benchmarks/binutils/leak_5/../include/vec.h:447:9: warning: Use after free error!: free location 
  447 |   vec = realloc (vec, vec_offset + alloc * elt_size);
      |         ^
if (vec_6(D) == 0B)
./benchmarks/binutils/leak_5/../include/vec.h:451:6: warning: use location
  451 |   if (!pfx)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f46e40515e8
    type <pointer_type 0x7f46e4520000
        type <void_type 0x7f46e4519f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f46e4520000>>
        public unsigned DI
        size <integer_cst 0x7f46e4504bb8 constant 64>
        unit-size <integer_cst 0x7f46e4504bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f46e45259d8>>
    var <parm_decl 0x7f46e4047980 vec>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f46e403d948>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:vec_o_reserve========= [0m
[40;44m =======node_fun:calculate_allocation========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path calculate_allocation  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre_check_funciton:calculate_allocation========= [0m
[40;42m =======start_check_funciton:calculate_allocation========= [0m
[40;33m =======POP node_fun stack:calculate_allocation========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
_1 = time (&t);
_2 = (unsigned int) _1;
srand (_2);
bfunc_19 = malloc (24);
_3 = VEC_btrace_insn_alloc (10);
bfunc_19->insn = _3;
bfunc_19->next = 0B;
_4 = bfunc_19->next;
bfunc_19->prev = _4;
btinfo.end = bfunc_19;
_5 = btinfo.end;
btinfo.begin = _5;
it_26 = btinfo.begin;
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
next_37 = malloc (24);
_6 = VEC_btrace_insn_alloc (10);
insn_vec_p = _6;
_7 = insn_vec_p;
next_37->insn = _7;
it_11->next = next_37;
next_37->prev = it_11;
next_37->next = 0B;
btinfo.end = next_37;
it_45 = it_11->next;

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# it_11 = PHI <it_26(2), it_45(3)>
_8 = rand ();
_9 = _8 % 2;
if (_9 == 1)
  goto <bb 3>; [89.00%]
else
  goto <bb 5>; [11.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 118111600]:
it_28 = btinfo.begin;
goto <bb 7>; [100.00%]

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 955630225]:
_10 = it_12->insn;
insn_vec_p = _10;
VEC_btrace_insn_safe_push (&insn_vec_p, 55, "./benchmarks/binutils/leak_5/binutils_leak_5.c", 75);
it_35 = it_12->next;

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 1073741824]:
# it_12 = PHI <it_28(5), it_35(6)>
if (it_12 != 0B)
  goto <bb 6>; [89.00%]
else
  goto <bb 8>; [11.00%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 118111600]:
btrace_clear (&btinfo);
t ={v} {CLOBBER};
btinfo ={v} {CLOBBER};
insn_vec_p ={v} {CLOBBER};
return 0;

=======Mapping node_fun:btrace_clear=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
it_5 = btp_4(D)->begin;
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
it_8 = it_1->next;
free (it_1);

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# it_1 = PHI <it_5(2), it_8(3)>
if (it_1 != 0B)
  goto <bb 3>; [89.00%]
else
  goto <bb 5>; [11.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 118111600]:
btp_4(D)->begin = 0B;
btp_4(D)->end = 0B;
return;

=======Mapping node_fun:VEC_btrace_insn_safe_push=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
VEC_btrace_insn_reserve (vec__3(D), 1, file__4(D), line__5(D));
_1 = *vec__3(D);
_9 = VEC_btrace_insn_quick_push (_1, obj__7(D), file__4(D), line__5(D));
return _9;

=======Mapping node_fun:VEC_btrace_insn_reserve=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = ABS_EXPR <alloc__8(D)>;
_2 = *vec__10(D);
_3 = VEC_btrace_insn_space (_2, _1, file__11(D), line__12(D));
_4 = _3 == 0;
extend_13 = (int) _4;
if (_3 == 0)
  goto <bb 3>; [33.00%]
else
  goto <bb 4>; [67.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 354334800]:
_5 = *vec__10(D);
_6 = vec_o_reserve (_5, alloc__8(D), 8, 4);
*vec__10(D) = _6;

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
return extend_13;

=======Mapping node_fun:VEC_btrace_insn_alloc=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = -alloc__2(D);
_5 = vec_o_reserve (0B, _1, 8, 4);
return _5;

=======Mapping node_fun:VEC_btrace_insn_quick_push=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = vec__6(D)->num;
_2 = vec__6(D)->alloc;
if (_1 >= _2)
  goto <bb 3>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 429496]:
exit (1);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073312329]:
_3 = vec__6(D)->num;
_4 = _3 + 1;
vec__6(D)->num = _4;
slot__8 = &vec__6(D)->vec[_3];
MEM <struct VEC_btrace_insn> [(btrace_insn *)vec__6(D)].vec[_3] = obj__9(D);
return slot__8;

=======Mapping node_fun:VEC_btrace_insn_space=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
if (alloc__8(D) < 0)
  goto <bb 3>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 429496]:
exit (1);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073312329]:
if (vec__9(D) != 0B)
  goto <bb 5>; [70.00%]
else
  goto <bb 6>; [30.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 751318634]:
_1 = vec__9(D)->alloc;
_2 = vec__9(D)->num;
_3 = _1 - _2;
_4 = (unsigned int) alloc__8(D);
_5 = _3 >= _4;
_12 = (int) _5;
goto <bb 7>; [100.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 321993695]:
_6 = alloc__8(D) == 0;
_10 = (int) _6;

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 1073312329]:
# _7 = PHI <_12(5), _10(6)>
return _7;

=======Mapping node_fun:vec_o_reserve=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
alloc_9 = calculate_allocation (vec_6(D), reserve_8(D));
if (alloc_9 == 0)
  goto <bb 7>; [29.93%]
else
  goto <bb 3>; [70.07%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 752370897]:
_1 = (long unsigned int) alloc_9;
_2 = _1 * elt_size_10(D);
_3 = _2 + vec_offset_11(D);
vec_13 = realloc (vec_6(D), _3);
if (vec_13 == 0B)
  goto <bb 4>; [0.04%]
else
  goto <bb 5>; [99.96%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 300948]:
exit (1);

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 752069949]:
MEM[(struct vec_prefix *)vec_13].alloc = alloc_9;
if (vec_6(D) == 0B)
  goto <bb 6>; [30.00%]
else
  goto <bb 7>; [70.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 225620982]:
MEM[(struct vec_prefix *)vec_13].num = 0;

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 1073440878]:
# _4 = PHI <0B(2), vec_13(5), vec_13(6)>
return _4;

=======Mapping node_fun:calculate_allocation=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
if (pfx_13(D) != 0B)
  goto <bb 3>; [70.00%]
else
  goto <bb 4>; [30.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 751619281]:
alloc_16 = pfx_13(D)->alloc;
num_17 = pfx_13(D)->num;
goto <bb 5>; [100.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 322122544]:
if (reserve_14(D) == 0)
  goto <bb 15>; [34.00%]
else
  goto <bb 5>; [66.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 964220159]:
# alloc_9 = PHI <alloc_16(3), 0(4)>
# num_11 = PHI <num_17(3), 0(4)>
_1 = alloc_9 - num_11;
_2 = ABS_EXPR <reserve_14(D)>;
_3 = (unsigned int) _2;
if (_1 >= _3)
  goto <bb 6>; [0.04%]
else
  goto <bb 7>; [99.96%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 385687]:
exit (1);

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 963834472]:
if (reserve_14(D) < 0)
  goto <bb 8>; [41.00%]
else
  goto <bb 9>; [59.00%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 395172130]:
_4 = (unsigned int) reserve_14(D);
alloc_21 = num_11 - _4;
goto <bb 15>; [100.00%]

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 568662342]:
if (alloc_9 == 0)
  goto <bb 13>; [50.00%]
else
  goto <bb 10>; [50.00%]

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 284331171]:
if (alloc_9 <= 15)
  goto <bb 11>; [50.00%]
else
  goto <bb 12>; [50.00%]

=======is loop:0=========

 bb index 11 
<bb 11> [local count: 142165585]:
alloc_19 = alloc_9 * 2;
goto <bb 13>; [100.00%]

=======is loop:0=========

 bb index 12 
<bb 12> [local count: 142165585]:
_5 = alloc_9 * 3;
alloc_18 = _5 / 2;

=======is loop:0=========

 bb index 13 
<bb 13> [local count: 568662343]:
# alloc_10 = PHI <4(9), alloc_19(11), alloc_18(12)>
_6 = (unsigned int) reserve_14(D);
_7 = _6 + num_11;
if (_7 > alloc_10)
  goto <bb 14>; [50.00%]
else
  goto <bb 15>; [50.00%]

=======is loop:0=========

 bb index 14 
<bb 14> [local count: 284331171]:
_8 = (unsigned int) reserve_14(D);
alloc_20 = _8 + num_11;

=======is loop:0=========

 bb index 15 
<bb 15> [local count: 1073356139]:
# _12 = PHI <0(4), alloc_21(8), alloc_10(13), alloc_20(14)>
return _12;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 3 [0m
[40;34m    gimple free   count : 1 [0m
[40;34m    find Entry point : 9 [0m
[40;34m    used_stmt array stack totalsize of : 0.001568 mb[0m
[40;34m    collect time: : 0.001702 s [0m
[40;34m    algorithm time: 0.097771 s [0m
[40;34m    gimple stmt count : : 118 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cp                   ------------|      |      |      |      |          |          |
inline               ------------|      |      |      |      |          |          |
fixup_cfg            ------------|      |      |      |      |          |          |
adjust_alignment     ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
backprop             ------------|      |      |      |      |          |          |
phiprop              ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
alias                ------------|      |      |      |      |          |          |
retslot              ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
stdarg               ------------|      |      |      |      |          |          |
cdce                 ------------|      |      |      |      |          |          |
cselim               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
ifcombine            ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ch                               |      |      |      |      |     +1.2%|     +0.0%|
cplxlower                        |      |      |      |      |     +1.1%|     +0.0%|
sra                  ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     -2.8%|     -0.7%|
copyprop                         |      |    +1|      |      |     -2.9%|     -0.7%|
reassoc              ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt                           |      |      |      |      |     -0.3%|     -0.1%|
ccp                              |      |      |      |      |     -0.3%|     -0.1%|
sincos               ------------|      |      |      |      |          |          |
laddress                         |      |      |      |      |     +0.9%|     +0.7%|
lim                              |      |      |      |      |     +0.9%|     +0.7%|
walloca              ------------|      |      |      |      |          |          |
sink                 ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
fix_loops            ------------|      |      |      |      |          |          |
loop                 ------------|      |      |      |      |          |          |
loopinit                         |      |      |      |      |    -65.7%|    -64.7%|
sccp                 ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
ivcanon              ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
cunroll              ------------|      |      |      |      |          |          |
ivopts               ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
loopdone             ------------|      |      |      |      |          |          |
no_loop                          |      |      |      |      |   +191.4%|   +183.1%|
veclower2            ------------|      |      |      |      |          |          |
switchlower          ------------|      |      |      |      |          |          |
reassoc              ------------|      |      |      |      |          |          |
slsr                 ------------|      |      |      |      |          |          |
dom                  ------------|      |      |      |      |          |          |
strlen               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
wrestrict            ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
fab                  ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
crited               ------------|      |      |      |      |          |          |
uncprop              ------------|      |      |      |      |          |          |
local-pure-const     ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
nrv                  ------------|      |      |      |      |          |          |
isel                 ------------|      |      |      |      |          |          |
optimized            ------------|      |      |      |      |          |          |
expand                           |      |      |      |      |----------|----------|
vregs                            |      |      |      |      |    +74.0%|    +56.4%|
into_cfglayout                   |      |      |      |      |     -1.4%|     -0.7%|
jump                             |      |      |      |      |     -2.2%|     -1.7%|
subreg1                          |      |      |      |      |     -0.7%|     -1.0%|
dfinit               ------------|      |      |      |      |          |          |
cse1                             |      |      |      |      |     -0.0%|     -0.1%|
fwprop1                          |      |      |      |      |     -1.9%|     -1.5%|
ce1                              |      |      |      |      |     -1.9%|     -1.3%|
reginfo                          |      |      |      |      |          |     +0.1%|
loop2                ------------|      |      |      |      |          |          |
loop2_init           ------------|      |      |      |      |          |          |
loop2_invariant                  |      |      |      |      |          |     -0.2%|
loop2_done                       |      |      |      |      |          |     -0.2%|
dse1                 ------------|      |      |      |      |          |          |
fwprop2              ------------|      |      |      |      |          |          |
init-regs            ------------|      |      |      |      |          |          |
combine                          |      |      |      |      |     +4.1%|     +5.6%|
ce2                              |      |      |      |      |     +4.0%|     +5.3%|
outof_cfglayout                  |      |      |      |      |     +1.2%|     +0.7%|
split1                           |      |      |      |      |     +2.3%|     +1.8%|
subreg3                          |      |      |      |      |     +1.0%|     +1.1%|
mode_sw              ------------|      |      |      |      |          |          |
asmcons              ------------|      |      |      |      |          |          |
ira                  ------------|      |      |      |      |          |          |
reload                           |      |      |      |      |     -9.7%|    -11.2%|
postreload                       |      |      |      |      |    -10.7%|    -12.7%|
split2                           |      |      |      |      |     +1.1%|     +0.7%|
cmpelim                          |      |      |      |      |     +1.0%|     +0.7%|
pro_and_epilogue                 |      |      |      |      |    +13.0%|    +13.0%|
dse2                             |      |      |      |      |    +11.5%|    +11.5%|
csa                  ------------|      |      |      |      |          |          |
jump2                ------------|      |      |      |      |          |          |
ce3                  ------------|      |      |      |      |          |          |
cprop_hardreg                    |      |      |      |      |     -0.8%|     -1.2%|
rtl_dce                          |      |      |      |      |     -0.8%|     -1.2%|
bbro                             |      |      |      |      |     +0.3%|     +0.0%|
split4                           |      |      |      |      |     +0.3%|     +0.0%|
stack                ------------|      |      |      |      |          |          |
zero_call_used_regs  ------------|      |      |      |      |          |          |
alignments           ------------|      |      |      |      |          |          |
