./benchmarks/binutils/double_free_4/binutils_df_4.c: In function â€˜remote_filename_pâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:16:16: warning: implicit declaration of function â€˜strncmpâ€™ [-Wimplicit-function-declaration]
   16 |         return strncmp (filename, "remote:", 7) == 0;
      |                ^~~~~~~
./benchmarks/binutils/double_free_4/binutils_df_4.c:8:1: note: include â€˜<string.h>â€™ or provide a declaration of â€˜strncmpâ€™
    7 | #include "../include/common.h"
  +++ |+#include <string.h>
    8 | 
./benchmarks/binutils/double_free_4/binutils_df_4.c:16:46: warning: â€˜strncmpâ€™ argument 3 type is â€˜intâ€™ where â€˜long unsigned intâ€™ is expected in a call to built-in function declared without prototype [-Wbuiltin-declaration-mismatch]
   16 |         return strncmp (filename, "remote:", 7) == 0;
      |                                              ^
<built-in>: note: built-in â€˜strncmpâ€™ declared here
./benchmarks/binutils/double_free_4/binutils_df_4.c: In function â€˜openpâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:44: warning: implicit declaration of function â€˜strdupâ€™ [-Wimplicit-function-declaration]
   25 |                         *filename_opened = strdup(name); /* allocation site */
      |                                            ^~~~~~
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:44: warning: incompatible implicit declaration of built-in function â€˜strdupâ€™ [-Wbuiltin-declaration-mismatch]
./benchmarks/binutils/double_free_4/binutils_df_4.c: In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:66:16: warning: incompatible implicit declaration of built-in function â€˜strdupâ€™ [-Wbuiltin-declaration-mismatch]
   66 |         name = strdup (name);   /* allocation site */
      |                ^~~~~~
./benchmarks/binutils/double_free_4/binutils_df_4.c: In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:95:15: warning: implicit declaration of function â€˜timeâ€™ [-Wimplicit-function-declaration]
   95 |         srand(time(NULL));
      |               ^~~~
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cfg                  ------------|      |      |      |      |          |          |
ompexp                           |      |      |      |      |   +100.0%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
ssa                              |      |      |      |      |     -2.0%|          |
nothrow                          |      |      |      |      |     -2.1%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
einline              ------------|      |      |      |      |          |          |
early_optimizations  ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
ethread              ------------|      |      |      |      |          |          |
esra                 ------------|      |      |      |      |          |          |
ealias               ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
iftoswitch           ------------|      |      |      |      |          |          |
profile_estimate     ------------|      |      |      |      |          |          |
local-pure-const                 |      |      |      |      |          |   +100.0%|
release_ssa          ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
=======node_fun:main=========

=======node_fun:symfile_bfd_open=========

--------GIMPLE Cond -------
succs:= 2
--------GIMPLE Cond -------
succs:= 3
succs:= 2
--------GIMPLE Cond -------
succs:= 6
succs:= 6
--------GIMPLE Cond -------
succs:= 8
succs:= 8
=======node_fun:remote_bfd_open=========

=======node_fun:gdb_bfd_open=========

--------GIMPLE Cond -------
succs:= 2
succs:= 2
=======node_fun:error=========

=======node_fun:openp=========

--------GIMPLE Cond -------
succs:= 2
succs:= 2
=======node_fun:remote_filename_p=========

=======node_fun:make_cleanup=========

=======node_fun:make_my_cleanup=========

=======node_fun:make_my_cleanup2=========

--------GIMPLE Cond -------
succs:= 2
succs:= 2
=======node_fun:do_cleanups=========

=======node_fun:do_my_cleanups=========

--------GIMPLE Cond -------
succs:= 3
succs:= 3
--------GIMPLE Cond -------
succs:= 6
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_4 = VDEF <.MEM_3(D)>
_1 = time (0B);
# .MEM_5 = VDEF <.MEM_4>
srand (_2);
# .MEM_6 = VDEF <.MEM_5>
symfile_bfd_open ("test");
# .MEM_7 = VDEF <.MEM_6>
do_cleanups (&sentinel_cleanup);
# VUSE <.MEM_28(D)>
_1 = remote_filename_p (name_8(D));
# .MEM_39 = VDEF <.MEM_28(D)>
sym_bfd_24 = remote_bfd_open (name_8(D));
# .MEM_40 = VDEF <.MEM_39>
error ("can\'t open to read symbols", name_8(D));
# .MEM_29 = VDEF <.MEM_28(D)>
name_10 = strdup (name_8(D));
# .MEM_30 = VDEF <.MEM_29>
_2 = getenv ("PATH");
# .MEM_31 = VDEF <.MEM_30>
desc_13 = openp (_2, name_10, &absolute_name);
# .MEM_32 = VDEF <.MEM_31>
make_cleanup (free, name_10);
# .MEM_33 = VDEF <.MEM_32>
error ("", name_10);
# .MEM_35 = VDEF <.MEM_34>
make_cleanup (free, name_17);
# .MEM_36 = VDEF <.MEM_35>
sym_bfd_20 = gdb_bfd_open (name_17);
# .MEM_37 = VDEF <.MEM_36>
make_cleanup (free, name_17);
# .MEM_38 = VDEF <.MEM_37>
error ("can\'t open to read symbols", name_17);
# .MEM_6 = VDEF <.MEM_5(D)>
_4 = gdb_bfd_open (name_2(D));
# .MEM_14 = VDEF <.MEM_13(D)>
printf ("%d\n", _1);
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
# .MEM_5 = VDEF <.MEM_4(D)>
printf ("%s: %s\n", msg_2(D), s_3(D));
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
# .MEM_17 = VDEF <.MEM_13>
_2 = rand ();
# VUSE <.MEM_6(D)>
_1 = strncmp (filename_4(D), "remote:", 7);
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
# .MEM_4 = VDEF <.MEM_3(D)>
do_my_cleanups (&cleanup_chain, old_chain_2(D));
# .MEM_19 = VDEF <.MEM_18>
__builtin_puts (&"cleanup!!!!! ========="[0]);
# .MEM_20 = VDEF <.MEM_19>
printf ("%x\n", _4);
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_cleanups  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4a161f14a0
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4a166b2188 type <integer_type 0x7f4a161d17e0 char>
       
        arg:0 <string_cst 0x7f4a161f5720 type <array_type 0x7f4a161db0a8>
            readonly constant static "cleanup!!!!! =========\000">
        arg:1 <integer_cst 0x7f4a166a8f48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a161f1500
    type <pointer_type 0x7f4a161db348
        type <array_type 0x7f4a161db2a0 type <integer_type 0x7f4a161d1738 char>
            SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161db1f8>
            pointer_to_this <pointer_type 0x7f4a161db348>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a161f14e0 type <array_type 0x7f4a161db2a0>
        readonly constant static "%x\012\000">
    ./benchmarks/binutils/double_free_4/../include/common.h:108:11 start: ./benchmarks/binutils/double_free_4/../include/common.h:108:11 finish: ./benchmarks/binutils/double_free_4/../include/common.h:108:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
[40;42m =======pre_check_funciton:do_cleanups========= [0m
[40;42m =======start_check_funciton:do_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4a161f1400
    type <pointer_type 0x7f4a161d8e70
        type <pointer_type 0x7f4a161d1f18 type <record_type 0x7f4a161d1e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4a161d8e70>>
        public unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7f4a16f50b40 cleanup_chain type <pointer_type 0x7f4a161d1f18>
        addressable static unsigned DI ./benchmarks/binutils/double_free_4/../include/common.h:49:24 size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c> initial <error_mark 0x7f4a166a8ba0>>
    ./benchmarks/binutils/double_free_4/../include/common.h:118:3 start: ./benchmarks/binutils/double_free_4/../include/common.h:118:3 finish: ./benchmarks/binutils/double_free_4/../include/common.h:118:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_cleanups========= [0m
[40;42m =======pre add _ fucntion:symfile_bfd_open========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path symfile_bfd_open  function_call count: 9 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:error========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path error  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:error========= [0m
[40;42m =======start_check_funciton:error========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4a161f10c0
    type <pointer_type 0x7f4a161dbbd0
        type <array_type 0x7f4a161dbb28 type <integer_type 0x7f4a161d1738 char>
            DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161dba80>
            pointer_to_this <pointer_type 0x7f4a161dbbd0>>
        unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a161f10a0 type <array_type 0x7f4a161dbb28>
        readonly constant static "%s: %s\012\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:33:9 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:33:9 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:33:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:error========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_cleanup  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :4========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161eed38
    type <pointer_type 0x7f4a161d1f18
        type <record_type 0x7f4a161d1e70 cleanup BLK
            size <integer_cst 0x7f4a166a8f18 constant 256>
            unit-size <integer_cst 0x7f4a166c6018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a161d1e70 fields <field_decl 0x7f4a161d42f8 next> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1f18>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4a161d8e70>>
    var <var_decl 0x7f4a161f7120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4a161e6918>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161eed38
    type <pointer_type 0x7f4a161d1f18
        type <record_type 0x7f4a161d1e70 cleanup BLK
            size <integer_cst 0x7f4a166a8f18 constant 256>
            unit-size <integer_cst 0x7f4a166c6018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a161d1e70 fields <field_decl 0x7f4a161d42f8 next> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1f18>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4a161d8e70>>
    var <var_decl 0x7f4a161f7120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4a161e6918>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4a161e65d0 type <integer_type 0x7f4a166bd7e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161eeb40
    type <pointer_type 0x7f4a161d8e70
        type <pointer_type 0x7f4a161d1f18 type <record_type 0x7f4a161d1e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4a161d8e70>>
        public unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de800 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e68a0>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_4/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_4/../include/common.h:145:10: warning: use location
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161eeb40
    type <pointer_type 0x7f4a161d8e70
        type <pointer_type 0x7f4a161d1f18 type <record_type 0x7f4a161d1e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4a161d8e70>>
        public unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de800 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e68a0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;42m =======pre_check_funciton:make_cleanup========= [0m
[40;42m =======start_check_funciton:make_cleanup========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4a161f1280
    type <pointer_type 0x7f4a161d8e70
        type <pointer_type 0x7f4a161d1f18 type <record_type 0x7f4a161d1e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4a161d8e70>>
        public unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7f4a16f50b40 cleanup_chain type <pointer_type 0x7f4a161d1f18>
        addressable static unsigned DI ./benchmarks/binutils/double_free_4/../include/common.h:49:24 size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c> initial <error_mark 0x7f4a166a8ba0>>
    ./benchmarks/binutils/double_free_4/../include/common.h:151:10 start: ./benchmarks/binutils/double_free_4/../include/common.h:151:10 finish: ./benchmarks/binutils/double_free_4/../include/common.h:151:10>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:make_cleanup========= [0m
[40;42m =======pre add _ fucntion:gdb_bfd_open========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path gdb_bfd_open  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:gdb_bfd_open========= [0m
[40;42m =======start_check_funciton:gdb_bfd_open========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee240
    type <pointer_type 0x7f4a161d8348
        type <integer_type 0x7f4a161d82a0 bfd SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d8348>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f4a161ecab0 abfd>
    def_stmt abfd_11 = malloc (4);
    version:11
    ptr-info 0x7f4a161e67b0>
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
_4 = PHI <0B(2), abfd_11(3)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
abfd_11 = malloc (4);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:40:29: warning: use location
   40 |                 bfd *abfd = malloc(sizeof(bfd));
      |                             ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee240
    type <pointer_type 0x7f4a161d8348
        type <integer_type 0x7f4a161d82a0 bfd SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d8348>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f4a161ecab0 abfd>
    def_stmt abfd_11 = malloc (4);
    version:11
    ptr-info 0x7f4a161e67b0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a49a0
    type <pointer_type 0x7f4a161db348
        type <array_type 0x7f4a161db2a0 type <integer_type 0x7f4a161d1738 char>
            SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161db1f8>
            pointer_to_this <pointer_type 0x7f4a161db348>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a168a4fe0 type <array_type 0x7f4a161db2a0>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee120
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_3 = _2 % 2;
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:13: warning: use location
   39 |         if (__RANDBOOL) {
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_3 == 1)
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:12: warning: use location
   39 |         if (__RANDBOOL) {
      |            ^
if (_3 == 1)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:12: warning: use location
Cond in fucntion gdb_bfd_open basic block 2
 ================== possible direct basic block ================= 
from gdb_bfd_open basic block 3
 ================== possible direct basic block ================= 
from gdb_bfd_open basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_2 = rand ();
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:13: warning: use location
   39 |         if (__RANDBOOL) {
      |             ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee120
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4a161e64c8 type <integer_type 0x7f4a166bd7e0 long unsigned int> constant 4>
[40;33m =======POP node_fun stack:gdb_bfd_open========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:openp========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path openp  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre_check_funciton:openp========= [0m
[40;42m =======start_check_funciton:openp========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee510
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
   
    def_stmt _1 = strdup (name_8(D));
    version:1
    ptr-info 0x7f4a161e67f8>
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜openpâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
_1 = strdup (name_8(D));
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:44: warning: use location
   25 |                         *filename_opened = strdup(name); /* allocation site */
      |                                            ^
this stmt is child function---strdup-----

 ================== trace ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜openpâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
*filename_opened_6(D) = _1;
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:42: warning: use location
   25 |                         *filename_opened = strdup(name); /* allocation site */
      |                                          ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee510
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
   
    def_stmt _1 = strdup (name_8(D));
    version:1
    ptr-info 0x7f4a161e67f8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee678
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de500 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e6828>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜openpâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
_1 = strdup (name_8(D));
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:44: warning: use location
   25 |                         *filename_opened = strdup(name); /* allocation site */
      |                                            ^
this stmt is child function---strdup-----

 ================== trace ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜openpâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
*filename_opened_6(D) = _1;
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:42: warning: use location
   25 |                         *filename_opened = strdup(name); /* allocation site */
      |                                          ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee678
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de500 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e6828>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee558
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>
# .MEM_17 = VDEF <.MEM_13>
_2 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_3 = _2 % 2;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
_4 = _3 == 1;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
_2 = rand ();
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee558
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:openp========= [0m
[40;42m =======pre add _ fucntion:getenv========= [0m
[40;33m =======POP node_fun stack:getenv========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:remote_bfd_open========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path remote_bfd_open  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:gdb_bfd_open========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path gdb_bfd_open  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:gdb_bfd_open========= [0m
[40;42m =======start_check_funciton:gdb_bfd_open========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee240
    type <pointer_type 0x7f4a161d8348
        type <integer_type 0x7f4a161d82a0 bfd SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d8348>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f4a161ecab0 abfd>
    def_stmt abfd_11 = malloc (4);
    version:11
    ptr-info 0x7f4a161e67b0>
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
_4 = PHI <0B(2), abfd_11(3)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
abfd_11 = malloc (4);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:40:29: warning: use location
   40 |                 bfd *abfd = malloc(sizeof(bfd));
      |                             ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee240
    type <pointer_type 0x7f4a161d8348
        type <integer_type 0x7f4a161d82a0 bfd SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d8348>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f4a161ecab0 abfd>
    def_stmt abfd_11 = malloc (4);
    version:11
    ptr-info 0x7f4a161e67b0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a49a0
    type <pointer_type 0x7f4a161db348
        type <array_type 0x7f4a161db2a0 type <integer_type 0x7f4a161d1738 char>
            SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161db1f8>
            pointer_to_this <pointer_type 0x7f4a161db348>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a168a4fe0 type <array_type 0x7f4a161db2a0>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee120
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_3 = _2 % 2;
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:13: warning: use location
   39 |         if (__RANDBOOL) {
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_3 == 1)
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:12: warning: use location
   39 |         if (__RANDBOOL) {
      |            ^
if (_3 == 1)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:12: warning: use location
Cond in fucntion gdb_bfd_open basic block 2
 ================== possible direct basic block ================= 
from gdb_bfd_open basic block 3
 ================== possible direct basic block ================= 
from gdb_bfd_open basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_2 = rand ();
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:13: warning: use location
   39 |         if (__RANDBOOL) {
      |             ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee120
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4a161e64c8 type <integer_type 0x7f4a166bd7e0 long unsigned int> constant 4>
[40;33m =======POP node_fun stack:gdb_bfd_open========= [0m
[40;42m =======pre_check_funciton:remote_bfd_open========= [0m
[40;42m =======start_check_funciton:remote_bfd_open========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a166b0f78
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de200 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e6750>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_4 = gdb_bfd_open (name_2(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:48:16: warning: use location
   48 |         return gdb_bfd_open(name);
      |                ^
this stmt is child function---gdb_bfd_open-----

 ================== trace ================== 
trace fucntion name:gdb_bfd_open 
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:0 
_4 = gdb_bfd_open (name_2(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:48:16: warning: use location
this stmt is child function---gdb_bfd_open-----

 ================== trace ================== 
trace fucntion name:gdb_bfd_open 
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b0f78
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de200 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e6750>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:remote_bfd_open========= [0m
[40;42m =======pre add _ fucntion:remote_filename_p========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path remote_filename_p  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strncmp========= [0m
[40;33m =======POP node_fun stack:strncmp========= [0m
[40;42m =======pre_check_funciton:remote_filename_p========= [0m
[40;42m =======start_check_funciton:remote_filename_p========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee900
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de680 filename>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f4a161e6840>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_1 = strncmp (filename_4(D), "remote:", 7);
./benchmarks/binutils/double_free_4/binutils_df_4.c:16:16: warning: use location
   16 |         return strncmp (filename, "remote:", 7) == 0;
      |                ^
this stmt is child function---strncmp-----

 ================== trace ================== 
trace fucntion name:strncmp 

 ================== trace ================== 
trace fucntion free:0 
_2 = _1 == 0;
./benchmarks/binutils/double_free_4/binutils_df_4.c:16:49: warning: use location
   16 |         return strncmp (filename, "remote:", 7) == 0;
      |                                                 ^
_5 = (int) _2;
./benchmarks/binutils/double_free_4/binutils_df_4.c:16:49: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee900
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de680 filename>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f4a161e6840>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:remote_filename_p========= [0m
[40;42m =======pre_check_funciton:symfile_bfd_open========= [0m
[40;42m =======start_check_funciton:symfile_bfd_open========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a166b0948
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt name_10 = strdup (name_8(D));
    version:10
    ptr-info 0x7f4a161e66f0>
# .MEM_29 = VDEF <.MEM_28(D)>
name_10 = strdup (name_8(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
_1 = remote_filename_p (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:13: warning: use location
   57 |         if (remote_filename_p (name))
      |             ^
this stmt is child function---remote_filename_p-----

 ================== trace ================== 
trace fucntion name:remote_filename_p 
[40;44m =======trace_function_path remote_filename_p  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:remote_filename_p========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strncmp========= [0m
[40;46m =======add node_fun stack:strncmp========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (_1 != 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:12: warning: use location
   57 |         if (remote_filename_p (name))
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:12: warning: use location
Cond in fucntion symfile_bfd_open basic block 2
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 3
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
name_10 = strdup (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:66:16: warning: use location
   66 |         name = strdup (name);   /* allocation site */
      |                ^
this stmt is child function---strdup-----

 ================== trace ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_41>
return _3;
In function â€˜symfile_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
free (name_10);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
   76 |         free (name);
      |         ^
this stmt is child function---free-----

 ================== find ================== 
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
error ("", name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:73:25: warning: use location
   73 |                         error ("", name);
      |                         ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
make_cleanup (free, name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:72:25: warning: use location
   72 |                         make_cleanup (free, name);
      |                         ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
desc_13 = openp (_2, name_10, &absolute_name);
./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16: warning: use location
   68 |         desc = openp (getenv ("PATH"), name, &absolute_name);
      |                ^
this stmt is child function---openp-----

 ================== trace ================== 
trace fucntion name:openp 
[40;44m =======trace_function_path openp  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:openp========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m

 ================== trace ================== 
trace fucntion free:1 
error ("can\'t open to read symbols", name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:61:33: warning: use location
   61 |                                 error (("can't open to read symbols"), name);
      |                                 ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
sym_bfd_24 = remote_bfd_open (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:59:35: warning: use location
   59 |                         sym_bfd = remote_bfd_open (name);
      |                                   ^
this stmt is child function---remote_bfd_open-----

 ================== trace ================== 
trace fucntion name:remote_bfd_open 
[40;44m =======trace_function_path remote_bfd_open  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:remote_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:gdb_bfd_open========= [0m
gdb_bfd_open this fucntion return value is heap-object 
remote_bfd_open this fucntion return value is heap-object gdb_bfd_open
[40;46m =======add node_fun stack:gdb_bfd_open========= [0m
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location
this stmt have mutiple branch --------
if (sym_bfd_24 == 0B)
./benchmarks/binutils/double_free_4/binutils_df_4.c:60:28: warning: use location
   60 |                         if (!sym_bfd)
      |                            ^
if (sym_bfd_24 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:60:28: warning: use location
Cond in fucntion symfile_bfd_open basic block 3
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 4
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b0948
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt name_10 = strdup (name_8(D));
    version:10
    ptr-info 0x7f4a161e66f0>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
   76 |         free (name);
      |         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: Use after free error!: free location 
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 6
if (desc_13 < 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:70:12: warning: use location
   70 |         if (desc < 0)
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: Use after free error!: free location 
   76 |         free (name);
      |         ^
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 6
if (desc_13 < 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:70:12: warning: use location
   70 |         if (desc < 0)
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f4a166b0900
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e66d8>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_1 = remote_filename_p (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:13: warning: use location
   57 |         if (remote_filename_p (name))
      |             ^
this stmt is child function---remote_filename_p-----

 ================== trace ================== 
trace fucntion name:remote_filename_p 
[40;44m =======trace_function_path remote_filename_p  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:remote_filename_p========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strncmp========= [0m
[40;46m =======add node_fun stack:strncmp========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (_1 != 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:12: warning: use location
   57 |         if (remote_filename_p (name))
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:12: warning: use location
Cond in fucntion symfile_bfd_open basic block 2
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 3
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
name_10 = strdup (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:66:16: warning: use location
   66 |         name = strdup (name);   /* allocation site */
      |                ^
this stmt is child function---strdup-----

 ================== trace ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_41>
return _3;
In function â€˜symfile_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
free (name_10);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
   76 |         free (name);
      |         ^
this stmt is child function---free-----

 ================== find ================== 
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
error ("", name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:73:25: warning: use location
   73 |                         error ("", name);
      |                         ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
make_cleanup (free, name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:72:25: warning: use location
   72 |                         make_cleanup (free, name);
      |                         ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
desc_13 = openp (_2, name_10, &absolute_name);
./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16: warning: use location
   68 |         desc = openp (getenv ("PATH"), name, &absolute_name);
      |                ^
this stmt is child function---openp-----

 ================== trace ================== 
trace fucntion name:openp 
[40;44m =======trace_function_path openp  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:openp========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m

 ================== trace ================== 
trace fucntion free:1 
error ("can\'t open to read symbols", name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:61:33: warning: use location
   61 |                                 error (("can't open to read symbols"), name);
      |                                 ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
sym_bfd_24 = remote_bfd_open (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:59:35: warning: use location
   59 |                         sym_bfd = remote_bfd_open (name);
      |                                   ^
this stmt is child function---remote_bfd_open-----

 ================== trace ================== 
trace fucntion name:remote_bfd_open 
[40;44m =======trace_function_path remote_bfd_open  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:remote_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:gdb_bfd_open========= [0m
gdb_bfd_open this fucntion return value is heap-object 
remote_bfd_open this fucntion return value is heap-object gdb_bfd_open
[40;46m =======add node_fun stack:gdb_bfd_open========= [0m
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location
this stmt have mutiple branch --------
if (sym_bfd_24 == 0B)
./benchmarks/binutils/double_free_4/binutils_df_4.c:60:28: warning: use location
   60 |                         if (!sym_bfd)
      |                            ^
if (sym_bfd_24 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:60:28: warning: use location
Cond in fucntion symfile_bfd_open basic block 3
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 4
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b0900
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e66d8>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: Use after free error!: free location 
   76 |         free (name);
      |         ^
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 6
if (desc_13 < 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:70:12: warning: use location
   70 |         if (desc < 0)
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a166b0900
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e66d8>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_1 = remote_filename_p (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:13: warning: use location
   57 |         if (remote_filename_p (name))
      |             ^
this stmt is child function---remote_filename_p-----

 ================== trace ================== 
trace fucntion name:remote_filename_p 
[40;44m =======trace_function_path remote_filename_p  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:remote_filename_p========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strncmp========= [0m
[40;46m =======add node_fun stack:strncmp========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (_1 != 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:12: warning: use location
   57 |         if (remote_filename_p (name))
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:12: warning: use location
Cond in fucntion symfile_bfd_open basic block 2
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 3
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
name_10 = strdup (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:66:16: warning: use location
   66 |         name = strdup (name);   /* allocation site */
      |                ^
this stmt is child function---strdup-----

 ================== trace ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_41>
return _3;
In function â€˜symfile_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
free (name_10);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
   76 |         free (name);
      |         ^
this stmt is child function---free-----

 ================== find ================== 
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
error ("", name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:73:25: warning: use location
   73 |                         error ("", name);
      |                         ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
make_cleanup (free, name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:72:25: warning: use location
   72 |                         make_cleanup (free, name);
      |                         ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
desc_13 = openp (_2, name_10, &absolute_name);
./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16: warning: use location
   68 |         desc = openp (getenv ("PATH"), name, &absolute_name);
      |                ^
this stmt is child function---openp-----

 ================== trace ================== 
trace fucntion name:openp 
[40;44m =======trace_function_path openp  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:openp========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m

 ================== trace ================== 
trace fucntion free:1 
error ("can\'t open to read symbols", name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:61:33: warning: use location
   61 |                                 error (("can't open to read symbols"), name);
      |                                 ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
sym_bfd_24 = remote_bfd_open (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:59:35: warning: use location
   59 |                         sym_bfd = remote_bfd_open (name);
      |                                   ^
this stmt is child function---remote_bfd_open-----

 ================== trace ================== 
trace fucntion name:remote_bfd_open 
[40;44m =======trace_function_path remote_bfd_open  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:remote_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:gdb_bfd_open========= [0m
gdb_bfd_open this fucntion return value is heap-object 
remote_bfd_open this fucntion return value is heap-object gdb_bfd_open
[40;46m =======add node_fun stack:gdb_bfd_open========= [0m
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location
this stmt have mutiple branch --------
if (sym_bfd_24 == 0B)
./benchmarks/binutils/double_free_4/binutils_df_4.c:60:28: warning: use location
   60 |                         if (!sym_bfd)
      |                            ^
if (sym_bfd_24 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:60:28: warning: use location
Cond in fucntion symfile_bfd_open basic block 3
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 4
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b0900
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e66d8>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: Use after free error!: free location 
   76 |         free (name);
      |         ^
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 6
if (desc_13 < 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:70:12: warning: use location
   70 |         if (desc < 0)
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4cc0
    type <pointer_type 0x7f4a161dc1f8
        type <array_type 0x7f4a161dc150 type <integer_type 0x7f4a161d1738 char>
            BLK
            size <integer_cst 0x7f4a161c8888 constant 216>
            unit-size <integer_cst 0x7f4a161c8870 constant 27>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161dc0a8>
            pointer_to_this <pointer_type 0x7f4a161dc1f8>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a166a6a20 type <array_type 0x7f4a161dc150>
        readonly constant static "can't open to read symbols\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:61:12 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:61:12 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:61:12>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4d40
    type <pointer_type 0x7f4a161dc498
        type <array_type 0x7f4a161dc3f0 type <integer_type 0x7f4a161d1738 char>
            BLK
            size <integer_cst 0x7f4a161c88b8 constant 40>
            unit-size <integer_cst 0x7f4a161c88a0 constant 5>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161dc348>
            pointer_to_this <pointer_type 0x7f4a161dc498>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a168a4d20 type <array_type 0x7f4a161dc3f0>
        readonly constant static "PATH\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a166b0870
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
   
    def_stmt _2 = getenv ("PATH");
    version:2
    ptr-info 0x7f4a161e66a8>
# .MEM_30 = VDEF <.MEM_29>
_2 = getenv ("PATH");

 ================== trace ptable================== 
trace fucntion name:getenv 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---getenv-----
this other function ------getenv-----
 
 Start check Pointer Collect  

======================================================================
_2 = getenv ("PATH");
./benchmarks/binutils/double_free_4/binutils_df_4.c:68:23: warning: use location
   68 |         desc = openp (getenv ("PATH"), name, &absolute_name);
      |                       ^
this stmt is child function---getenv-----

 ================== trace ================== 
trace fucntion name:getenv 

 ================== trace ================== 
trace fucntion free:0 
desc_13 = openp (_2, name_10, &absolute_name);
./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16: warning: use location
   68 |         desc = openp (getenv ("PATH"), name, &absolute_name);
      |                ^
this stmt is child function---openp-----

 ================== trace ================== 
trace fucntion name:openp 
[40;44m =======trace_function_path openp  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:openp========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (desc_13 < 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:70:12: warning: use location
   70 |         if (desc < 0)
      |            ^
if (desc_13 < 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:70:12: warning: use location
Cond in fucntion symfile_bfd_open basic block 6
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 7
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_41>
return _3;
In function â€˜symfile_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
free (name_10);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
   76 |         free (name);
      |         ^
this stmt is child function---free-----

 ================== find ================== 
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
error ("", name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:73:25: warning: use location
   73 |                         error ("", name);
      |                         ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
make_cleanup (free, name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:72:25: warning: use location
   72 |                         make_cleanup (free, name);
      |                         ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b0870
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
   
    def_stmt _2 = getenv ("PATH");
    version:2
    ptr-info 0x7f4a161e66a8>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
   76 |         free (name);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <addr_expr 0x7f4a168a4dc0
    type <pointer_type 0x7f4a161d1dc8
        type <function_type 0x7f4a161d1d20 type <void_type 0x7f4a166bdf18 void>
            QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f4a161d34b0 value <pointer_type 0x7f4a166c4000>
                chain <tree_list 0x7f4a166bcb18 value <void_type 0x7f4a166bdf18 void>>> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1dc8>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <function_decl 0x7f4a161d9500 free type <function_type 0x7f4a161d1d20>
        addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
        align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        attributes <tree_list 0x7f4a161d38e8
            purpose <identifier_node 0x7f4a166e2e10 nothrow>
            chain <tree_list 0x7f4a161d38c0
                purpose <identifier_node 0x7f4a166e2e38 leaf>>>>
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:72:18 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:72:18 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:72:18>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4e00
    type <pointer_type 0x7f4a161dc7e0
        type <array_type 0x7f4a161dc738 type <integer_type 0x7f4a161d1738 char>
            QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161dc690>
            pointer_to_this <pointer_type 0x7f4a161dc7e0>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a161e6450 type <array_type 0x7f4a161dc738>
        readonly constant static "\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:73:11 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:73:11 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:73:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4e60
    type <pointer_type 0x7f4a161d1dc8
        type <function_type 0x7f4a161d1d20 type <void_type 0x7f4a166bdf18 void>
            QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f4a161d34b0 value <pointer_type 0x7f4a166c4000>
                chain <tree_list 0x7f4a166bcb18 value <void_type 0x7f4a166bdf18 void>>> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1dc8>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <function_decl 0x7f4a161d9500 free type <function_type 0x7f4a161d1d20>
        addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
        align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        attributes <tree_list 0x7f4a161d38e8
            purpose <identifier_node 0x7f4a166e2e10 nothrow>
            chain <tree_list 0x7f4a161d38c0
                purpose <identifier_node 0x7f4a166e2e38 leaf>>>>
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:78:16 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:78:16 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:78:16>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a166b09d8
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt name_17 = absolute_name;
    version:17
    ptr-info 0x7f4a161e6708>
# VUSE <.MEM_34>
name_17 = absolute_name;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_37>
error ("can\'t open to read symbols", name_17);
bb index := 9
# VUSE <.MEM_41>
return _3;
In function â€˜symfile_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_37>
error ("can\'t open to read symbols", name_17);
bb index := 9
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_37>
error ("can\'t open to read symbols", name_17);
bb index := 9
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_37>
error ("can\'t open to read symbols", name_17);
bb index := 9
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
error ("can\'t open to read symbols", name_17);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:85:25: warning: use location
   85 |                         error (("can't open to read symbols"), name);
      |                         ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_37 = VDEF <.MEM_36>
make_cleanup (free, name_17);
bb index := 9
# VUSE <.MEM_41>
return _3;
In function â€˜symfile_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_37 = VDEF <.MEM_36>
make_cleanup (free, name_17);
bb index := 9
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_37 = VDEF <.MEM_36>
make_cleanup (free, name_17);
bb index := 9
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_37 = VDEF <.MEM_36>
make_cleanup (free, name_17);
bb index := 9
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
make_cleanup (free, name_17);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:84:25: warning: use location
   84 |                         make_cleanup (free, name);      /* double-free */
      |                         ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_36 = VDEF <.MEM_35>
sym_bfd_20 = gdb_bfd_open (name_17);
bb index := 8
# VUSE <.MEM_41>
return _3;
In function â€˜symfile_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_36 = VDEF <.MEM_35>
sym_bfd_20 = gdb_bfd_open (name_17);
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_36 = VDEF <.MEM_35>
sym_bfd_20 = gdb_bfd_open (name_17);
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_36 = VDEF <.MEM_35>
sym_bfd_20 = gdb_bfd_open (name_17);
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
sym_bfd_20 = gdb_bfd_open (name_17);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:80:19: warning: use location
   80 |         sym_bfd = gdb_bfd_open (name);
      |                   ^
this stmt is child function---gdb_bfd_open-----

 ================== trace ================== 
trace fucntion name:gdb_bfd_open 
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:0 
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (sym_bfd_20 == 0B)
bb index := 8
# VUSE <.MEM_41>
return _3;
In function â€˜symfile_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (sym_bfd_20 == 0B)
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (sym_bfd_20 == 0B)
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (sym_bfd_20 == 0B)
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
if (sym_bfd_20 == 0B)
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:81:12: warning: use location
   81 |         if (!sym_bfd)
      |            ^
if (sym_bfd_20 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:81:12: warning: use location
Cond in fucntion symfile_bfd_open basic block 8
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 9
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 10
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_35 = VDEF <.MEM_34>
make_cleanup (free, name_17);
bb index := 8
# VUSE <.MEM_41>
return _3;
In function â€˜symfile_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_35 = VDEF <.MEM_34>
make_cleanup (free, name_17);
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_35 = VDEF <.MEM_34>
make_cleanup (free, name_17);
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_35 = VDEF <.MEM_34>
make_cleanup (free, name_17);
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
make_cleanup (free, name_17);
In function â€˜mainâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:78:9: warning: use location
   78 |         make_cleanup (free, name);                      /* double-free */
      |         ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b09d8
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt name_17 = absolute_name;
    version:17
    ptr-info 0x7f4a161e6708>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4ec0
    type <pointer_type 0x7f4a161d1dc8
        type <function_type 0x7f4a161d1d20 type <void_type 0x7f4a166bdf18 void>
            QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f4a161d34b0 value <pointer_type 0x7f4a166c4000>
                chain <tree_list 0x7f4a166bcb18 value <void_type 0x7f4a166bdf18 void>>> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1dc8>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <function_decl 0x7f4a161d9500 free type <function_type 0x7f4a161d1d20>
        addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
        align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        attributes <tree_list 0x7f4a161d38e8
            purpose <identifier_node 0x7f4a166e2e10 nothrow>
            chain <tree_list 0x7f4a161d38c0
                purpose <identifier_node 0x7f4a166e2e38 leaf>>>>
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:84:18 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:84:18 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:84:18>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4f00
    type <pointer_type 0x7f4a161dc1f8
        type <array_type 0x7f4a161dc150 type <integer_type 0x7f4a161d1738 char>
            BLK
            size <integer_cst 0x7f4a161c8888 constant 216>
            unit-size <integer_cst 0x7f4a161c8870 constant 27>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161dc0a8>
            pointer_to_this <pointer_type 0x7f4a161dc1f8>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a166a6a50 type <array_type 0x7f4a161dc150>
        readonly constant static "can't open to read symbols\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:85:11 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:85:11 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:85:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:symfile_bfd_open========= [0m
[40;42m =======pre add _ fucntion:srand========= [0m
[40;33m =======POP node_fun stack:srand========= [0m
[40;42m =======pre add _ fucntion:time========= [0m
[40;33m =======POP node_fun stack:time========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4a166a8fc0 type <pointer_type 0x7f4a166c4000> constant 0>

dot graph START

======================================================================
 <ssa_name 0x7f4a166b0678
    type <integer_type 0x7f4a166bd690 unsigned int public unsigned SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd690 precision:32 min <integer_cst 0x7f4a166a8e28 0> max <integer_cst 0x7f4a166a8de0 4294967295>
        pointer_to_this <pointer_type 0x7f4a166c9690>>
   
    def_stmt _2 = (unsigned int) _1;
    version:2>
_2 = (unsigned int) _1;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_5 = VDEF <.MEM_4>
srand (_2);
srand (_2);
./benchmarks/binutils/double_free_4/binutils_df_4.c:95:9: warning: use location
   95 |         srand(time(NULL));
      |         ^
this stmt is child function---srand-----

 ================== trace ================== 
trace fucntion name:srand 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_5 = VDEF <.MEM_4>
srand (_2);
srand (_2);
./benchmarks/binutils/double_free_4/binutils_df_4.c:95:9: warning: use location
this stmt is child function---srand-----

 ================== trace ================== 
trace fucntion name:srand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b0678
    type <integer_type 0x7f4a166bd690 unsigned int public unsigned SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd690 precision:32 min <integer_cst 0x7f4a166a8e28 0> max <integer_cst 0x7f4a166a8de0 4294967295>
        pointer_to_this <pointer_type 0x7f4a166c9690>>
   
    def_stmt _2 = (unsigned int) _1;
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4b80
    type <pointer_type 0x7f4a161dc498
        type <array_type 0x7f4a161dc3f0 type <integer_type 0x7f4a161d1738 char>
            BLK
            size <integer_cst 0x7f4a161c88b8 constant 40>
            unit-size <integer_cst 0x7f4a161c88a0 constant 5>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161dc348>
            pointer_to_this <pointer_type 0x7f4a161dc498>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a168a4b60 type <array_type 0x7f4a161dc3f0>
        readonly constant static "test\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:98:19 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:98:19 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:98:19>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4be0
    type <pointer_type 0x7f4a161d8dc8
        type <record_type 0x7f4a161d8690 cleanup readonly BLK
            size <integer_cst 0x7f4a166a8f18 constant 256>
            unit-size <integer_cst 0x7f4a166c6018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a161d1e70 fields <field_decl 0x7f4a161d42f8 next> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d8dc8>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <var_decl 0x7f4a16f50bd0 sentinel_cleanup type <record_type 0x7f4a161d8690 cleanup>
        readonly addressable static BLK ./benchmarks/binutils/double_free_4/../include/common.h:44:29 size <integer_cst 0x7f4a166a8f18 256> unit-size <integer_cst 0x7f4a166c6018 32>
        align:256 warn_if_not_align:0 context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c> initial <error_mark 0x7f4a166a8ba0>>
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:97:30 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:97:30 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:97:30>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:symfile_bfd_open========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path symfile_bfd_open  function_call count: 9 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:error========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path error  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:error========= [0m
[40;42m =======start_check_funciton:error========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4a161f10c0
    type <pointer_type 0x7f4a161dbbd0
        type <array_type 0x7f4a161dbb28 type <integer_type 0x7f4a161d1738 char>
            DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161dba80>
            pointer_to_this <pointer_type 0x7f4a161dbbd0>>
        unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a161f10a0 type <array_type 0x7f4a161dbb28>
        readonly constant static "%s: %s\012\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:33:9 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:33:9 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:33:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:error========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_cleanup  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161eed38
    type <pointer_type 0x7f4a161d1f18
        type <record_type 0x7f4a161d1e70 cleanup BLK
            size <integer_cst 0x7f4a166a8f18 constant 256>
            unit-size <integer_cst 0x7f4a166c6018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a161d1e70 fields <field_decl 0x7f4a161d42f8 next> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1f18>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4a161d8e70>>
    var <var_decl 0x7f4a161f7120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4a161e6918>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161eed38
    type <pointer_type 0x7f4a161d1f18
        type <record_type 0x7f4a161d1e70 cleanup BLK
            size <integer_cst 0x7f4a166a8f18 constant 256>
            unit-size <integer_cst 0x7f4a166c6018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a161d1e70 fields <field_decl 0x7f4a161d42f8 next> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1f18>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4a161d8e70>>
    var <var_decl 0x7f4a161f7120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4a161e6918>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4a161e65d0 type <integer_type 0x7f4a166bd7e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161eeb40
    type <pointer_type 0x7f4a161d8e70
        type <pointer_type 0x7f4a161d1f18 type <record_type 0x7f4a161d1e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4a161d8e70>>
        public unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de800 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e68a0>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_4/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_4/../include/common.h:145:10: warning: use location
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161eeb40
    type <pointer_type 0x7f4a161d8e70
        type <pointer_type 0x7f4a161d1f18 type <record_type 0x7f4a161d1e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4a161d8e70>>
        public unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de800 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e68a0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;42m =======pre_check_funciton:make_cleanup========= [0m
[40;42m =======start_check_funciton:make_cleanup========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4a161f1280
    type <pointer_type 0x7f4a161d8e70
        type <pointer_type 0x7f4a161d1f18 type <record_type 0x7f4a161d1e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4a161d8e70>>
        public unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7f4a16f50b40 cleanup_chain type <pointer_type 0x7f4a161d1f18>
        addressable static unsigned DI ./benchmarks/binutils/double_free_4/../include/common.h:49:24 size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c> initial <error_mark 0x7f4a166a8ba0>>
    ./benchmarks/binutils/double_free_4/../include/common.h:151:10 start: ./benchmarks/binutils/double_free_4/../include/common.h:151:10 finish: ./benchmarks/binutils/double_free_4/../include/common.h:151:10>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:make_cleanup========= [0m
[40;42m =======pre add _ fucntion:gdb_bfd_open========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path gdb_bfd_open  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:gdb_bfd_open========= [0m
[40;42m =======start_check_funciton:gdb_bfd_open========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee240
    type <pointer_type 0x7f4a161d8348
        type <integer_type 0x7f4a161d82a0 bfd SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d8348>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f4a161ecab0 abfd>
    def_stmt abfd_11 = malloc (4);
    version:11
    ptr-info 0x7f4a161e67b0>
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
_4 = PHI <0B(2), abfd_11(3)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
abfd_11 = malloc (4);
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:40:29: warning: use location
   40 |                 bfd *abfd = malloc(sizeof(bfd));
      |                             ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee240
    type <pointer_type 0x7f4a161d8348
        type <integer_type 0x7f4a161d82a0 bfd SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d8348>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f4a161ecab0 abfd>
    def_stmt abfd_11 = malloc (4);
    version:11
    ptr-info 0x7f4a161e67b0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a49a0
    type <pointer_type 0x7f4a161db348
        type <array_type 0x7f4a161db2a0 type <integer_type 0x7f4a161d1738 char>
            SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161db1f8>
            pointer_to_this <pointer_type 0x7f4a161db348>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a168a4fe0 type <array_type 0x7f4a161db2a0>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee120
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_3 = _2 % 2;
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:13: warning: use location
   39 |         if (__RANDBOOL) {
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_3 == 1)
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:12: warning: use location
   39 |         if (__RANDBOOL) {
      |            ^
if (_3 == 1)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:12: warning: use location
Cond in fucntion gdb_bfd_open basic block 2
 ================== possible direct basic block ================= 
from gdb_bfd_open basic block 3
 ================== possible direct basic block ================= 
from gdb_bfd_open basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_2 = rand ();
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:13: warning: use location
   39 |         if (__RANDBOOL) {
      |             ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee120
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4a161e64c8 type <integer_type 0x7f4a166bd7e0 long unsigned int> constant 4>
[40;33m =======POP node_fun stack:gdb_bfd_open========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:openp========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path openp  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre_check_funciton:openp========= [0m
[40;42m =======start_check_funciton:openp========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee510
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
   
    def_stmt _1 = strdup (name_8(D));
    version:1
    ptr-info 0x7f4a161e67f8>
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜openpâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
_1 = strdup (name_8(D));
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:44: warning: use location
   25 |                         *filename_opened = strdup(name); /* allocation site */
      |                                            ^
this stmt is child function---strdup-----

 ================== trace ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜openpâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
*filename_opened_6(D) = _1;
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:42: warning: use location
   25 |                         *filename_opened = strdup(name); /* allocation site */
      |                                          ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee510
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
   
    def_stmt _1 = strdup (name_8(D));
    version:1
    ptr-info 0x7f4a161e67f8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee678
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de500 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e6828>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜openpâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
_1 = strdup (name_8(D));
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:44: warning: use location
   25 |                         *filename_opened = strdup(name); /* allocation site */
      |                                            ^
this stmt is child function---strdup-----

 ================== trace ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜openpâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
*filename_opened_6(D) = _1;
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:42: warning: use location
   25 |                         *filename_opened = strdup(name); /* allocation site */
      |                                          ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee678
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de500 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e6828>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee558
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>
# .MEM_17 = VDEF <.MEM_13>
_2 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_3 = _2 % 2;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
_4 = _3 == 1;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
_2 = rand ();
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee558
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:openp========= [0m
[40;42m =======pre add _ fucntion:getenv========= [0m
[40;33m =======POP node_fun stack:getenv========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:remote_bfd_open========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path remote_bfd_open  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:gdb_bfd_open========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path gdb_bfd_open  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:gdb_bfd_open========= [0m
[40;42m =======start_check_funciton:gdb_bfd_open========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee240
    type <pointer_type 0x7f4a161d8348
        type <integer_type 0x7f4a161d82a0 bfd SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d8348>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f4a161ecab0 abfd>
    def_stmt abfd_11 = malloc (4);
    version:11
    ptr-info 0x7f4a161e67b0>
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
_4 = PHI <0B(2), abfd_11(3)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
abfd_11 = malloc (4);
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:40:29: warning: use location
   40 |                 bfd *abfd = malloc(sizeof(bfd));
      |                             ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee240
    type <pointer_type 0x7f4a161d8348
        type <integer_type 0x7f4a161d82a0 bfd SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d8348>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f4a161ecab0 abfd>
    def_stmt abfd_11 = malloc (4);
    version:11
    ptr-info 0x7f4a161e67b0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a49a0
    type <pointer_type 0x7f4a161db348
        type <array_type 0x7f4a161db2a0 type <integer_type 0x7f4a161d1738 char>
            SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161db1f8>
            pointer_to_this <pointer_type 0x7f4a161db348>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a168a4fe0 type <array_type 0x7f4a161db2a0>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee120
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_3 = _2 % 2;
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:13: warning: use location
   39 |         if (__RANDBOOL) {
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_3 == 1)
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:12: warning: use location
   39 |         if (__RANDBOOL) {
      |            ^
if (_3 == 1)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:12: warning: use location
Cond in fucntion gdb_bfd_open basic block 2
 ================== possible direct basic block ================= 
from gdb_bfd_open basic block 3
 ================== possible direct basic block ================= 
from gdb_bfd_open basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_2 = rand ();
In function â€˜symfile_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:13: warning: use location
   39 |         if (__RANDBOOL) {
      |             ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee120
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4a161e64c8 type <integer_type 0x7f4a166bd7e0 long unsigned int> constant 4>
[40;33m =======POP node_fun stack:gdb_bfd_open========= [0m
[40;42m =======pre_check_funciton:remote_bfd_open========= [0m
[40;42m =======start_check_funciton:remote_bfd_open========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a166b0f78
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de200 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e6750>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_4 = gdb_bfd_open (name_2(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:48:16: warning: use location
   48 |         return gdb_bfd_open(name);
      |                ^
this stmt is child function---gdb_bfd_open-----

 ================== trace ================== 
trace fucntion name:gdb_bfd_open 
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:0 
_4 = gdb_bfd_open (name_2(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:48:16: warning: use location
this stmt is child function---gdb_bfd_open-----

 ================== trace ================== 
trace fucntion name:gdb_bfd_open 
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b0f78
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de200 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e6750>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:remote_bfd_open========= [0m
[40;42m =======pre add _ fucntion:remote_filename_p========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path remote_filename_p  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strncmp========= [0m
[40;33m =======POP node_fun stack:strncmp========= [0m
[40;42m =======pre_check_funciton:remote_filename_p========= [0m
[40;42m =======start_check_funciton:remote_filename_p========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee900
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de680 filename>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f4a161e6840>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_1 = strncmp (filename_4(D), "remote:", 7);
./benchmarks/binutils/double_free_4/binutils_df_4.c:16:16: warning: use location
   16 |         return strncmp (filename, "remote:", 7) == 0;
      |                ^
this stmt is child function---strncmp-----

 ================== trace ================== 
trace fucntion name:strncmp 

 ================== trace ================== 
trace fucntion free:0 
_2 = _1 == 0;
./benchmarks/binutils/double_free_4/binutils_df_4.c:16:49: warning: use location
   16 |         return strncmp (filename, "remote:", 7) == 0;
      |                                                 ^
_5 = (int) _2;
./benchmarks/binutils/double_free_4/binutils_df_4.c:16:49: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee900
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de680 filename>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f4a161e6840>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:remote_filename_p========= [0m
[40;42m =======pre_check_funciton:symfile_bfd_open========= [0m
[40;42m =======start_check_funciton:symfile_bfd_open========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a166b0948
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt name_10 = strdup (name_8(D));
    version:10
    ptr-info 0x7f4a161e66f0>
# .MEM_29 = VDEF <.MEM_28(D)>
name_10 = strdup (name_8(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
_1 = remote_filename_p (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:13: warning: use location
   57 |         if (remote_filename_p (name))
      |             ^
this stmt is child function---remote_filename_p-----

 ================== trace ================== 
trace fucntion name:remote_filename_p 
[40;44m =======trace_function_path remote_filename_p  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:remote_filename_p========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strncmp========= [0m
[40;46m =======add node_fun stack:strncmp========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (_1 != 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:12: warning: use location
   57 |         if (remote_filename_p (name))
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:12: warning: use location
Cond in fucntion symfile_bfd_open basic block 2
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 3
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
name_10 = strdup (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:66:16: warning: use location
   66 |         name = strdup (name);   /* allocation site */
      |                ^
this stmt is child function---strdup-----

 ================== trace ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
   76 |         free (name);
      |         ^
this stmt is child function---free-----

 ================== find ================== 
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
error ("", name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:73:25: warning: use location
   73 |                         error ("", name);
      |                         ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
make_cleanup (free, name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:72:25: warning: use location
   72 |                         make_cleanup (free, name);
      |                         ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
desc_13 = openp (_2, name_10, &absolute_name);
./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16: warning: use location
   68 |         desc = openp (getenv ("PATH"), name, &absolute_name);
      |                ^
this stmt is child function---openp-----

 ================== trace ================== 
trace fucntion name:openp 
[40;44m =======trace_function_path openp  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:openp========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m

 ================== trace ================== 
trace fucntion free:1 
error ("can\'t open to read symbols", name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:61:33: warning: use location
   61 |                                 error (("can't open to read symbols"), name);
      |                                 ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
sym_bfd_24 = remote_bfd_open (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:59:35: warning: use location
   59 |                         sym_bfd = remote_bfd_open (name);
      |                                   ^
this stmt is child function---remote_bfd_open-----

 ================== trace ================== 
trace fucntion name:remote_bfd_open 
[40;44m =======trace_function_path remote_bfd_open  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:remote_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:gdb_bfd_open========= [0m
gdb_bfd_open this fucntion return value is heap-object 
remote_bfd_open this fucntion return value is heap-object gdb_bfd_open
[40;46m =======add node_fun stack:gdb_bfd_open========= [0m
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location
this stmt have mutiple branch --------
if (sym_bfd_24 == 0B)
./benchmarks/binutils/double_free_4/binutils_df_4.c:60:28: warning: use location
   60 |                         if (!sym_bfd)
      |                            ^
if (sym_bfd_24 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:60:28: warning: use location
Cond in fucntion symfile_bfd_open basic block 3
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 4
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b0948
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt name_10 = strdup (name_8(D));
    version:10
    ptr-info 0x7f4a161e66f0>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
   76 |         free (name);
      |         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: Use after free error!: free location 
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 6
if (desc_13 < 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:70:12: warning: use location
   70 |         if (desc < 0)
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: Use after free error!: free location 
   76 |         free (name);
      |         ^
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 6
if (desc_13 < 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:70:12: warning: use location
   70 |         if (desc < 0)
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f4a166b0900
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e66d8>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_1 = remote_filename_p (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:13: warning: use location
   57 |         if (remote_filename_p (name))
      |             ^
this stmt is child function---remote_filename_p-----

 ================== trace ================== 
trace fucntion name:remote_filename_p 
[40;44m =======trace_function_path remote_filename_p  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:remote_filename_p========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strncmp========= [0m
[40;46m =======add node_fun stack:strncmp========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (_1 != 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:12: warning: use location
   57 |         if (remote_filename_p (name))
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:12: warning: use location
Cond in fucntion symfile_bfd_open basic block 2
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 3
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
name_10 = strdup (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:66:16: warning: use location
   66 |         name = strdup (name);   /* allocation site */
      |                ^
this stmt is child function---strdup-----

 ================== trace ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
   76 |         free (name);
      |         ^
this stmt is child function---free-----

 ================== find ================== 
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
error ("", name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:73:25: warning: use location
   73 |                         error ("", name);
      |                         ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
make_cleanup (free, name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:72:25: warning: use location
   72 |                         make_cleanup (free, name);
      |                         ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
desc_13 = openp (_2, name_10, &absolute_name);
./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16: warning: use location
   68 |         desc = openp (getenv ("PATH"), name, &absolute_name);
      |                ^
this stmt is child function---openp-----

 ================== trace ================== 
trace fucntion name:openp 
[40;44m =======trace_function_path openp  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:openp========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m

 ================== trace ================== 
trace fucntion free:1 
error ("can\'t open to read symbols", name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:61:33: warning: use location
   61 |                                 error (("can't open to read symbols"), name);
      |                                 ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
sym_bfd_24 = remote_bfd_open (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:59:35: warning: use location
   59 |                         sym_bfd = remote_bfd_open (name);
      |                                   ^
this stmt is child function---remote_bfd_open-----

 ================== trace ================== 
trace fucntion name:remote_bfd_open 
[40;44m =======trace_function_path remote_bfd_open  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:remote_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:gdb_bfd_open========= [0m
gdb_bfd_open this fucntion return value is heap-object 
remote_bfd_open this fucntion return value is heap-object gdb_bfd_open
[40;46m =======add node_fun stack:gdb_bfd_open========= [0m
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location
this stmt have mutiple branch --------
if (sym_bfd_24 == 0B)
./benchmarks/binutils/double_free_4/binutils_df_4.c:60:28: warning: use location
   60 |                         if (!sym_bfd)
      |                            ^
if (sym_bfd_24 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:60:28: warning: use location
Cond in fucntion symfile_bfd_open basic block 3
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 4
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b0900
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e66d8>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: Use after free error!: free location 
   76 |         free (name);
      |         ^
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 6
if (desc_13 < 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:70:12: warning: use location
   70 |         if (desc < 0)
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a166b0900
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e66d8>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_1 = remote_filename_p (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:13: warning: use location
   57 |         if (remote_filename_p (name))
      |             ^
this stmt is child function---remote_filename_p-----

 ================== trace ================== 
trace fucntion name:remote_filename_p 
[40;44m =======trace_function_path remote_filename_p  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:remote_filename_p========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strncmp========= [0m
[40;46m =======add node_fun stack:strncmp========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (_1 != 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:12: warning: use location
   57 |         if (remote_filename_p (name))
      |            ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:57:12: warning: use location
Cond in fucntion symfile_bfd_open basic block 2
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 3
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
name_10 = strdup (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:66:16: warning: use location
   66 |         name = strdup (name);   /* allocation site */
      |                ^
this stmt is child function---strdup-----

 ================== trace ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
   76 |         free (name);
      |         ^
this stmt is child function---free-----

 ================== find ================== 
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
error ("", name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:73:25: warning: use location
   73 |                         error ("", name);
      |                         ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
make_cleanup (free, name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:72:25: warning: use location
   72 |                         make_cleanup (free, name);
      |                         ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
desc_13 = openp (_2, name_10, &absolute_name);
./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16: warning: use location
   68 |         desc = openp (getenv ("PATH"), name, &absolute_name);
      |                ^
this stmt is child function---openp-----

 ================== trace ================== 
trace fucntion name:openp 
[40;44m =======trace_function_path openp  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:openp========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m

 ================== trace ================== 
trace fucntion free:1 
error ("can\'t open to read symbols", name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:61:33: warning: use location
   61 |                                 error (("can't open to read symbols"), name);
      |                                 ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
sym_bfd_24 = remote_bfd_open (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:59:35: warning: use location
   59 |                         sym_bfd = remote_bfd_open (name);
      |                                   ^
this stmt is child function---remote_bfd_open-----

 ================== trace ================== 
trace fucntion name:remote_bfd_open 
[40;44m =======trace_function_path remote_bfd_open  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:remote_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:gdb_bfd_open========= [0m
gdb_bfd_open this fucntion return value is heap-object 
remote_bfd_open this fucntion return value is heap-object gdb_bfd_open
[40;46m =======add node_fun stack:gdb_bfd_open========= [0m
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :1========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location
this stmt have mutiple branch --------
if (sym_bfd_24 == 0B)
./benchmarks/binutils/double_free_4/binutils_df_4.c:60:28: warning: use location
   60 |                         if (!sym_bfd)
      |                            ^
if (sym_bfd_24 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:60:28: warning: use location
Cond in fucntion symfile_bfd_open basic block 3
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 4
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b0900
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e66d8>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: Use after free error!: free location 
   76 |         free (name);
      |         ^
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=succs:= 6
if (desc_13 < 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:70:12: warning: use location
   70 |         if (desc < 0)
      |            ^
	relate logic:= 0
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4cc0
    type <pointer_type 0x7f4a161dc1f8
        type <array_type 0x7f4a161dc150 type <integer_type 0x7f4a161d1738 char>
            BLK
            size <integer_cst 0x7f4a161c8888 constant 216>
            unit-size <integer_cst 0x7f4a161c8870 constant 27>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161dc0a8>
            pointer_to_this <pointer_type 0x7f4a161dc1f8>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a166a6a20 type <array_type 0x7f4a161dc150>
        readonly constant static "can't open to read symbols\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:61:12 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:61:12 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:61:12>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4d40
    type <pointer_type 0x7f4a161dc498
        type <array_type 0x7f4a161dc3f0 type <integer_type 0x7f4a161d1738 char>
            BLK
            size <integer_cst 0x7f4a161c88b8 constant 40>
            unit-size <integer_cst 0x7f4a161c88a0 constant 5>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161dc348>
            pointer_to_this <pointer_type 0x7f4a161dc498>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a168a4d20 type <array_type 0x7f4a161dc3f0>
        readonly constant static "PATH\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a166b0870
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
   
    def_stmt _2 = getenv ("PATH");
    version:2
    ptr-info 0x7f4a161e66a8>
# .MEM_30 = VDEF <.MEM_29>
_2 = getenv ("PATH");

 ================== trace ptable================== 
trace fucntion name:getenv 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---getenv-----
this other function ------getenv-----
 
 Start check Pointer Collect  

======================================================================
_2 = getenv ("PATH");
./benchmarks/binutils/double_free_4/binutils_df_4.c:68:23: warning: use location
   68 |         desc = openp (getenv ("PATH"), name, &absolute_name);
      |                       ^
this stmt is child function---getenv-----

 ================== trace ================== 
trace fucntion name:getenv 

 ================== trace ================== 
trace fucntion free:0 
desc_13 = openp (_2, name_10, &absolute_name);
./benchmarks/binutils/double_free_4/binutils_df_4.c:68:16: warning: use location
   68 |         desc = openp (getenv ("PATH"), name, &absolute_name);
      |                ^
this stmt is child function---openp-----

 ================== trace ================== 
trace fucntion name:openp 
[40;44m =======trace_function_path openp  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:openp========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (desc_13 < 0)
./benchmarks/binutils/double_free_4/binutils_df_4.c:70:12: warning: use location
   70 |         if (desc < 0)
      |            ^
if (desc_13 < 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:70:12: warning: use location
Cond in fucntion symfile_bfd_open basic block 6
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 7
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
   76 |         free (name);
      |         ^
this stmt is child function---free-----

 ================== find ================== 
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
error ("", name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:73:25: warning: use location
   73 |                         error ("", name);
      |                         ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
make_cleanup (free, name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:72:25: warning: use location
   72 |                         make_cleanup (free, name);
      |                         ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b0870
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
   
    def_stmt _2 = getenv ("PATH");
    version:2
    ptr-info 0x7f4a161e66a8>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_26>
free (name_10);
./benchmarks/binutils/double_free_4/binutils_df_4.c:76:9: warning: use location
   76 |         free (name);
      |         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <addr_expr 0x7f4a168a4dc0
    type <pointer_type 0x7f4a161d1dc8
        type <function_type 0x7f4a161d1d20 type <void_type 0x7f4a166bdf18 void>
            QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f4a161d34b0 value <pointer_type 0x7f4a166c4000>
                chain <tree_list 0x7f4a166bcb18 value <void_type 0x7f4a166bdf18 void>>> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1dc8>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <function_decl 0x7f4a161d9500 free type <function_type 0x7f4a161d1d20>
        addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
        align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        attributes <tree_list 0x7f4a161d38e8
            purpose <identifier_node 0x7f4a166e2e10 nothrow>
            chain <tree_list 0x7f4a161d38c0
                purpose <identifier_node 0x7f4a166e2e38 leaf>>>>
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:72:18 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:72:18 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:72:18>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4e00
    type <pointer_type 0x7f4a161dc7e0
        type <array_type 0x7f4a161dc738 type <integer_type 0x7f4a161d1738 char>
            QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161dc690>
            pointer_to_this <pointer_type 0x7f4a161dc7e0>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a161e6450 type <array_type 0x7f4a161dc738>
        readonly constant static "\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:73:11 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:73:11 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:73:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4e60
    type <pointer_type 0x7f4a161d1dc8
        type <function_type 0x7f4a161d1d20 type <void_type 0x7f4a166bdf18 void>
            QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f4a161d34b0 value <pointer_type 0x7f4a166c4000>
                chain <tree_list 0x7f4a166bcb18 value <void_type 0x7f4a166bdf18 void>>> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1dc8>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <function_decl 0x7f4a161d9500 free type <function_type 0x7f4a161d1d20>
        addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
        align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        attributes <tree_list 0x7f4a161d38e8
            purpose <identifier_node 0x7f4a166e2e10 nothrow>
            chain <tree_list 0x7f4a161d38c0
                purpose <identifier_node 0x7f4a166e2e38 leaf>>>>
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:78:16 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:78:16 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:78:16>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a166b09d8
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt name_17 = absolute_name;
    version:17
    ptr-info 0x7f4a161e6708>
# VUSE <.MEM_34>
name_17 = absolute_name;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_37>
error ("can\'t open to read symbols", name_17);
bb index := 9
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_37>
error ("can\'t open to read symbols", name_17);
bb index := 9
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_37>
error ("can\'t open to read symbols", name_17);
bb index := 9
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_38 = VDEF <.MEM_37>
error ("can\'t open to read symbols", name_17);
bb index := 9
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
error ("can\'t open to read symbols", name_17);
./benchmarks/binutils/double_free_4/binutils_df_4.c:85:25: warning: use location
   85 |                         error (("can't open to read symbols"), name);
      |                         ^
this stmt is child function---error-----

 ================== trace ================== 
trace fucntion name:error 
[40;44m =======trace_function_path error  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:error========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_37 = VDEF <.MEM_36>
make_cleanup (free, name_17);
bb index := 9
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_37 = VDEF <.MEM_36>
make_cleanup (free, name_17);
bb index := 9
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_37 = VDEF <.MEM_36>
make_cleanup (free, name_17);
bb index := 9
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_37 = VDEF <.MEM_36>
make_cleanup (free, name_17);
bb index := 9
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 9 ,possiable got to succ := 4

======================================================================
make_cleanup (free, name_17);
./benchmarks/binutils/double_free_4/binutils_df_4.c:84:25: warning: use location
   84 |                         make_cleanup (free, name);      /* double-free */
      |                         ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_36 = VDEF <.MEM_35>
sym_bfd_20 = gdb_bfd_open (name_17);
bb index := 8
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_36 = VDEF <.MEM_35>
sym_bfd_20 = gdb_bfd_open (name_17);
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_36 = VDEF <.MEM_35>
sym_bfd_20 = gdb_bfd_open (name_17);
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_36 = VDEF <.MEM_35>
sym_bfd_20 = gdb_bfd_open (name_17);
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
sym_bfd_20 = gdb_bfd_open (name_17);
./benchmarks/binutils/double_free_4/binutils_df_4.c:80:19: warning: use location
   80 |         sym_bfd = gdb_bfd_open (name);
      |                   ^
this stmt is child function---gdb_bfd_open-----

 ================== trace ================== 
trace fucntion name:gdb_bfd_open 
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:0 
_3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (sym_bfd_20 == 0B)
bb index := 8
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (sym_bfd_20 == 0B)
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (sym_bfd_20 == 0B)
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (sym_bfd_20 == 0B)
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
if (sym_bfd_20 == 0B)
./benchmarks/binutils/double_free_4/binutils_df_4.c:81:12: warning: use location
   81 |         if (!sym_bfd)
      |            ^
if (sym_bfd_20 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:81:12: warning: use location
Cond in fucntion symfile_bfd_open basic block 8
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 9
 ================== possible direct basic block ================= 
from symfile_bfd_open basic block 10
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_35 = VDEF <.MEM_34>
make_cleanup (free, name_17);
bb index := 8
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_35 = VDEF <.MEM_34>
make_cleanup (free, name_17);
bb index := 8
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_35 = VDEF <.MEM_34>
make_cleanup (free, name_17);
bb index := 8
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_35 = VDEF <.MEM_34>
make_cleanup (free, name_17);
bb index := 8
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 8 ,possiable got to succ := 4

======================================================================
make_cleanup (free, name_17);
./benchmarks/binutils/double_free_4/binutils_df_4.c:78:9: warning: use location
   78 |         make_cleanup (free, name);                      /* double-free */
      |         ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b09d8
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
    var <parm_decl 0x7f4a161de180 name>
    def_stmt name_17 = absolute_name;
    version:17
    ptr-info 0x7f4a161e6708>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4ec0
    type <pointer_type 0x7f4a161d1dc8
        type <function_type 0x7f4a161d1d20 type <void_type 0x7f4a166bdf18 void>
            QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f4a161d34b0 value <pointer_type 0x7f4a166c4000>
                chain <tree_list 0x7f4a166bcb18 value <void_type 0x7f4a166bdf18 void>>> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1dc8>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <function_decl 0x7f4a161d9500 free type <function_type 0x7f4a161d1d20>
        addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
        align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        attributes <tree_list 0x7f4a161d38e8
            purpose <identifier_node 0x7f4a166e2e10 nothrow>
            chain <tree_list 0x7f4a161d38c0
                purpose <identifier_node 0x7f4a166e2e38 leaf>>>>
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:84:18 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:84:18 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:84:18>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a4f00
    type <pointer_type 0x7f4a161dc1f8
        type <array_type 0x7f4a161dc150 type <integer_type 0x7f4a161d1738 char>
            BLK
            size <integer_cst 0x7f4a161c8888 constant 216>
            unit-size <integer_cst 0x7f4a161c8870 constant 27>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161dc0a8>
            pointer_to_this <pointer_type 0x7f4a161dc1f8>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a166a6a50 type <array_type 0x7f4a161dc150>
        readonly constant static "can't open to read symbols\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:85:11 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:85:11 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:85:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:symfile_bfd_open========= [0m
[40;44m =======node_fun:remote_bfd_open========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path remote_bfd_open  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:gdb_bfd_open========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path gdb_bfd_open  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:gdb_bfd_open========= [0m
[40;42m =======start_check_funciton:gdb_bfd_open========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee240
    type <pointer_type 0x7f4a161d8348
        type <integer_type 0x7f4a161d82a0 bfd SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d8348>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f4a161ecab0 abfd>
    def_stmt abfd_11 = malloc (4);
    version:11
    ptr-info 0x7f4a161e67b0>
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
_4 = PHI <0B(2), abfd_11(3)>
In function â€˜remote_bfd_openâ€™:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
abfd_11 = malloc (4);
In function â€˜remote_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:40:29: warning: use location
   40 |                 bfd *abfd = malloc(sizeof(bfd));
      |                             ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee240
    type <pointer_type 0x7f4a161d8348
        type <integer_type 0x7f4a161d82a0 bfd SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d8348>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f4a161ecab0 abfd>
    def_stmt abfd_11 = malloc (4);
    version:11
    ptr-info 0x7f4a161e67b0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a49a0
    type <pointer_type 0x7f4a161db348
        type <array_type 0x7f4a161db2a0 type <integer_type 0x7f4a161d1738 char>
            SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161db1f8>
            pointer_to_this <pointer_type 0x7f4a161db348>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a168a4fe0 type <array_type 0x7f4a161db2a0>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee120
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_3 = _2 % 2;
In function â€˜remote_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:13: warning: use location
   39 |         if (__RANDBOOL) {
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_3 == 1)
In function â€˜remote_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:12: warning: use location
   39 |         if (__RANDBOOL) {
      |            ^
if (_3 == 1)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:12: warning: use location
Cond in fucntion gdb_bfd_open basic block 2
 ================== possible direct basic block ================= 
from gdb_bfd_open basic block 3
 ================== possible direct basic block ================= 
from gdb_bfd_open basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_2 = rand ();
In function â€˜remote_bfd_openâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:13: warning: use location
   39 |         if (__RANDBOOL) {
      |             ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee120
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4a161e64c8 type <integer_type 0x7f4a166bd7e0 long unsigned int> constant 4>
[40;33m =======POP node_fun stack:gdb_bfd_open========= [0m
[40;42m =======pre_check_funciton:remote_bfd_open========= [0m
[40;42m =======start_check_funciton:remote_bfd_open========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a166b0f78
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de200 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e6750>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_4 = gdb_bfd_open (name_2(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:48:16: warning: use location
   48 |         return gdb_bfd_open(name);
      |                ^
this stmt is child function---gdb_bfd_open-----

 ================== trace ================== 
trace fucntion name:gdb_bfd_open 
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:0 
_4 = gdb_bfd_open (name_2(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:48:16: warning: use location
this stmt is child function---gdb_bfd_open-----

 ================== trace ================== 
trace fucntion name:gdb_bfd_open 
[40;44m =======trace_function_path gdb_bfd_open  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:gdb_bfd_open========= [0m
[40;36m ======= find relate stmt with name ========= [0m
[40;36m ======= relate stmt argument:name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a166b0f78
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de200 name>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e6750>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:remote_bfd_open========= [0m
[40;44m =======node_fun:gdb_bfd_open========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path gdb_bfd_open  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:gdb_bfd_open========= [0m
[40;42m =======start_check_funciton:gdb_bfd_open========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee240
    type <pointer_type 0x7f4a161d8348
        type <integer_type 0x7f4a161d82a0 bfd SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d8348>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f4a161ecab0 abfd>
    def_stmt abfd_11 = malloc (4);
    version:11
    ptr-info 0x7f4a161e67b0>
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
_4 = PHI <0B(2), abfd_11(3)>
In function â€˜gdb_bfd_openâ€™:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
abfd_11 = malloc (4);
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
abfd_11 = malloc (4);
./benchmarks/binutils/double_free_4/binutils_df_4.c:40:29: warning: use location
   40 |                 bfd *abfd = malloc(sizeof(bfd));
      |                             ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee240
    type <pointer_type 0x7f4a161d8348
        type <integer_type 0x7f4a161d82a0 bfd SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d8348>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f4a161ecab0 abfd>
    def_stmt abfd_11 = malloc (4);
    version:11
    ptr-info 0x7f4a161e67b0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a168a49a0
    type <pointer_type 0x7f4a161db348
        type <array_type 0x7f4a161db2a0 type <integer_type 0x7f4a161d1738 char>
            SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161db1f8>
            pointer_to_this <pointer_type 0x7f4a161db348>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a168a4fe0 type <array_type 0x7f4a161db2a0>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:37:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee120
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = _2 % 2;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_3 = _2 % 2;
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:13: warning: use location
   39 |         if (__RANDBOOL) {
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_3 == 1)
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
if (_3 == 1)
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:12: warning: use location
   39 |         if (__RANDBOOL) {
      |            ^
if (_3 == 1)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:12: warning: use location
Cond in fucntion gdb_bfd_open basic block 2
 ================== possible direct basic block ================= 
from gdb_bfd_open basic block 3
 ================== possible direct basic block ================= 
from gdb_bfd_open basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
_2 = rand ();
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
_2 = rand ();
./benchmarks/binutils/double_free_4/binutils_df_4.c:39:13: warning: use location
   39 |         if (__RANDBOOL) {
      |             ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee120
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4a161e64c8 type <integer_type 0x7f4a166bd7e0 long unsigned int> constant 4>
[40;33m =======POP node_fun stack:gdb_bfd_open========= [0m
[40;44m =======node_fun:error========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path error  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:error========= [0m
[40;42m =======start_check_funciton:error========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4a161f10c0
    type <pointer_type 0x7f4a161dbbd0
        type <array_type 0x7f4a161dbb28 type <integer_type 0x7f4a161d1738 char>
            DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161dba80>
            pointer_to_this <pointer_type 0x7f4a161dbbd0>>
        unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a161f10a0 type <array_type 0x7f4a161dbb28>
        readonly constant static "%s: %s\012\000">
    ./benchmarks/binutils/double_free_4/binutils_df_4.c:33:9 start: ./benchmarks/binutils/double_free_4/binutils_df_4.c:33:9 finish: ./benchmarks/binutils/double_free_4/binutils_df_4.c:33:9>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:error========= [0m
[40;44m =======node_fun:openp========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path openp  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre_check_funciton:openp========= [0m
[40;42m =======start_check_funciton:openp========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee510
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
   
    def_stmt _1 = strdup (name_8(D));
    version:1
    ptr-info 0x7f4a161e67f8>
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_41>
return _3;
In function â€˜openpâ€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
_1 = strdup (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:44: warning: use location
   25 |                         *filename_opened = strdup(name); /* allocation site */
      |                                            ^
this stmt is child function---strdup-----

 ================== trace ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
*filename_opened_6(D) = _1;
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:42: warning: use location
   25 |                         *filename_opened = strdup(name); /* allocation site */
      |                                          ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee510
    type <pointer_type 0x7f4a161d8000
        type <integer_type 0x7f4a161d1738 char public QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d8000>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
        pointer_to_this <pointer_type 0x7f4a161d80a8>>
   
    def_stmt _1 = strdup (name_8(D));
    version:1
    ptr-info 0x7f4a161e67f8>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee678
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de500 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e6828>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14(D)>
_1 = strdup (name_8(D));
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
_1 = strdup (name_8(D));
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:44: warning: use location
   25 |                         *filename_opened = strdup(name); /* allocation site */
      |                                            ^
this stmt is child function---strdup-----

 ================== trace ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
*filename_opened_6(D) = _1;
bb index := 3
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 4

======================================================================
*filename_opened_6(D) = _1;
./benchmarks/binutils/double_free_4/binutils_df_4.c:25:42: warning: use location
   25 |                         *filename_opened = strdup(name); /* allocation site */
      |                                          ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee678
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de500 name>
    def_stmt GIMPLE_NOP
    version:8
    ptr-info 0x7f4a161e6828>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee558
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>
# .MEM_17 = VDEF <.MEM_13>
_2 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_3 = _2 % 2;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
_4 = _3 == 1;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
_2 = rand ();
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee558
    type <integer_type 0x7f4a166bd5e8 int public SI
        size <integer_cst 0x7f4a166a8df8 constant 32>
        unit-size <integer_cst 0x7f4a166a8e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd5e8 precision:32 min <integer_cst 0x7f4a166a8db0 -2147483648> max <integer_cst 0x7f4a166a8dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4a166c49d8>>
   
    def_stmt _2 = rand ();
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:openp========= [0m
[40;44m =======node_fun:remote_filename_p========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path remote_filename_p  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:strncmp========= [0m
[40;33m =======POP node_fun stack:strncmp========= [0m
[40;42m =======pre_check_funciton:remote_filename_p========= [0m
[40;42m =======start_check_funciton:remote_filename_p========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161ee900
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de680 filename>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f4a161e6840>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_1 = strncmp (filename_4(D), "remote:", 7);
In function â€˜remote_filename_pâ€™:
./benchmarks/binutils/double_free_4/binutils_df_4.c:16:16: warning: use location
   16 |         return strncmp (filename, "remote:", 7) == 0;
      |                ^
this stmt is child function---strncmp-----

 ================== trace ================== 
trace fucntion name:strncmp 

 ================== trace ================== 
trace fucntion free:0 
_2 = _1 == 0;
./benchmarks/binutils/double_free_4/binutils_df_4.c:16:49: warning: use location
   16 |         return strncmp (filename, "remote:", 7) == 0;
      |                                                 ^
_5 = (int) _2;
./benchmarks/binutils/double_free_4/binutils_df_4.c:16:49: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161ee900
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de680 filename>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f4a161e6840>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:remote_filename_p========= [0m
[40;44m =======node_fun:make_cleanup========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161eed38
    type <pointer_type 0x7f4a161d1f18
        type <record_type 0x7f4a161d1e70 cleanup BLK
            size <integer_cst 0x7f4a166a8f18 constant 256>
            unit-size <integer_cst 0x7f4a166c6018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a161d1e70 fields <field_decl 0x7f4a161d42f8 next> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1f18>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4a161d8e70>>
    var <var_decl 0x7f4a161f7120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4a161e6918>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161eed38
    type <pointer_type 0x7f4a161d1f18
        type <record_type 0x7f4a161d1e70 cleanup BLK
            size <integer_cst 0x7f4a166a8f18 constant 256>
            unit-size <integer_cst 0x7f4a166c6018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a161d1e70 fields <field_decl 0x7f4a161d42f8 next> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1f18>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4a161d8e70>>
    var <var_decl 0x7f4a161f7120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4a161e6918>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4a161e65d0 type <integer_type 0x7f4a166bd7e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161eeb40
    type <pointer_type 0x7f4a161d8e70
        type <pointer_type 0x7f4a161d1f18 type <record_type 0x7f4a161d1e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4a161d8e70>>
        public unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de800 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e68a0>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_4/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_4/../include/common.h:145:10: warning: use location
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161eeb40
    type <pointer_type 0x7f4a161d8e70
        type <pointer_type 0x7f4a161d1f18 type <record_type 0x7f4a161d1e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4a161d8e70>>
        public unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de800 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e68a0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;42m =======pre_check_funciton:make_cleanup========= [0m
[40;42m =======start_check_funciton:make_cleanup========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4a161f1280
    type <pointer_type 0x7f4a161d8e70
        type <pointer_type 0x7f4a161d1f18 type <record_type 0x7f4a161d1e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4a161d8e70>>
        public unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7f4a16f50b40 cleanup_chain type <pointer_type 0x7f4a161d1f18>
        addressable static unsigned DI ./benchmarks/binutils/double_free_4/../include/common.h:49:24 size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c> initial <error_mark 0x7f4a166a8ba0>>
    ./benchmarks/binutils/double_free_4/../include/common.h:151:10 start: ./benchmarks/binutils/double_free_4/../include/common.h:151:10 finish: ./benchmarks/binutils/double_free_4/../include/common.h:151:10>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:make_cleanup========= [0m
[40;44m =======node_fun:make_my_cleanup========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161eed38
    type <pointer_type 0x7f4a161d1f18
        type <record_type 0x7f4a161d1e70 cleanup BLK
            size <integer_cst 0x7f4a166a8f18 constant 256>
            unit-size <integer_cst 0x7f4a166c6018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a161d1e70 fields <field_decl 0x7f4a161d42f8 next> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1f18>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4a161d8e70>>
    var <var_decl 0x7f4a161f7120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4a161e6918>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/double_free_4/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161eed38
    type <pointer_type 0x7f4a161d1f18
        type <record_type 0x7f4a161d1e70 cleanup BLK
            size <integer_cst 0x7f4a166a8f18 constant 256>
            unit-size <integer_cst 0x7f4a166c6018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a161d1e70 fields <field_decl 0x7f4a161d42f8 next> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1f18>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4a161d8e70>>
    var <var_decl 0x7f4a161f7120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4a161e6918>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4a161e65d0 type <integer_type 0x7f4a166bd7e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161eeb40
    type <pointer_type 0x7f4a161d8e70
        type <pointer_type 0x7f4a161d1f18 type <record_type 0x7f4a161d1e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4a161d8e70>>
        public unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de800 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e68a0>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_4/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_4/../include/common.h:145:10: warning: use location
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161eeb40
    type <pointer_type 0x7f4a161d8e70
        type <pointer_type 0x7f4a161d1f18 type <record_type 0x7f4a161d1e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4a161d8e70>>
        public unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4a161de800 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4a161e68a0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;44m =======node_fun:make_my_cleanup2========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4a161eed38
    type <pointer_type 0x7f4a161d1f18
        type <record_type 0x7f4a161d1e70 cleanup BLK
            size <integer_cst 0x7f4a166a8f18 constant 256>
            unit-size <integer_cst 0x7f4a166c6018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a161d1e70 fields <field_decl 0x7f4a161d42f8 next> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1f18>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4a161d8e70>>
    var <var_decl 0x7f4a161f7120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4a161e6918>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_41>
return _3;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_4/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_4/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_4/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_4/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_4/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_4/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
./benchmarks/binutils/double_free_4/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
./benchmarks/binutils/double_free_4/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
./benchmarks/binutils/double_free_4/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
./benchmarks/binutils/double_free_4/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
beacuse in succ := 10 have return or exit
# VUSE <.MEM_41>
return _3;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 10

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_12>
return _4;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
   28 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_17>
return _12;
./benchmarks/binutils/double_free_4/binutils_df_4.c:28:16: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_4/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
./benchmarks/binutils/double_free_4/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4a161eed38
    type <pointer_type 0x7f4a161d1f18
        type <record_type 0x7f4a161d1e70 cleanup BLK
            size <integer_cst 0x7f4a166a8f18 constant 256>
            unit-size <integer_cst 0x7f4a166c6018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a161d1e70 fields <field_decl 0x7f4a161d42f8 next> context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c>
            pointer_to_this <pointer_type 0x7f4a161d1f18>>
        public unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4a161d8e70>>
    var <var_decl 0x7f4a161f7120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4a161e6918>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4a161e65d0 type <integer_type 0x7f4a166bd7e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;44m =======node_fun:do_cleanups========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4a161f14a0
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4a166b2188 type <integer_type 0x7f4a161d17e0 char>
       
        arg:0 <string_cst 0x7f4a161f5720 type <array_type 0x7f4a161db0a8>
            readonly constant static "cleanup!!!!! =========\000">
        arg:1 <integer_cst 0x7f4a166a8f48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a161f1500
    type <pointer_type 0x7f4a161db348
        type <array_type 0x7f4a161db2a0 type <integer_type 0x7f4a161d1738 char>
            SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161db1f8>
            pointer_to_this <pointer_type 0x7f4a161db348>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a161f14e0 type <array_type 0x7f4a161db2a0>
        readonly constant static "%x\012\000">
    ./benchmarks/binutils/double_free_4/../include/common.h:108:11 start: ./benchmarks/binutils/double_free_4/../include/common.h:108:11 finish: ./benchmarks/binutils/double_free_4/../include/common.h:108:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
[40;42m =======pre_check_funciton:do_cleanups========= [0m
[40;42m =======start_check_funciton:do_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4a161f1400
    type <pointer_type 0x7f4a161d8e70
        type <pointer_type 0x7f4a161d1f18 type <record_type 0x7f4a161d1e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4a166a8bb8 constant 64>
            unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4a161d8e70>>
        public unsigned DI size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7f4a16f50b40 cleanup_chain type <pointer_type 0x7f4a161d1f18>
        addressable static unsigned DI ./benchmarks/binutils/double_free_4/../include/common.h:49:24 size <integer_cst 0x7f4a166a8bb8 64> unit-size <integer_cst 0x7f4a166a8bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4a166b3168 ./benchmarks/binutils/double_free_4/binutils_df_4.c> initial <error_mark 0x7f4a166a8ba0>>
    ./benchmarks/binutils/double_free_4/../include/common.h:118:3 start: ./benchmarks/binutils/double_free_4/../include/common.h:118:3 finish: ./benchmarks/binutils/double_free_4/../include/common.h:118:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_cleanups========= [0m
[40;44m =======node_fun:do_my_cleanups========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4a161f14a0
    type <pointer_type 0x7f4a161d1888
        type <integer_type 0x7f4a161d17e0 char readonly QI
            size <integer_cst 0x7f4a166a8ca8 constant 8>
            unit-size <integer_cst 0x7f4a166a8cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4a166bd3f0 precision:8 min <integer_cst 0x7f4a161c8768 -128> max <integer_cst 0x7f4a161c8750 127>
            pointer_to_this <pointer_type 0x7f4a161d1888>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4a166b2188 type <integer_type 0x7f4a161d17e0 char>
       
        arg:0 <string_cst 0x7f4a161f5720 type <array_type 0x7f4a161db0a8>
            readonly constant static "cleanup!!!!! =========\000">
        arg:1 <integer_cst 0x7f4a166a8f48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4a161f1500
    type <pointer_type 0x7f4a161db348
        type <array_type 0x7f4a161db2a0 type <integer_type 0x7f4a161d1738 char>
            SI
            size <integer_cst 0x7f4a166a8df8 constant 32>
            unit-size <integer_cst 0x7f4a166a8e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4a161db1f8>
            pointer_to_this <pointer_type 0x7f4a161db348>>
        unsigned DI
        size <integer_cst 0x7f4a166a8bb8 constant 64>
        unit-size <integer_cst 0x7f4a166a8bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4a161f14e0 type <array_type 0x7f4a161db2a0>
        readonly constant static "%x\012\000">
    ./benchmarks/binutils/double_free_4/../include/common.h:108:11 start: ./benchmarks/binutils/double_free_4/../include/common.h:108:11 finish: ./benchmarks/binutils/double_free_4/../include/common.h:108:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = time (0B);
_2 = (unsigned int) _1;
srand (_2);
symfile_bfd_open ("test");
do_cleanups (&sentinel_cleanup);
return 0;

=======Mapping node_fun:symfile_bfd_open=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741823]:
_1 = remote_filename_p (name_8(D));
if (_1 != 0)
  goto <bb 3>; [34.00%]
else
  goto <bb 6>; [66.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 365072224]:
sym_bfd_24 = remote_bfd_open (name_8(D));
if (sym_bfd_24 == 0B)
  goto <bb 4>; [0.04%]
else
  goto <bb 5>; [99.96%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 146029]:
error ("can\'t open to read symbols", name_8(D));

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 365072224]:
goto <bb 10>; [100.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 708669600]:
name_10 = strdup (name_8(D));
_2 = getenv ("PATH");
desc_13 = openp (_2, name_10, &absolute_name);
if (desc_13 < 0)
  goto <bb 7>; [25.50%]
else
  goto <bb 8>; [74.50%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 180710750]:
make_cleanup (free, name_10);
error ("", name_10);

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 708669600]:
free (name_10);
name_17 = absolute_name;
make_cleanup (free, name_17);
sym_bfd_20 = gdb_bfd_open (name_17);
if (sym_bfd_20 == 0B)
  goto <bb 9>; [0.04%]
else
  goto <bb 10>; [99.96%]

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 283467]:
make_cleanup (free, name_17);
error ("can\'t open to read symbols", name_17);

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 1073741824]:
# _3 = PHI <sym_bfd_24(5), sym_bfd_20(8), sym_bfd_20(9)>
absolute_name ={v} {CLOBBER};
return _3;

=======Mapping node_fun:remote_bfd_open=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_4 = gdb_bfd_open (name_2(D));
return _4;

=======Mapping node_fun:gdb_bfd_open=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = MEM[(int *)name_7(D)];
printf ("%d\n", _1);
_2 = rand ();
_3 = _2 % 2;
if (_3 == 1)
  goto <bb 3>; [38.32%]
else
  goto <bb 4>; [61.68%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 411457864]:
abfd_11 = malloc (4);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# _4 = PHI <0B(2), abfd_11(3)>
return _4;

=======Mapping node_fun:error=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
printf ("%s: %s\n", msg_2(D), s_3(D));
return;

=======Mapping node_fun:openp=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
if (filename_opened_6(D) != 0B)
  goto <bb 3>; [53.47%]
else
  goto <bb 4>; [46.53%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 574129753]:
_1 = strdup (name_8(D));
*filename_opened_6(D) = _1;

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
_2 = rand ();
_3 = _2 % 2;
_4 = _3 == 1;
_12 = (int) _4;
return _12;

=======Mapping node_fun:remote_filename_p=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = strncmp (filename_4(D), "remote:", 7);
_2 = _1 == 0;
_5 = (int) _2;
return _5;

=======Mapping node_fun:make_cleanup=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
return _5;

=======Mapping node_fun:make_my_cleanup=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
return _6;

=======Mapping node_fun:make_my_cleanup2=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
new_4 = malloc (32);
old_chain_6 = *pmy_chain_5(D);
_1 = *pmy_chain_5(D);
new_4->next = _1;
new_4->function = function_8(D);
new_4->free_arg = free_arg_10(D);
new_4->arg = arg_12(D);
*pmy_chain_5(D) = new_4;
if (old_chain_6 == 0B)
  goto <bb 3>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 429496]:
exit (1);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073312329]:
return old_chain_6;

=======Mapping node_fun:do_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
do_my_cleanups (&cleanup_chain, old_chain_2(D));
return;

=======Mapping node_fun:do_my_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111598]:
goto <bb 6>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
_1 = ptr_12->next;
*pmy_chain_11(D) = _1;
_2 = ptr_12->function;
_3 = ptr_12->arg;
_2 (_3);
__builtin_puts (&"cleanup!!!!! ========="[0]);
_4 = ptr_12->arg;
printf ("%x\n", _4);
_5 = ptr_12->free_arg;
if (_5 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 5>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 668941161]:
_6 = ptr_12->free_arg;
_7 = ptr_12->arg;
_6 (_7);

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 955630225]:
free (ptr_12);

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 1073741824]:
ptr_12 = *pmy_chain_11(D);
if (ptr_12 != old_chain_13(D))
  goto <bb 3>; [89.00%]
else
  goto <bb 7>; [11.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 118111600]:
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 4 [0m
[40;34m    gimple free   count : 2 [0m
[40;34m    find Entry point : 14 [0m
[40;34m    used_stmt array stack totalsize of : 0.001744 mb[0m
[40;34m    collect time: : 0.000219 s [0m
[40;34m    algorithm time: 0.128962 s [0m
[40;34m    gimple stmt count : : 83 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cp                   ------------|      |      |      |      |          |          |
inline               ------------|      |      |      |      |          |          |
fixup_cfg            ------------|      |      |      |      |          |          |
adjust_alignment     ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
backprop             ------------|      |      |      |      |          |          |
phiprop              ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
alias                ------------|      |      |      |      |          |          |
retslot              ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
stdarg               ------------|      |      |      |      |          |          |
cdce                 ------------|      |      |      |      |          |          |
cselim               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
ifcombine            ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ch                               |      |      |      |      |     +0.9%|     +0.0%|
cplxlower                        |      |      |      |      |     +0.9%|     +0.0%|
sra                  ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     -0.6%|     -0.2%|
copyprop                         |      |      |      |      |     -0.6%|     -0.2%|
reassoc              ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
sincos               ------------|      |      |      |      |          |          |
laddress             ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
walloca              ------------|      |      |      |      |          |          |
sink                 ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
fix_loops            ------------|      |      |      |      |          |          |
loop                 ------------|      |      |      |      |          |          |
loopinit                         |      |      |      |      |    -80.9%|    -81.9%|
sccp                 ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
ivcanon              ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
cunroll              ------------|      |      |      |      |          |          |
ivopts               ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
loopdone             ------------|      |      |      |      |          |          |
no_loop                          |      |      |      |      |   +422.6%|   +452.1%|
veclower2            ------------|      |      |      |      |          |          |
switchlower          ------------|      |      |      |      |          |          |
reassoc              ------------|      |      |      |      |          |          |
slsr                 ------------|      |      |      |      |          |          |
dom                  ------------|      |      |      |      |          |          |
strlen               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
wrestrict            ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
fab                  ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
crited               ------------|      |      |      |      |          |          |
uncprop              ------------|      |      |      |      |          |          |
local-pure-const     ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
nrv                  ------------|      |      |      |      |          |          |
isel                 ------------|      |      |      |      |          |          |
optimized            ------------|      |      |      |      |          |          |
expand                           |      |      |      |      |----------|----------|
vregs                            |      |      |      |      |    +72.0%|    +36.8%|
into_cfglayout                   |      |      |      |      |     -0.4%|     -0.1%|
jump                             |      |      |      |      |     -1.0%|     -0.9%|
subreg1                          |      |      |      |      |     -0.6%|     -0.8%|
dfinit               ------------|      |      |      |      |          |          |
cse1                 ------------|      |      |      |      |          |          |
fwprop1                          |      |      |      |      |     -2.0%|     -2.0%|
ce1                              |      |      |      |      |     -2.1%|     -1.9%|
reginfo                          |      |      |      |      |          |     +0.1%|
loop2                ------------|      |      |      |      |          |          |
loop2_init           ------------|      |      |      |      |          |          |
loop2_invariant      ------------|      |      |      |      |          |          |
loop2_done           ------------|      |      |      |      |          |          |
dse1                 ------------|      |      |      |      |          |          |
fwprop2              ------------|      |      |      |      |          |          |
init-regs            ------------|      |      |      |      |          |          |
combine                          |      |      |      |      |     +4.9%|     +5.7%|
ce2                              |      |      |      |      |     +4.7%|     +5.4%|
outof_cfglayout                  |      |      |      |      |     +0.2%|     +0.0%|
split1                           |      |      |      |      |     +0.2%|     +0.0%|
subreg3              ------------|      |      |      |      |          |          |
mode_sw              ------------|      |      |      |      |          |          |
asmcons              ------------|      |      |      |      |          |          |
ira                  ------------|      |      |      |      |          |          |
reload                           |      |      |      |      |    -13.0%|    -14.8%|
postreload                       |      |      |      |      |    -14.9%|    -17.3%|
split2                           |      |      |      |      |     +0.8%|     +0.7%|
cmpelim                          |      |      |      |      |     +0.8%|     +0.7%|
pro_and_epilogue                 |      |      |      |      |    +12.9%|    +14.1%|
dse2                             |      |      |      |      |    +11.4%|    +12.4%|
csa                  ------------|      |      |      |      |          |          |
jump2                ------------|      |      |      |      |          |          |
ce3                  ------------|      |      |      |      |          |          |
cprop_hardreg                    |      |      |      |      |     -0.2%|     -0.3%|
rtl_dce                          |      |      |      |      |     -0.2%|     -0.3%|
bbro                             |      |      |      |      |     +0.8%|     +0.2%|
split4                           |      |      |      |      |     +0.8%|     +0.2%|
stack                ------------|      |      |      |      |          |          |
zero_call_used_regs  ------------|      |      |      |      |          |          |
alignments           ------------|      |      |      |      |          |          |
