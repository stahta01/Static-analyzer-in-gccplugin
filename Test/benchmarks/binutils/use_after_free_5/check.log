./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c: In function â€˜savestringâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:21:3: warning: implicit declaration of function â€˜memcpyâ€™ [-Wimplicit-function-declaration]
   21 |   memcpy (p, ptr, len);
      |   ^~~~~~
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:8:1: note: include â€˜<string.h>â€™ or provide a declaration of â€˜memcpyâ€™
    7 | #include "../include/binutils.h"
  +++ |+#include <string.h>
    8 | 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:21:3: warning: incompatible implicit declaration of built-in function â€˜memcpyâ€™ [-Wbuiltin-declaration-mismatch]
   21 |   memcpy (p, ptr, len);
      |   ^~~~~~
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:21:3: note: include â€˜<string.h>â€™ or provide a declaration of â€˜memcpyâ€™
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c: In function â€˜strip_bg_charâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:37:14: warning: implicit declaration of function â€˜strlenâ€™ [-Wimplicit-function-declaration]
   37 |   p = args + strlen (args);
      |              ^~~~~~
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:37:14: note: include â€˜<string.h>â€™ or provide a declaration of â€˜strlenâ€™
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:37:14: warning: incompatible implicit declaration of built-in function â€˜strlenâ€™ [-Wbuiltin-declaration-mismatch]
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:37:14: note: include â€˜<string.h>â€™ or provide a declaration of â€˜strlenâ€™
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:41:26: warning: implicit declaration of function â€˜isspaceâ€™ [-Wimplicit-function-declaration]
   41 |       while (p > args && isspace (p[-1]))
      |                          ^~~~~~~
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:8:1: note: include â€˜<ctype.h>â€™ or provide a declaration of â€˜isspaceâ€™
    7 | #include "../include/binutils.h"
  +++ |+#include <ctype.h>
    8 | 
In file included from ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:6:
./benchmarks/binutils/use_after_free_5/../include/common.h:22:20: warning: implicit declaration of function â€˜strdupâ€™ [-Wimplicit-function-declaration]
   22 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:52:10: note: in expansion of macro â€˜xstrdupâ€™
   52 |   return xstrdup (args);        /* allocation site */
      |          ^~~~~~~
./benchmarks/binutils/use_after_free_5/../include/common.h:22:20: warning: incompatible implicit declaration of built-in function â€˜strdupâ€™ [-Wbuiltin-declaration-mismatch]
   22 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:52:10: note: in expansion of macro â€˜xstrdupâ€™
   52 |   return xstrdup (args);        /* allocation site */
      |          ^~~~~~~
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c: In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:68:19: warning: implicit declaration of function â€˜find_attach_targetâ€™ [-Wimplicit-function-declaration]
   68 |   attach_target = find_attach_target ();
      |                   ^~~~~~~~~~~~~~~~~~
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:68:17: warning: assignment to â€˜struct target_ops *â€™ from â€˜intâ€™ makes pointer from integer without a cast [-Wint-conversion]
   68 |   attach_target = find_attach_target ();
      |                 ^
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:79:7: warning: implicit declaration of function â€˜target_can_async_pâ€™ [-Wimplicit-function-declaration]
   79 |   if (target_can_async_p ())
      |       ^~~~~~~~~~~~~~~~~~
In file included from ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:6:
./benchmarks/binutils/use_after_free_5/../include/common.h:22:20: warning: incompatible implicit declaration of built-in function â€˜strdupâ€™ [-Wbuiltin-declaration-mismatch]
   22 | #define xstrdup(a) strdup(a)
      |                    ^~~~~~
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:85:21: note: in expansion of macro â€˜xstrdupâ€™
   85 |           a->args = xstrdup (args);     /* use-after-free */
      |                     ^~~~~~~
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: implicit declaration of function â€˜attach_command_post_waitâ€™ [-Wimplicit-function-declaration]
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cfg                  ------------|      |      |      |      |          |          |
ompexp                           |      |      |      |      |   +100.0%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
ssa                              |      |      |      |      |     -1.9%|          |
nothrow                          |      |      |      |      |     -1.9%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
einline              ------------|      |      |      |      |          |          |
early_optimizations  ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
forwprop                         |      |      |      |      |     -0.6%|          |
ethread                          |      |      |      |      |     -0.6%|          |
esra                 ------------|      |      |      |      |          |          |
ealias               ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
cddce                            |      |      |      |      |     -3.1%|          |
phiopt                           |      |      |      |      |     -3.2%|          |
modref               ------------|      |      |      |      |          |          |
iftoswitch           ------------|      |      |      |      |          |          |
profile_estimate     ------------|      |      |      |      |          |          |
local-pure-const                 |      |      |      |      |          |   +100.0%|
release_ssa          ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
=======node_fun:main=========
--------GIMPLE Cond -------
succs:= 4
=======node_fun:attach_command=========
--------GIMPLE Cond -------
succs:= 2
succs:= 2
=======node_fun:strip_bg_char=========
--------GIMPLE Cond -------
succs:= 2
--------GIMPLE Cond -------
succs:= 2
succs:= 3
succs:= 3
--------GIMPLE Cond -------
succs:= 5
--------GIMPLE Cond -------
succs:= 8
--------GIMPLE Cond -------
succs:= 8
succs:= 9
--------GIMPLE Cond -------
succs:= 10
succs:= 5
succs:= 10
=======node_fun:savestring=========
=======node_fun:make_cleanup=========
=======node_fun:make_my_cleanup=========
=======node_fun:make_my_cleanup2=========
--------GIMPLE Cond -------
succs:= 2
succs:= 2
=======node_fun:do_cleanups=========
=======node_fun:do_my_cleanups=========
--------GIMPLE Cond -------
succs:= 3
succs:= 3
--------GIMPLE Cond -------
succs:= 6
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_14 = VDEF <.MEM_12>
attach_command (_4, i_5);
# .MEM_16 = VDEF <.MEM_15(D)>
args_7 = strip_bg_char (args_5(D), &async_exec);
# .MEM_17 = VDEF <.MEM_16>
args_chain_9 = make_cleanup (free, args_7);
# .MEM_18 = VDEF <.MEM_17>
find_attach_target ();
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
# .MEM_20 = VDEF <.MEM_19>
_1 = target_can_async_p ();
# .MEM_21 = VDEF <.MEM_20>
attach_command_post_wait (args_7, from_tty_13(D), _2);
# VUSE <.MEM_25(D)>
_2 = strlen (args_12(D));
# VUSE <.MEM_25(D)>
_6 = isspace (_5);
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
# .MEM_27 = VDEF <.MEM_26>
_18 = strdup (args_12(D));
# .MEM_9 = VDEF <.MEM_8(D)>
p_6 = malloc (_1);
# .MEM_10 = VDEF <.MEM_9>
memcpy (p_6, ptr_7(D), len_3(D));
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
# .MEM_4 = VDEF <.MEM_3(D)>
do_my_cleanups (&cleanup_chain, old_chain_2(D));
# .MEM_19 = VDEF <.MEM_18>
__builtin_puts (&"cleanup!!!!! ========="[0]);
# .MEM_20 = VDEF <.MEM_19>
printf ("%x\n", _4);
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:attach_command========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path attach_command  function_call count: 6 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:attach_command_post_wait========= [0m
[40;33m =======POP node_fun stack:attach_command_post_wait========= [0m
[40;42m =======pre add _ fucntion:target_can_async_p========= [0m
[40;33m =======POP node_fun stack:target_can_async_p========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_cleanups  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4c9bd71080
    type <pointer_type 0x7f4c9bd4d930
        type <integer_type 0x7f4c9bd4d888 char readonly public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd4d930>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c9c22e118 type <integer_type 0x7f4c9bd4d888 char>
       
        arg:0 <string_cst 0x7f4c9bd6e5d0 type <array_type 0x7f4c9bd54d20>
            readonly constant static "cleanup!!!!! =========\000">
        arg:1 <integer_cst 0x7f4c9c224f48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c9bd710e0
    type <pointer_type 0x7f4c9bd56000
        type <array_type 0x7f4c9bd54f18 type <integer_type 0x7f4c9bd4d7e0 char>
            SI
            size <integer_cst 0x7f4c9c224df8 constant 32>
            unit-size <integer_cst 0x7f4c9c224e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4c9bd54e70>
            pointer_to_this <pointer_type 0x7f4c9bd56000>>
        unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4c9bd710c0 type <array_type 0x7f4c9bd54f18>
        readonly constant static "%x\012\000">
    ./benchmarks/binutils/use_after_free_5/../include/common.h:108:11 start: ./benchmarks/binutils/use_after_free_5/../include/common.h:108:11 finish: ./benchmarks/binutils/use_after_free_5/../include/common.h:108:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
[40;42m =======pre_check_funciton:do_cleanups========= [0m
[40;42m =======start_check_funciton:do_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4c9c420d20
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7f4c9caccb40 cleanup_chain type <pointer_type 0x7f4c9bd4df18>
        addressable static unsigned DI ./benchmarks/binutils/use_after_free_5/../include/common.h:49:24 size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c> initial <error_mark 0x7f4c9c224ba0>>
    ./benchmarks/binutils/use_after_free_5/../include/common.h:118:3 start: ./benchmarks/binutils/use_after_free_5/../include/common.h:118:3 finish: ./benchmarks/binutils/use_after_free_5/../include/common.h:118:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_cleanups========= [0m
[40;42m =======pre add _ fucntion:find_attach_target========= [0m
[40;33m =======POP node_fun stack:find_attach_target========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_cleanup  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :4========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69a68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9bd66a20 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4c9bd607b0>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69a68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9bd66a20 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4c9bd607b0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4c9bd60498 type <integer_type 0x7f4c9c2397e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69870
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a700 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4c9bd60738>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/use_after_free_5/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/use_after_free_5/../include/common.h:145:10: warning: use location
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69870
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a700 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4c9bd60738>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;42m =======pre_check_funciton:make_cleanup========= [0m
[40;42m =======start_check_funciton:make_cleanup========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4c9c420ea0
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7f4c9caccb40 cleanup_chain type <pointer_type 0x7f4c9bd4df18>
        addressable static unsigned DI ./benchmarks/binutils/use_after_free_5/../include/common.h:49:24 size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c> initial <error_mark 0x7f4c9c224ba0>>
    ./benchmarks/binutils/use_after_free_5/../include/common.h:151:10 start: ./benchmarks/binutils/use_after_free_5/../include/common.h:151:10 finish: ./benchmarks/binutils/use_after_free_5/../include/common.h:151:10>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:make_cleanup========= [0m
[40;42m =======pre add _ fucntion:strip_bg_char========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path strip_bg_char  function_call count: 4 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:savestring========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path savestring  function_call count: 2 level :3========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:savestring========= [0m
[40;42m =======start_check_funciton:savestring========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69558
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <var_decl 0x7f4c9bd666c0 p>
    def_stmt p_6 = malloc (_1);
    version:6
    ptr-info 0x7f4c9bd606c0>
# .MEM_9 = VDEF <.MEM_8(D)>
p_6 = malloc (_1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
return p_6;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:23:10: warning: use location
   23 |   return p;
      |          ^
_2 = p_6 + len_3(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:4: warning: use location
   22 |   p[len] = 0;
      |    ^
*_2 = 0;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:10: warning: use location
   22 |   p[len] = 0;
      |          ^
memcpy (p_6, ptr_7(D), len_3(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:21:3: warning: use location
   21 |   memcpy (p, ptr, len);
      |   ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
p_6 = malloc (_1);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:19:22: warning: use location
   19 |   char *p = (char *) xmalloc (len + 1); /* allocation site */
      |                      ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69558
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <var_decl 0x7f4c9bd666c0 p>
    def_stmt p_6 = malloc (_1);
    version:6
    ptr-info 0x7f4c9bd606c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69480
    type <integer_type 0x7f4c9c2397e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c239738 precision:64 min <integer_cst 0x7f4c9c224e88 0> max <integer_cst 0x7f4c9c225500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4c9c2457e0>>
   
    def_stmt _1 = len_3(D) + 1;
    version:1>
_1 = len_3(D) + 1;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
p_6 = malloc (_1);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:19:22: warning: use location
this stmt is child function---malloc-----

 ================== trace ================== 
_2 = p_6 + len_3(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:4: warning: use location
   22 |   p[len] = 0;
      |    ^
*_2 = 0;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:10: warning: use location
   22 |   p[len] = 0;
      |          ^
memcpy (p_6, ptr_7(D), len_3(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:21:3: warning: use location
   21 |   memcpy (p, ptr, len);
      |   ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69480
    type <integer_type 0x7f4c9c2397e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c239738 precision:64 min <integer_cst 0x7f4c9c224e88 0> max <integer_cst 0x7f4c9c225500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4c9c2457e0>>
   
    def_stmt _1 = len_3(D) + 1;
    version:1>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:savestring========= [0m
[40;42m =======pre add _ fucntion:isspace========= [0m
[40;33m =======POP node_fun stack:isspace========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:strip_bg_char========= [0m
[40;42m =======start_check_funciton:strip_bg_char========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69168
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
   
    def_stmt _18 = strdup (args_12(D));
    version:18
    ptr-info 0x7f4c9bd60648>
# .MEM_27 = VDEF <.MEM_26>
_18 = strdup (args_12(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
_2 = strlen (args_12(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:37:14: warning: use location
   37 |   p = args + strlen (args);
      |              ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
_18 = strdup (args_12(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:52:10: warning: use location
   52 |   return xstrdup (args);        /* allocation site */
      |          ^
this stmt is child function---strdup-----

 ================== trace ================== 
_10 = PHI <0B(4), 0B(10), _23(11), _18(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_14>
return;
In function â€˜strip_bg_charâ€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_23 = savestring (args_12(D), _8);
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:16: warning: use location
   46 |         return savestring (args, p - args);
      |                ^
this stmt is child function---savestring-----

 ================== trace ================== 
trace fucntion name:savestring 
[40;44m =======trace_function_path savestring  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_14>
return;
In function â€˜strip_bg_charâ€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_7 = p_9 - args_12(D);
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:36: warning: use location
   46 |         return savestring (args, p - args);
      |                                    ^
_1 = *args_12(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:23: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |                       ^
if (_1 == 0)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:20: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |                    ^
if (_1 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:20: warning: use location
Cond in fucntion strip_bg_char basic block 3
 ================== possible direct basic block ================= 
from strip_bg_char basic block 4
 ================== possible direct basic block ================= 
from strip_bg_char basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (args_12(D) == 0B)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:6: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |      ^
if (args_12(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:6: warning: use location
Cond in fucntion strip_bg_char basic block 2
 ================== possible direct basic block ================= 
from strip_bg_char basic block 4
 ================== possible direct basic block ================= 
from strip_bg_char basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69168
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
   
    def_stmt _18 = strdup (args_12(D));
    version:18
    ptr-info 0x7f4c9bd60648>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69090
    type <pointer_type 0x7f4c9bd4d930
        type <integer_type 0x7f4c9bd4d888 char readonly public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd4d930>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a400 args>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4c9bd60600>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_2 = strlen (args_12(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:37:14: warning: use location
   37 |   p = args + strlen (args);
      |              ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
_18 = strdup (args_12(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:52:10: warning: use location
   52 |   return xstrdup (args);        /* allocation site */
      |          ^
this stmt is child function---strdup-----

 ================== trace ================== 
_10 = PHI <0B(4), 0B(10), _23(11), _18(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_14>
return;
In function â€˜strip_bg_charâ€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_23 = savestring (args_12(D), _8);
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:16: warning: use location
   46 |         return savestring (args, p - args);
      |                ^
this stmt is child function---savestring-----

 ================== trace ================== 
trace fucntion name:savestring 
[40;44m =======trace_function_path savestring  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_14>
return;
In function â€˜strip_bg_charâ€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_7 = p_9 - args_12(D);
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:36: warning: use location
   46 |         return savestring (args, p - args);
      |                                    ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_14>
return;
In function â€˜strip_bg_charâ€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_7 = p_9 - args_12(D);
In function â€˜mainâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:36: warning: use location
   46 |         return savestring (args, p - args);
      |                                    ^
_1 = *args_12(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:23: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |                       ^
if (_1 == 0)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:20: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |                    ^
if (_1 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:20: warning: use location
Cond in fucntion strip_bg_char basic block 3
 ================== possible direct basic block ================= 
from strip_bg_char basic block 4
 ================== possible direct basic block ================= 
from strip_bg_char basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (args_12(D) == 0B)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:6: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |      ^
if (args_12(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:6: warning: use location
Cond in fucntion strip_bg_char basic block 2
 ================== possible direct basic block ================= 
from strip_bg_char basic block 4
 ================== possible direct basic block ================= 
from strip_bg_char basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69090
    type <pointer_type 0x7f4c9bd4d930
        type <integer_type 0x7f4c9bd4d888 char readonly public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd4d930>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a400 args>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4c9bd60600>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9c22cee8
    type <integer_type 0x7f4c9c2395e8 int public SI
        size <integer_cst 0x7f4c9c224df8 constant 32>
        unit-size <integer_cst 0x7f4c9c224e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2395e8 precision:32 min <integer_cst 0x7f4c9c224db0 -2147483648> max <integer_cst 0x7f4c9c224dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c9c2409d8>>
   
    def_stmt _5 = (int) _4;
    version:5>
_5 = (int) _4;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = isspace (_5);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:41:26: warning: use location
   41 |       while (p > args && isspace (p[-1]))
      |                          ^
this stmt is child function---isspace-----

 ================== trace ================== 
trace fucntion name:isspace 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_6 != 0)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:41:23: warning: use location
   41 |       while (p > args && isspace (p[-1]))
      |                       ^
if (_6 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:41:23: warning: use location
Cond in fucntion strip_bg_char basic block 9
 ================== possible direct basic block ================= 
from strip_bg_char basic block 7
 ================== possible direct basic block ================= 
from strip_bg_char basic block 10
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9c22cee8
    type <integer_type 0x7f4c9c2395e8 int public SI
        size <integer_cst 0x7f4c9c224df8 constant 32>
        unit-size <integer_cst 0x7f4c9c224e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2395e8 precision:32 min <integer_cst 0x7f4c9c224db0 -2147483648> max <integer_cst 0x7f4c9c224dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c9c2409d8>>
   
    def_stmt _5 = (int) _4;
    version:5>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strip_bg_char========= [0m
[40;42m =======pre_check_funciton:attach_command========= [0m
[40;42m =======start_check_funciton:attach_command========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9c22c9d8
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <parm_decl 0x7f4c9bd5a200 args>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4c9bd60588>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
args_7 = strip_bg_char (args_5(D), &async_exec);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:65:10: warning: use location
   65 |   args = strip_bg_char (args, &async_exec);
      |          ^
this stmt is child function---strip_bg_char-----

 ================== trace ================== 
trace fucntion name:strip_bg_char 
[40;44m =======trace_function_path strip_bg_char  function_call count: 4 level :0========  [0m
[40;36m ======= node_fun:strip_bg_char========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:savestring========= [0m
savestring this fucntion return value is heap-object 
strip_bg_char this fucntion return value is heap-object savestring
[40;46m =======add node_fun stack:savestring========= [0m
[40;44m =======trace_function_path savestring  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:isspace========= [0m
[40;46m =======add node_fun stack:isspace========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^
this stmt is child function---attach_command_post_wait-----

 ================== trace ================== 
trace fucntion name:attach_command_post_wait 

 ================== trace ================== 
trace fucntion free:0 
args_chain_9 = make_cleanup (free, args_7);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:66:16: warning: use location
   66 |   args_chain = make_cleanup (free, args);
      |                ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: use location
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/use_after_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9c22c9d8
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <parm_decl 0x7f4c9bd5a200 args>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4c9bd60588>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: Use after free error!: free location 
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
# .MEM_21 = VDEF <.MEM_20>
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <addr_expr 0x7f4c9c420be0
    type <pointer_type 0x7f4c9bd4ddc8
        type <function_type 0x7f4c9bd4dd20 type <void_type 0x7f4c9c239f18 void>
            QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f4c9bd4f4b0 value <pointer_type 0x7f4c9c240000>
                chain <tree_list 0x7f4c9c238b18 value <void_type 0x7f4c9c239f18 void>>> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4ddc8>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <function_decl 0x7f4c9bd55200 free type <function_type 0x7f4c9bd4dd20>
        addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
        align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        attributes <tree_list 0x7f4c9bd4f870
            purpose <identifier_node 0x7f4c9c25ee10 nothrow>
            chain <tree_list 0x7f4c9bd4f848
                purpose <identifier_node 0x7f4c9c25ee38 leaf>>>>
    ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:66:30 start: ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:66:30 finish: ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:66:30>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9c22ca68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9caccf30 args_chain>
    def_stmt args_chain_9 = make_cleanup (free, args_7);
    version:9
    ptr-info 0x7f4c9bd605b8>
# .MEM_17 = VDEF <.MEM_16>
args_chain_9 = make_cleanup (free, args_7);

 ================== trace ptable================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :888========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :889========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :890========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---make_cleanup-----
this other function ------make_cleanup-----
 
 Start check Pointer Collect  

======================================================================
args_chain_9 = make_cleanup (free, args_7);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:66:16: warning: use location
   66 |   args_chain = make_cleanup (free, args);
      |                ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^
this stmt is child function---attach_command_post_wait-----

 ================== trace ================== 
trace fucntion name:attach_command_post_wait 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: use location
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/use_after_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: use location
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/use_after_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9c22ca68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9caccf30 args_chain>
    def_stmt args_chain_9 = make_cleanup (free, args_7);
    version:9
    ptr-info 0x7f4c9bd605b8>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: Use after free error!: free location 
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
# .MEM_21 = VDEF <.MEM_20>
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: Use after free error!: free location 
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
# .MEM_21 = VDEF <.MEM_20>
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9c22c948
    type <integer_type 0x7f4c9c2395e8 int public SI
        size <integer_cst 0x7f4c9c224df8 constant 32>
        unit-size <integer_cst 0x7f4c9c224e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2395e8 precision:32 min <integer_cst 0x7f4c9c224db0 -2147483648> max <integer_cst 0x7f4c9c224dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c9c2409d8>>
   
    def_stmt _1 = target_can_async_p ();
    version:1>
# .MEM_20 = VDEF <.MEM_19>
_1 = target_can_async_p ();

 ================== trace ptable================== 
trace fucntion name:target_can_async_p 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---target_can_async_p-----
this other function ------target_can_async_p-----
 
 Start check Pointer Collect  

======================================================================
if (_1 != 0)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:79:6: warning: use location
   79 |   if (target_can_async_p ())
      |      ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:79:6: warning: use location
Cond in fucntion attach_command basic block 2
 ================== possible direct basic block ================= 
from attach_command basic block 3
 ================== possible direct basic block ================= 
from attach_command basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_1 = target_can_async_p ();
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:79:7: warning: use location
   79 |   if (target_can_async_p ())
      |       ^
this stmt is child function---target_can_async_p-----

 ================== trace ================== 
trace fucntion name:target_can_async_p 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9c22c948
    type <integer_type 0x7f4c9c2395e8 int public SI
        size <integer_cst 0x7f4c9c224df8 constant 32>
        unit-size <integer_cst 0x7f4c9c224e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2395e8 precision:32 min <integer_cst 0x7f4c9c224db0 -2147483648> max <integer_cst 0x7f4c9c224dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c9c2409d8>>
   
    def_stmt _1 = target_can_async_p ();
    version:1>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9c22ca20
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <parm_decl 0x7f4c9bd5a200 args>
    def_stmt args_7 = strip_bg_char (args_5(D), &async_exec);
    version:7
    ptr-info 0x7f4c9bd605a0>
# .MEM_16 = VDEF <.MEM_15(D)>
args_7 = strip_bg_char (args_5(D), &async_exec);

 ================== trace ptable================== 
trace fucntion name:strip_bg_char 
[40;44m =======trace_function_path strip_bg_char  function_call count: 4 level :888========  [0m
[40;36m ======= node_fun:strip_bg_char========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:savestring========= [0m
savestring this fucntion return value is heap-object 
strip_bg_char this fucntion return value is heap-object savestring
[40;46m =======add node_fun stack:savestring========= [0m
[40;44m =======trace_function_path savestring  function_call count: 2 level :889========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:isspace========= [0m
[40;46m =======add node_fun stack:isspace========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strip_bg_char-----
this other function ------strip_bg_char-----
 
 Start check Pointer Collect  

======================================================================
args_7 = strip_bg_char (args_5(D), &async_exec);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:65:10: warning: use location
   65 |   args = strip_bg_char (args, &async_exec);
      |          ^
this stmt is child function---strip_bg_char-----

 ================== trace ================== 
trace fucntion name:strip_bg_char 
[40;44m =======trace_function_path strip_bg_char  function_call count: 4 level :0========  [0m
[40;36m ======= node_fun:strip_bg_char========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:savestring========= [0m
savestring this fucntion return value is heap-object 
strip_bg_char this fucntion return value is heap-object savestring
[40;46m =======add node_fun stack:savestring========= [0m
[40;44m =======trace_function_path savestring  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:isspace========= [0m
[40;46m =======add node_fun stack:isspace========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_21 = VDEF <.MEM_20>
attach_command_post_wait (args_7, from_tty_13(D), _2);
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^
this stmt is child function---attach_command_post_wait-----

 ================== trace ================== 
trace fucntion name:attach_command_post_wait 

 ================== trace ================== 
trace fucntion free:0 
args_chain_9 = make_cleanup (free, args_7);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:66:16: warning: use location
   66 |   args_chain = make_cleanup (free, args);
      |                ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: use location
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/use_after_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
_2 = async_exec;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9c22ca20
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <parm_decl 0x7f4c9bd5a200 args>
    def_stmt args_7 = strip_bg_char (args_5(D), &async_exec);
    version:7
    ptr-info 0x7f4c9bd605a0>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: Use after free error!: free location 
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
# .MEM_21 = VDEF <.MEM_20>
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: Use after free error!: free location 
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
# VUSE <.MEM_20>
_2 = async_exec;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:attach_command========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9c22c708
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
   
    def_stmt _4 = *_3;
    version:4
    ptr-info 0x7f4c9bd60558>
# VUSE <.MEM_12>
_4 = *_3;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_12>
attach_command (_4, i_5);
bb index := 3
# VUSE <.MEM_12>
return 0;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return 0;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_12>
attach_command (_4, i_5);
bb index := 3
# VUSE <.MEM_15>
return;
./benchmarks/binutils/use_after_free_5/../include/common.h:114:1: warning: use location
  114 | }
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_15>
return;
./benchmarks/binutils/use_after_free_5/../include/common.h:114:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_14 = VDEF <.MEM_12>
attach_command (_4, i_5);
attach_command (_4, i_5);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:97:17: warning: use location
   97 |                 attach_command (argv[i], i);
      |                 ^
this stmt is child function---attach_command-----

 ================== trace ================== 
trace fucntion name:attach_command 
[40;44m =======trace_function_path attach_command  function_call count: 6 level :0========  [0m
[40;36m ======= node_fun:attach_command========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:attach_command_post_wait========= [0m
[40;46m =======add node_fun stack:attach_command_post_wait========= [0m
[40;42m =======pre add _ fucntion:target_can_async_p========= [0m
[40;46m =======add node_fun stack:target_can_async_p========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/use_after_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:find_attach_target========= [0m
[40;46m =======add node_fun stack:find_attach_target========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:strip_bg_char========= [0m
strip_bg_char this fucntion return value is heap-object 
attach_command this fucntion return value is heap-object strip_bg_char
[40;46m =======add node_fun stack:strip_bg_char========= [0m
[40;44m =======trace_function_path strip_bg_char  function_call count: 4 level :1========  [0m
[40;36m ======= node_fun:strip_bg_char========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:savestring========= [0m
savestring this fucntion return value is heap-object 
strip_bg_char this fucntion return value is heap-object savestring
[40;46m =======add node_fun stack:savestring========= [0m
[40;44m =======trace_function_path savestring  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:isspace========= [0m
[40;46m =======add node_fun stack:isspace========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_12>
attach_command (_4, i_5);
bb index := 3
# VUSE <.MEM_12>
return 0;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_12>
return 0;
lto1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_12>
attach_command (_4, i_5);
bb index := 3
# VUSE <.MEM_15>
return;
./benchmarks/binutils/use_after_free_5/../include/common.h:114:1: warning: use location
  114 | }
      | ^
beacuse in succ := 7 have return or exit
# VUSE <.MEM_15>
return;
./benchmarks/binutils/use_after_free_5/../include/common.h:114:1: warning: use location
gimple stmt in succ := 3 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_14 = VDEF <.MEM_12>
attach_command (_4, i_5);
attach_command (_4, i_5);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:97:17: warning: use location
   97 |                 attach_command (argv[i], i);
      |                 ^
this stmt is child function---attach_command-----

 ================== trace ================== 
trace fucntion name:attach_command 
[40;44m =======trace_function_path attach_command  function_call count: 6 level :0========  [0m
[40;36m ======= node_fun:attach_command========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:attach_command_post_wait========= [0m
[40;46m =======add node_fun stack:attach_command_post_wait========= [0m
[40;42m =======pre add _ fucntion:target_can_async_p========= [0m
[40;46m =======add node_fun stack:target_can_async_p========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/use_after_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:find_attach_target========= [0m
[40;46m =======add node_fun stack:find_attach_target========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:strip_bg_char========= [0m
strip_bg_char this fucntion return value is heap-object 
attach_command this fucntion return value is heap-object strip_bg_char
[40;46m =======add node_fun stack:strip_bg_char========= [0m
[40;44m =======trace_function_path strip_bg_char  function_call count: 4 level :1========  [0m
[40;36m ======= node_fun:strip_bg_char========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:savestring========= [0m
savestring this fucntion return value is heap-object 
strip_bg_char this fucntion return value is heap-object savestring
[40;46m =======add node_fun stack:savestring========= [0m
[40;44m =======trace_function_path savestring  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:isspace========= [0m
[40;46m =======add node_fun stack:isspace========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9c22c708
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
   
    def_stmt _4 = *_3;
    version:4
    ptr-info 0x7f4c9bd60558>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:attach_command========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path attach_command  function_call count: 6 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:attach_command_post_wait========= [0m
[40;33m =======POP node_fun stack:attach_command_post_wait========= [0m
[40;42m =======pre add _ fucntion:target_can_async_p========= [0m
[40;33m =======POP node_fun stack:target_can_async_p========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_cleanups  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4c9bd71080
    type <pointer_type 0x7f4c9bd4d930
        type <integer_type 0x7f4c9bd4d888 char readonly public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd4d930>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c9c22e118 type <integer_type 0x7f4c9bd4d888 char>
       
        arg:0 <string_cst 0x7f4c9bd6e5d0 type <array_type 0x7f4c9bd54d20>
            readonly constant static "cleanup!!!!! =========\000">
        arg:1 <integer_cst 0x7f4c9c224f48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c9bd710e0
    type <pointer_type 0x7f4c9bd56000
        type <array_type 0x7f4c9bd54f18 type <integer_type 0x7f4c9bd4d7e0 char>
            SI
            size <integer_cst 0x7f4c9c224df8 constant 32>
            unit-size <integer_cst 0x7f4c9c224e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4c9bd54e70>
            pointer_to_this <pointer_type 0x7f4c9bd56000>>
        unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4c9bd710c0 type <array_type 0x7f4c9bd54f18>
        readonly constant static "%x\012\000">
    ./benchmarks/binutils/use_after_free_5/../include/common.h:108:11 start: ./benchmarks/binutils/use_after_free_5/../include/common.h:108:11 finish: ./benchmarks/binutils/use_after_free_5/../include/common.h:108:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
[40;42m =======pre_check_funciton:do_cleanups========= [0m
[40;42m =======start_check_funciton:do_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4c9c420d20
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7f4c9caccb40 cleanup_chain type <pointer_type 0x7f4c9bd4df18>
        addressable static unsigned DI ./benchmarks/binutils/use_after_free_5/../include/common.h:49:24 size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c> initial <error_mark 0x7f4c9c224ba0>>
    ./benchmarks/binutils/use_after_free_5/../include/common.h:118:3 start: ./benchmarks/binutils/use_after_free_5/../include/common.h:118:3 finish: ./benchmarks/binutils/use_after_free_5/../include/common.h:118:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_cleanups========= [0m
[40;42m =======pre add _ fucntion:find_attach_target========= [0m
[40;33m =======POP node_fun stack:find_attach_target========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_cleanup  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69a68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9bd66a20 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4c9bd607b0>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69a68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9bd66a20 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4c9bd607b0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4c9bd60498 type <integer_type 0x7f4c9c2397e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69870
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a700 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4c9bd60738>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/use_after_free_5/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/use_after_free_5/../include/common.h:145:10: warning: use location
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69870
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a700 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4c9bd60738>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;42m =======pre_check_funciton:make_cleanup========= [0m
[40;42m =======start_check_funciton:make_cleanup========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4c9c420ea0
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7f4c9caccb40 cleanup_chain type <pointer_type 0x7f4c9bd4df18>
        addressable static unsigned DI ./benchmarks/binutils/use_after_free_5/../include/common.h:49:24 size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c> initial <error_mark 0x7f4c9c224ba0>>
    ./benchmarks/binutils/use_after_free_5/../include/common.h:151:10 start: ./benchmarks/binutils/use_after_free_5/../include/common.h:151:10 finish: ./benchmarks/binutils/use_after_free_5/../include/common.h:151:10>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:make_cleanup========= [0m
[40;42m =======pre add _ fucntion:strip_bg_char========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path strip_bg_char  function_call count: 4 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:savestring========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path savestring  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:savestring========= [0m
[40;42m =======start_check_funciton:savestring========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69558
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <var_decl 0x7f4c9bd666c0 p>
    def_stmt p_6 = malloc (_1);
    version:6
    ptr-info 0x7f4c9bd606c0>
# .MEM_9 = VDEF <.MEM_8(D)>
p_6 = malloc (_1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
return p_6;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:23:10: warning: use location
   23 |   return p;
      |          ^
_2 = p_6 + len_3(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:4: warning: use location
   22 |   p[len] = 0;
      |    ^
*_2 = 0;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:10: warning: use location
   22 |   p[len] = 0;
      |          ^
memcpy (p_6, ptr_7(D), len_3(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:21:3: warning: use location
   21 |   memcpy (p, ptr, len);
      |   ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
p_6 = malloc (_1);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:19:22: warning: use location
   19 |   char *p = (char *) xmalloc (len + 1); /* allocation site */
      |                      ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69558
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <var_decl 0x7f4c9bd666c0 p>
    def_stmt p_6 = malloc (_1);
    version:6
    ptr-info 0x7f4c9bd606c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69480
    type <integer_type 0x7f4c9c2397e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c239738 precision:64 min <integer_cst 0x7f4c9c224e88 0> max <integer_cst 0x7f4c9c225500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4c9c2457e0>>
   
    def_stmt _1 = len_3(D) + 1;
    version:1>
_1 = len_3(D) + 1;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
p_6 = malloc (_1);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:19:22: warning: use location
this stmt is child function---malloc-----

 ================== trace ================== 
_2 = p_6 + len_3(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:4: warning: use location
   22 |   p[len] = 0;
      |    ^
*_2 = 0;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:10: warning: use location
   22 |   p[len] = 0;
      |          ^
memcpy (p_6, ptr_7(D), len_3(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:21:3: warning: use location
   21 |   memcpy (p, ptr, len);
      |   ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69480
    type <integer_type 0x7f4c9c2397e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c239738 precision:64 min <integer_cst 0x7f4c9c224e88 0> max <integer_cst 0x7f4c9c225500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4c9c2457e0>>
   
    def_stmt _1 = len_3(D) + 1;
    version:1>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:savestring========= [0m
[40;42m =======pre add _ fucntion:isspace========= [0m
[40;33m =======POP node_fun stack:isspace========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:strip_bg_char========= [0m
[40;42m =======start_check_funciton:strip_bg_char========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69168
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
   
    def_stmt _18 = strdup (args_12(D));
    version:18
    ptr-info 0x7f4c9bd60648>
# .MEM_27 = VDEF <.MEM_26>
_18 = strdup (args_12(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
_2 = strlen (args_12(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:37:14: warning: use location
   37 |   p = args + strlen (args);
      |              ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
_18 = strdup (args_12(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:52:10: warning: use location
   52 |   return xstrdup (args);        /* allocation site */
      |          ^
this stmt is child function---strdup-----

 ================== trace ================== 
_10 = PHI <0B(4), 0B(10), _23(11), _18(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_14>
return;
In function â€˜strip_bg_charâ€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_23 = savestring (args_12(D), _8);
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:16: warning: use location
   46 |         return savestring (args, p - args);
      |                ^
this stmt is child function---savestring-----

 ================== trace ================== 
trace fucntion name:savestring 
[40;44m =======trace_function_path savestring  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_14>
return;
In function â€˜strip_bg_charâ€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_7 = p_9 - args_12(D);
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:36: warning: use location
   46 |         return savestring (args, p - args);
      |                                    ^
_1 = *args_12(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:23: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |                       ^
if (_1 == 0)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:20: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |                    ^
if (_1 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:20: warning: use location
Cond in fucntion strip_bg_char basic block 3
 ================== possible direct basic block ================= 
from strip_bg_char basic block 4
 ================== possible direct basic block ================= 
from strip_bg_char basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (args_12(D) == 0B)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:6: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |      ^
if (args_12(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:6: warning: use location
Cond in fucntion strip_bg_char basic block 2
 ================== possible direct basic block ================= 
from strip_bg_char basic block 4
 ================== possible direct basic block ================= 
from strip_bg_char basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69168
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
   
    def_stmt _18 = strdup (args_12(D));
    version:18
    ptr-info 0x7f4c9bd60648>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69090
    type <pointer_type 0x7f4c9bd4d930
        type <integer_type 0x7f4c9bd4d888 char readonly public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd4d930>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a400 args>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4c9bd60600>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_2 = strlen (args_12(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:37:14: warning: use location
   37 |   p = args + strlen (args);
      |              ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
_18 = strdup (args_12(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:52:10: warning: use location
   52 |   return xstrdup (args);        /* allocation site */
      |          ^
this stmt is child function---strdup-----

 ================== trace ================== 
_10 = PHI <0B(4), 0B(10), _23(11), _18(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_14>
return;
In function â€˜strip_bg_charâ€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_23 = savestring (args_12(D), _8);
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:16: warning: use location
   46 |         return savestring (args, p - args);
      |                ^
this stmt is child function---savestring-----

 ================== trace ================== 
trace fucntion name:savestring 
[40;44m =======trace_function_path savestring  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_14>
return;
In function â€˜strip_bg_charâ€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_7 = p_9 - args_12(D);
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:36: warning: use location
   46 |         return savestring (args, p - args);
      |                                    ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_14>
return;
In function â€˜strip_bg_charâ€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_7 = p_9 - args_12(D);
In function â€˜attach_commandâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:36: warning: use location
   46 |         return savestring (args, p - args);
      |                                    ^
_1 = *args_12(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:23: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |                       ^
if (_1 == 0)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:20: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |                    ^
if (_1 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:20: warning: use location
Cond in fucntion strip_bg_char basic block 3
 ================== possible direct basic block ================= 
from strip_bg_char basic block 4
 ================== possible direct basic block ================= 
from strip_bg_char basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (args_12(D) == 0B)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:6: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |      ^
if (args_12(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:6: warning: use location
Cond in fucntion strip_bg_char basic block 2
 ================== possible direct basic block ================= 
from strip_bg_char basic block 4
 ================== possible direct basic block ================= 
from strip_bg_char basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69090
    type <pointer_type 0x7f4c9bd4d930
        type <integer_type 0x7f4c9bd4d888 char readonly public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd4d930>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a400 args>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4c9bd60600>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9c22cee8
    type <integer_type 0x7f4c9c2395e8 int public SI
        size <integer_cst 0x7f4c9c224df8 constant 32>
        unit-size <integer_cst 0x7f4c9c224e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2395e8 precision:32 min <integer_cst 0x7f4c9c224db0 -2147483648> max <integer_cst 0x7f4c9c224dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c9c2409d8>>
   
    def_stmt _5 = (int) _4;
    version:5>
_5 = (int) _4;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = isspace (_5);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:41:26: warning: use location
   41 |       while (p > args && isspace (p[-1]))
      |                          ^
this stmt is child function---isspace-----

 ================== trace ================== 
trace fucntion name:isspace 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_6 != 0)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:41:23: warning: use location
   41 |       while (p > args && isspace (p[-1]))
      |                       ^
if (_6 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:41:23: warning: use location
Cond in fucntion strip_bg_char basic block 9
 ================== possible direct basic block ================= 
from strip_bg_char basic block 7
 ================== possible direct basic block ================= 
from strip_bg_char basic block 10
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9c22cee8
    type <integer_type 0x7f4c9c2395e8 int public SI
        size <integer_cst 0x7f4c9c224df8 constant 32>
        unit-size <integer_cst 0x7f4c9c224e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2395e8 precision:32 min <integer_cst 0x7f4c9c224db0 -2147483648> max <integer_cst 0x7f4c9c224dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c9c2409d8>>
   
    def_stmt _5 = (int) _4;
    version:5>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strip_bg_char========= [0m
[40;42m =======pre_check_funciton:attach_command========= [0m
[40;42m =======start_check_funciton:attach_command========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9c22c9d8
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <parm_decl 0x7f4c9bd5a200 args>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4c9bd60588>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
args_7 = strip_bg_char (args_5(D), &async_exec);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:65:10: warning: use location
   65 |   args = strip_bg_char (args, &async_exec);
      |          ^
this stmt is child function---strip_bg_char-----

 ================== trace ================== 
trace fucntion name:strip_bg_char 
[40;44m =======trace_function_path strip_bg_char  function_call count: 4 level :0========  [0m
[40;36m ======= node_fun:strip_bg_char========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:savestring========= [0m
savestring this fucntion return value is heap-object 
strip_bg_char this fucntion return value is heap-object savestring
[40;46m =======add node_fun stack:savestring========= [0m
[40;44m =======trace_function_path savestring  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:isspace========= [0m
[40;46m =======add node_fun stack:isspace========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^
this stmt is child function---attach_command_post_wait-----

 ================== trace ================== 
trace fucntion name:attach_command_post_wait 

 ================== trace ================== 
trace fucntion free:0 
args_chain_9 = make_cleanup (free, args_7);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:66:16: warning: use location
   66 |   args_chain = make_cleanup (free, args);
      |                ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: use location
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/use_after_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9c22c9d8
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <parm_decl 0x7f4c9bd5a200 args>
    def_stmt GIMPLE_NOP
    version:5
    ptr-info 0x7f4c9bd60588>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: Use after free error!: free location 
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
# .MEM_21 = VDEF <.MEM_20>
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <addr_expr 0x7f4c9c420be0
    type <pointer_type 0x7f4c9bd4ddc8
        type <function_type 0x7f4c9bd4dd20 type <void_type 0x7f4c9c239f18 void>
            QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f4c9bd4f4b0 value <pointer_type 0x7f4c9c240000>
                chain <tree_list 0x7f4c9c238b18 value <void_type 0x7f4c9c239f18 void>>> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4ddc8>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <function_decl 0x7f4c9bd55200 free type <function_type 0x7f4c9bd4dd20>
        addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
        align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        attributes <tree_list 0x7f4c9bd4f870
            purpose <identifier_node 0x7f4c9c25ee10 nothrow>
            chain <tree_list 0x7f4c9bd4f848
                purpose <identifier_node 0x7f4c9c25ee38 leaf>>>>
    ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:66:30 start: ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:66:30 finish: ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:66:30>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9c22ca68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9caccf30 args_chain>
    def_stmt args_chain_9 = make_cleanup (free, args_7);
    version:9
    ptr-info 0x7f4c9bd605b8>
# .MEM_17 = VDEF <.MEM_16>
args_chain_9 = make_cleanup (free, args_7);

 ================== trace ptable================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :888========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :889========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :890========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---make_cleanup-----
this other function ------make_cleanup-----
 
 Start check Pointer Collect  

======================================================================
args_chain_9 = make_cleanup (free, args_7);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:66:16: warning: use location
   66 |   args_chain = make_cleanup (free, args);
      |                ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^
this stmt is child function---attach_command_post_wait-----

 ================== trace ================== 
trace fucntion name:attach_command_post_wait 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: use location
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/use_after_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: use location
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/use_after_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with args_chain ========= [0m
[40;36m ======= relate stmt argument:args_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9c22ca68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9caccf30 args_chain>
    def_stmt args_chain_9 = make_cleanup (free, args_7);
    version:9
    ptr-info 0x7f4c9bd605b8>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: Use after free error!: free location 
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
# .MEM_21 = VDEF <.MEM_20>
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: Use after free error!: free location 
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
# .MEM_21 = VDEF <.MEM_20>
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9c22c948
    type <integer_type 0x7f4c9c2395e8 int public SI
        size <integer_cst 0x7f4c9c224df8 constant 32>
        unit-size <integer_cst 0x7f4c9c224e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2395e8 precision:32 min <integer_cst 0x7f4c9c224db0 -2147483648> max <integer_cst 0x7f4c9c224dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c9c2409d8>>
   
    def_stmt _1 = target_can_async_p ();
    version:1>
# .MEM_20 = VDEF <.MEM_19>
_1 = target_can_async_p ();

 ================== trace ptable================== 
trace fucntion name:target_can_async_p 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---target_can_async_p-----
this other function ------target_can_async_p-----
 
 Start check Pointer Collect  

======================================================================
if (_1 != 0)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:79:6: warning: use location
   79 |   if (target_can_async_p ())
      |      ^
if (_1 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:79:6: warning: use location
Cond in fucntion attach_command basic block 2
 ================== possible direct basic block ================= 
from attach_command basic block 3
 ================== possible direct basic block ================= 
from attach_command basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_1 = target_can_async_p ();
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:79:7: warning: use location
   79 |   if (target_can_async_p ())
      |       ^
this stmt is child function---target_can_async_p-----

 ================== trace ================== 
trace fucntion name:target_can_async_p 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9c22c948
    type <integer_type 0x7f4c9c2395e8 int public SI
        size <integer_cst 0x7f4c9c224df8 constant 32>
        unit-size <integer_cst 0x7f4c9c224e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2395e8 precision:32 min <integer_cst 0x7f4c9c224db0 -2147483648> max <integer_cst 0x7f4c9c224dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c9c2409d8>>
   
    def_stmt _1 = target_can_async_p ();
    version:1>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9c22ca20
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <parm_decl 0x7f4c9bd5a200 args>
    def_stmt args_7 = strip_bg_char (args_5(D), &async_exec);
    version:7
    ptr-info 0x7f4c9bd605a0>
# .MEM_16 = VDEF <.MEM_15(D)>
args_7 = strip_bg_char (args_5(D), &async_exec);

 ================== trace ptable================== 
trace fucntion name:strip_bg_char 
[40;44m =======trace_function_path strip_bg_char  function_call count: 4 level :888========  [0m
[40;36m ======= node_fun:strip_bg_char========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:savestring========= [0m
savestring this fucntion return value is heap-object 
strip_bg_char this fucntion return value is heap-object savestring
[40;46m =======add node_fun stack:savestring========= [0m
[40;44m =======trace_function_path savestring  function_call count: 2 level :889========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:isspace========= [0m
[40;46m =======add node_fun stack:isspace========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strip_bg_char-----
this other function ------strip_bg_char-----
 
 Start check Pointer Collect  

======================================================================
args_7 = strip_bg_char (args_5(D), &async_exec);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:65:10: warning: use location
   65 |   args = strip_bg_char (args, &async_exec);
      |          ^
this stmt is child function---strip_bg_char-----

 ================== trace ================== 
trace fucntion name:strip_bg_char 
[40;44m =======trace_function_path strip_bg_char  function_call count: 4 level :0========  [0m
[40;36m ======= node_fun:strip_bg_char========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;46m =======add node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:savestring========= [0m
savestring this fucntion return value is heap-object 
strip_bg_char this fucntion return value is heap-object savestring
[40;46m =======add node_fun stack:savestring========= [0m
[40;44m =======trace_function_path savestring  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:isspace========= [0m
[40;46m =======add node_fun stack:isspace========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_21 = VDEF <.MEM_20>
attach_command_post_wait (args_7, from_tty_13(D), _2);
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^
this stmt is child function---attach_command_post_wait-----

 ================== trace ================== 
trace fucntion name:attach_command_post_wait 

 ================== trace ================== 
trace fucntion free:0 
args_chain_9 = make_cleanup (free, args_7);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:66:16: warning: use location
   66 |   args_chain = make_cleanup (free, args);
      |                ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: use location
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/use_after_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
_2 = async_exec;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9c22ca20
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <parm_decl 0x7f4c9bd5a200 args>
    def_stmt args_7 = strip_bg_char (args_5(D), &async_exec);
    version:7
    ptr-info 0x7f4c9bd605a0>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: Use after free error!: free location 
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
# .MEM_21 = VDEF <.MEM_20>
attach_command_post_wait (args_7, from_tty_13(D), _2);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_19 = VDEF <.MEM_18>
do_cleanups (args_chain_9);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:75:3: warning: Use after free error!: free location 
   75 |   do_cleanups (args_chain);     /* freed */
      |   ^
# VUSE <.MEM_20>
_2 = async_exec;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:91:3: warning: use location
   91 |   attach_command_post_wait (args, from_tty, async_exec);
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:attach_command========= [0m
[40;44m =======node_fun:strip_bg_char========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path strip_bg_char  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:strdup========= [0m
[40;33m =======POP node_fun stack:strdup========= [0m
[40;42m =======pre add _ fucntion:savestring========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path savestring  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:savestring========= [0m
[40;42m =======start_check_funciton:savestring========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69558
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <var_decl 0x7f4c9bd666c0 p>
    def_stmt p_6 = malloc (_1);
    version:6
    ptr-info 0x7f4c9bd606c0>
# .MEM_9 = VDEF <.MEM_8(D)>
p_6 = malloc (_1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
return p_6;
In function â€˜strip_bg_charâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:23:10: warning: use location
   23 |   return p;
      |          ^
_2 = p_6 + len_3(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:4: warning: use location
   22 |   p[len] = 0;
      |    ^
*_2 = 0;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:10: warning: use location
   22 |   p[len] = 0;
      |          ^
memcpy (p_6, ptr_7(D), len_3(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:21:3: warning: use location
   21 |   memcpy (p, ptr, len);
      |   ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
p_6 = malloc (_1);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:19:22: warning: use location
   19 |   char *p = (char *) xmalloc (len + 1); /* allocation site */
      |                      ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69558
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <var_decl 0x7f4c9bd666c0 p>
    def_stmt p_6 = malloc (_1);
    version:6
    ptr-info 0x7f4c9bd606c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69480
    type <integer_type 0x7f4c9c2397e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c239738 precision:64 min <integer_cst 0x7f4c9c224e88 0> max <integer_cst 0x7f4c9c225500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4c9c2457e0>>
   
    def_stmt _1 = len_3(D) + 1;
    version:1>
_1 = len_3(D) + 1;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
p_6 = malloc (_1);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:19:22: warning: use location
this stmt is child function---malloc-----

 ================== trace ================== 
_2 = p_6 + len_3(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:4: warning: use location
   22 |   p[len] = 0;
      |    ^
*_2 = 0;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:10: warning: use location
   22 |   p[len] = 0;
      |          ^
memcpy (p_6, ptr_7(D), len_3(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:21:3: warning: use location
   21 |   memcpy (p, ptr, len);
      |   ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69480
    type <integer_type 0x7f4c9c2397e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c239738 precision:64 min <integer_cst 0x7f4c9c224e88 0> max <integer_cst 0x7f4c9c225500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4c9c2457e0>>
   
    def_stmt _1 = len_3(D) + 1;
    version:1>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:savestring========= [0m
[40;42m =======pre add _ fucntion:isspace========= [0m
[40;33m =======POP node_fun stack:isspace========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:strip_bg_char========= [0m
[40;42m =======start_check_funciton:strip_bg_char========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69168
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
   
    def_stmt _18 = strdup (args_12(D));
    version:18
    ptr-info 0x7f4c9bd60648>
# .MEM_27 = VDEF <.MEM_26>
_18 = strdup (args_12(D));

 ================== trace ptable================== 
trace fucntion name:strdup 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---strdup-----
this Reserved word function ------strdup-----
 
 Start check Pointer Collect  

======================================================================
_2 = strlen (args_12(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:37:14: warning: use location
   37 |   p = args + strlen (args);
      |              ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
_18 = strdup (args_12(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:52:10: warning: use location
   52 |   return xstrdup (args);        /* allocation site */
      |          ^
this stmt is child function---strdup-----

 ================== trace ================== 
_10 = PHI <0B(4), 0B(10), _23(11), _18(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_23 = savestring (args_12(D), _8);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:16: warning: use location
   46 |         return savestring (args, p - args);
      |                ^
this stmt is child function---savestring-----

 ================== trace ================== 
trace fucntion name:savestring 
[40;44m =======trace_function_path savestring  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_7 = p_9 - args_12(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:36: warning: use location
   46 |         return savestring (args, p - args);
      |                                    ^
_1 = *args_12(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:23: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |                       ^
if (_1 == 0)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:20: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |                    ^
if (_1 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:20: warning: use location
Cond in fucntion strip_bg_char basic block 3
 ================== possible direct basic block ================= 
from strip_bg_char basic block 4
 ================== possible direct basic block ================= 
from strip_bg_char basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (args_12(D) == 0B)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:6: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |      ^
if (args_12(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:6: warning: use location
Cond in fucntion strip_bg_char basic block 2
 ================== possible direct basic block ================= 
from strip_bg_char basic block 4
 ================== possible direct basic block ================= 
from strip_bg_char basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69168
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
   
    def_stmt _18 = strdup (args_12(D));
    version:18
    ptr-info 0x7f4c9bd60648>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69090
    type <pointer_type 0x7f4c9bd4d930
        type <integer_type 0x7f4c9bd4d888 char readonly public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd4d930>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a400 args>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4c9bd60600>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_2 = strlen (args_12(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:37:14: warning: use location
   37 |   p = args + strlen (args);
      |              ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
_18 = strdup (args_12(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:52:10: warning: use location
   52 |   return xstrdup (args);        /* allocation site */
      |          ^
this stmt is child function---strdup-----

 ================== trace ================== 
_10 = PHI <0B(4), 0B(10), _23(11), _18(12)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_29 = VDEF <.MEM_28>
_23 = savestring (args_12(D), _8);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_23 = savestring (args_12(D), _8);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:16: warning: use location
   46 |         return savestring (args, p - args);
      |                ^
this stmt is child function---savestring-----

 ================== trace ================== 
trace fucntion name:savestring 
[40;44m =======trace_function_path savestring  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:savestring========= [0m
[40;36m ======= find relate stmt with args ========= [0m
[40;36m ======= relate stmt argument:args ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;46m =======add node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_7 = p_9 - args_12(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:36: warning: use location
   46 |         return savestring (args, p - args);
      |                                    ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_7 = p_9 - args_12(D);
bb index := 11
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================
_7 = p_9 - args_12(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:46:36: warning: use location
   46 |         return savestring (args, p - args);
      |                                    ^
_1 = *args_12(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:23: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |                       ^
if (_1 == 0)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:20: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |                    ^
if (_1 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:20: warning: use location
Cond in fucntion strip_bg_char basic block 3
 ================== possible direct basic block ================= 
from strip_bg_char basic block 4
 ================== possible direct basic block ================= 
from strip_bg_char basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
if (args_12(D) == 0B)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:6: warning: use location
   31 |   if (args == NULL || *args == '\0')
      |      ^
if (args_12(D) == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:31:6: warning: use location
Cond in fucntion strip_bg_char basic block 2
 ================== possible direct basic block ================= 
from strip_bg_char basic block 4
 ================== possible direct basic block ================= 
from strip_bg_char basic block 3
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69090
    type <pointer_type 0x7f4c9bd4d930
        type <integer_type 0x7f4c9bd4d888 char readonly public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd4d930>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a400 args>
    def_stmt GIMPLE_NOP
    version:12
    ptr-info 0x7f4c9bd60600>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9c22cee8
    type <integer_type 0x7f4c9c2395e8 int public SI
        size <integer_cst 0x7f4c9c224df8 constant 32>
        unit-size <integer_cst 0x7f4c9c224e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2395e8 precision:32 min <integer_cst 0x7f4c9c224db0 -2147483648> max <integer_cst 0x7f4c9c224dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c9c2409d8>>
   
    def_stmt _5 = (int) _4;
    version:5>
_5 = (int) _4;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_6 = isspace (_5);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:41:26: warning: use location
   41 |       while (p > args && isspace (p[-1]))
      |                          ^
this stmt is child function---isspace-----

 ================== trace ================== 
trace fucntion name:isspace 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (_6 != 0)
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:41:23: warning: use location
   41 |       while (p > args && isspace (p[-1]))
      |                       ^
if (_6 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:41:23: warning: use location
Cond in fucntion strip_bg_char basic block 9
 ================== possible direct basic block ================= 
from strip_bg_char basic block 7
 ================== possible direct basic block ================= 
from strip_bg_char basic block 10
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9c22cee8
    type <integer_type 0x7f4c9c2395e8 int public SI
        size <integer_cst 0x7f4c9c224df8 constant 32>
        unit-size <integer_cst 0x7f4c9c224e10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2395e8 precision:32 min <integer_cst 0x7f4c9c224db0 -2147483648> max <integer_cst 0x7f4c9c224dc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c9c2409d8>>
   
    def_stmt _5 = (int) _4;
    version:5>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:strip_bg_char========= [0m
[40;44m =======node_fun:savestring========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path savestring  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:memcpy========= [0m
[40;33m =======POP node_fun stack:memcpy========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:savestring========= [0m
[40;42m =======start_check_funciton:savestring========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69558
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <var_decl 0x7f4c9bd666c0 p>
    def_stmt p_6 = malloc (_1);
    version:6
    ptr-info 0x7f4c9bd606c0>
# .MEM_9 = VDEF <.MEM_8(D)>
p_6 = malloc (_1);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
return p_6;
In function â€˜savestringâ€™:
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:23:10: warning: use location
   23 |   return p;
      |          ^
_2 = p_6 + len_3(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:4: warning: use location
   22 |   p[len] = 0;
      |    ^
*_2 = 0;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:10: warning: use location
   22 |   p[len] = 0;
      |          ^
memcpy (p_6, ptr_7(D), len_3(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:21:3: warning: use location
   21 |   memcpy (p, ptr, len);
      |   ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 
p_6 = malloc (_1);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:19:22: warning: use location
   19 |   char *p = (char *) xmalloc (len + 1); /* allocation site */
      |                      ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69558
    type <pointer_type 0x7f4c9bd54000
        type <integer_type 0x7f4c9bd4d7e0 char public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd54000>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
        pointer_to_this <pointer_type 0x7f4c9bd542a0>>
    var <var_decl 0x7f4c9bd666c0 p>
    def_stmt p_6 = malloc (_1);
    version:6
    ptr-info 0x7f4c9bd606c0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69480
    type <integer_type 0x7f4c9c2397e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c239738 precision:64 min <integer_cst 0x7f4c9c224e88 0> max <integer_cst 0x7f4c9c225500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4c9c2457e0>>
   
    def_stmt _1 = len_3(D) + 1;
    version:1>
_1 = len_3(D) + 1;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
p_6 = malloc (_1);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:19:22: warning: use location
this stmt is child function---malloc-----

 ================== trace ================== 
_2 = p_6 + len_3(D);
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:4: warning: use location
   22 |   p[len] = 0;
      |    ^
*_2 = 0;
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:22:10: warning: use location
   22 |   p[len] = 0;
      |          ^
memcpy (p_6, ptr_7(D), len_3(D));
./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c:21:3: warning: use location
   21 |   memcpy (p, ptr, len);
      |   ^
this stmt is child function---memcpy-----

 ================== trace ================== 
trace fucntion name:memcpy 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69480
    type <integer_type 0x7f4c9c2397e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c239738 precision:64 min <integer_cst 0x7f4c9c224e88 0> max <integer_cst 0x7f4c9c225500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f4c9c2457e0>>
   
    def_stmt _1 = len_3(D) + 1;
    version:1>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:savestring========= [0m
[40;44m =======node_fun:make_cleanup========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69a68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9bd66a20 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4c9bd607b0>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
In function â€˜make_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69a68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9bd66a20 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4c9bd607b0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4c9bd60498 type <integer_type 0x7f4c9c2397e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69870
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a700 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4c9bd60738>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/use_after_free_5/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/use_after_free_5/../include/common.h:145:10: warning: use location
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69870
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a700 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4c9bd60738>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;42m =======pre_check_funciton:make_cleanup========= [0m
[40;42m =======start_check_funciton:make_cleanup========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4c9c420ea0
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7f4c9caccb40 cleanup_chain type <pointer_type 0x7f4c9bd4df18>
        addressable static unsigned DI ./benchmarks/binutils/use_after_free_5/../include/common.h:49:24 size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c> initial <error_mark 0x7f4c9c224ba0>>
    ./benchmarks/binutils/use_after_free_5/../include/common.h:151:10 start: ./benchmarks/binutils/use_after_free_5/../include/common.h:151:10 finish: ./benchmarks/binutils/use_after_free_5/../include/common.h:151:10>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:make_cleanup========= [0m
[40;44m =======node_fun:make_my_cleanup========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69a68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9bd66a20 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4c9bd607b0>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
In function â€˜make_my_cleanupâ€™:
./benchmarks/binutils/use_after_free_5/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69a68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9bd66a20 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4c9bd607b0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4c9bd60498 type <integer_type 0x7f4c9c2397e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69870
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a700 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4c9bd60738>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/use_after_free_5/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/use_after_free_5/../include/common.h:145:10: warning: use location
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69870
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c9bd5a700 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f4c9bd60738>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;44m =======node_fun:make_my_cleanup2========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c9bd69a68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9bd66a20 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4c9bd607b0>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_14>
return;
In function â€˜make_my_cleanup2â€™:
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/use_after_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/use_after_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
./benchmarks/binutils/use_after_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
./benchmarks/binutils/use_after_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/use_after_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/use_after_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
./benchmarks/binutils/use_after_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
./benchmarks/binutils/use_after_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
./benchmarks/binutils/use_after_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
./benchmarks/binutils/use_after_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_14>
return;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_14>
return;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
beacuse in succ := 13 have return or exit
# VUSE <.MEM_24>
return _10;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 13

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/use_after_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
./benchmarks/binutils/use_after_free_5/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c9bd69a68
    type <pointer_type 0x7f4c9bd4df18
        type <record_type 0x7f4c9bd4de70 cleanup BLK
            size <integer_cst 0x7f4c9c224f18 constant 256>
            unit-size <integer_cst 0x7f4c9c242018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9bd4de70 fields <field_decl 0x7f4c9bd502f8 next> context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c>
            pointer_to_this <pointer_type 0x7f4c9bd4df18>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c9bd54b28>>
    var <var_decl 0x7f4c9bd66a20 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f4c9bd607b0>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4c9bd60498 type <integer_type 0x7f4c9c2397e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;44m =======node_fun:do_cleanups========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4c9bd71080
    type <pointer_type 0x7f4c9bd4d930
        type <integer_type 0x7f4c9bd4d888 char readonly public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd4d930>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c9c22e118 type <integer_type 0x7f4c9bd4d888 char>
       
        arg:0 <string_cst 0x7f4c9bd6e5d0 type <array_type 0x7f4c9bd54d20>
            readonly constant static "cleanup!!!!! =========\000">
        arg:1 <integer_cst 0x7f4c9c224f48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c9bd710e0
    type <pointer_type 0x7f4c9bd56000
        type <array_type 0x7f4c9bd54f18 type <integer_type 0x7f4c9bd4d7e0 char>
            SI
            size <integer_cst 0x7f4c9c224df8 constant 32>
            unit-size <integer_cst 0x7f4c9c224e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4c9bd54e70>
            pointer_to_this <pointer_type 0x7f4c9bd56000>>
        unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4c9bd710c0 type <array_type 0x7f4c9bd54f18>
        readonly constant static "%x\012\000">
    ./benchmarks/binutils/use_after_free_5/../include/common.h:108:11 start: ./benchmarks/binutils/use_after_free_5/../include/common.h:108:11 finish: ./benchmarks/binutils/use_after_free_5/../include/common.h:108:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
[40;42m =======pre_check_funciton:do_cleanups========= [0m
[40;42m =======start_check_funciton:do_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4c9c420d20
    type <pointer_type 0x7f4c9bd54b28
        type <pointer_type 0x7f4c9bd4df18 type <record_type 0x7f4c9bd4de70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f4c9c224bb8 constant 64>
            unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c9bd54b28>>
        public unsigned DI size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7f4c9caccb40 cleanup_chain type <pointer_type 0x7f4c9bd4df18>
        addressable static unsigned DI ./benchmarks/binutils/use_after_free_5/../include/common.h:49:24 size <integer_cst 0x7f4c9c224bb8 64> unit-size <integer_cst 0x7f4c9c224bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f4c9c22f168 ./benchmarks/binutils/use_after_free_5/binutils_uaf_5.c> initial <error_mark 0x7f4c9c224ba0>>
    ./benchmarks/binutils/use_after_free_5/../include/common.h:118:3 start: ./benchmarks/binutils/use_after_free_5/../include/common.h:118:3 finish: ./benchmarks/binutils/use_after_free_5/../include/common.h:118:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_cleanups========= [0m
[40;44m =======node_fun:do_my_cleanups========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4c9bd71080
    type <pointer_type 0x7f4c9bd4d930
        type <integer_type 0x7f4c9bd4d888 char readonly public QI
            size <integer_cst 0x7f4c9c224ca8 constant 8>
            unit-size <integer_cst 0x7f4c9c224cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c9c2393f0 precision:8 min <integer_cst 0x7f4c9bd44750 -128> max <integer_cst 0x7f4c9bd44738 127>
            pointer_to_this <pointer_type 0x7f4c9bd4d930>>
        public unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c9c22e118 type <integer_type 0x7f4c9bd4d888 char>
       
        arg:0 <string_cst 0x7f4c9bd6e5d0 type <array_type 0x7f4c9bd54d20>
            readonly constant static "cleanup!!!!! =========\000">
        arg:1 <integer_cst 0x7f4c9c224f48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c9bd710e0
    type <pointer_type 0x7f4c9bd56000
        type <array_type 0x7f4c9bd54f18 type <integer_type 0x7f4c9bd4d7e0 char>
            SI
            size <integer_cst 0x7f4c9c224df8 constant 32>
            unit-size <integer_cst 0x7f4c9c224e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4c9bd54e70>
            pointer_to_this <pointer_type 0x7f4c9bd56000>>
        unsigned DI
        size <integer_cst 0x7f4c9c224bb8 constant 64>
        unit-size <integer_cst 0x7f4c9c224bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4c9bd710c0 type <array_type 0x7f4c9bd54f18>
        readonly constant static "%x\012\000">
    ./benchmarks/binutils/use_after_free_5/../include/common.h:108:11 start: ./benchmarks/binutils/use_after_free_5/../include/common.h:108:11 finish: ./benchmarks/binutils/use_after_free_5/../include/common.h:108:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
goto <bb 4>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
_1 = (long unsigned int) i_5;
_2 = _1 * 8;
_3 = argv_9(D) + _2;
_4 = *_3;
attach_command (_4, i_5);
i_11 = i_5 + 1;

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# i_5 = PHI <1(2), i_11(3)>
if (i_5 < argc_8(D))
  goto <bb 3>; [89.00%]
else
  goto <bb 5>; [11.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 118111600]:
return 0;

=======Mapping node_fun:attach_command=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
args_7 = strip_bg_char (args_5(D), &async_exec);
args_chain_9 = make_cleanup (free, args_7);
find_attach_target ();
do_cleanups (args_chain_9);
_1 = target_can_async_p ();
if (_1 != 0)
  goto <bb 3>; [51.12%]
else
  goto <bb 4>; [48.88%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 548896825]:
async_exec ={v} {CLOBBER};
goto <bb 5>; [100.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 524845000]:
_2 = async_exec;
attach_command_post_wait (args_7, from_tty_13(D), _2);
async_exec ={v} {CLOBBER};

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 1073741824]:
return;

=======Mapping node_fun:strip_bg_char=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 296479539]:
if (args_12(D) == 0B)
  goto <bb 4>; [8.27%]
else
  goto <bb 3>; [91.73%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 271960681]:
_1 = *args_12(D);
if (_1 == 0)
  goto <bb 4>; [17.38%]
else
  goto <bb 5>; [82.62%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 71785624]:
*bg_char_p_15(D) = 0;
goto <bb 13>; [100.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 224693915]:
_2 = strlen (args_12(D));
p_14 = args_12(D) + _2;
_3 = MEM[(const char *)p_14 + -1B];
if (_3 == 38)
  goto <bb 6>; [51.12%]
else
  goto <bb 12>; [48.88%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 114863530]:
p_19 = p_14 + 18446744073709551615;
goto <bb 8>; [100.00%]

=======is loop:1=========

 bb index 7 
<bb 7> [local count: 958878294]:
p_20 = p_9 + 18446744073709551615;

=======is loop:1=========

 bb index 8 
<bb 8> [local count: 1073741824]:
# p_9 = PHI <p_19(6), p_20(7)>
if (p_9 > args_12(D))
  goto <bb 9>; [94.50%]
else
  goto <bb 10>; [5.50%]

=======is loop:1=========

 bb index 9 
<bb 9> [local count: 1014686025]:
_4 = MEM[(const char *)p_9 + -1B];
_5 = (int) _4;
_6 = isspace (_5);
if (_6 != 0)
  goto <bb 7>; [94.50%]
else
  goto <bb 10>; [5.50%]

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 114863531]:
*bg_char_p_15(D) = 1;
if (p_9 != args_12(D))
  goto <bb 11>; [73.78%]
else
  goto <bb 13>; [26.22%]

=======is loop:0=========

 bb index 11 
<bb 11> [local count: 84746314]:
_7 = p_9 - args_12(D);
_8 = (long unsigned int) _7;
_23 = savestring (args_12(D), _8);
goto <bb 13>; [100.00%]

=======is loop:0=========

 bb index 12 
<bb 12> [local count: 109830385]:
*bg_char_p_15(D) = 0;
_18 = strdup (args_12(D));

=======is loop:0=========

 bb index 13 
<bb 13> [local count: 296479540]:
# _10 = PHI <0B(4), 0B(10), _23(11), _18(12)>
return _10;

=======Mapping node_fun:savestring=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = len_3(D) + 1;
p_6 = malloc (_1);
memcpy (p_6, ptr_7(D), len_3(D));
_2 = p_6 + len_3(D);
*_2 = 0;
return p_6;

=======Mapping node_fun:make_cleanup=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
return _5;

=======Mapping node_fun:make_my_cleanup=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
return _6;

=======Mapping node_fun:make_my_cleanup2=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
new_4 = malloc (32);
old_chain_6 = *pmy_chain_5(D);
_1 = *pmy_chain_5(D);
new_4->next = _1;
new_4->function = function_8(D);
new_4->free_arg = free_arg_10(D);
new_4->arg = arg_12(D);
*pmy_chain_5(D) = new_4;
if (old_chain_6 == 0B)
  goto <bb 3>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 429496]:
exit (1);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073312329]:
return old_chain_6;

=======Mapping node_fun:do_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
do_my_cleanups (&cleanup_chain, old_chain_2(D));
return;

=======Mapping node_fun:do_my_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111598]:
goto <bb 6>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
_1 = ptr_12->next;
*pmy_chain_11(D) = _1;
_2 = ptr_12->function;
_3 = ptr_12->arg;
_2 (_3);
__builtin_puts (&"cleanup!!!!! ========="[0]);
_4 = ptr_12->arg;
printf ("%x\n", _4);
_5 = ptr_12->free_arg;
if (_5 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 5>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 668941161]:
_6 = ptr_12->free_arg;
_7 = ptr_12->arg;
_6 (_7);

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 955630225]:
free (ptr_12);

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 1073741824]:
ptr_12 = *pmy_chain_11(D);
if (ptr_12 != old_chain_13(D))
  goto <bb 3>; [89.00%]
else
  goto <bb 7>; [11.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 118111600]:
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 3 [0m
[40;34m    gimple free   count : 1 [0m
[40;34m    find Entry point : 12 [0m
[40;34m    used_stmt array stack totalsize of : 0.001376 mb[0m
[40;34m    collect time: : 0.000253 s [0m
[40;34m    algorithm time: 0.101192 s [0m
[40;34m    gimple stmt count : : 82 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cp                   ------------|      |      |      |      |          |          |
inline               ------------|      |      |      |      |          |          |
fixup_cfg            ------------|      |      |      |      |          |          |
adjust_alignment     ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
backprop             ------------|      |      |      |      |          |          |
phiprop              ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
alias                ------------|      |      |      |      |          |          |
retslot              ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
stdarg               ------------|      |      |      |      |          |          |
cdce                 ------------|      |      |      |      |          |          |
cselim               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
ifcombine            ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ch                               |      |      |      |      |     +2.5%|     +0.0%|
cplxlower                        |      |      |      |      |     +2.5%|     +0.0%|
sra                  ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     -0.7%|     -0.3%|
copyprop                         |      |      |      |      |     -0.7%|     -0.3%|
reassoc              ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
sincos               ------------|      |      |      |      |          |          |
laddress             ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
walloca              ------------|      |      |      |      |          |          |
sink                 ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
fix_loops            ------------|      |      |      |      |          |          |
loop                 ------------|      |      |      |      |          |          |
loopinit                         |      |      |      |      |    -43.8%|    -61.0%|
sccp                 ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
ivcanon              ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
cunroll              ------------|      |      |      |      |          |          |
ivopts                           |      |      |      |      |          |     -0.7%|
lim                              |      |      |      |      |          |     -0.7%|
loopdone             ------------|      |      |      |      |          |          |
no_loop                          |      |      |      |      |    +77.8%|   +159.1%|
veclower2            ------------|      |      |      |      |          |          |
switchlower          ------------|      |      |      |      |          |          |
reassoc              ------------|      |      |      |      |          |          |
slsr                 ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     +0.3%|     -0.0%|
strlen                           |      |    +2|      |      |     +0.3%|     -0.0%|
copyprop             ------------|      |      |      |      |          |          |
wrestrict            ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
forwprop                         |      |      |      |      |     -0.3%|     -0.0%|
phiopt                           |      |      |      |      |     -0.3%|     -0.0%|
fab                  ------------|      |      |      |      |          |          |
dce                              |      |      |      |      |     -0.3%|     -0.0%|
crited                           |      |      |      |      |     -0.3%|     -0.0%|
uncprop              ------------|      |      |      |      |          |          |
local-pure-const     ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
nrv                  ------------|      |      |      |      |          |          |
isel                 ------------|      |      |      |      |          |          |
optimized            ------------|      |      |      |      |          |          |
expand                           |      |      |      |      |----------|----------|
vregs                            |      |      |      |      |    +73.0%|    +38.5%|
into_cfglayout                   |      |      |      |      |     -1.1%|     -0.1%|
jump                             |      |      |      |      |     -1.5%|     -0.7%|
subreg1                          |      |      |      |      |     -0.4%|     -0.7%|
dfinit               ------------|      |      |      |      |          |          |
cse1                 ------------|      |      |      |      |          |          |
fwprop1                          |      |      |      |      |     -2.0%|     -1.9%|
ce1                              |      |      |      |      |     -2.1%|     -1.9%|
reginfo              ------------|      |      |      |      |          |          |
loop2                ------------|      |      |      |      |          |          |
loop2_init           ------------|      |      |      |      |          |          |
loop2_invariant      ------------|      |      |      |      |          |          |
loop2_done           ------------|      |      |      |      |          |          |
dse1                 ------------|      |      |      |      |          |          |
fwprop2              ------------|      |      |      |      |          |          |
init-regs            ------------|      |      |      |      |          |          |
combine                          |      |      |      |      |     +6.1%|     +6.6%|
ce2                              |      |      |      |      |     +5.7%|     +6.2%|
outof_cfglayout                  |      |      |      |      |     +1.0%|     +0.1%|
split1                           |      |      |      |      |     +1.0%|     +0.1%|
subreg3              ------------|      |      |      |      |          |          |
mode_sw              ------------|      |      |      |      |          |          |
asmcons              ------------|      |      |      |      |          |          |
ira                              |      |      |      |      |     -0.2%|     -0.1%|
reload                           |      |      |      |      |    -12.3%|    -14.4%|
postreload                       |      |      |      |      |    -13.8%|    -16.6%|
split2                           |      |      |      |      |     -0.3%|     -0.2%|
cmpelim                          |      |      |      |      |     -0.3%|     -0.2%|
pro_and_epilogue                 |      |      |      |      |    +18.6%|    +18.9%|
dse2                             |      |      |      |      |    +15.7%|    +15.9%|
csa                  ------------|      |      |      |      |          |          |
jump2                ------------|      |      |      |      |          |          |
ce3                  ------------|      |      |      |      |          |          |
cprop_hardreg                    |      |      |      |      |     -0.4%|     -0.4%|
rtl_dce                          |      |      |      |      |     -0.4%|     -0.4%|
bbro                             |      |      |      |      |     +0.2%|     +0.2%|
split4                           |      |      |      |      |     +0.2%|     +0.2%|
stack                ------------|      |      |      |      |          |          |
zero_call_used_regs  ------------|      |      |      |      |          |          |
alignments           ------------|      |      |      |      |          |          |
/usr/bin/ld: /tmp/cc5lHNMS.ltrans0.ltrans.o: in function `attach_command':
<artificial>:(.text+0x1ed): undefined reference to `find_attach_target'
/usr/bin/ld: <artificial>:(.text+0x1ff): undefined reference to `target_can_async_p'
/usr/bin/ld: <artificial>:(.text+0x21b): undefined reference to `attach_command_post_wait'
collect2: error: ld returned 1 exit status
