In file included from ./benchmarks/binutils/leak_8/binutils_leak_8.c:8:
./benchmarks/binutils/leak_8/../include/bfd.h:55:1: warning: useless storage class specifier in empty declaration
   55 | };
      | ^
./benchmarks/binutils/leak_8/binutils_leak_8.c: In function â€˜bfd_get_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:34:17: warning: implicit declaration of function â€˜memsetâ€™ [-Wimplicit-function-declaration]
   34 |                 memset (location, 0, 4);
      |                 ^~~~~~
./benchmarks/binutils/leak_8/binutils_leak_8.c:9:1: note: include â€˜<string.h>â€™ or provide a declaration of â€˜memsetâ€™
    8 | #include "../include/bfd.h"
  +++ |+#include <string.h>
    9 | 
./benchmarks/binutils/leak_8/binutils_leak_8.c:34:17: warning: incompatible implicit declaration of built-in function â€˜memsetâ€™ [-Wbuiltin-declaration-mismatch]
   34 |                 memset (location, 0, 4);
      |                 ^~~~~~
./benchmarks/binutils/leak_8/binutils_leak_8.c:34:17: note: include â€˜<string.h>â€™ or provide a declaration of â€˜memsetâ€™
./benchmarks/binutils/leak_8/binutils_leak_8.c:34:25: warning: passing argument 1 of â€˜memsetâ€™ discards â€˜constâ€™ qualifier from pointer target type [-Wdiscarded-qualifiers]
   34 |                 memset (location, 0, 4);
      |                         ^~~~~~~~
./benchmarks/binutils/leak_8/binutils_leak_8.c:34:25: note: expected â€˜void *â€™ but argument is of type â€˜const void *â€™
./benchmarks/binutils/leak_8/binutils_leak_8.c: In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:170:25: warning: incompatible implicit declaration of built-in function â€˜memsetâ€™ [-Wbuiltin-declaration-mismatch]
  170 |                         memset (memhunk, 0, 4);
      |                         ^~~~~~
./benchmarks/binutils/leak_8/binutils_leak_8.c:170:25: note: include â€˜<string.h>â€™ or provide a declaration of â€˜memsetâ€™
./benchmarks/binutils/leak_8/binutils_leak_8.c: In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:183:15: warning: implicit declaration of function â€˜timeâ€™ [-Wimplicit-function-declaration]
  183 |         srand(time(NULL));
      |               ^~~~
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cfg                  ------------|      |      |      |      |          |          |
ompexp                           |      |      |      |      |   +100.0%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
ssa                              |      |      |      |      |     -1.8%|          |
nothrow                          |      |      |      |      |     -1.8%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
einline              ------------|      |      |      |      |          |          |
early_optimizations  ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
ccp                              |      |      |      |      |     -0.4%|          |
forwprop                         |      |      |      |      |     -0.5%|          |
ethread                          |      |      |      |      |     -0.2%|          |
esra                 ------------|      |      |      |      |          |          |
ealias               ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
cddce                            |      |      |      |      |     -0.2%|          |
phiopt                           |      |      |      |      |     -0.2%|          |
modref               ------------|      |      |      |      |          |          |
iftoswitch           ------------|      |      |      |      |          |          |
profile_estimate     ------------|      |      |      |      |          |          |
local-pure-const                 |      |      |      |      |          |   +100.0%|
release_ssa          ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
=======node_fun:main=========
=======node_fun:copy_section=========
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
=======node_fun:bfd_set_section_contents=========
--------GIMPLE Cond -------
=======node_fun:bfd_convert_section_contents=========
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
=======node_fun:bfd_get_full_section_contents=========
--------GIMPLE_SWITCH -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
--------GIMPLE Cond -------
=======node_fun:bfd_get_section_contents=========
--------GIMPLE Cond -------
=======node_fun:bfd_malloc=========
--------GIMPLE Cond -------
--------GIMPLE Cond -------
===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_7 = VDEF <.MEM_6(D)>
_1 = time (0B);
# .MEM_8 = VDEF <.MEM_7>
srand (_2);
# .MEM_9 = VDEF <.MEM_8>
_3 = rand ();
# .MEM_11 = VDEF <.MEM_10>
copy_section (&sec);
# .MEM_30 = VDEF <.MEM_29>
_1 = rand ();
# .MEM_35 = VDEF <.MEM_30>
_3 = bfd_get_full_section_contents (isection_23(D), &memhunk);
# .MEM_36 = VDEF <.MEM_35>
_4 = bfd_convert_section_contents (isection_23(D), &memhunk);
# .MEM_37 = VDEF <.MEM_36>
printf ("%d\n", _6);
# .MEM_38 = VDEF <.MEM_37>
_8 = bfd_set_section_contents (_7);
 <var_decl 0x7f4c4e9d3f30 memhunk
    type <pointer_type 0x7f4c4dc54f18
        type <integer_type 0x7f4c4dc54e70 bfd_byte public unsigned QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4e12bcd8 0> max <integer_cst 0x7f4c4e12bc78 255> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc54f18>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4dc54348>>
    addressable unsigned DI ./benchmarks/binutils/leak_8/binutils_leak_8.c:141:12 size <integer_cst 0x7f4c4e12bbb8 64> unit-size <integer_cst 0x7f4c4e12bbd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7f4c4dc55f00 copy_section>>
# .MEM_31 = VDEF <.MEM_30>
memhunk_19 = malloc (4);
# .MEM_32 = VDEF <.MEM_31>
memset (memhunk_19, 0, 4);
# .MEM_33 = VDEF <.MEM_32>
_10 = bfd_set_section_contents (memhunk_19);
# .MEM_13 = VDEF <.MEM_12(D)>
printf ("%d\n", _1);
# .MEM_14 = VDEF <.MEM_11>
_2 = rand ();
# .MEM_25 = VDEF <.MEM_24(D)>
_1 = rand ();
# .MEM_26 = VDEF <.MEM_25>
contents_17 = bfd_malloc (4);
# .MEM_27 = VDEF <.MEM_21>
printf ("%d\n", _3);
# .MEM_28 = VDEF <.MEM_22>
_4 = rand ();
# .MEM_48 = VDEF <.MEM_39(D)>
p_32 = bfd_malloc (4);
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
# .MEM_40 = VDEF <.MEM_39(D)>
compressed_buffer_21 = bfd_malloc (4);
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
# .MEM_42 = VDEF <.MEM_41>
p_24 = bfd_malloc (4);
# .MEM_46 = VDEF <.MEM_39(D)>
p_29 = bfd_malloc (4);
# .MEM_13 = VDEF <.MEM_11(D)>
memset (location_6(D), 0, 4);
# .MEM_12 = VDEF <.MEM_11(D)>
_1 = rand ();
# .MEM_15 = VDEF <.MEM_12(D)>
__builtin_puts (&"bfd_error_no_memory"[0]);
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
# .MEM_14 = VDEF <.MEM_13>
__builtin_puts (&"bfd_error_no_memory"[0]);
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:copy_section========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path copy_section  function_call count: 8 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:bfd_set_section_contents========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path bfd_set_section_contents  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:bfd_set_section_contents========= [0m
[40;42m =======start_check_funciton:bfd_set_section_contents========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4c4e327e80
    type <pointer_type 0x7f4c4dc632a0
        type <array_type 0x7f4c4dc631f8 type <integer_type 0x7f4c4dc547e0 char>
            SI
            size <integer_cst 0x7f4c4e12bdf8 constant 32>
            unit-size <integer_cst 0x7f4c4e12be10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4c4dc63150>
            pointer_to_this <pointer_type 0x7f4c4dc632a0>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4c4e327e60 type <array_type 0x7f4c4dc631f8>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/leak_8/binutils_leak_8.c:133:3 start: ./benchmarks/binutils/leak_8/binutils_leak_8.c:133:3 finish: ./benchmarks/binutils/leak_8/binutils_leak_8.c:133:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc75240
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _2 = rand ();
    version:2>
# .MEM_14 = VDEF <.MEM_11>
_2 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_3 = _2 % 2;
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
_4 = _3 == 1;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
_2 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc75240
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _2 = rand ();
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_set_section_contents========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:bfd_convert_section_contents========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path bfd_convert_section_contents  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path bfd_malloc  function_call count: 2 level :3========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:bfd_malloc========= [0m
[40;42m =======start_check_funciton:bfd_malloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c1e0
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352a0 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc799f0 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c240
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352d8 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc79a20 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_malloc========= [0m
[40;42m =======pre_check_funciton:bfd_convert_section_contents========= [0m
[40;42m =======start_check_funciton:bfd_convert_section_contents========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc754c8
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>
# .MEM_25 = VDEF <.MEM_24(D)>
_1 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_2 = _1 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:111:9: warning: use location
  111 |         __NONDET(use_memmove, 1, 0);
      |         ^
if (_2 != 1)
./benchmarks/binutils/leak_8/binutils_leak_8.c:115:12: warning: use location
  115 |         if (!use_memmove)
      |            ^
if (_2 != 1)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:115:12: warning: use location
Cond in fucntion bfd_convert_section_contents basic block 2
 ================== possible direct basic block ================= 
from bfd_convert_section_contents basic block 3
 ================== possible direct basic block ================= 
from bfd_convert_section_contents basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_1 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:111:9: warning: use location
  111 |         __NONDET(use_memmove, 1, 0);
      |         ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc754c8
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4c4dc6b6f0 type <integer_type 0x7f4c4dc549d8 bfd_size_type> constant 4>

dot graph START

======================================================================
 <addr_expr 0x7f4c4e327f80
    type <pointer_type 0x7f4c4dc632a0
        type <array_type 0x7f4c4dc631f8 type <integer_type 0x7f4c4dc547e0 char>
            SI
            size <integer_cst 0x7f4c4e12bdf8 constant 32>
            unit-size <integer_cst 0x7f4c4e12be10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4c4dc63150>
            pointer_to_this <pointer_type 0x7f4c4dc632a0>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4c4e327f60 type <array_type 0x7f4c4dc631f8>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/leak_8/binutils_leak_8.c:123:3 start: ./benchmarks/binutils/leak_8/binutils_leak_8.c:123:3 finish: ./benchmarks/binutils/leak_8/binutils_leak_8.c:123:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc755a0
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _4 = rand ();
    version:4>
# .MEM_28 = VDEF <.MEM_22>
_4 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_5 = _4 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:125:16: warning: use location
  125 |         return __RANDBOOL;
      |                ^
_6 = _5 == 1;
./benchmarks/binutils/leak_8/binutils_leak_8.c:125:16: warning: use location
_20 = (int) _6;
./benchmarks/binutils/leak_8/binutils_leak_8.c:125:16: warning: use location
_8 = PHI <0(3), _20(6)>
lto1: warning: use location
this stmt have mutiple branch --------
_4 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:125:16: warning: use location
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc755a0
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _4 = rand ();
    version:4>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_convert_section_contents========= [0m
[40;42m =======pre add _ fucntion:bfd_get_full_section_contents========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path bfd_get_full_section_contents  function_call count: 5 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path bfd_malloc  function_call count: 2 level :3========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:bfd_malloc========= [0m
[40;42m =======start_check_funciton:bfd_malloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c1e0
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352a0 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc799f0 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c240
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352d8 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc79a20 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:bfd_get_section_contents========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path bfd_get_section_contents  function_call count: 2 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre_check_funciton:bfd_get_section_contents========= [0m
[40;42m =======start_check_funciton:bfd_get_section_contents========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e678
    type <pointer_type 0x7f4c4e147150
        type <void_type 0x7f4c4e1470a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147150>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c4dc64980 location>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f4c4dc6bb10>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_11(D)>
memset (location_6(D), 0, 4);
memset (location_6(D), 0, 4);
./benchmarks/binutils/leak_8/binutils_leak_8.c:34:17: warning: use location
   34 |                 memset (location, 0, 4);
      |                 ^
this stmt is child function---memset-----

 ================== trace ================== 
trace fucntion name:memset 

 ================== trace ================== 
trace fucntion free:0 
if (location_6(D) != 0B)
./benchmarks/binutils/leak_8/binutils_leak_8.c:33:12: warning: use location
   33 |         if (location) {
      |            ^
if (location_6(D) != 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:33:12: warning: use location
Cond in fucntion bfd_get_section_contents basic block 2
 ================== possible direct basic block ================= 
from bfd_get_section_contents basic block 3
 ================== possible direct basic block ================= 
from bfd_get_section_contents basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e678
    type <pointer_type 0x7f4c4e147150
        type <void_type 0x7f4c4e1470a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147150>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c4dc64980 location>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f4c4dc6bb10>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e558
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>
# .MEM_12 = VDEF <.MEM_11(D)>
_1 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_2 = _1 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
   39 |         return __RANDBOOL;
      |                ^
_3 = _2 == 1;
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
_9 = (int) _3;
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
_4 = PHI <1(3), _9(4)>
lto1: warning: use location
this stmt have mutiple branch --------
_1 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e558
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_get_section_contents========= [0m
[40;42m =======pre_check_funciton:bfd_get_full_section_contents========= [0m
[40;42m =======start_check_funciton:bfd_get_full_section_contents========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc75dc8
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64500 sec>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4c4dc6ba98>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_27>
return;
In function â€˜bfd_get_full_section_contentsâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 6

======================================================================
_2 = bfd_get_section_contents (sec_19(D), p_6);
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:59:38: warning: use location
   59 |                                 if (!bfd_get_section_contents (sec, p))
      |                                      ^
this stmt is child function---bfd_get_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_get_section_contents 
[40;44m =======trace_function_path bfd_get_section_contents  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:bfd_get_section_contents========= [0m
[40;36m ======= find relate stmt with sec ========= [0m
[40;36m ======= relate stmt argument:sec ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_27>
return;
In function â€˜bfd_get_full_section_contentsâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 6

======================================================================
if (_2 == 0)
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:59:36: warning: use location
   59 |                                 if (!bfd_get_section_contents (sec, p))
      |                                    ^
if (_2 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:59:36: warning: use location
Cond in fucntion bfd_get_full_section_contents basic block 5
 ================== possible direct basic block ================= 
from bfd_get_full_section_contents basic block 6
 ================== possible direct basic block ================= 
from bfd_get_full_section_contents basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
*ptr_17(D) = p_6;
./benchmarks/binutils/leak_8/binutils_leak_8.c:66:38: warning: use location
   66 |                                 *ptr = p;
      |                                      ^
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: use location
   62 |                                                         free (p);
      |                                                         ^
this stmt is child function---free-----

 ================== find ================== 
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_27>
return;
In function â€˜bfd_get_full_section_contentsâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 6

======================================================================
*p_6 = 12;
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:58:36: warning: use location
   58 |                                 *p = 12;
      |                                    ^
_1 = sec_19(D)->compress_status;
./benchmarks/binutils/leak_8/binutils_leak_8.c:48:20: warning: use location
   48 |         switch (sec->compress_status)
      |                    ^
_1 = sec_19(D)->compress_status;
./benchmarks/binutils/leak_8/binutils_leak_8.c:48:20: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc75dc8
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64500 sec>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4c4dc6ba98>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: Use after free error!: free location 
   62 |                                                         free (p);
      |                                                         ^
# .MEM_51 = VDEF <.MEM_50>
*ptr_17(D) = p_6;
./benchmarks/binutils/leak_8/binutils_leak_8.c:66:38: warning: use location
   66 |                                 *ptr = p;
      |                                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc75b88
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _4 = rand ();
    version:4>
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_27>
return;
In function â€˜bfd_get_full_section_contentsâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 6

======================================================================
_5 = _4 % 2;
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:37: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_27>
return;
In function â€˜bfd_get_full_section_contentsâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 6

======================================================================
if (_5 == 1)
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:36: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                    ^
if (_5 == 1)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:36: warning: use location
Cond in fucntion bfd_get_full_section_contents basic block 11
 ================== possible direct basic block ================= 
from bfd_get_full_section_contents basic block 12
 ================== possible direct basic block ================= 
from bfd_get_full_section_contents basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_27>
return;
In function â€˜bfd_get_full_section_contentsâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 6

======================================================================
_4 = rand ();
In function â€˜mainâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:37: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                     ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc75b88
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _4 = rand ();
    version:4>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: use location
   62 |                                                         free (p);
      |                                                         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
./benchmarks/binutils/leak_8/binutils_leak_8.c:83:33: warning: use location
   83 |                                 free (compressed_buffer);
      |                                 ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
./benchmarks/binutils/leak_8/binutils_leak_8.c:88:41: warning: use location
   88 |                                         free (compressed_buffer);
      |                                         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: Use after free error!: free location 
   62 |                                                         free (p);
      |                                                         ^
_5 = _4 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:37: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: Use after free error!: free location 
   62 |                                                         free (p);
      |                                                         ^
if (_5 == 1)
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:36: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: Use after free error!: free location 
   62 |                                                         free (p);
      |                                                         ^
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:37: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:0 [0m
[40;31m  	possible double free [Looserules]:3 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_get_full_section_contents========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre_check_funciton:copy_section========= [0m
[40;42m =======start_check_funciton:copy_section========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4e133c18
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4e9d3b40 memhunk>
    def_stmt memhunk_19 = malloc (4);
    version:19
    ptr-info 0x7f4c4dc6b960>
# .MEM_31 = VDEF <.MEM_30>
memhunk_19 = malloc (4);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
free (memhunk_19);
./benchmarks/binutils/leak_8/binutils_leak_8.c:178:25: warning: use location
  178 |                         free (memhunk);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (memhunk_19);
./benchmarks/binutils/leak_8/binutils_leak_8.c:178:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
_10 = bfd_set_section_contents (memhunk_19);
./benchmarks/binutils/leak_8/binutils_leak_8.c:172:30: warning: use location
  172 |                         if (!bfd_set_section_contents (memhunk))
      |                              ^
this stmt is child function---bfd_set_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_set_section_contents 
[40;44m =======trace_function_path bfd_set_section_contents  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:bfd_set_section_contents========= [0m
[40;36m ======= find relate stmt with memhunk ========= [0m
[40;36m ======= relate stmt argument:memhunk ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
if (_10 == 0)
./benchmarks/binutils/leak_8/binutils_leak_8.c:172:28: warning: use location
  172 |                         if (!bfd_set_section_contents (memhunk))
      |                            ^
if (_10 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:172:28: warning: use location
Cond in fucntion copy_section basic block 8
 ================== possible direct basic block ================= 
from copy_section basic block 11
 ================== possible direct basic block ================= 
from copy_section basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
memset (memhunk_19, 0, 4);
./benchmarks/binutils/leak_8/binutils_leak_8.c:170:25: warning: use location
  170 |                         memset (memhunk, 0, 4);
      |                         ^
this stmt is child function---memset-----

 ================== trace ================== 
trace fucntion name:memset 

 ================== trace ================== 
trace fucntion free:1 
memhunk_19 = malloc (4);
./benchmarks/binutils/leak_8/binutils_leak_8.c:169:41: warning: use location
  169 |                         void *memhunk = xmalloc (4);
      |                                         ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4e133c18
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4e9d3b40 memhunk>
    def_stmt memhunk_19 = malloc (4);
    version:19
    ptr-info 0x7f4c4dc6b960>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_33>
free (memhunk_19);
./benchmarks/binutils/leak_8/binutils_leak_8.c:178:25: warning: use location
  178 |                         free (memhunk);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f4c4e133948
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>
# .MEM_30 = VDEF <.MEM_29>
_1 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_2 = _1 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:143:13: warning: use location
  143 |         if (__RANDBOOL)
      |             ^
if (_2 == 1)
./benchmarks/binutils/leak_8/binutils_leak_8.c:143:12: warning: use location
  143 |         if (__RANDBOOL)
      |            ^
if (_2 == 1)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:143:12: warning: use location
Cond in fucntion copy_section basic block 2
 ================== possible direct basic block ================= 
from copy_section basic block 3
 ================== possible direct basic block ================= 
from copy_section basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_1 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:143:13: warning: use location
  143 |         if (__RANDBOOL)
      |             ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4e133948
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_39 = VDEF <.MEM_38>
free (_9);
./benchmarks/binutils/leak_8/binutils_leak_8.c:164:25: warning: use location
  164 |                         free (memhunk);
      |                         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_33>
free (memhunk_19);
./benchmarks/binutils/leak_8/binutils_leak_8.c:178:25: warning: use location
  178 |                         free (memhunk);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:0 [0m
[40;31m  	possible double free [Looserules]:2 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4e133c60
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64100 isection>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7f4c4dc6b978>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_4 = bfd_convert_section_contents (isection_23(D), &memhunk);
./benchmarks/binutils/leak_8/binutils_leak_8.c:150:45: warning: use location
  150 |                                         || !bfd_convert_section_contents (isection, &memhunk))
      |                                             ^
this stmt is child function---bfd_convert_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_convert_section_contents 
[40;44m =======trace_function_path bfd_convert_section_contents  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:bfd_convert_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
bfd_malloc this fucntion return value is heap-object 
bfd_convert_section_contents this fucntion return value is heap-object bfd_malloc
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_malloc========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (_4 == 0)
./benchmarks/binutils/leak_8/binutils_leak_8.c:150:41: warning: use location
  150 |                                         || !bfd_convert_section_contents (isection, &memhunk))
      |                                         ^
if (_4 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:150:41: warning: use location
Cond in fucntion copy_section basic block 4
 ================== possible direct basic block ================= 
from copy_section basic block 5
 ================== possible direct basic block ================= 
from copy_section basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_3 = bfd_get_full_section_contents (isection_23(D), &memhunk);
./benchmarks/binutils/leak_8/binutils_leak_8.c:149:30: warning: use location
  149 |                         if (!bfd_get_full_section_contents (isection, &memhunk)
      |                              ^
this stmt is child function---bfd_get_full_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_get_full_section_contents 
[40;44m =======trace_function_path bfd_get_full_section_contents  function_call count: 5 level :0========  [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
[40;36m ======= node_fun:bfd_get_full_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_malloc========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:bfd_get_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_get_section_contents========= [0m
[40;44m =======trace_function_path bfd_get_section_contents  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_get_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m

 ================== trace ================== 
trace fucntion free:0 
_3 = bfd_get_full_section_contents (isection_23(D), &memhunk);
./benchmarks/binutils/leak_8/binutils_leak_8.c:149:30: warning: use location
this stmt is child function---bfd_get_full_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_get_full_section_contents 
[40;44m =======trace_function_path bfd_get_full_section_contents  function_call count: 5 level :0========  [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
[40;36m ======= node_fun:bfd_get_full_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_malloc========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:bfd_get_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_get_section_contents========= [0m
[40;44m =======trace_function_path bfd_get_section_contents  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_get_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4e133c60
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64100 isection>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7f4c4dc6b978>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4e133c60
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64100 isection>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7f4c4dc6b978>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_4 = bfd_convert_section_contents (isection_23(D), &memhunk);
./benchmarks/binutils/leak_8/binutils_leak_8.c:150:45: warning: use location
  150 |                                         || !bfd_convert_section_contents (isection, &memhunk))
      |                                             ^
this stmt is child function---bfd_convert_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_convert_section_contents 
[40;44m =======trace_function_path bfd_convert_section_contents  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:bfd_convert_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
bfd_malloc this fucntion return value is heap-object 
bfd_convert_section_contents this fucntion return value is heap-object bfd_malloc
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_malloc========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (_4 == 0)
./benchmarks/binutils/leak_8/binutils_leak_8.c:150:41: warning: use location
  150 |                                         || !bfd_convert_section_contents (isection, &memhunk))
      |                                         ^
if (_4 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:150:41: warning: use location
Cond in fucntion copy_section basic block 4
 ================== possible direct basic block ================= 
from copy_section basic block 5
 ================== possible direct basic block ================= 
from copy_section basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_3 = bfd_get_full_section_contents (isection_23(D), &memhunk);
./benchmarks/binutils/leak_8/binutils_leak_8.c:149:30: warning: use location
  149 |                         if (!bfd_get_full_section_contents (isection, &memhunk)
      |                              ^
this stmt is child function---bfd_get_full_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_get_full_section_contents 
[40;44m =======trace_function_path bfd_get_full_section_contents  function_call count: 5 level :0========  [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
[40;36m ======= node_fun:bfd_get_full_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_malloc========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:bfd_get_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_get_section_contents========= [0m
[40;44m =======trace_function_path bfd_get_section_contents  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_get_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m

 ================== trace ================== 
trace fucntion free:0 
_3 = bfd_get_full_section_contents (isection_23(D), &memhunk);
./benchmarks/binutils/leak_8/binutils_leak_8.c:149:30: warning: use location
this stmt is child function---bfd_get_full_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_get_full_section_contents 
[40;44m =======trace_function_path bfd_get_full_section_contents  function_call count: 5 level :0========  [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
[40;36m ======= node_fun:bfd_get_full_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_malloc========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:bfd_get_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_get_section_contents========= [0m
[40;44m =======trace_function_path bfd_get_section_contents  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_get_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4e133c60
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64100 isection>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7f4c4dc6b978>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4e327d20
    type <pointer_type 0x7f4c4dc632a0
        type <array_type 0x7f4c4dc631f8 type <integer_type 0x7f4c4dc547e0 char>
            SI
            size <integer_cst 0x7f4c4e12bdf8 constant 32>
            unit-size <integer_cst 0x7f4c4e12be10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4c4dc63150>
            pointer_to_this <pointer_type 0x7f4c4dc632a0>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4c4e327d00 type <array_type 0x7f4c4dc631f8>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/leak_8/binutils_leak_8.c:156:4 start: ./benchmarks/binutils/leak_8/binutils_leak_8.c:156:4 finish: ./benchmarks/binutils/leak_8/binutils_leak_8.c:156:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4e133af8
    type <pointer_type 0x7f4c4dc54f18
        type <integer_type 0x7f4c4dc54e70 bfd_byte public unsigned QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4e12bcd8 0> max <integer_cst 0x7f4c4e12bc78 255> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc54f18>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4dc54348>>
   
    def_stmt _7 = memhunk;
    version:7
    ptr-info 0x7f4c4dc6b930>
# VUSE <.MEM_37>
_7 = memhunk;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_8 = bfd_set_section_contents (_7);
./benchmarks/binutils/leak_8/binutils_leak_8.c:158:30: warning: use location
  158 |                         if (!bfd_set_section_contents (memhunk))
      |                              ^
this stmt is child function---bfd_set_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_set_section_contents 
[40;44m =======trace_function_path bfd_set_section_contents  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:bfd_set_section_contents========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (_8 == 0)
./benchmarks/binutils/leak_8/binutils_leak_8.c:158:28: warning: use location
  158 |                         if (!bfd_set_section_contents (memhunk))
      |                            ^
if (_8 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:158:28: warning: use location
Cond in fucntion copy_section basic block 6
 ================== possible direct basic block ================= 
from copy_section basic block 11
 ================== possible direct basic block ================= 
from copy_section basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4e133af8
    type <pointer_type 0x7f4c4dc54f18
        type <integer_type 0x7f4c4dc54e70 bfd_byte public unsigned QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4e12bcd8 0> max <integer_cst 0x7f4c4e12bc78 255> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc54f18>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4dc54348>>
   
    def_stmt _7 = memhunk;
    version:7
    ptr-info 0x7f4c4dc6b930>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_39 = VDEF <.MEM_38>
free (_9);
./benchmarks/binutils/leak_8/binutils_leak_8.c:164:25: warning: use location
  164 |                         free (memhunk);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4c4dc6b630 type <integer_type 0x7f4c4dc5c0a8 size_t> constant 4>
[40;33m =======POP node_fun stack:copy_section========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:srand========= [0m
[40;33m =======POP node_fun stack:srand========= [0m
[40;42m =======pre add _ fucntion:time========= [0m
[40;33m =======POP node_fun stack:time========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4c4e12bfc0 type <pointer_type 0x7f4c4e147000> constant 0>

dot graph START

======================================================================
 <ssa_name 0x7f4c4e133630
    type <integer_type 0x7f4c4e140690 unsigned int public unsigned SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140690 precision:32 min <integer_cst 0x7f4c4e12be28 0> max <integer_cst 0x7f4c4e12bde0 4294967295>
        pointer_to_this <pointer_type 0x7f4c4e14c690>>
   
    def_stmt _2 = (unsigned int) _1;
    version:2>
_2 = (unsigned int) _1;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
srand (_2);
srand (_2);
./benchmarks/binutils/leak_8/binutils_leak_8.c:183:9: warning: use location
  183 |         srand(time(NULL));
      |         ^
this stmt is child function---srand-----

 ================== trace ================== 
trace fucntion name:srand 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
srand (_2);
srand (_2);
./benchmarks/binutils/leak_8/binutils_leak_8.c:183:9: warning: use location
this stmt is child function---srand-----

 ================== trace ================== 
trace fucntion name:srand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4e133630
    type <integer_type 0x7f4c4e140690 unsigned int public unsigned SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140690 precision:32 min <integer_cst 0x7f4c4e12be28 0> max <integer_cst 0x7f4c4e12bde0 4294967295>
        pointer_to_this <pointer_type 0x7f4c4e14c690>>
   
    def_stmt _2 = (unsigned int) _1;
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4e133678
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _3 = rand ();
    version:3>
# .MEM_9 = VDEF <.MEM_8>
_3 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_4 = _3 % 3;
./benchmarks/binutils/leak_8/binutils_leak_8.c:187:39: warning: use location
  187 |         sec.compress_status = rand () % 3;
      |                                       ^
_5 = (<unnamed-unsigned:2>) _4;
./benchmarks/binutils/leak_8/binutils_leak_8.c:187:39: warning: use location
sec.compress_status = _5;
./benchmarks/binutils/leak_8/binutils_leak_8.c:187:29: warning: use location
  187 |         sec.compress_status = rand () % 3;
      |                             ^
copy_section (&sec);
./benchmarks/binutils/leak_8/binutils_leak_8.c:189:9: warning: use location
  189 |         copy_section(isection);
      |         ^
this stmt is child function---copy_section-----

 ================== trace ================== 
trace fucntion name:copy_section 
[40;44m =======trace_function_path copy_section  function_call count: 8 level :0========  [0m
# .MEM_39 = VDEF <.MEM_38>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_39 = VDEF <.MEM_38>
free (_9);
./benchmarks/binutils/leak_8/binutils_leak_8.c:164:25: warning: use location
  164 |                         free (memhunk);
      |                         ^
# .MEM_34 = VDEF <.MEM_33>
free (memhunk_19);
[40;31m  find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_33>
free (memhunk_19);
./benchmarks/binutils/leak_8/binutils_leak_8.c:178:25: warning: use location
  178 |                         free (memhunk);
      |                         ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:bfd_set_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_set_section_contents========= [0m
[40;44m =======trace_function_path bfd_set_section_contents  function_call count: 2 level :1========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:bfd_convert_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_convert_section_contents========= [0m
[40;44m =======trace_function_path bfd_convert_section_contents  function_call count: 3 level :1========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
bfd_malloc this fucntion return value is heap-object 
bfd_convert_section_contents this fucntion return value is heap-object bfd_malloc
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :2========  [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:bfd_get_full_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_get_full_section_contents========= [0m
[40;44m =======trace_function_path bfd_get_full_section_contents  function_call count: 5 level :1========  [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
[40;31m  find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: use location
   62 |                                                         free (p);
      |                                                         ^
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
[40;31m  find free stmt free same pointer [0m
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
./benchmarks/binutils/leak_8/binutils_leak_8.c:83:33: warning: use location
   83 |                                 free (compressed_buffer);
      |                                 ^
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
[40;31m  find free stmt free same pointer [0m
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
./benchmarks/binutils/leak_8/binutils_leak_8.c:88:41: warning: use location
   88 |                                         free (compressed_buffer);
      |                                         ^
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :2========  [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:bfd_get_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_get_section_contents========= [0m
[40;44m =======trace_function_path bfd_get_section_contents  function_call count: 2 level :2========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:5 
copy_section (&sec);
./benchmarks/binutils/leak_8/binutils_leak_8.c:189:9: warning: use location
  189 |         copy_section(isection);
      |         ^
this stmt is child function---copy_section-----

 ================== trace ================== 
trace fucntion name:copy_section 
[40;44m =======trace_function_path copy_section  function_call count: 8 level :0========  [0m
# .MEM_39 = VDEF <.MEM_38>
free (_9);
[40;31m  find free stmt free same pointer [0m
# .MEM_39 = VDEF <.MEM_38>
free (_9);
./benchmarks/binutils/leak_8/binutils_leak_8.c:164:25: warning: use location
  164 |                         free (memhunk);
      |                         ^
# .MEM_34 = VDEF <.MEM_33>
free (memhunk_19);
[40;31m  find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_33>
free (memhunk_19);
./benchmarks/binutils/leak_8/binutils_leak_8.c:178:25: warning: use location
  178 |                         free (memhunk);
      |                         ^
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:bfd_set_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_set_section_contents========= [0m
[40;44m =======trace_function_path bfd_set_section_contents  function_call count: 2 level :1========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:bfd_convert_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_convert_section_contents========= [0m
[40;44m =======trace_function_path bfd_convert_section_contents  function_call count: 3 level :1========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
bfd_malloc this fucntion return value is heap-object 
bfd_convert_section_contents this fucntion return value is heap-object bfd_malloc
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :2========  [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:bfd_get_full_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_get_full_section_contents========= [0m
[40;44m =======trace_function_path bfd_get_full_section_contents  function_call count: 5 level :1========  [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
[40;31m  find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: use location
   62 |                                                         free (p);
      |                                                         ^
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
[40;31m  find free stmt free same pointer [0m
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
./benchmarks/binutils/leak_8/binutils_leak_8.c:83:33: warning: use location
   83 |                                 free (compressed_buffer);
      |                                 ^
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
[40;31m  find free stmt free same pointer [0m
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
./benchmarks/binutils/leak_8/binutils_leak_8.c:88:41: warning: use location
   88 |                                         free (compressed_buffer);
      |                                         ^
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :2========  [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:bfd_get_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_get_section_contents========= [0m
[40;44m =======trace_function_path bfd_get_section_contents  function_call count: 2 level :2========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:10 
_3 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:187:31: warning: use location
  187 |         sec.compress_status = rand () % 3;
      |                               ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:10 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4e133678
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _3 = rand ();
    version:3>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:10 [0m
[40;31m  	possible double free [rigorous]:10 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:10 [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4e327be0
    type <pointer_type 0x7f4c4dc5da80
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
   
    arg:0 <var_decl 0x7f4c4e9d3bd0 sec type <record_type 0x7f4c4dc5d9d8 bfd_section>
        addressable BLK ./benchmarks/binutils/leak_8/binutils_leak_8.c:185:21 size <integer_cst 0x7f4c4dc4bb58 2176> unit-size <integer_cst 0x7f4c4dc4b7b0 272>
        align:64 warn_if_not_align:0 context <function_decl 0x7f4c4dc5b000 main>>
    ./benchmarks/binutils/leak_8/binutils_leak_8.c:186:21 start: ./benchmarks/binutils/leak_8/binutils_leak_8.c:186:21 finish: ./benchmarks/binutils/leak_8/binutils_leak_8.c:186:21>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:copy_section========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path copy_section  function_call count: 8 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:bfd_set_section_contents========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path bfd_set_section_contents  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:bfd_set_section_contents========= [0m
[40;42m =======start_check_funciton:bfd_set_section_contents========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4c4e327e80
    type <pointer_type 0x7f4c4dc632a0
        type <array_type 0x7f4c4dc631f8 type <integer_type 0x7f4c4dc547e0 char>
            SI
            size <integer_cst 0x7f4c4e12bdf8 constant 32>
            unit-size <integer_cst 0x7f4c4e12be10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4c4dc63150>
            pointer_to_this <pointer_type 0x7f4c4dc632a0>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4c4e327e60 type <array_type 0x7f4c4dc631f8>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/leak_8/binutils_leak_8.c:133:3 start: ./benchmarks/binutils/leak_8/binutils_leak_8.c:133:3 finish: ./benchmarks/binutils/leak_8/binutils_leak_8.c:133:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc75240
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _2 = rand ();
    version:2>
# .MEM_14 = VDEF <.MEM_11>
_2 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_3 = _2 % 2;
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
_4 = _3 == 1;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
_2 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc75240
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _2 = rand ();
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_set_section_contents========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:bfd_convert_section_contents========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path bfd_convert_section_contents  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path bfd_malloc  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:bfd_malloc========= [0m
[40;42m =======start_check_funciton:bfd_malloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c1e0
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352a0 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc799f0 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c240
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352d8 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc79a20 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_malloc========= [0m
[40;42m =======pre_check_funciton:bfd_convert_section_contents========= [0m
[40;42m =======start_check_funciton:bfd_convert_section_contents========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc754c8
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>
# .MEM_25 = VDEF <.MEM_24(D)>
_1 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_2 = _1 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:111:9: warning: use location
  111 |         __NONDET(use_memmove, 1, 0);
      |         ^
if (_2 != 1)
./benchmarks/binutils/leak_8/binutils_leak_8.c:115:12: warning: use location
  115 |         if (!use_memmove)
      |            ^
if (_2 != 1)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:115:12: warning: use location
Cond in fucntion bfd_convert_section_contents basic block 2
 ================== possible direct basic block ================= 
from bfd_convert_section_contents basic block 3
 ================== possible direct basic block ================= 
from bfd_convert_section_contents basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_1 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:111:9: warning: use location
  111 |         __NONDET(use_memmove, 1, 0);
      |         ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc754c8
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4c4dc6b6f0 type <integer_type 0x7f4c4dc549d8 bfd_size_type> constant 4>

dot graph START

======================================================================
 <addr_expr 0x7f4c4e327f80
    type <pointer_type 0x7f4c4dc632a0
        type <array_type 0x7f4c4dc631f8 type <integer_type 0x7f4c4dc547e0 char>
            SI
            size <integer_cst 0x7f4c4e12bdf8 constant 32>
            unit-size <integer_cst 0x7f4c4e12be10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4c4dc63150>
            pointer_to_this <pointer_type 0x7f4c4dc632a0>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4c4e327f60 type <array_type 0x7f4c4dc631f8>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/leak_8/binutils_leak_8.c:123:3 start: ./benchmarks/binutils/leak_8/binutils_leak_8.c:123:3 finish: ./benchmarks/binutils/leak_8/binutils_leak_8.c:123:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc755a0
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _4 = rand ();
    version:4>
# .MEM_28 = VDEF <.MEM_22>
_4 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_5 = _4 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:125:16: warning: use location
  125 |         return __RANDBOOL;
      |                ^
_6 = _5 == 1;
./benchmarks/binutils/leak_8/binutils_leak_8.c:125:16: warning: use location
_20 = (int) _6;
./benchmarks/binutils/leak_8/binutils_leak_8.c:125:16: warning: use location
_8 = PHI <0(3), _20(6)>
lto1: warning: use location
this stmt have mutiple branch --------
_4 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:125:16: warning: use location
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc755a0
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _4 = rand ();
    version:4>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_convert_section_contents========= [0m
[40;42m =======pre add _ fucntion:bfd_get_full_section_contents========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path bfd_get_full_section_contents  function_call count: 5 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path bfd_malloc  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:bfd_malloc========= [0m
[40;42m =======start_check_funciton:bfd_malloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c1e0
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352a0 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc799f0 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c240
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352d8 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc79a20 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:bfd_get_section_contents========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path bfd_get_section_contents  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre_check_funciton:bfd_get_section_contents========= [0m
[40;42m =======start_check_funciton:bfd_get_section_contents========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e678
    type <pointer_type 0x7f4c4e147150
        type <void_type 0x7f4c4e1470a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147150>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c4dc64980 location>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f4c4dc6bb10>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_11(D)>
memset (location_6(D), 0, 4);
memset (location_6(D), 0, 4);
./benchmarks/binutils/leak_8/binutils_leak_8.c:34:17: warning: use location
   34 |                 memset (location, 0, 4);
      |                 ^
this stmt is child function---memset-----

 ================== trace ================== 
trace fucntion name:memset 

 ================== trace ================== 
trace fucntion free:0 
if (location_6(D) != 0B)
./benchmarks/binutils/leak_8/binutils_leak_8.c:33:12: warning: use location
   33 |         if (location) {
      |            ^
if (location_6(D) != 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:33:12: warning: use location
Cond in fucntion bfd_get_section_contents basic block 2
 ================== possible direct basic block ================= 
from bfd_get_section_contents basic block 3
 ================== possible direct basic block ================= 
from bfd_get_section_contents basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e678
    type <pointer_type 0x7f4c4e147150
        type <void_type 0x7f4c4e1470a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147150>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c4dc64980 location>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f4c4dc6bb10>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e558
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>
# .MEM_12 = VDEF <.MEM_11(D)>
_1 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_2 = _1 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
   39 |         return __RANDBOOL;
      |                ^
_3 = _2 == 1;
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
_9 = (int) _3;
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
_4 = PHI <1(3), _9(4)>
lto1: warning: use location
this stmt have mutiple branch --------
_1 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e558
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_get_section_contents========= [0m
[40;42m =======pre_check_funciton:bfd_get_full_section_contents========= [0m
[40;42m =======start_check_funciton:bfd_get_full_section_contents========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc75dc8
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64500 sec>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4c4dc6ba98>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_27>
return;
In function â€˜bfd_get_full_section_contentsâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 6

======================================================================
_2 = bfd_get_section_contents (sec_19(D), p_6);
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:59:38: warning: use location
   59 |                                 if (!bfd_get_section_contents (sec, p))
      |                                      ^
this stmt is child function---bfd_get_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_get_section_contents 
[40;44m =======trace_function_path bfd_get_section_contents  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:bfd_get_section_contents========= [0m
[40;36m ======= find relate stmt with sec ========= [0m
[40;36m ======= relate stmt argument:sec ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_27>
return;
In function â€˜bfd_get_full_section_contentsâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 6

======================================================================
if (_2 == 0)
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:59:36: warning: use location
   59 |                                 if (!bfd_get_section_contents (sec, p))
      |                                    ^
if (_2 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:59:36: warning: use location
Cond in fucntion bfd_get_full_section_contents basic block 5
 ================== possible direct basic block ================= 
from bfd_get_full_section_contents basic block 6
 ================== possible direct basic block ================= 
from bfd_get_full_section_contents basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
*ptr_17(D) = p_6;
./benchmarks/binutils/leak_8/binutils_leak_8.c:66:38: warning: use location
   66 |                                 *ptr = p;
      |                                      ^
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: use location
   62 |                                                         free (p);
      |                                                         ^
this stmt is child function---free-----

 ================== find ================== 
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_27>
return;
In function â€˜bfd_get_full_section_contentsâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 6

======================================================================
*p_6 = 12;
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:58:36: warning: use location
   58 |                                 *p = 12;
      |                                    ^
_1 = sec_19(D)->compress_status;
./benchmarks/binutils/leak_8/binutils_leak_8.c:48:20: warning: use location
   48 |         switch (sec->compress_status)
      |                    ^
_1 = sec_19(D)->compress_status;
./benchmarks/binutils/leak_8/binutils_leak_8.c:48:20: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc75dc8
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64500 sec>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4c4dc6ba98>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: Use after free error!: free location 
   62 |                                                         free (p);
      |                                                         ^
# .MEM_51 = VDEF <.MEM_50>
*ptr_17(D) = p_6;
./benchmarks/binutils/leak_8/binutils_leak_8.c:66:38: warning: use location
   66 |                                 *ptr = p;
      |                                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc75b88
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _4 = rand ();
    version:4>
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_27>
return;
In function â€˜bfd_get_full_section_contentsâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 6

======================================================================
_5 = _4 % 2;
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:37: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_27>
return;
In function â€˜bfd_get_full_section_contentsâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 6

======================================================================
if (_5 == 1)
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:36: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                    ^
if (_5 == 1)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:36: warning: use location
Cond in fucntion bfd_get_full_section_contents basic block 11
 ================== possible direct basic block ================= 
from bfd_get_full_section_contents basic block 12
 ================== possible direct basic block ================= 
from bfd_get_full_section_contents basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_27>
return;
In function â€˜bfd_get_full_section_contentsâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 6

======================================================================
_4 = rand ();
In function â€˜copy_sectionâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:37: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                     ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc75b88
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _4 = rand ();
    version:4>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: use location
   62 |                                                         free (p);
      |                                                         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
./benchmarks/binutils/leak_8/binutils_leak_8.c:83:33: warning: use location
   83 |                                 free (compressed_buffer);
      |                                 ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
./benchmarks/binutils/leak_8/binutils_leak_8.c:88:41: warning: use location
   88 |                                         free (compressed_buffer);
      |                                         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: Use after free error!: free location 
   62 |                                                         free (p);
      |                                                         ^
_5 = _4 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:37: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: Use after free error!: free location 
   62 |                                                         free (p);
      |                                                         ^
if (_5 == 1)
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:36: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: Use after free error!: free location 
   62 |                                                         free (p);
      |                                                         ^
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:37: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:0 [0m
[40;31m  	possible double free [Looserules]:3 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_get_full_section_contents========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre_check_funciton:copy_section========= [0m
[40;42m =======start_check_funciton:copy_section========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4e133c18
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4e9d3b40 memhunk>
    def_stmt memhunk_19 = malloc (4);
    version:19
    ptr-info 0x7f4c4dc6b960>
# .MEM_31 = VDEF <.MEM_30>
memhunk_19 = malloc (4);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
free (memhunk_19);
./benchmarks/binutils/leak_8/binutils_leak_8.c:178:25: warning: use location
  178 |                         free (memhunk);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (memhunk_19);
./benchmarks/binutils/leak_8/binutils_leak_8.c:178:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
_10 = bfd_set_section_contents (memhunk_19);
./benchmarks/binutils/leak_8/binutils_leak_8.c:172:30: warning: use location
  172 |                         if (!bfd_set_section_contents (memhunk))
      |                              ^
this stmt is child function---bfd_set_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_set_section_contents 
[40;44m =======trace_function_path bfd_set_section_contents  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:bfd_set_section_contents========= [0m
[40;36m ======= find relate stmt with memhunk ========= [0m
[40;36m ======= relate stmt argument:memhunk ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
if (_10 == 0)
./benchmarks/binutils/leak_8/binutils_leak_8.c:172:28: warning: use location
  172 |                         if (!bfd_set_section_contents (memhunk))
      |                            ^
if (_10 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:172:28: warning: use location
Cond in fucntion copy_section basic block 8
 ================== possible direct basic block ================= 
from copy_section basic block 11
 ================== possible direct basic block ================= 
from copy_section basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
memset (memhunk_19, 0, 4);
./benchmarks/binutils/leak_8/binutils_leak_8.c:170:25: warning: use location
  170 |                         memset (memhunk, 0, 4);
      |                         ^
this stmt is child function---memset-----

 ================== trace ================== 
trace fucntion name:memset 

 ================== trace ================== 
trace fucntion free:1 
memhunk_19 = malloc (4);
./benchmarks/binutils/leak_8/binutils_leak_8.c:169:41: warning: use location
  169 |                         void *memhunk = xmalloc (4);
      |                                         ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4e133c18
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4e9d3b40 memhunk>
    def_stmt memhunk_19 = malloc (4);
    version:19
    ptr-info 0x7f4c4dc6b960>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_33>
free (memhunk_19);
./benchmarks/binutils/leak_8/binutils_leak_8.c:178:25: warning: use location
  178 |                         free (memhunk);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7f4c4e133948
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>
# .MEM_30 = VDEF <.MEM_29>
_1 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_2 = _1 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:143:13: warning: use location
  143 |         if (__RANDBOOL)
      |             ^
if (_2 == 1)
./benchmarks/binutils/leak_8/binutils_leak_8.c:143:12: warning: use location
  143 |         if (__RANDBOOL)
      |            ^
if (_2 == 1)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:143:12: warning: use location
Cond in fucntion copy_section basic block 2
 ================== possible direct basic block ================= 
from copy_section basic block 3
 ================== possible direct basic block ================= 
from copy_section basic block 8
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_1 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:143:13: warning: use location
  143 |         if (__RANDBOOL)
      |             ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4e133948
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_39 = VDEF <.MEM_38>
free (_9);
./benchmarks/binutils/leak_8/binutils_leak_8.c:164:25: warning: use location
  164 |                         free (memhunk);
      |                         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_34 = VDEF <.MEM_33>
free (memhunk_19);
./benchmarks/binutils/leak_8/binutils_leak_8.c:178:25: warning: use location
  178 |                         free (memhunk);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:0 [0m
[40;31m  	possible double free [Looserules]:2 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4e133c60
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64100 isection>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7f4c4dc6b978>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_4 = bfd_convert_section_contents (isection_23(D), &memhunk);
./benchmarks/binutils/leak_8/binutils_leak_8.c:150:45: warning: use location
  150 |                                         || !bfd_convert_section_contents (isection, &memhunk))
      |                                             ^
this stmt is child function---bfd_convert_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_convert_section_contents 
[40;44m =======trace_function_path bfd_convert_section_contents  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:bfd_convert_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
bfd_malloc this fucntion return value is heap-object 
bfd_convert_section_contents this fucntion return value is heap-object bfd_malloc
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_malloc========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (_4 == 0)
./benchmarks/binutils/leak_8/binutils_leak_8.c:150:41: warning: use location
  150 |                                         || !bfd_convert_section_contents (isection, &memhunk))
      |                                         ^
if (_4 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:150:41: warning: use location
Cond in fucntion copy_section basic block 4
 ================== possible direct basic block ================= 
from copy_section basic block 5
 ================== possible direct basic block ================= 
from copy_section basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_3 = bfd_get_full_section_contents (isection_23(D), &memhunk);
./benchmarks/binutils/leak_8/binutils_leak_8.c:149:30: warning: use location
  149 |                         if (!bfd_get_full_section_contents (isection, &memhunk)
      |                              ^
this stmt is child function---bfd_get_full_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_get_full_section_contents 
[40;44m =======trace_function_path bfd_get_full_section_contents  function_call count: 5 level :0========  [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
[40;36m ======= node_fun:bfd_get_full_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_malloc========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:bfd_get_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_get_section_contents========= [0m
[40;44m =======trace_function_path bfd_get_section_contents  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_get_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m

 ================== trace ================== 
trace fucntion free:0 
_3 = bfd_get_full_section_contents (isection_23(D), &memhunk);
./benchmarks/binutils/leak_8/binutils_leak_8.c:149:30: warning: use location
this stmt is child function---bfd_get_full_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_get_full_section_contents 
[40;44m =======trace_function_path bfd_get_full_section_contents  function_call count: 5 level :0========  [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
[40;36m ======= node_fun:bfd_get_full_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_malloc========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:bfd_get_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_get_section_contents========= [0m
[40;44m =======trace_function_path bfd_get_section_contents  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_get_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4e133c60
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64100 isection>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7f4c4dc6b978>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4e133c60
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64100 isection>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7f4c4dc6b978>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_4 = bfd_convert_section_contents (isection_23(D), &memhunk);
./benchmarks/binutils/leak_8/binutils_leak_8.c:150:45: warning: use location
  150 |                                         || !bfd_convert_section_contents (isection, &memhunk))
      |                                             ^
this stmt is child function---bfd_convert_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_convert_section_contents 
[40;44m =======trace_function_path bfd_convert_section_contents  function_call count: 3 level :0========  [0m
[40;36m ======= node_fun:bfd_convert_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
bfd_malloc this fucntion return value is heap-object 
bfd_convert_section_contents this fucntion return value is heap-object bfd_malloc
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_malloc========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (_4 == 0)
./benchmarks/binutils/leak_8/binutils_leak_8.c:150:41: warning: use location
  150 |                                         || !bfd_convert_section_contents (isection, &memhunk))
      |                                         ^
if (_4 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:150:41: warning: use location
Cond in fucntion copy_section basic block 4
 ================== possible direct basic block ================= 
from copy_section basic block 5
 ================== possible direct basic block ================= 
from copy_section basic block 6
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_3 = bfd_get_full_section_contents (isection_23(D), &memhunk);
./benchmarks/binutils/leak_8/binutils_leak_8.c:149:30: warning: use location
  149 |                         if (!bfd_get_full_section_contents (isection, &memhunk)
      |                              ^
this stmt is child function---bfd_get_full_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_get_full_section_contents 
[40;44m =======trace_function_path bfd_get_full_section_contents  function_call count: 5 level :0========  [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
[40;36m ======= node_fun:bfd_get_full_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_malloc========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:bfd_get_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_get_section_contents========= [0m
[40;44m =======trace_function_path bfd_get_section_contents  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_get_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m

 ================== trace ================== 
trace fucntion free:0 
_3 = bfd_get_full_section_contents (isection_23(D), &memhunk);
./benchmarks/binutils/leak_8/binutils_leak_8.c:149:30: warning: use location
this stmt is child function---bfd_get_full_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_get_full_section_contents 
[40;44m =======trace_function_path bfd_get_full_section_contents  function_call count: 5 level :0========  [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
[40;36m ======= node_fun:bfd_get_full_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;46m =======add node_fun stack:bfd_malloc========= [0m
[40;44m =======trace_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_malloc========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:bfd_get_section_contents========= [0m
[40;46m =======add node_fun stack:bfd_get_section_contents========= [0m
[40;44m =======trace_function_path bfd_get_section_contents  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:bfd_get_section_contents========= [0m
[40;36m ======= find relate stmt with isection ========= [0m
[40;36m ======= relate stmt argument:isection ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4e133c60
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64100 isection>
    def_stmt GIMPLE_NOP
    version:23
    ptr-info 0x7f4c4dc6b978>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4e327d20
    type <pointer_type 0x7f4c4dc632a0
        type <array_type 0x7f4c4dc631f8 type <integer_type 0x7f4c4dc547e0 char>
            SI
            size <integer_cst 0x7f4c4e12bdf8 constant 32>
            unit-size <integer_cst 0x7f4c4e12be10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4c4dc63150>
            pointer_to_this <pointer_type 0x7f4c4dc632a0>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4c4e327d00 type <array_type 0x7f4c4dc631f8>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/leak_8/binutils_leak_8.c:156:4 start: ./benchmarks/binutils/leak_8/binutils_leak_8.c:156:4 finish: ./benchmarks/binutils/leak_8/binutils_leak_8.c:156:4>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4e133af8
    type <pointer_type 0x7f4c4dc54f18
        type <integer_type 0x7f4c4dc54e70 bfd_byte public unsigned QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4e12bcd8 0> max <integer_cst 0x7f4c4e12bc78 255> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc54f18>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4dc54348>>
   
    def_stmt _7 = memhunk;
    version:7
    ptr-info 0x7f4c4dc6b930>
# VUSE <.MEM_37>
_7 = memhunk;

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_8 = bfd_set_section_contents (_7);
./benchmarks/binutils/leak_8/binutils_leak_8.c:158:30: warning: use location
  158 |                         if (!bfd_set_section_contents (memhunk))
      |                              ^
this stmt is child function---bfd_set_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_set_section_contents 
[40;44m =======trace_function_path bfd_set_section_contents  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:bfd_set_section_contents========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate stmt argument:(null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:0 
if (_8 == 0)
./benchmarks/binutils/leak_8/binutils_leak_8.c:158:28: warning: use location
  158 |                         if (!bfd_set_section_contents (memhunk))
      |                            ^
if (_8 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:158:28: warning: use location
Cond in fucntion copy_section basic block 6
 ================== possible direct basic block ================= 
from copy_section basic block 11
 ================== possible direct basic block ================= 
from copy_section basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4e133af8
    type <pointer_type 0x7f4c4dc54f18
        type <integer_type 0x7f4c4dc54e70 bfd_byte public unsigned QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4e12bcd8 0> max <integer_cst 0x7f4c4e12bc78 255> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc54f18>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4dc54348>>
   
    def_stmt _7 = memhunk;
    version:7
    ptr-info 0x7f4c4dc6b930>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_39 = VDEF <.MEM_38>
free (_9);
./benchmarks/binutils/leak_8/binutils_leak_8.c:164:25: warning: use location
  164 |                         free (memhunk);
      |                         ^

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4c4dc6b630 type <integer_type 0x7f4c4dc5c0a8 size_t> constant 4>
[40;33m =======POP node_fun stack:copy_section========= [0m
[40;44m =======node_fun:bfd_set_section_contents========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path bfd_set_section_contents  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:bfd_set_section_contents========= [0m
[40;42m =======start_check_funciton:bfd_set_section_contents========= [0m

dot graph START

======================================================================
 <addr_expr 0x7f4c4e327e80
    type <pointer_type 0x7f4c4dc632a0
        type <array_type 0x7f4c4dc631f8 type <integer_type 0x7f4c4dc547e0 char>
            SI
            size <integer_cst 0x7f4c4e12bdf8 constant 32>
            unit-size <integer_cst 0x7f4c4e12be10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4c4dc63150>
            pointer_to_this <pointer_type 0x7f4c4dc632a0>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4c4e327e60 type <array_type 0x7f4c4dc631f8>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/leak_8/binutils_leak_8.c:133:3 start: ./benchmarks/binutils/leak_8/binutils_leak_8.c:133:3 finish: ./benchmarks/binutils/leak_8/binutils_leak_8.c:133:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc75240
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _2 = rand ();
    version:2>
# .MEM_14 = VDEF <.MEM_11>
_2 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_3 = _2 % 2;
In function â€˜bfd_set_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
_4 = _3 == 1;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
_2 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc75240
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _2 = rand ();
    version:2>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_set_section_contents========= [0m
[40;44m =======node_fun:bfd_convert_section_contents========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path bfd_convert_section_contents  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:bfd_malloc========= [0m
[40;42m =======start_check_funciton:bfd_malloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
In function â€˜bfd_convert_section_contentsâ€™:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜bfd_convert_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜bfd_convert_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
In function â€˜bfd_convert_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c1e0
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352a0 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc799f0 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
In function â€˜bfd_convert_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
In function â€˜bfd_convert_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
In function â€˜bfd_convert_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜bfd_convert_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c240
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352d8 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc79a20 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_malloc========= [0m
[40;42m =======pre_check_funciton:bfd_convert_section_contents========= [0m
[40;42m =======start_check_funciton:bfd_convert_section_contents========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc754c8
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>
# .MEM_25 = VDEF <.MEM_24(D)>
_1 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_2 = _1 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:111:9: warning: use location
  111 |         __NONDET(use_memmove, 1, 0);
      |         ^
if (_2 != 1)
./benchmarks/binutils/leak_8/binutils_leak_8.c:115:12: warning: use location
  115 |         if (!use_memmove)
      |            ^
if (_2 != 1)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:115:12: warning: use location
Cond in fucntion bfd_convert_section_contents basic block 2
 ================== possible direct basic block ================= 
from bfd_convert_section_contents basic block 3
 ================== possible direct basic block ================= 
from bfd_convert_section_contents basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
_1 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:111:9: warning: use location
  111 |         __NONDET(use_memmove, 1, 0);
      |         ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc754c8
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7f4c4dc6b6f0 type <integer_type 0x7f4c4dc549d8 bfd_size_type> constant 4>

dot graph START

======================================================================
 <addr_expr 0x7f4c4e327f80
    type <pointer_type 0x7f4c4dc632a0
        type <array_type 0x7f4c4dc631f8 type <integer_type 0x7f4c4dc547e0 char>
            SI
            size <integer_cst 0x7f4c4e12bdf8 constant 32>
            unit-size <integer_cst 0x7f4c4e12be10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f4c4dc63150>
            pointer_to_this <pointer_type 0x7f4c4dc632a0>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7f4c4e327f60 type <array_type 0x7f4c4dc631f8>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/leak_8/binutils_leak_8.c:123:3 start: ./benchmarks/binutils/leak_8/binutils_leak_8.c:123:3 finish: ./benchmarks/binutils/leak_8/binutils_leak_8.c:123:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc755a0
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _4 = rand ();
    version:4>
# .MEM_28 = VDEF <.MEM_22>
_4 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_5 = _4 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:125:16: warning: use location
  125 |         return __RANDBOOL;
      |                ^
_6 = _5 == 1;
./benchmarks/binutils/leak_8/binutils_leak_8.c:125:16: warning: use location
_20 = (int) _6;
./benchmarks/binutils/leak_8/binutils_leak_8.c:125:16: warning: use location
_8 = PHI <0(3), _20(6)>
lto1: warning: use location
this stmt have mutiple branch --------
_4 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:125:16: warning: use location
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc755a0
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _4 = rand ();
    version:4>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_convert_section_contents========= [0m
[40;44m =======node_fun:bfd_get_full_section_contents========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path bfd_get_full_section_contents  function_call count: 5 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:bfd_malloc========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path bfd_malloc  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:bfd_malloc========= [0m
[40;42m =======start_check_funciton:bfd_malloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
In function â€˜bfd_get_full_section_contentsâ€™:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜bfd_get_full_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜bfd_get_full_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
In function â€˜bfd_get_full_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c1e0
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352a0 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc799f0 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
In function â€˜bfd_get_full_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
In function â€˜bfd_get_full_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
In function â€˜bfd_get_full_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
In function â€˜bfd_get_full_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c240
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352d8 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc79a20 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_malloc========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:bfd_get_section_contents========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path bfd_get_section_contents  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre_check_funciton:bfd_get_section_contents========= [0m
[40;42m =======start_check_funciton:bfd_get_section_contents========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e678
    type <pointer_type 0x7f4c4e147150
        type <void_type 0x7f4c4e1470a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147150>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c4dc64980 location>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f4c4dc6bb10>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_11(D)>
memset (location_6(D), 0, 4);
memset (location_6(D), 0, 4);
./benchmarks/binutils/leak_8/binutils_leak_8.c:34:17: warning: use location
   34 |                 memset (location, 0, 4);
      |                 ^
this stmt is child function---memset-----

 ================== trace ================== 
trace fucntion name:memset 

 ================== trace ================== 
trace fucntion free:0 
if (location_6(D) != 0B)
./benchmarks/binutils/leak_8/binutils_leak_8.c:33:12: warning: use location
   33 |         if (location) {
      |            ^
if (location_6(D) != 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:33:12: warning: use location
Cond in fucntion bfd_get_section_contents basic block 2
 ================== possible direct basic block ================= 
from bfd_get_section_contents basic block 3
 ================== possible direct basic block ================= 
from bfd_get_section_contents basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e678
    type <pointer_type 0x7f4c4e147150
        type <void_type 0x7f4c4e1470a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147150>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c4dc64980 location>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f4c4dc6bb10>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e558
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>
# .MEM_12 = VDEF <.MEM_11(D)>
_1 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_2 = _1 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
   39 |         return __RANDBOOL;
      |                ^
_3 = _2 == 1;
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
_9 = (int) _3;
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
_4 = PHI <1(3), _9(4)>
lto1: warning: use location
this stmt have mutiple branch --------
_1 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e558
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_get_section_contents========= [0m
[40;42m =======pre_check_funciton:bfd_get_full_section_contents========= [0m
[40;42m =======start_check_funciton:bfd_get_full_section_contents========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc75dc8
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64500 sec>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4c4dc6ba98>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_27>
return;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
_2 = bfd_get_section_contents (sec_19(D), p_6);
bb index := 5
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 6

======================================================================
_2 = bfd_get_section_contents (sec_19(D), p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:59:38: warning: use location
   59 |                                 if (!bfd_get_section_contents (sec, p))
      |                                      ^
this stmt is child function---bfd_get_section_contents-----

 ================== trace ================== 
trace fucntion name:bfd_get_section_contents 
[40;44m =======trace_function_path bfd_get_section_contents  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:bfd_get_section_contents========= [0m
[40;36m ======= find relate stmt with sec ========= [0m
[40;36m ======= relate stmt argument:sec ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;46m =======add node_fun stack:memset========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_27>
return;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_2 == 0)
bb index := 5
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 6

======================================================================
if (_2 == 0)
./benchmarks/binutils/leak_8/binutils_leak_8.c:59:36: warning: use location
   59 |                                 if (!bfd_get_section_contents (sec, p))
      |                                    ^
if (_2 == 0)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:59:36: warning: use location
Cond in fucntion bfd_get_full_section_contents basic block 5
 ================== possible direct basic block ================= 
from bfd_get_full_section_contents basic block 6
 ================== possible direct basic block ================= 
from bfd_get_full_section_contents basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
*ptr_17(D) = p_6;
./benchmarks/binutils/leak_8/binutils_leak_8.c:66:38: warning: use location
   66 |                                 *ptr = p;
      |                                      ^
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: use location
   62 |                                                         free (p);
      |                                                         ^
this stmt is child function---free-----

 ================== find ================== 
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_27>
return;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_33>
*p_6 = 12;
bb index := 5
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 6

======================================================================
*p_6 = 12;
./benchmarks/binutils/leak_8/binutils_leak_8.c:58:36: warning: use location
   58 |                                 *p = 12;
      |                                    ^
_1 = sec_19(D)->compress_status;
./benchmarks/binutils/leak_8/binutils_leak_8.c:48:20: warning: use location
   48 |         switch (sec->compress_status)
      |                    ^
_1 = sec_19(D)->compress_status;
./benchmarks/binutils/leak_8/binutils_leak_8.c:48:20: warning: use location

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc75dc8
    type <pointer_type 0x7f4c4dc5db28 sec_ptr
        type <record_type 0x7f4c4dc5d9d8 bfd_section BLK
            size <integer_cst 0x7f4c4dc4bb58 constant 2176>
            unit-size <integer_cst 0x7f4c4dc4b7b0 constant 272>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4dc5d9d8 fields <field_decl 0x7f4c4dc62130 name> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>
            pointer_to_this <pointer_type 0x7f4c4dc5da80>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64500 sec>
    def_stmt GIMPLE_NOP
    version:19
    ptr-info 0x7f4c4dc6ba98>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: Use after free error!: free location 
   62 |                                                         free (p);
      |                                                         ^
# .MEM_51 = VDEF <.MEM_50>
*ptr_17(D) = p_6;
./benchmarks/binutils/leak_8/binutils_leak_8.c:66:38: warning: use location
   66 |                                 *ptr = p;
      |                                      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc75b88
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _4 = rand ();
    version:4>
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_27>
return;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_5 = _4 % 2;
bb index := 11
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 6

======================================================================
_5 = _4 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:37: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                     ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_27>
return;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_5 == 1)
bb index := 11
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 6

======================================================================
if (_5 == 1)
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:36: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                    ^
if (_5 == 1)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:36: warning: use location
Cond in fucntion bfd_get_full_section_contents basic block 11
 ================== possible direct basic block ================= 
from bfd_get_full_section_contents basic block 12
 ================== possible direct basic block ================= 
from bfd_get_full_section_contents basic block 13
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_27>
return;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
bb index := 11
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 11 ,possiable got to succ := 6

======================================================================
_4 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:37: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                     ^
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc75b88
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _4 = rand ();
    version:4>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: use location
   62 |                                                         free (p);
      |                                                         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_43 = VDEF <.MEM_35>
free (compressed_buffer_21);
./benchmarks/binutils/leak_8/binutils_leak_8.c:83:33: warning: use location
   83 |                                 free (compressed_buffer);
      |                                 ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_45 = VDEF <.MEM_36>
free (compressed_buffer_21);
./benchmarks/binutils/leak_8/binutils_leak_8.c:88:41: warning: use location
   88 |                                         free (compressed_buffer);
      |                                         ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: Use after free error!: free location 
   62 |                                                         free (p);
      |                                                         ^
_5 = _4 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:37: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: Use after free error!: free location 
   62 |                                                         free (p);
      |                                                         ^
if (_5 == 1)
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:36: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_52 = VDEF <.MEM_50>
free (p_6);
./benchmarks/binutils/leak_8/binutils_leak_8.c:62:57: warning: Use after free error!: free location 
   62 |                                                         free (p);
      |                                                         ^
# .MEM_41 = VDEF <.MEM_40>
_4 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:74:37: warning: use location
   74 |                                 if (__RANDBOOL)
      |                                     ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:3 [0m
[40;31m  	free count:0 [0m
[40;31m  	possible double free [Looserules]:3 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_get_full_section_contents========= [0m
[40;44m =======node_fun:bfd_get_section_contents========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path bfd_get_section_contents  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:memset========= [0m
[40;33m =======POP node_fun stack:memset========= [0m
[40;42m =======pre_check_funciton:bfd_get_section_contents========= [0m
[40;42m =======start_check_funciton:bfd_get_section_contents========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e678
    type <pointer_type 0x7f4c4e147150
        type <void_type 0x7f4c4e1470a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147150>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c4dc64980 location>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f4c4dc6bb10>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_11(D)>
memset (location_6(D), 0, 4);
memset (location_6(D), 0, 4);
In function â€˜bfd_get_section_contentsâ€™:
./benchmarks/binutils/leak_8/binutils_leak_8.c:34:17: warning: use location
   34 |                 memset (location, 0, 4);
      |                 ^
this stmt is child function---memset-----

 ================== trace ================== 
trace fucntion name:memset 

 ================== trace ================== 
trace fucntion free:0 
if (location_6(D) != 0B)
./benchmarks/binutils/leak_8/binutils_leak_8.c:33:12: warning: use location
   33 |         if (location) {
      |            ^
if (location_6(D) != 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/leak_8/binutils_leak_8.c:33:12: warning: use location
Cond in fucntion bfd_get_section_contents basic block 2
 ================== possible direct basic block ================= 
from bfd_get_section_contents basic block 3
 ================== possible direct basic block ================= 
from bfd_get_section_contents basic block 4
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e678
    type <pointer_type 0x7f4c4e147150
        type <void_type 0x7f4c4e1470a8 readonly VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147150>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f4c4dc64980 location>
    def_stmt GIMPLE_NOP
    version:6
    ptr-info 0x7f4c4dc6bb10>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e558
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>
# .MEM_12 = VDEF <.MEM_11(D)>
_1 = rand ();

 ================== trace ptable================== 
trace fucntion name:rand 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---rand-----
this other function ------rand-----
 
 Start check Pointer Collect  

======================================================================
_2 = _1 % 2;
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
   39 |         return __RANDBOOL;
      |                ^
_3 = _2 == 1;
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
_9 = (int) _3;
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
_4 = PHI <1(3), _9(4)>
lto1: warning: use location
this stmt have mutiple branch --------
_1 = rand ();
./benchmarks/binutils/leak_8/binutils_leak_8.c:39:16: warning: use location
this stmt is child function---rand-----

 ================== trace ================== 
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e558
    type <integer_type 0x7f4c4e1405e8 int public SI
        size <integer_cst 0x7f4c4e12bdf8 constant 32>
        unit-size <integer_cst 0x7f4c4e12be10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1405e8 precision:32 min <integer_cst 0x7f4c4e12bdb0 -2147483648> max <integer_cst 0x7f4c4e12bdc8 2147483647>
        pointer_to_this <pointer_type 0x7f4c4e1479d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_get_section_contents========= [0m
[40;44m =======node_fun:bfd_malloc========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path bfd_malloc  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:bfd_malloc========= [0m
[40;42m =======start_check_funciton:bfd_malloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
In function â€˜bfd_mallocâ€™:
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e9d8
    type <pointer_type 0x7f4c4e147000
        type <void_type 0x7f4c4e140f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f4c4e147000>>
        public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f4c4e14c9d8>>
    var <var_decl 0x7f4c4dc81000 ptr>
    def_stmt ptr_10 = malloc (size_7(D));
    version:10
    ptr-info 0x7f4c4dc6bb40>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c1e0
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352a0 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc799f0 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_27>
return;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_3 = size_7(D) != 0;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_3 = size_7(D) != 0;
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:25: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |                         ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_27>
return;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
ptr_10 = malloc (size_7(D));
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
ptr_10 = malloc (size_7(D));
./benchmarks/binutils/leak_8/binutils_leak_8.c:23:9: warning: use location
   23 |   ptr = malloc (sz); // allocation site
      |         ^
this stmt is child function---malloc-----

 ================== trace ================== 
_5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
lto1: warning: use location
this stmt have mutiple branch --------

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_27>
return;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_27>
return;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
  134 |         return __RANDBOOL;
      |                ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_14>
return _10;
./benchmarks/binutils/leak_8/binutils_leak_8.c:134:16: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
beacuse in succ := 7 have return or exit
# VUSE <.MEM_23>
return _8;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 7

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
beacuse in succ := 24 have return or exit
# VUSE <.MEM_38>
return _9;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 24

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
beacuse in succ := 5 have return or exit
# VUSE <.MEM_10>
return _4;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 5

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
_2 = ptr_10 == 0B;
bb index := 4
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
beacuse in succ := 6 have return or exit
# VUSE <.MEM_11>
return _5;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 6

======================================================================
_2 = ptr_10 == 0B;
./benchmarks/binutils/leak_8/binutils_leak_8.c:24:11: warning: use location
   24 |   if (ptr == NULL && sz != 0)
      |           ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f4c4dc7e990
    type <integer_type 0x7f4c4dc549d8 bfd_size_type public unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e140738 precision:64 min <integer_cst 0x7f4c4e12bed0 0> max <integer_cst 0x7f4c4e12c520 18446744073709551615> context <translation_unit_decl 0x7f4c4e136168 ./benchmarks/binutils/leak_8/binutils_leak_8.c>>
    var <parm_decl 0x7f4c4dc64a80 size>
    def_stmt GIMPLE_NOP
    version:7>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7f4c4dc7c240
    type <pointer_type 0x7f4c4dc54930
        type <integer_type 0x7f4c4dc54888 char readonly QI
            size <integer_cst 0x7f4c4e12bca8 constant 8>
            unit-size <integer_cst 0x7f4c4e12bcc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f4c4e1403f0 precision:8 min <integer_cst 0x7f4c4dc4b720 -128> max <integer_cst 0x7f4c4dc4b708 127>
            pointer_to_this <pointer_type 0x7f4c4dc54930>>
        unsigned DI
        size <integer_cst 0x7f4c4e12bbb8 constant 64>
        unit-size <integer_cst 0x7f4c4e12bbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7f4c4e1352d8 type <integer_type 0x7f4c4dc54888 char>
       
        arg:0 <string_cst 0x7f4c4dc79a20 type <array_type 0x7f4c4dc5c7e0>
            readonly constant static "bfd_error_no_memory\000">
        arg:1 <integer_cst 0x7f4c4e12bf48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:bfd_malloc========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = time (0B);
_2 = (unsigned int) _1;
srand (_2);
_3 = rand ();
_4 = _3 % 3;
_5 = (<unnamed-unsigned:2>) _4;
sec.compress_status = _5;
copy_section (&sec);
sec ={v} {CLOBBER};
return 0;

=======Mapping node_fun:copy_section=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741823]:
memhunk = 0B;
_1 = rand ();
_2 = _1 % 2;
if (_2 == 1)
  goto <bb 3>; [34.00%]
else
  goto <bb 8>; [66.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 365072224]:
_3 = bfd_get_full_section_contents (isection_23(D), &memhunk);
if (_3 == 0)
  goto <bb 5>; [51.12%]
else
  goto <bb 4>; [48.88%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 178447302]:
_4 = bfd_convert_section_contents (isection_23(D), &memhunk);
if (_4 == 0)
  goto <bb 5>; [51.12%]
else
  goto <bb 6>; [48.88%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 277847183]:
goto <bb 11>; [100.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 87225041]:
_5 = memhunk;
_6 = MEM[(int *)_5];
printf ("%d\n", _6);
_7 = memhunk;
_8 = bfd_set_section_contents (_7);
if (_8 == 0)
  goto <bb 11>; [51.12%]
else
  goto <bb 7>; [48.88%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 42635600]:
_9 = memhunk;
free (_9);
goto <bb 10>; [100.00%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 708669600]:
memhunk_19 = malloc (4);
memset (memhunk_19, 0, 4);
_10 = bfd_set_section_contents (memhunk_19);
if (_10 == 0)
  goto <bb 11>; [51.12%]
else
  goto <bb 9>; [48.88%]

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 346397698]:
free (memhunk_19);

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 389033297]:
memhunk ={v} {CLOBBER};
goto <bb 12>; [100.00%]

=======is loop:0=========

 bb index 11 
<bb 11> [local count: 684708527]:
memhunk ={v} {CLOBBER};

=======is loop:0=========

 bb index 12 
<bb 12> [local count: 1073741824]:
return;

=======Mapping node_fun:bfd_set_section_contents=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
if (location_6(D) != 0B)
  goto <bb 3>; [53.47%]
else
  goto <bb 4>; [46.53%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 574129753]:
_1 = MEM[(int *)location_6(D)];
printf ("%d\n", _1);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
_2 = rand ();
_3 = _2 % 2;
_4 = _3 == 1;
_10 = (int) _4;
return _10;

=======Mapping node_fun:bfd_convert_section_contents=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741823]:
_1 = rand ();
_2 = _1 % 2;
contents_15 = *ptr_14(D);
if (_2 != 1)
  goto <bb 3>; [48.88%]
else
  goto <bb 4>; [51.12%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 524844999]:
contents_17 = bfd_malloc (4);
if (contents_17 == 0B)
  goto <bb 7>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073531886]:
# contents_7 = PHI <contents_15(2), contents_17(3)>
if (contents_7 != 0B)
  goto <bb 5>; [53.47%]
else
  goto <bb 6>; [46.53%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 574017499]:
_3 = MEM[(int *)contents_7];
printf ("%d\n", _3);

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 1073531887]:
_4 = rand ();
_5 = _4 % 2;
_6 = _5 == 1;
_20 = (int) _6;

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 1073741824]:
# _8 = PHI <0(3), _20(6)>
return _8;

=======Mapping node_fun:bfd_get_full_section_contents=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
p_18 = *ptr_17(D);
_1 = sec_19(D)->compress_status;
switch (_1) <default: <L4> [0.05%], case 0: <L0> [33.32%], case 1: <L3> [33.32%], case 2: <L1> [33.32%]>

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 357734984]:
<L0>:
if (p_18 == 0B)
  goto <bb 4>; [30.00%]
else
  goto <bb 5>; [70.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 107320494]:
p_32 = bfd_malloc (4);
if (p_32 == 0B)
  goto <bb 24>; [0.04%]
else
  goto <bb 5>; [99.96%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 357692056]:
# p_6 = PHI <p_18(3), p_32(4)>
*p_6 = 12;
_2 = bfd_get_section_contents (sec_19(D), p_6);
if (_2 == 0)
  goto <bb 6>; [34.00%]
else
  goto <bb 9>; [66.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 121615300]:
_3 = *ptr_17(D);
if (_3 != p_6)
  goto <bb 7>; [53.47%]
else
  goto <bb 8>; [46.53%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 65027701]:
free (p_6);

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 121615300]:
goto <bb 24>; [100.00%]

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 236076756]:
*ptr_17(D) = p_6;
goto <bb 24>; [100.00%]

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 357734984]:
<L1>:
compressed_buffer_21 = bfd_malloc (4);
if (compressed_buffer_21 == 0B)
  goto <bb 24>; [0.04%]
else
  goto <bb 11>; [99.96%]

=======is loop:0=========

 bb index 11 
<bb 11> [local count: 357591890]:
_4 = rand ();
_5 = _4 % 2;
if (_5 == 1)
  goto <bb 12>; [20.97%]
else
  goto <bb 13>; [79.03%]

=======is loop:0=========

 bb index 12 
<bb 12> [local count: 74987021]:
// predicted unlikely by goto predictor.
goto <bb 18>; [100.00%]

=======is loop:0=========

 bb index 13 
<bb 13> [local count: 282604870]:
if (p_18 == 0B)
  goto <bb 14>; [17.43%]
else
  goto <bb 15>; [82.57%]

=======is loop:0=========

 bb index 14 
<bb 14> [local count: 49258029]:
p_24 = bfd_malloc (4);

=======is loop:0=========

 bb index 15 
<bb 15> [local count: 282604870]:
# p_7 = PHI <p_18(13), p_24(14)>
if (p_7 == 0B)
  goto <bb 16>; [30.95%]
else
  goto <bb 17>; [69.05%]

=======is loop:0=========

 bb index 16 
<bb 16> [local count: 87466208]:
// predicted unlikely by goto predictor.
goto <bb 18>; [100.00%]

=======is loop:0=========

 bb index 17 
<bb 17> [local count: 195138662]:
free (compressed_buffer_21);
*ptr_17(D) = p_7;
goto <bb 24>; [100.00%]

=======is loop:0=========

 bb index 18 
<bb 18> [local count: 162453228]:
fail_compressed:
free (compressed_buffer_21);
goto <bb 24>; [100.00%]

=======is loop:0=========

 bb index 19 
<bb 19> [local count: 357734984]:
<L3>:
if (p_18 == 0B)
  goto <bb 20>; [17.43%]
else
  goto <bb 21>; [82.57%]

=======is loop:0=========

 bb index 20 
<bb 20> [local count: 62353208]:
p_29 = bfd_malloc (4);

=======is loop:0=========

 bb index 21 
<bb 21> [local count: 357734985]:
# p_8 = PHI <p_18(19), p_29(20)>
if (p_8 == 0B)
  goto <bb 24>; [18.09%]
else
  goto <bb 22>; [81.91%]

=======is loop:0=========

 bb index 22 
<bb 22> [local count: 293020726]:
*ptr_17(D) = p_8;
goto <bb 24>; [100.00%]

=======is loop:0=========

 bb index 23 
<bb 23> [local count: 536864]:
<L4>:
exit (1);

=======is loop:0=========

 bb index 24 
<bb 24> [local count: 1073204955]:
# _9 = PHI <0(4), 0(8), 1(9), 0(10), 1(17), 0(18), 0(21), 1(22)>
return _9;

=======Mapping node_fun:bfd_get_section_contents=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
if (location_6(D) != 0B)
  goto <bb 3>; [54.59%]
else
  goto <bb 4>; [45.41%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 586155665]:
memset (location_6(D), 0, 4);
goto <bb 5>; [100.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 487586160]:
_1 = rand ();
_2 = _1 % 2;
_3 = _2 == 1;
_9 = (int) _3;

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 1073741824]:
# _4 = PHI <1(3), _9(4)>
return _4;

=======Mapping node_fun:bfd_malloc=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = (long int) size_7(D);
if (_1 < 0)
  goto <bb 3>; [12.76%]
else
  goto <bb 4>; [87.24%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 137009456]:
__builtin_puts (&"bfd_error_no_memory"[0]);
goto <bb 6>; [100.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 936732369]:
ptr_10 = malloc (size_7(D));
_2 = ptr_10 == 0B;
_3 = size_7(D) != 0;
_4 = _2 & _3;
if (_4 != 0)
  goto <bb 5>; [33.00%]
else
  goto <bb 6>; [67.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 309121680]:
__builtin_puts (&"bfd_error_no_memory"[0]);

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 1073741824]:
# _5 = PHI <0B(3), ptr_10(4), ptr_10(5)>
return _5;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 2 [0m
[40;34m    gimple free   count : 5 [0m
[40;34m    find Entry point : 15 [0m
[40;34m    used_stmt array stack totalsize of : 0.001408 mb[0m
[40;34m    collect time: : 0.000258 s [0m
[40;34m    algorithm time: 0.155334 s [0m
[40;34m    gimple stmt count : : 110 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cp                   ------------|      |      |      |      |          |          |
inline               ------------|      |      |      |      |          |          |
fixup_cfg            ------------|      |      |      |      |          |          |
adjust_alignment     ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
backprop             ------------|      |      |      |      |          |          |
phiprop              ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
alias                ------------|      |      |      |      |          |          |
retslot              ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
stdarg               ------------|      |      |      |      |          |          |
cdce                 ------------|      |      |      |      |          |          |
cselim               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
ifcombine            ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ch                   ------------|      |      |      |      |          |          |
cplxlower            ------------|      |      |      |      |          |          |
sra                  ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     -0.6%|     -0.3%|
copyprop                         |      |    +3|      |      |     -0.6%|     -0.3%|
reassoc              ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
sincos               ------------|      |      |      |      |          |          |
laddress             ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
walloca              ------------|      |      |      |      |          |          |
sink                 ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
fix_loops            ------------|      |      |      |      |          |          |
no_loop              ------------|      |      |      |      |          |          |
veclower2            ------------|      |      |      |      |          |          |
switchlower                      |      |      |      |      |     -0.6%|     +0.4%|
reassoc                          |      |    +5|      |      |     -0.6%|     +0.4%|
slsr                 ------------|      |      |      |      |          |          |
dom                  ------------|      |      |      |      |          |          |
strlen               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
wrestrict            ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
fab                  ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
crited               ------------|      |      |      |      |          |          |
uncprop              ------------|      |      |      |      |          |          |
local-pure-const     ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
nrv                  ------------|      |      |      |      |          |          |
isel                 ------------|      |      |      |      |          |          |
optimized            ------------|      |      |      |      |          |          |
expand                           |      |      |      |      |----------|----------|
vregs                            |      |      |      |      |    +76.8%|    +50.9%|
into_cfglayout                   |      |      |      |      |     -1.8%|     -0.8%|
jump                             |      |      |      |      |     -2.1%|     -1.3%|
subreg1                          |      |      |      |      |     -0.3%|     -0.5%|
dfinit               ------------|      |      |      |      |          |          |
cse1                 ------------|      |      |      |      |          |          |
fwprop1                          |      |      |      |      |     -1.9%|     -1.9%|
ce1                              |      |      |      |      |     -1.9%|     -1.9%|
reginfo              ------------|      |      |      |      |          |          |
loop2                ------------|      |      |      |      |          |          |
loop2_init           ------------|      |      |      |      |          |          |
loop2_invariant      ------------|      |      |      |      |          |          |
loop2_done           ------------|      |      |      |      |          |          |
dse1                 ------------|      |      |      |      |          |          |
fwprop2              ------------|      |      |      |      |          |          |
init-regs            ------------|      |      |      |      |          |          |
combine                          |      |      |      |      |     +1.0%|     +1.8%|
ce2                              |      |      |      |      |     +1.0%|     +1.8%|
outof_cfglayout                  |      |      |      |      |     +1.7%|     +0.7%|
split1                           |      |      |      |      |     +1.7%|     +0.7%|
subreg3              ------------|      |      |      |      |          |          |
mode_sw              ------------|      |      |      |      |          |          |
asmcons              ------------|      |      |      |      |          |          |
ira                  ------------|      |      |      |      |          |          |
reload                           |      |      |      |      |     -5.5%|     -6.7%|
postreload                       |      |      |      |      |     -5.8%|     -7.2%|
split2                           |      |      |      |      |     +1.3%|     +1.0%|
cmpelim                          |      |      |      |      |     +1.3%|     +1.0%|
pro_and_epilogue                 |      |      |      |      |     +5.0%|     +8.7%|
dse2                             |      |      |      |      |     +4.8%|     +8.0%|
csa                  ------------|      |      |      |      |          |          |
jump2                ------------|      |      |      |      |          |          |
ce3                  ------------|      |      |      |      |          |          |
cprop_hardreg                    |      |      |      |      |     -0.2%|     -0.2%|
rtl_dce                          |      |      |      |      |     -0.2%|     -0.2%|
bbro                             |      |      |      |      |     +0.5%|     -0.2%|
split4                           |      |      |      |      |     +0.5%|     -0.2%|
stack                ------------|      |      |      |      |          |          |
zero_call_used_regs  ------------|      |      |      |      |          |          |
alignments           ------------|      |      |      |      |          |          |
