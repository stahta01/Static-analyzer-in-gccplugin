../Compiler/newplugin.so 11.2.0 
./benchmarks/binutils/double_free_1/binutils_df_1.c: In function ‘remote_filename_p’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:52:16: warning: implicit declaration of function ‘strncmp’ [-Wimplicit-function-declaration]
   52 |         return strncmp (filename, "remote:", 7) == 0;
      |                ^~~~~~~
./benchmarks/binutils/double_free_1/binutils_df_1.c:7:1: note: include ‘<string.h>’ or provide a declaration of ‘strncmp’
    6 | #include "../include/common.h"
  +++ |+#include <string.h>
    7 | #define PT_LDINFO 1
./benchmarks/binutils/double_free_1/binutils_df_1.c:52:46: warning: ‘strncmp’ argument 3 type is ‘int’ where ‘long unsigned int’ is expected in a call to built-in function declared without prototype [-Wbuiltin-declaration-mismatch]
   52 |         return strncmp (filename, "remote:", 7) == 0;
      |                                              ^
<built-in>: note: built-in ‘strncmp’ declared here
./benchmarks/binutils/double_free_1/binutils_df_1.c: In function ‘main’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:122:15: warning: implicit declaration of function ‘time’ [-Wimplicit-function-declaration]
  122 |         srand(time(&t));
      |               ^~~~
./benchmarks/binutils/double_free_1/binutils_df_1.c:127:32: warning: initialization of ‘ULONGEST *’ {aka ‘long unsigned int *’} from incompatible pointer type ‘int *’ [-Wincompatible-pointer-types]
  127 |         ULONGEST *xfered_len = &len;
      |                                ^

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  1298k ( 51%)
 phase parsing                      :   0.04 ( 80%)   0.01 (100%)   0.04 ( 67%)  1013k ( 40%)
 phase opt and generate             :   0.01 ( 20%)   0.00 (  0%)   0.02 ( 33%)   219k (  9%)
 callgraph ipa passes               :   0.01 ( 20%)   0.00 (  0%)   0.02 ( 33%)   124k (  5%)
 lto stream compression             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)     0  (  0%)
 preprocessing                      :   0.03 ( 60%)   0.00 (  0%)   0.00 (  0%)   290k ( 11%)
 lexical analysis                   :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)     0  (  0%)
 parser (global)                    :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)   594k ( 23%)
 parser function body               :   0.01 ( 20%)   0.01 (100%)   0.01 ( 17%)    80k (  3%)
 loop fini                          :   0.01 ( 20%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 branch prediction                  :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)  5512  (  0%)
 symout                             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 17%)     0  (  0%)
 TOTAL                              :   0.05          0.01          0.06         2540k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)  2157k ( 97%)
 TOTAL                              :   0.00          0.00          0.01         2222k
../Compiler/newplugin.so 11.2.0 
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
node:= 2 
 	next_branch :=4
	next_branch :=3
addr_expraddr_expraddr_expraddr_expraddr_expr------time--
addr_expraddr_expraddr_expraddr_expraddr_expr------srand--
addr_expraddr_expraddr_expraddr_expraddr_expr------rand--
node:= 3 
 	next_branch :=4
addr_expraddr_expraddr_expraddr_expraddr_expr------rs6000_xfer_shared_libraries--
=======node_fun:rs6000_xfer_shared_libraries=========
node:= 2 
 	next_branch :=7
	next_branch :=3
node:= 3 
 	next_branch :=4
	next_branch :=5
addr_expraddr_expraddr_expraddr_expraddr_expr------rs6000_ptrace_ldinfo--
node:= 4 
 addr_expraddr_expraddr_expraddr_expraddr_expr------exit--
node:= 5 
 	next_branch :=7
	next_branch :=6
addr_expraddr_expraddr_expraddr_expraddr_expr------make_cleanup--
addr_expraddr_expraddr_expraddr_expraddr_expr------rs6000_aix_ld_info_to_xml--
addr_expraddr_expraddr_expraddr_expraddr_expr------do_cleanups--
node:= 6 
 	next_branch :=7
=======node_fun:rs6000_aix_ld_info_to_xml=========
=======node_fun:rs6000_ptrace_ldinfo=========
node:= 2 
 	next_branch :=3
node:= 3 
 	next_branch :=5
	next_branch :=4
addr_expraddr_expraddr_expraddr_expraddr_expr------rs6000_ptrace64--
node:= 4 
 	next_branch :=3
addr_expraddr_expraddr_expraddr_expraddr_expr------xrealloc--
=======node_fun:rs6000_ptrace64=========
node:= 2 
 	next_branch :=4
	next_branch :=3
addr_expraddr_expraddr_expraddr_expraddr_expr------rand--
node:= 3 
 	next_branch :=4
=======node_fun:xrealloc=========
node:= 2 
 	next_branch :=3
	next_branch :=4
node:= 3 
 	next_branch :=5
node:= 4 
 	next_branch :=5
node:= 5 
 	next_branch :=6
	next_branch :=7
node:= 6 
 addr_expraddr_expraddr_expraddr_expraddr_expr------exit--
=======node_fun:make_cleanup=========
addr_expraddr_expraddr_expraddr_expraddr_expr------make_my_cleanup--
=======node_fun:make_my_cleanup=========
addr_expraddr_expraddr_expraddr_expraddr_expr------make_my_cleanup2--
=======node_fun:make_my_cleanup2=========
node:= 2 
 	next_branch :=3
	next_branch :=4
node:= 3 
 addr_expraddr_expraddr_expraddr_expraddr_expr------exit--
=======node_fun:do_cleanups=========
addr_expraddr_expraddr_expraddr_expraddr_expr------do_my_cleanups--
=======node_fun:do_my_cleanups=========
node:= 2 
 	next_branch :=6
node:= 3 
 	next_branch :=4
	next_branch :=5
addr_expraddr_expraddr_expraddr_expraddr_expr------__builtin_puts--
node:= 4 
 	next_branch :=5
node:= 5 
 	next_branch :=6
node:= 6 
 	next_branch :=3
	next_branch :=7
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 33 
===============The second stage : Mapping stmt=================
# .MEM_7 = VDEF <.MEM_6(D)>
_1 = time (&t);
# .MEM_8 = VDEF <.MEM_7>
srand (_2);
# .MEM_9 = VDEF <.MEM_8>
_3 = rand ();
# .MEM_10 = VDEF <.MEM_9>
rs6000_xfer_shared_libraries (_5, &len);
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
# .MEM_16 = VDEF <.MEM_15>
cleanup_8 = make_cleanup (free, ldi_buf_6);
# VUSE <.MEM_16>
result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
# .MEM_16 = VDEF <.MEM_15(D)>
ldi_8 = malloc (1024);
# .MEM_17 = VDEF <.MEM_14>
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
# .MEM_6 = VDEF <.MEM_5(D)>
_1 = rand ();
# .MEM_14 = VDEF <.MEM_12(D)>
newmem_9 = malloc (_10);
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
# .MEM_4 = VDEF <.MEM_3(D)>
do_my_cleanups (&cleanup_chain, old_chain_2(D));
# .MEM_19 = VDEF <.MEM_18>
__builtin_puts (&"cleanup!!!!! ========="[0]);
===============The second stage : Program slicing=================
------------------VAR_DECL : LHS2------------------
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
_1 = time (&t);
========================================================
=============== *this point analyzable =================
_1 = time (&t);
========================================================
 <ssa_name 0x7f11e33e4630
    type <integer_type 0x7f11e33f1690 unsigned int public unsigned SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1690 precision:32 min <integer_cst 0x7f11e33dce28 0> max <integer_cst 0x7f11e33dcde0 4294967295>
        pointer_to_this <pointer_type 0x7f11e33fd690>>
   
    def_stmt _2 = (unsigned int) _1;
    version:2>
=============== *this point analyzable =================
srand (_2);
========================================================
=============== *this point analyzable =================
_3 = rand ();
========================================================
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
=============== *this point analyzable =================
rs6000_xfer_shared_libraries (_5, &len);
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
rs6000_xfer_shared_libraries (_5, &len);
========================================================
=============== *this point analyzable =================
ldi_buf_6 = rs6000_ptrace_ldinfo ();
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
cleanup_8 = make_cleanup (free, ldi_buf_6);
========================================================
=============== *this point analyzable =================
cleanup_8 = make_cleanup (free, ldi_buf_6);
========================================================
=============== *this point analyzable =================
result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
========================================================
=============== *this point analyzable =================
ldi_8 = malloc (1024);
========================================================
=============== *this point analyzable =================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
========================================================
=============== *this point analyzable =================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
========================================================
=============== *this point analyzable =================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
========================================================
=============== *this point analyzable =================
ldi_13 = xrealloc (ldi_4, _2);
========================================================
=============== *this point analyzable =================
ldi_13 = xrealloc (ldi_4, _2);
========================================================
=============== *this point analyzable =================
ldi_13 = xrealloc (ldi_4, _2);
========================================================
=============== *this point analyzable =================
_1 = rand ();
========================================================
=============== *this point analyzable =================
newmem_9 = malloc (_10);
========================================================
=============== *this point analyzable =================
newmem_7 = realloc (oldmem_4(D), _10);
========================================================
------------------VAR_DECL : LHS2------------------
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
========================================================
=============== *this point analyzable =================
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
========================================================
=============== *this point analyzable =================
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
========================================================
=============== *this point analyzable =================
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
========================================================
=============== *this point analyzable =================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
========================================================
=============== *this point analyzable =================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
========================================================
=============== *this point analyzable =================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
========================================================
=============== *this point analyzable =================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
========================================================
=============== *this point analyzable =================
new_4 = malloc (32);
========================================================
=============== *this point analyzable =================
do_my_cleanups (&cleanup_chain, old_chain_2(D));
========================================================
------------------VAR_DECL : LHS2------------------
=============== *this point analyzable =================
__builtin_puts (&"cleanup!!!!! ========="[0]);
========================================================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 4 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rs6000_xfer_shared_libraries========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path rs6000_xfer_shared_libraries  function_call count: 6 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_cleanups  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <array_ref 0x7f11e33e6118
    type <integer_type 0x7f11e2efc930 char readonly QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e2eeb798 -128> max <integer_cst 0x7f11e2eeb780 127>
        pointer_to_this <pointer_type 0x7f11e2efc9d8>>
   
    arg:0 <string_cst 0x7f11e2f146c0
        type <array_type 0x7f11e2efd1f8 type <integer_type 0x7f11e2efc930 char>
            BLK
            size <integer_cst 0x7f11e2eeb7e0 constant 184>
            unit-size <integer_cst 0x7f11e2eeb7c8 constant 23>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f11e2efd150>>
        readonly constant static "cleanup!!!!! =========\000">
    arg:1 <integer_cst 0x7f11e33dcf48 type <integer_type 0x7f11e33f15e8 int> constant 0>>
 <array_ref 0x7f11e33e6118
    type <integer_type 0x7f11e2efc930 char readonly QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e2eeb798 -128> max <integer_cst 0x7f11e2eeb780 127>
        pointer_to_this <pointer_type 0x7f11e2efc9d8>>
   
    arg:0 <string_cst 0x7f11e2f146c0
        type <array_type 0x7f11e2efd1f8 type <integer_type 0x7f11e2efc930 char>
            BLK
            size <integer_cst 0x7f11e2eeb7e0 constant 184>
            unit-size <integer_cst 0x7f11e2eeb7c8 constant 23>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f11e2efd150>>
        readonly constant static "cleanup!!!!! =========\000">
    arg:1 <integer_cst 0x7f11e33dcf48 type <integer_type 0x7f11e33f15e8 int> constant 0>>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <array_ref 0x7f11e33e6118
    type <integer_type 0x7f11e2efc930 char readonly QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e2eeb798 -128> max <integer_cst 0x7f11e2eeb780 127>
        pointer_to_this <pointer_type 0x7f11e2efc9d8>>
   
    arg:0 <string_cst 0x7f11e2f146c0
        type <array_type 0x7f11e2efd1f8 type <integer_type 0x7f11e2efc930 char>
            BLK
            size <integer_cst 0x7f11e2eeb7e0 constant 184>
            unit-size <integer_cst 0x7f11e2eeb7c8 constant 23>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f11e2efd150>>
        readonly constant static "cleanup!!!!! =========\000">
    arg:1 <integer_cst 0x7f11e33dcf48 type <integer_type 0x7f11e33f15e8 int> constant 0>>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_19 = VDEF <.MEM_18>
__builtin_puts (&"cleanup!!!!! ========="[0]);
__builtin_puts (&"cleanup!!!!! ========="[0]);
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:107:25: warning: use location
  107 |                         printf("cleanup!!!!! =========\n");
      |                         ^
this stmt call this function :__builtin_puts
trace fucntion name:__builtin_puts 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_19 = VDEF <.MEM_18>
__builtin_puts (&"cleanup!!!!! ========="[0]);
__builtin_puts (&"cleanup!!!!! ========="[0]);
./benchmarks/binutils/double_free_1/../include/common.h:107:25: warning: use location
this stmt call this function :__builtin_puts
trace fucntion name:__builtin_puts 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
[40;42m =======pre_check_funciton:do_cleanups========= [0m
[40;42m =======start_check_funciton:do_cleanups========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_4 = VDEF <.MEM_3(D)>
do_my_cleanups (&cleanup_chain, old_chain_2(D));
do_my_cleanups (&cleanup_chain, old_chain_2(D));
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_chain ========= [0m
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_4 = VDEF <.MEM_3(D)>
do_my_cleanups (&cleanup_chain, old_chain_2(D));
do_my_cleanups (&cleanup_chain, old_chain_2(D));
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_chain ========= [0m
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:do_cleanups========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rs6000_aix_ld_info_to_xml========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:rs6000_aix_ld_info_to_xml========= [0m
[40;42m =======start_check_funciton:rs6000_aix_ld_info_to_xml========= [0m
[40;33m =======POP node_fun stack:rs6000_aix_ld_info_to_xml========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_cleanup  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :4========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================
*pmy_chain_5(D) = new_4;
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_1/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_1/../include/common.h:132:12: warning: use location
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_1/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_1/../include/common.h:131:17: warning: use location
new_4->function = function_8(D);
./benchmarks/binutils/double_free_1/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^
new_4->function = function_8(D);
./benchmarks/binutils/double_free_1/../include/common.h:130:17: warning: use location
new_4->next = _1;
./benchmarks/binutils/double_free_1/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^
new_4->next = _1;
./benchmarks/binutils/double_free_1/../include/common.h:129:13: warning: use location
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
new_4 = malloc (32);
./benchmarks/binutils/double_free_1/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>

 ================== pre trace ptable ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_20 = VDEF <.MEM_19>
exit (1);
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:136:17: warning: use location
  136 |                 exit (1);
      |                 ^
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
is Other function make_my_cleanup2
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;42m =======pre_check_funciton:make_cleanup========= [0m
[40;42m =======start_check_funciton:make_cleanup========= [0m

dot graph START

======================================================================
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with cleanup_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with cleanup_chain ========= [0m
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
do_my_cleanups (&cleanup_chain, old_chain_2(D));
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with cleanup_chain ========= [0m
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
do_my_cleanups (&cleanup_chain, old_chain_2(D));
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with cleanup_chain ========= [0m
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with function ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with function ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>

 ================== pre trace ptable ================== 
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_8>
return _6;
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :889========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
is Other function make_my_cleanup
 
 Start check Pointer Collect  

======================================================================
do_my_cleanups (&cleanup_chain, old_chain_2(D));
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘main’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================
[40;33m =======POP node_fun stack:make_cleanup========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace_ldinfo========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path rs6000_ptrace_ldinfo  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10558
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_9 = malloc (_10);
    version:9
    ptr-info 0x7f11e2f087b0>
 <ssa_name 0x7f11e2f10558
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_9 = malloc (_10);
    version:9
    ptr-info 0x7f11e2f087b0>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
In function ‘main’:
lto1: warning: use location
this stmt have mutiple branch ---malloc-----
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^
# .MEM_14 = VDEF <.MEM_12(D)>
newmem_9 = malloc (_10);
newmem_9 = malloc (_10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:41:14: warning: use location
   41 |     newmem = malloc (size);
      |              ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10558
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_9 = malloc (_10);
    version:9
    ptr-info 0x7f11e2f087b0>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10510
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_7 = realloc (oldmem_4(D), _10);
    version:7
    ptr-info 0x7f11e2f08798>
 <ssa_name 0x7f11e2f10510
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_7 = realloc (oldmem_4(D), _10);
    version:7
    ptr-info 0x7f11e2f08798>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
this stmt call this function :realloc

 ================== find free stmt ================== 
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^
newmem_9 = malloc (_10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:41:14: warning: use location
   41 |     newmem = malloc (size);
      |              ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10510
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_7 = realloc (oldmem_4(D), _10);
    version:7
    ptr-info 0x7f11e2f08798>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location
   43 |     newmem = realloc (oldmem, size);
      |              ^

===== possiable asias =====
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f105a0
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _10 = MAX_EXPR <1, size_3(D)>;
    version:10>
 <ssa_name 0x7f11e2f105a0
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _10 = MAX_EXPR <1, size_3(D)>;
    version:10>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f105a0
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _10 = MAX_EXPR <1, size_3(D)>;
    version:10>
is Other function 

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace64========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path rs6000_ptrace64  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre_check_funciton:rs6000_ptrace64========= [0m
[40;42m =======start_check_funciton:rs6000_ptrace64========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:rand 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>
is Other function rand
 
 Start check Pointer Collect  

======================================================================
_2 = _1 % 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:60:9: warning: use location
   60 |         __NONDET(ret, 1, (-1));
      |         ^
if (_2 == 1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:60:9: warning: use location
# .MEM_6 = VDEF <.MEM_5(D)>
_1 = rand ();
_1 = rand ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:60:9: warning: use location
this stmt call this function :rand
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:rs6000_ptrace64========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:rs6000_ptrace_ldinfo========= [0m
[40;42m =======start_check_funciton:rs6000_ptrace_ldinfo========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location
this stmt have mutiple branch ---malloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^
# .MEM_16 = VDEF <.MEM_15(D)>
ldi_8 = malloc (1024);
ldi_8 = malloc (1024);
./benchmarks/binutils/double_free_1/binutils_df_1.c:68:15: warning: use location
   68 |   void *ldi = malloc (ldi_size); /* allocation site */
      |               ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

===== possiable asias =====
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_17 = VDEF <.MEM_14>
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = (long unsigned int) ldi_size_11;
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location
this stmt have mutiple branch ---xrealloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

===== possiable asias =====
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = (long unsigned int) ldi_size_11;
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi_size ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location
this stmt have mutiple branch ---xrealloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_17 = VDEF <.MEM_14>
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi_size ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

===== possiable asias =====
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>

 ================== pre trace ptable ================== 
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :888========  [0m
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with rc ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>
is Other function rs6000_ptrace64
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_17 = VDEF <.MEM_14>
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with rc ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>
is Other function 
 
 Start check Pointer Collect  

======================================================================
return ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:83:10: warning: use location
   83 |   return (gdb_byte *) ldi;
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

===== possiable asias =====
# VUSE <.MEM_17>
return ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:83:10: warning: use location
   83 |   return (gdb_byte *) ldi;
      |          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location
this stmt have mutiple branch ---xrealloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = (long unsigned int) ldi_size_11;
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location

===== possiable asias =====
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>

 ================== pre trace ptable ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_15 = VDEF <.MEM_11>
exit (1);
./benchmarks/binutils/double_free_1/binutils_df_1.c:45:17: warning: use location
   45 |                 exit(1);
      |                 ^
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
is Other function xrealloc
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:rs6000_ptrace_ldinfo========= [0m
[40;42m =======pre_check_funciton:rs6000_xfer_shared_libraries========= [0m
[40;42m =======start_check_funciton:rs6000_xfer_shared_libraries========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>

 ================== pre trace ptable ================== 
trace fucntion name:rs6000_ptrace_ldinfo 
[40;44m =======trace_function_path rs6000_ptrace_ldinfo  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_17>
return ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:83:10: warning: use location
   83 |   return (gdb_byte *) ldi;
      |          ^
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:rs6000_ptrace_ldinfo========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :889========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace64========= [0m
[40;46m =======add node_fun stack:rs6000_ptrace64========= [0m
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
is Other function rs6000_ptrace_ldinfo
 
 Start check Pointer Collect  

======================================================================
result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:106:12: warning: use location
  106 |   result = rs6000_aix_ld_info_to_xml (ldi_buf);
      |            ^
this stmt call this function :rs6000_aix_ld_info_to_xml
trace fucntion name:rs6000_aix_ld_info_to_xml 
[40;44m =======trace_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:rs6000_aix_ld_info_to_xml========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^
this stmt call this function :free

 ================== find free stmt ================== 
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
cleanup_8 = make_cleanup (free, ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:105:13: warning: use location
  105 |   cleanup = make_cleanup (free, ldi_buf);
      |             ^
this stmt call this function :make_cleanup
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
do_cleanups (cleanup_8);
In function ‘main’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^
this stmt call this function :do_cleanups
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 
if (ldi_buf_6 == 0B)
In function ‘main’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:104:12: warning: use location
  104 |         if (!ldi_buf) exit(1);
      |            ^
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: use location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^
this stmt call this function :rs6000_ptrace_ldinfo
trace fucntion name:rs6000_ptrace_ldinfo 
[40;44m =======trace_function_path rs6000_ptrace_ldinfo  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:rs6000_ptrace_ldinfo========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace64========= [0m
[40;46m =======add node_fun stack:rs6000_ptrace64========= [0m
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:3 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
# VUSE <.MEM_16>
result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:106:12: warning: use location
  106 |   result = rs6000_aix_ld_info_to_xml (ldi_buf);
      |            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: free in this location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: free in this location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
# .MEM_16 = VDEF <.MEM_15>
cleanup_8 = make_cleanup (free, ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:105:13: warning: use location
  105 |   cleanup = make_cleanup (free, ldi_buf);
      |             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
if (ldi_buf_6 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:104:12: warning: use location
  104 |         if (!ldi_buf) exit(1);
      |            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:3 [0m
[40;31m  	possible double free [rigorous]:3 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:3 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>

 ================== pre trace ptable ================== 
trace fucntion name:free 

 ================== pre trace ptable finish================== 
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
is Other function free
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
cleanup_8 = make_cleanup (free, ldi_buf_6);
cleanup_8 = make_cleanup (free, ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:105:13: warning: use location
  105 |   cleanup = make_cleanup (free, ldi_buf);
      |             ^
this stmt call this function :make_cleanup
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with free ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with free ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with free ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
cleanup_8 = make_cleanup (free, ldi_buf_6);
cleanup_8 = make_cleanup (free, ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:105:13: warning: use location
this stmt call this function :make_cleanup
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with free ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with free ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with free ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>

 ================== pre trace ptable ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_7>
return _5;
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :890========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
is Other function make_cleanup
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
cleanup_8 = make_cleanup (free, ldi_buf_6);
cleanup_8 = make_cleanup (free, ldi_buf_6);
In function ‘main’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:105:13: warning: use location
  105 |   cleanup = make_cleanup (free, ldi_buf);
      |             ^
this stmt call this function :make_cleanup
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
In function ‘main’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:106:12: warning: use location
  106 |   result = rs6000_aix_ld_info_to_xml (ldi_buf);
      |            ^
this stmt call this function :rs6000_aix_ld_info_to_xml
trace fucntion name:rs6000_aix_ld_info_to_xml 
[40;44m =======trace_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:rs6000_aix_ld_info_to_xml========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^
this stmt call this function :free

 ================== find free stmt ================== 
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^
this stmt call this function :do_cleanups
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 
if (ldi_buf_6 == 0B)
In function ‘main’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:104:12: warning: use location
  104 |         if (!ldi_buf) exit(1);
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: free in this location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: free in this location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>

 ================== pre trace ptable ================== 
trace fucntion name:rs6000_aix_ld_info_to_xml 
[40;44m =======trace_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :888========  [0m
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
[40;36m ======= node_fun:rs6000_aix_ld_info_to_xml========= [0m
[40;36m ======= find relate stmt with result ========= [0m
fucntion collect path finsh

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
is Other function rs6000_aix_ld_info_to_xml
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_16>
result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:106:12: warning: use location
  106 |   result = rs6000_aix_ld_info_to_xml (ldi_buf);
      |            ^
this stmt call this function :rs6000_aix_ld_info_to_xml
trace fucntion name:rs6000_aix_ld_info_to_xml 
[40;44m =======trace_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
[40;36m ======= node_fun:rs6000_aix_ld_info_to_xml========= [0m
[40;36m ======= find relate stmt with result ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^
this stmt call this function :free

 ================== find free stmt ================== 
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
cleanup_8 = make_cleanup (free, ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:105:13: warning: use location
  105 |   cleanup = make_cleanup (free, ldi_buf);
      |             ^
this stmt call this function :make_cleanup
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with result ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with result ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with result ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
if (ldi_buf_6 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:104:12: warning: use location
  104 |         if (!ldi_buf) exit(1);
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:rs6000_xfer_shared_libraries========= [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:srand========= [0m
[40;33m =======POP node_fun stack:srand========= [0m
[40;42m =======pre add _ fucntion:time========= [0m
[40;33m =======POP node_fun stack:time========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <var_decl 0x7f11e3c84e10 t
    type <integer_type 0x7f11e2efe150 time_t DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce40 -9223372036854775808> max <integer_cst 0x7f11e33dce58 9223372036854775807> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efe2a0>>
    addressable DI ./benchmarks/binutils/double_free_1/binutils_df_1.c:121:9 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main> chain <var_decl 0x7f11e3c84d80 buf>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7f11e3c84e10 t
    type <integer_type 0x7f11e2efe150 time_t DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce40 -9223372036854775808> max <integer_cst 0x7f11e33dce58 9223372036854775807> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efe2a0>>
    addressable DI ./benchmarks/binutils/double_free_1/binutils_df_1.c:121:9 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main> chain <var_decl 0x7f11e3c84d80 buf>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
_1 = time (&t);
_1 = time (&t);
./benchmarks/binutils/double_free_1/binutils_df_1.c:122:15: warning: use location
  122 |         srand(time(&t));
      |               ^
this stmt call this function :time
trace fucntion name:time 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
_1 = time (&t);
_1 = time (&t);
./benchmarks/binutils/double_free_1/binutils_df_1.c:122:15: warning: use location
this stmt call this function :time
trace fucntion name:time 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e45e8
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = time (&t);
    version:1>
 <ssa_name 0x7f11e33e45e8
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = time (&t);
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:time 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e45e8
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = time (&t);
    version:1>
is Other function time
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
_1 = time (&t);
_1 = time (&t);
./benchmarks/binutils/double_free_1/binutils_df_1.c:122:15: warning: use location
this stmt call this function :time
trace fucntion name:time 

 ================== trace ================== 
trace fucntion free:0 
_2 = (unsigned int) _1;
./benchmarks/binutils/double_free_1/binutils_df_1.c:122:9: warning: use location
  122 |         srand(time(&t));
      |         ^
srand (_2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:122:9: warning: use location
this stmt call this function :srand
trace fucntion name:srand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e45e8
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = time (&t);
    version:1>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4630
    type <integer_type 0x7f11e33f1690 unsigned int public unsigned SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1690 precision:32 min <integer_cst 0x7f11e33dce28 0> max <integer_cst 0x7f11e33dcde0 4294967295>
        pointer_to_this <pointer_type 0x7f11e33fd690>>
   
    def_stmt _2 = (unsigned int) _1;
    version:2>
 <ssa_name 0x7f11e33e4630
    type <integer_type 0x7f11e33f1690 unsigned int public unsigned SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1690 precision:32 min <integer_cst 0x7f11e33dce28 0> max <integer_cst 0x7f11e33dcde0 4294967295>
        pointer_to_this <pointer_type 0x7f11e33fd690>>
   
    def_stmt _2 = (unsigned int) _1;
    version:2>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4630
    type <integer_type 0x7f11e33f1690 unsigned int public unsigned SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1690 precision:32 min <integer_cst 0x7f11e33dce28 0> max <integer_cst 0x7f11e33dcde0 4294967295>
        pointer_to_this <pointer_type 0x7f11e33fd690>>
   
    def_stmt _2 = (unsigned int) _1;
    version:2>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7>
srand (_2);
srand (_2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:122:9: warning: use location
this stmt call this function :srand
trace fucntion name:srand 

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7>
srand (_2);
srand (_2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:122:9: warning: use location
this stmt call this function :srand
trace fucntion name:srand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4630
    type <integer_type 0x7f11e33f1690 unsigned int public unsigned SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1690 precision:32 min <integer_cst 0x7f11e33dce28 0> max <integer_cst 0x7f11e33dcde0 4294967295>
        pointer_to_this <pointer_type 0x7f11e33fd690>>
   
    def_stmt _2 = (unsigned int) _1;
    version:2>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4678
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _3 = rand ();
    version:3>
 <ssa_name 0x7f11e33e4678
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _3 = rand ();
    version:3>

 ================== pre trace ptable ================== 
trace fucntion name:rand 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4678
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _3 = rand ();
    version:3>
is Other function rand
 
 Start check Pointer Collect  

======================================================================
_4 = _3 % 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:129:9: warning: use location
  129 |         __NONDET(writebuf, buf, NULL);
      |         ^
if (_4 == 1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:129:9: warning: use location
# .MEM_9 = VDEF <.MEM_8>
_3 = rand ();
_3 = rand ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:129:9: warning: use location
this stmt call this function :rand
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4678
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _3 = rand ();
    version:3>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_10 = VDEF <.MEM_9>
rs6000_xfer_shared_libraries (_5, &len);
rs6000_xfer_shared_libraries (_5, &len);
./benchmarks/binutils/double_free_1/binutils_df_1.c:131:9: warning: use location
  131 |         rs6000_xfer_shared_libraries(writebuf, xfered_len);
      |         ^
this stmt call this function :rs6000_xfer_shared_libraries
trace fucntion name:rs6000_xfer_shared_libraries 
[40;44m =======trace_function_path rs6000_xfer_shared_libraries  function_call count: 6 level :0========  [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:rs6000_xfer_shared_libraries========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rs6000_aix_ld_info_to_xml========= [0m
[40;46m =======add node_fun stack:rs6000_aix_ld_info_to_xml========= [0m
[40;44m =======trace_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:rs6000_aix_ld_info_to_xml========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace_ldinfo========= [0m
[40;46m =======add node_fun stack:rs6000_ptrace_ldinfo========= [0m
[40;44m =======trace_function_path rs6000_ptrace_ldinfo  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:rs6000_ptrace_ldinfo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace64========= [0m
[40;46m =======add node_fun stack:rs6000_ptrace64========= [0m
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_10 = VDEF <.MEM_9>
rs6000_xfer_shared_libraries (_5, &len);
rs6000_xfer_shared_libraries (_5, &len);
./benchmarks/binutils/double_free_1/binutils_df_1.c:131:9: warning: use location
this stmt call this function :rs6000_xfer_shared_libraries
trace fucntion name:rs6000_xfer_shared_libraries 
[40;44m =======trace_function_path rs6000_xfer_shared_libraries  function_call count: 6 level :0========  [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:rs6000_xfer_shared_libraries========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rs6000_aix_ld_info_to_xml========= [0m
[40;46m =======add node_fun stack:rs6000_aix_ld_info_to_xml========= [0m
[40;44m =======trace_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :1========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:rs6000_aix_ld_info_to_xml========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace_ldinfo========= [0m
[40;46m =======add node_fun stack:rs6000_ptrace_ldinfo========= [0m
[40;44m =======trace_function_path rs6000_ptrace_ldinfo  function_call count: 3 level :1========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:rs6000_ptrace_ldinfo========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace64========= [0m
[40;46m =======add node_fun stack:rs6000_ptrace64========= [0m
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :2========  [0m
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4708
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
   
    def_stmt _5 = PHI <&buf(2), 0B(3)>
    version:5
    ptr-info 0x7f11e2f08690>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_10 = VDEF <.MEM_9>
rs6000_xfer_shared_libraries (_5, &len);
rs6000_xfer_shared_libraries (_5, &len);
./benchmarks/binutils/double_free_1/binutils_df_1.c:131:9: warning: use location
this stmt call this function :rs6000_xfer_shared_libraries
trace fucntion name:rs6000_xfer_shared_libraries 
[40;44m =======trace_function_path rs6000_xfer_shared_libraries  function_call count: 6 level :0========  [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:rs6000_xfer_shared_libraries========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :1========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with len ========= [0m
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rs6000_aix_ld_info_to_xml========= [0m
[40;46m =======add node_fun stack:rs6000_aix_ld_info_to_xml========= [0m
[40;44m =======trace_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :1========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:rs6000_aix_ld_info_to_xml========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :1========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with len ========= [0m
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace_ldinfo========= [0m
[40;46m =======add node_fun stack:rs6000_ptrace_ldinfo========= [0m
[40;44m =======trace_function_path rs6000_ptrace_ldinfo  function_call count: 3 level :1========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:rs6000_ptrace_ldinfo========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
In function ‘main’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace64========= [0m
[40;46m =======add node_fun stack:rs6000_ptrace64========= [0m
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :2========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:3 
# .MEM_10 = VDEF <.MEM_9>
rs6000_xfer_shared_libraries (_5, &len);
rs6000_xfer_shared_libraries (_5, &len);
./benchmarks/binutils/double_free_1/binutils_df_1.c:131:9: warning: use location
  131 |         rs6000_xfer_shared_libraries(writebuf, xfered_len);
      |         ^
this stmt call this function :rs6000_xfer_shared_libraries
trace fucntion name:rs6000_xfer_shared_libraries 
[40;44m =======trace_function_path rs6000_xfer_shared_libraries  function_call count: 6 level :0========  [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
[40;31m  find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:rs6000_xfer_shared_libraries========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :1========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with len ========= [0m
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rs6000_aix_ld_info_to_xml========= [0m
[40;46m =======add node_fun stack:rs6000_aix_ld_info_to_xml========= [0m
[40;44m =======trace_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :1========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:rs6000_aix_ld_info_to_xml========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :1========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with len ========= [0m
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:len========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace_ldinfo========= [0m
[40;46m =======add node_fun stack:rs6000_ptrace_ldinfo========= [0m
[40;44m =======trace_function_path rs6000_ptrace_ldinfo  function_call count: 3 level :1========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:rs6000_ptrace_ldinfo========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :2========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
In function ‘main’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace64========= [0m
[40;46m =======add node_fun stack:rs6000_ptrace64========= [0m
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :2========  [0m
 <var_decl 0x7f11e3c84cf0 len
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    addressable SI ./benchmarks/binutils/double_free_1/binutils_df_1.c:125:6 size <integer_cst 0x7f11e33dcdf8 32> unit-size <integer_cst 0x7f11e33dce10 4>
    align:32 warn_if_not_align:0 context <function_decl 0x7f11e2efb500 main>>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with len ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:6 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:6 [0m
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:6 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:rs6000_xfer_shared_libraries========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path rs6000_xfer_shared_libraries  function_call count: 6 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_cleanups  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <array_ref 0x7f11e33e6118
    type <integer_type 0x7f11e2efc930 char readonly QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e2eeb798 -128> max <integer_cst 0x7f11e2eeb780 127>
        pointer_to_this <pointer_type 0x7f11e2efc9d8>>
   
    arg:0 <string_cst 0x7f11e2f146c0
        type <array_type 0x7f11e2efd1f8 type <integer_type 0x7f11e2efc930 char>
            BLK
            size <integer_cst 0x7f11e2eeb7e0 constant 184>
            unit-size <integer_cst 0x7f11e2eeb7c8 constant 23>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f11e2efd150>>
        readonly constant static "cleanup!!!!! =========\000">
    arg:1 <integer_cst 0x7f11e33dcf48 type <integer_type 0x7f11e33f15e8 int> constant 0>>
 <array_ref 0x7f11e33e6118
    type <integer_type 0x7f11e2efc930 char readonly QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e2eeb798 -128> max <integer_cst 0x7f11e2eeb780 127>
        pointer_to_this <pointer_type 0x7f11e2efc9d8>>
   
    arg:0 <string_cst 0x7f11e2f146c0
        type <array_type 0x7f11e2efd1f8 type <integer_type 0x7f11e2efc930 char>
            BLK
            size <integer_cst 0x7f11e2eeb7e0 constant 184>
            unit-size <integer_cst 0x7f11e2eeb7c8 constant 23>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f11e2efd150>>
        readonly constant static "cleanup!!!!! =========\000">
    arg:1 <integer_cst 0x7f11e33dcf48 type <integer_type 0x7f11e33f15e8 int> constant 0>>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <array_ref 0x7f11e33e6118
    type <integer_type 0x7f11e2efc930 char readonly QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e2eeb798 -128> max <integer_cst 0x7f11e2eeb780 127>
        pointer_to_this <pointer_type 0x7f11e2efc9d8>>
   
    arg:0 <string_cst 0x7f11e2f146c0
        type <array_type 0x7f11e2efd1f8 type <integer_type 0x7f11e2efc930 char>
            BLK
            size <integer_cst 0x7f11e2eeb7e0 constant 184>
            unit-size <integer_cst 0x7f11e2eeb7c8 constant 23>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f11e2efd150>>
        readonly constant static "cleanup!!!!! =========\000">
    arg:1 <integer_cst 0x7f11e33dcf48 type <integer_type 0x7f11e33f15e8 int> constant 0>>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_19 = VDEF <.MEM_18>
__builtin_puts (&"cleanup!!!!! ========="[0]);
__builtin_puts (&"cleanup!!!!! ========="[0]);
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:107:25: warning: use location
  107 |                         printf("cleanup!!!!! =========\n");
      |                         ^
this stmt call this function :__builtin_puts
trace fucntion name:__builtin_puts 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_19 = VDEF <.MEM_18>
__builtin_puts (&"cleanup!!!!! ========="[0]);
__builtin_puts (&"cleanup!!!!! ========="[0]);
./benchmarks/binutils/double_free_1/../include/common.h:107:25: warning: use location
this stmt call this function :__builtin_puts
trace fucntion name:__builtin_puts 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
[40;42m =======pre_check_funciton:do_cleanups========= [0m
[40;42m =======start_check_funciton:do_cleanups========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_4 = VDEF <.MEM_3(D)>
do_my_cleanups (&cleanup_chain, old_chain_2(D));
do_my_cleanups (&cleanup_chain, old_chain_2(D));
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_chain ========= [0m
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_4 = VDEF <.MEM_3(D)>
do_my_cleanups (&cleanup_chain, old_chain_2(D));
do_my_cleanups (&cleanup_chain, old_chain_2(D));
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_chain ========= [0m
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:do_cleanups========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:rs6000_aix_ld_info_to_xml========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:rs6000_aix_ld_info_to_xml========= [0m
[40;42m =======start_check_funciton:rs6000_aix_ld_info_to_xml========= [0m
[40;33m =======POP node_fun stack:rs6000_aix_ld_info_to_xml========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_cleanup  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================
*pmy_chain_5(D) = new_4;
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_1/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_1/../include/common.h:132:12: warning: use location
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_1/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_1/../include/common.h:131:17: warning: use location
new_4->function = function_8(D);
./benchmarks/binutils/double_free_1/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^
new_4->function = function_8(D);
./benchmarks/binutils/double_free_1/../include/common.h:130:17: warning: use location
new_4->next = _1;
./benchmarks/binutils/double_free_1/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^
new_4->next = _1;
./benchmarks/binutils/double_free_1/../include/common.h:129:13: warning: use location
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
new_4 = malloc (32);
./benchmarks/binutils/double_free_1/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>

 ================== pre trace ptable ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_20 = VDEF <.MEM_19>
exit (1);
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:136:17: warning: use location
  136 |                 exit (1);
      |                 ^
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
is Other function make_my_cleanup2
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;42m =======pre_check_funciton:make_cleanup========= [0m
[40;42m =======start_check_funciton:make_cleanup========= [0m

dot graph START

======================================================================
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with cleanup_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with cleanup_chain ========= [0m
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
do_my_cleanups (&cleanup_chain, old_chain_2(D));
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with cleanup_chain ========= [0m
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
do_my_cleanups (&cleanup_chain, old_chain_2(D));
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with cleanup_chain ========= [0m
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with function ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with function ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>

 ================== pre trace ptable ================== 
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_8>
return _6;
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :889========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
is Other function make_my_cleanup
 
 Start check Pointer Collect  

======================================================================
do_my_cleanups (&cleanup_chain, old_chain_2(D));
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================
[40;33m =======POP node_fun stack:make_cleanup========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace_ldinfo========= [0m
[40;44m =======print_function_type 2  ========  [0m
[40;44m =======print_function_path rs6000_ptrace_ldinfo  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10558
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_9 = malloc (_10);
    version:9
    ptr-info 0x7f11e2f087b0>
 <ssa_name 0x7f11e2f10558
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_9 = malloc (_10);
    version:9
    ptr-info 0x7f11e2f087b0>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
In function ‘rs6000_xfer_shared_libraries’:
lto1: warning: use location
this stmt have mutiple branch ---malloc-----
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^
# .MEM_14 = VDEF <.MEM_12(D)>
newmem_9 = malloc (_10);
newmem_9 = malloc (_10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:41:14: warning: use location
   41 |     newmem = malloc (size);
      |              ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10558
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_9 = malloc (_10);
    version:9
    ptr-info 0x7f11e2f087b0>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10510
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_7 = realloc (oldmem_4(D), _10);
    version:7
    ptr-info 0x7f11e2f08798>
 <ssa_name 0x7f11e2f10510
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_7 = realloc (oldmem_4(D), _10);
    version:7
    ptr-info 0x7f11e2f08798>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
this stmt call this function :realloc

 ================== find free stmt ================== 
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^
newmem_9 = malloc (_10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:41:14: warning: use location
   41 |     newmem = malloc (size);
      |              ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10510
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_7 = realloc (oldmem_4(D), _10);
    version:7
    ptr-info 0x7f11e2f08798>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location
   43 |     newmem = realloc (oldmem, size);
      |              ^

===== possiable asias =====
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f105a0
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _10 = MAX_EXPR <1, size_3(D)>;
    version:10>
 <ssa_name 0x7f11e2f105a0
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _10 = MAX_EXPR <1, size_3(D)>;
    version:10>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f105a0
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _10 = MAX_EXPR <1, size_3(D)>;
    version:10>
is Other function 

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace64========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path rs6000_ptrace64  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre_check_funciton:rs6000_ptrace64========= [0m
[40;42m =======start_check_funciton:rs6000_ptrace64========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:rand 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>
is Other function rand
 
 Start check Pointer Collect  

======================================================================
_2 = _1 % 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:60:9: warning: use location
   60 |         __NONDET(ret, 1, (-1));
      |         ^
if (_2 == 1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:60:9: warning: use location
# .MEM_6 = VDEF <.MEM_5(D)>
_1 = rand ();
_1 = rand ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:60:9: warning: use location
this stmt call this function :rand
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:rs6000_ptrace64========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:rs6000_ptrace_ldinfo========= [0m
[40;42m =======start_check_funciton:rs6000_ptrace_ldinfo========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location
this stmt have mutiple branch ---malloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^
# .MEM_16 = VDEF <.MEM_15(D)>
ldi_8 = malloc (1024);
ldi_8 = malloc (1024);
./benchmarks/binutils/double_free_1/binutils_df_1.c:68:15: warning: use location
   68 |   void *ldi = malloc (ldi_size); /* allocation site */
      |               ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

===== possiable asias =====
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_17 = VDEF <.MEM_14>
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = (long unsigned int) ldi_size_11;
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location
this stmt have mutiple branch ---xrealloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

===== possiable asias =====
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = (long unsigned int) ldi_size_11;
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi_size ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location
this stmt have mutiple branch ---xrealloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_17 = VDEF <.MEM_14>
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi_size ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

===== possiable asias =====
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>

 ================== pre trace ptable ================== 
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :888========  [0m
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with rc ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>
is Other function rs6000_ptrace64
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_17 = VDEF <.MEM_14>
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with rc ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>
is Other function 
 
 Start check Pointer Collect  

======================================================================
return ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:83:10: warning: use location
   83 |   return (gdb_byte *) ldi;
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

===== possiable asias =====
# VUSE <.MEM_17>
return ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:83:10: warning: use location
   83 |   return (gdb_byte *) ldi;
      |          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location
this stmt have mutiple branch ---xrealloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = (long unsigned int) ldi_size_11;
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location

===== possiable asias =====
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>

 ================== pre trace ptable ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_15 = VDEF <.MEM_11>
exit (1);
./benchmarks/binutils/double_free_1/binutils_df_1.c:45:17: warning: use location
   45 |                 exit(1);
      |                 ^
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
is Other function xrealloc
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:rs6000_ptrace_ldinfo========= [0m
[40;42m =======pre_check_funciton:rs6000_xfer_shared_libraries========= [0m
[40;42m =======start_check_funciton:rs6000_xfer_shared_libraries========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>

 ================== pre trace ptable ================== 
trace fucntion name:rs6000_ptrace_ldinfo 
[40;44m =======trace_function_path rs6000_ptrace_ldinfo  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_17>
return ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:83:10: warning: use location
   83 |   return (gdb_byte *) ldi;
      |          ^
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:rs6000_ptrace_ldinfo========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :889========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace64========= [0m
[40;46m =======add node_fun stack:rs6000_ptrace64========= [0m
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
is Other function rs6000_ptrace_ldinfo
 
 Start check Pointer Collect  

======================================================================
result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:106:12: warning: use location
  106 |   result = rs6000_aix_ld_info_to_xml (ldi_buf);
      |            ^
this stmt call this function :rs6000_aix_ld_info_to_xml
trace fucntion name:rs6000_aix_ld_info_to_xml 
[40;44m =======trace_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:rs6000_aix_ld_info_to_xml========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^
this stmt call this function :free

 ================== find free stmt ================== 
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
cleanup_8 = make_cleanup (free, ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:105:13: warning: use location
  105 |   cleanup = make_cleanup (free, ldi_buf);
      |             ^
this stmt call this function :make_cleanup
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
do_cleanups (cleanup_8);
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^
this stmt call this function :do_cleanups
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:ldi_buf========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 
if (ldi_buf_6 == 0B)
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:104:12: warning: use location
  104 |         if (!ldi_buf) exit(1);
      |            ^
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: use location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^
this stmt call this function :rs6000_ptrace_ldinfo
trace fucntion name:rs6000_ptrace_ldinfo 
[40;44m =======trace_function_path rs6000_ptrace_ldinfo  function_call count: 3 level :0========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:rs6000_ptrace_ldinfo========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;46m =======add node_fun stack:xrealloc========= [0m
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :1========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace64========= [0m
[40;46m =======add node_fun stack:rs6000_ptrace64========= [0m
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi_buf ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:3 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4a20
    type <pointer_type 0x7f11e2efc000
        type <integer_type 0x7f11e2ef4930 gdb_byte unsigned QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e33dccd8 0> max <integer_cst 0x7f11e33dcc78 255> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2efc000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <var_decl 0x7f11e2f0e2d0 ldi_buf>
    def_stmt ldi_buf_6 = rs6000_ptrace_ldinfo ();
    version:6
    ptr-info 0x7f11e2f086c0>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
# VUSE <.MEM_16>
result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:106:12: warning: use location
  106 |   result = rs6000_aix_ld_info_to_xml (ldi_buf);
      |            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: free in this location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: free in this location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
# .MEM_16 = VDEF <.MEM_15>
cleanup_8 = make_cleanup (free, ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:105:13: warning: use location
  105 |   cleanup = make_cleanup (free, ldi_buf);
      |             ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_15 = VDEF <.MEM_14(D)>
ldi_buf_6 = rs6000_ptrace_ldinfo ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:103:13: warning: free in this location
  103 |   ldi_buf = rs6000_ptrace_ldinfo ();
      |             ^

===== possiable asias =====
if (ldi_buf_6 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:104:12: warning: use location
  104 |         if (!ldi_buf) exit(1);
      |            ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:3 [0m
[40;31m  	possible double free [rigorous]:3 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:3 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>

 ================== pre trace ptable ================== 
trace fucntion name:free 

 ================== pre trace ptable finish================== 
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
is Other function free
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
cleanup_8 = make_cleanup (free, ldi_buf_6);
cleanup_8 = make_cleanup (free, ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:105:13: warning: use location
  105 |   cleanup = make_cleanup (free, ldi_buf);
      |             ^
this stmt call this function :make_cleanup
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with free ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with free ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with free ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_16 = VDEF <.MEM_15>
cleanup_8 = make_cleanup (free, ldi_buf_6);
cleanup_8 = make_cleanup (free, ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:105:13: warning: use location
this stmt call this function :make_cleanup
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with free ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with free ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
 <function_decl 0x7f11e2efb400 free
    type <function_type 0x7f11e2ef4d20
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
            chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2ef4dc8>>
    addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
    align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
    attributes <tree_list 0x7f11e2ef69b0
        purpose <identifier_node 0x7f11e3416e10 nothrow>
        chain <tree_list 0x7f11e2ef6988
            purpose <identifier_node 0x7f11e3416e38 leaf>>>>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with free ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>

 ================== pre trace ptable ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_7>
return _5;
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :889========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :890========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
is Other function make_cleanup
 
 Start check Pointer Collect  

======================================================================
# .MEM_16 = VDEF <.MEM_15>
cleanup_8 = make_cleanup (free, ldi_buf_6);
cleanup_8 = make_cleanup (free, ldi_buf_6);
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:105:13: warning: use location
  105 |   cleanup = make_cleanup (free, ldi_buf);
      |             ^
this stmt call this function :make_cleanup
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:106:12: warning: use location
  106 |   result = rs6000_aix_ld_info_to_xml (ldi_buf);
      |            ^
this stmt call this function :rs6000_aix_ld_info_to_xml
trace fucntion name:rs6000_aix_ld_info_to_xml 
[40;44m =======trace_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:rs6000_aix_ld_info_to_xml========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^
this stmt call this function :free

 ================== find free stmt ================== 
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^
this stmt call this function :do_cleanups
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with cleanup ========= [0m
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 
if (ldi_buf_6 == 0B)
In function ‘rs6000_xfer_shared_libraries’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:104:12: warning: use location
  104 |         if (!ldi_buf) exit(1);
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4a68
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f0e1b0 cleanup>
    def_stmt cleanup_8 = make_cleanup (free, ldi_buf_6);
    version:8
    ptr-info 0x7f11e2f086d8>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: free in this location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: free in this location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_18 = VDEF <.MEM_17>
do_cleanups (cleanup_8);
./benchmarks/binutils/double_free_1/binutils_df_1.c:109:3: warning: use location
  109 |   do_cleanups (cleanup);        /* double-free */
      |   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>

 ================== pre trace ptable ================== 
trace fucntion name:rs6000_aix_ld_info_to_xml 
[40;44m =======trace_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :888========  [0m
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
[40;36m ======= node_fun:rs6000_aix_ld_info_to_xml========= [0m
[40;36m ======= find relate stmt with result ========= [0m
fucntion collect path finsh

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
is Other function rs6000_aix_ld_info_to_xml
 
 Start check Pointer Collect  

======================================================================
# VUSE <.MEM_16>
result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:106:12: warning: use location
  106 |   result = rs6000_aix_ld_info_to_xml (ldi_buf);
      |            ^
this stmt call this function :rs6000_aix_ld_info_to_xml
trace fucntion name:rs6000_aix_ld_info_to_xml 
[40;44m =======trace_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :0========  [0m
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
[40;36m ======= node_fun:rs6000_aix_ld_info_to_xml========= [0m
[40;36m ======= find relate stmt with result ========= [0m
fucntion collect path finsh

 ================== trace ================== 
trace fucntion free:0 
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^
this stmt call this function :free

 ================== find free stmt ================== 
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find free stmt ================== 
cleanup_8 = make_cleanup (free, ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:105:13: warning: use location
  105 |   cleanup = make_cleanup (free, ldi_buf);
      |             ^
this stmt call this function :make_cleanup
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with result ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with result ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with result ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
if (ldi_buf_6 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:104:12: warning: use location
  104 |         if (!ldi_buf) exit(1);
      |            ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4ab0
    type <integer_type 0x7f11e2efc348 ULONGEST public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
        pointer_to_this <pointer_type 0x7f11e2efc498>>
    var <var_decl 0x7f11e2f0e240 result>
    def_stmt result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
    version:9>

 ================================================================= 
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: use location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
# .MEM_19 = VDEF <.MEM_18>
*xfered_len_12(D) = result_9;
./benchmarks/binutils/double_free_1/binutils_df_1.c:115:19: warning: use location
  115 |       *xfered_len = result;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_17 = VDEF <.MEM_16>
free (ldi_buf_6);
./benchmarks/binutils/double_free_1/binutils_df_1.c:108:3: warning: free in this location
  108 |   free (ldi_buf);       /* double-free */
      |   ^

===== possiable asias =====
if (result_9 == 0)
./benchmarks/binutils/double_free_1/binutils_df_1.c:111:6: warning: use location
  111 |   if (result == 0)
      |      ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:rs6000_xfer_shared_libraries========= [0m
[40;44m =======node_fun:rs6000_aix_ld_info_to_xml========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path rs6000_aix_ld_info_to_xml  function_call count: 0 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre_check_funciton:rs6000_aix_ld_info_to_xml========= [0m
[40;42m =======start_check_funciton:rs6000_aix_ld_info_to_xml========= [0m
[40;33m =======POP node_fun stack:rs6000_aix_ld_info_to_xml========= [0m
[40;44m =======node_fun:rs6000_ptrace_ldinfo========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path rs6000_ptrace_ldinfo  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 2  ========  [0m
[40;42m =======pre add _ fucntion:xrealloc========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10558
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_9 = malloc (_10);
    version:9
    ptr-info 0x7f11e2f087b0>
 <ssa_name 0x7f11e2f10558
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_9 = malloc (_10);
    version:9
    ptr-info 0x7f11e2f087b0>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
In function ‘rs6000_ptrace_ldinfo’:
lto1: warning: use location
this stmt have mutiple branch ---malloc-----
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^
# .MEM_14 = VDEF <.MEM_12(D)>
newmem_9 = malloc (_10);
newmem_9 = malloc (_10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:41:14: warning: use location
   41 |     newmem = malloc (size);
      |              ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10558
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_9 = malloc (_10);
    version:9
    ptr-info 0x7f11e2f087b0>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10510
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_7 = realloc (oldmem_4(D), _10);
    version:7
    ptr-info 0x7f11e2f08798>
 <ssa_name 0x7f11e2f10510
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_7 = realloc (oldmem_4(D), _10);
    version:7
    ptr-info 0x7f11e2f08798>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
this stmt call this function :realloc

 ================== find free stmt ================== 
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^
newmem_9 = malloc (_10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:41:14: warning: use location
   41 |     newmem = malloc (size);
      |              ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10510
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_7 = realloc (oldmem_4(D), _10);
    version:7
    ptr-info 0x7f11e2f08798>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location
   43 |     newmem = realloc (oldmem, size);
      |              ^

===== possiable asias =====
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f105a0
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _10 = MAX_EXPR <1, size_3(D)>;
    version:10>
 <ssa_name 0x7f11e2f105a0
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _10 = MAX_EXPR <1, size_3(D)>;
    version:10>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f105a0
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _10 = MAX_EXPR <1, size_3(D)>;
    version:10>
is Other function 

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;42m =======pre add _ fucntion:rs6000_ptrace64========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path rs6000_ptrace64  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre_check_funciton:rs6000_ptrace64========= [0m
[40;42m =======start_check_funciton:rs6000_ptrace64========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:rand 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>
is Other function rand
 
 Start check Pointer Collect  

======================================================================
_2 = _1 % 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:60:9: warning: use location
   60 |         __NONDET(ret, 1, (-1));
      |         ^
if (_2 == 1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:60:9: warning: use location
# .MEM_6 = VDEF <.MEM_5(D)>
_1 = rand ();
_1 = rand ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:60:9: warning: use location
this stmt call this function :rand
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:rs6000_ptrace64========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:rs6000_ptrace_ldinfo========= [0m
[40;42m =======start_check_funciton:rs6000_ptrace_ldinfo========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location
this stmt have mutiple branch ---malloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^
# .MEM_16 = VDEF <.MEM_15(D)>
ldi_8 = malloc (1024);
ldi_8 = malloc (1024);
./benchmarks/binutils/double_free_1/binutils_df_1.c:68:15: warning: use location
   68 |   void *ldi = malloc (ldi_size); /* allocation site */
      |               ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10000
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_8 = malloc (1024);
    version:8
    ptr-info 0x7f11e2f08738>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

===== possiable asias =====
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_17 = VDEF <.MEM_14>
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = (long unsigned int) ldi_size_11;
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location
this stmt have mutiple branch ---xrealloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4ea0
    type <integer_type 0x7f11e33f1888 long long int DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce70 -9223372036854775808> max <integer_cst 0x7f11e33dcea0 9223372036854775807>
        pointer_to_this <pointer_type 0x7f11e33fd888>>
   
    def_stmt _1 = (long long int) ldi_4;
    version:1>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

===== possiable asias =====
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = (long unsigned int) ldi_size_11;
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi_size ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location
this stmt have mutiple branch ---xrealloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_17 = VDEF <.MEM_14>
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi_size ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4f30
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e870 ldi_size>
    def_stmt ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
    version:3>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

===== possiable asias =====
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>

 ================== pre trace ptable ================== 
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :888========  [0m
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with rc ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>
is Other function rs6000_ptrace64
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_17 = VDEF <.MEM_14>
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with rc ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10048
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
    var <var_decl 0x7f11e2f0e750 rc>
    def_stmt rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
    version:10>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>
is Other function 
 
 Start check Pointer Collect  

======================================================================
return ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:83:10: warning: use location
   83 |   return (gdb_byte *) ldi;
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4f78
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_4 = PHI <ldi_8(2), ldi_13(4)>
    version:4
    ptr-info 0x7f11e2f08720>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

===== possiable asias =====
# VUSE <.MEM_17>
return ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:83:10: warning: use location
   83 |   return (gdb_byte *) ldi;
      |          ^

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location
this stmt have mutiple branch ---xrealloc-----

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_2 = (long unsigned int) ldi_size_11;
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e33e4ee8
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _2 = (long unsigned int) ldi_size_11;
    version:2>

 ================================================================= 

 ================== Start Use after free Check ================== 

============================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: free in this location

===== possiable asias =====
ldi_4 = PHI <ldi_8(2), ldi_13(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m    Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>

 ================== pre trace ptable ================== 
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_15 = VDEF <.MEM_11>
exit (1);
./benchmarks/binutils/double_free_1/binutils_df_1.c:45:17: warning: use location
   45 |                 exit(1);
      |                 ^
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
is Other function xrealloc
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_18 = VDEF <.MEM_17>
ldi_13 = xrealloc (ldi_4, _2);
ldi_13 = xrealloc (ldi_4, _2);
./benchmarks/binutils/double_free_1/binutils_df_1.c:80:13: warning: use location
   80 |       ldi = xrealloc (ldi, ldi_size);
      |             ^
this stmt call this function :xrealloc
trace fucntion name:xrealloc 
[40;44m =======trace_function_path xrealloc  function_call count: 3 level :0========  [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
[40;31m  find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
[40;36m ======= node_fun:xrealloc========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;46m =======add node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
_1 = (long long int) ldi_4;
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
   73 |         rc = rs6000_ptrace64 (PT_LDINFO, pid, (unsigned long) ldi, ldi_size, NULL);
      |              ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
./benchmarks/binutils/double_free_1/binutils_df_1.c:73:14: warning: use location
this stmt call this function :rs6000_ptrace64
trace fucntion name:rs6000_ptrace64 
[40;44m =======trace_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>
[40;36m ======= node_fun:rs6000_ptrace64========= [0m
[40;36m ======= find relate stmt with ldi ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:rand========= [0m
[40;46m =======add node_fun stack:rand========= [0m

 ================== trace ================== 
trace fucntion free:1 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
if (rc_10 != -1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:75:10: warning: use location
   75 |       if (rc != -1)
      |          ^

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
ldi_size_11 = ldi_size_3 * 2;
./benchmarks/binutils/double_free_1/binutils_df_1.c:79:16: warning: use location
   79 |       ldi_size *= 2;
      |                ^

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f100d8
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0e7e0 ldi>
    def_stmt ldi_13 = xrealloc (ldi_4, _2);
    version:13
    ptr-info 0x7f11e2f08750>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================
[40;33m =======POP node_fun stack:rs6000_ptrace_ldinfo========= [0m
[40;44m =======node_fun:rs6000_ptrace64========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path rs6000_ptrace64  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:rand========= [0m
[40;33m =======POP node_fun stack:rand========= [0m
[40;42m =======pre_check_funciton:rs6000_ptrace64========= [0m
[40;42m =======start_check_funciton:rs6000_ptrace64========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================== pre trace ptable ================== 
trace fucntion name:rand 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>
is Other function rand
 
 Start check Pointer Collect  

======================================================================
_2 = _1 % 2;
In function ‘rs6000_ptrace64’:
./benchmarks/binutils/double_free_1/binutils_df_1.c:60:9: warning: use location
   60 |         __NONDET(ret, 1, (-1));
      |         ^
if (_2 == 1)
./benchmarks/binutils/double_free_1/binutils_df_1.c:60:9: warning: use location
# .MEM_6 = VDEF <.MEM_5(D)>
_1 = rand ();
_1 = rand ();
./benchmarks/binutils/double_free_1/binutils_df_1.c:60:9: warning: use location
this stmt call this function :rand
trace fucntion name:rand 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10288
    type <integer_type 0x7f11e33f15e8 int public SI
        size <integer_cst 0x7f11e33dcdf8 constant 32>
        unit-size <integer_cst 0x7f11e33dce10 constant 4>
        align:32 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f15e8 precision:32 min <integer_cst 0x7f11e33dcdb0 -2147483648> max <integer_cst 0x7f11e33dcdc8 2147483647>
        pointer_to_this <pointer_type 0x7f11e33f89d8>>
   
    def_stmt _1 = rand ();
    version:1>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:rs6000_ptrace64========= [0m
[40;44m =======node_fun:xrealloc========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path xrealloc  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:realloc========= [0m
[40;33m =======POP node_fun stack:realloc========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:xrealloc========= [0m
[40;42m =======start_check_funciton:xrealloc========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10558
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_9 = malloc (_10);
    version:9
    ptr-info 0x7f11e2f087b0>
 <ssa_name 0x7f11e2f10558
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_9 = malloc (_10);
    version:9
    ptr-info 0x7f11e2f087b0>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
In function ‘xrealloc’:
lto1: warning: use location
this stmt have mutiple branch ---malloc-----
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^
# .MEM_14 = VDEF <.MEM_12(D)>
newmem_9 = malloc (_10);
newmem_9 = malloc (_10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:41:14: warning: use location
   41 |     newmem = malloc (size);
      |              ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10558
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_9 = malloc (_10);
    version:9
    ptr-info 0x7f11e2f087b0>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10510
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_7 = realloc (oldmem_4(D), _10);
    version:7
    ptr-info 0x7f11e2f08798>
 <ssa_name 0x7f11e2f10510
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_7 = realloc (oldmem_4(D), _10);
    version:7
    ptr-info 0x7f11e2f08798>

 ================== pre trace ptable ================== 
trace fucntion name:realloc 

 ================== pre trace ptable finish================== 
is Reserved word function :realloc
 
 Start check Pointer Collect  

======================================================================
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^
this stmt call this function :realloc

 ================== find free stmt ================== 
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
[40;32m    FIND REALLOC STMT count:1 name:realloc [0m
[40;32m    this stmt possiable free memory [0m

 ================== find free stmt ================== 
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location
this stmt have mutiple branch ---realloc-----
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^
newmem_9 = malloc (_10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:41:14: warning: use location
   41 |     newmem = malloc (size);
      |              ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10510
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <var_decl 0x7f11e2f0eb40 newmem>
    def_stmt newmem_7 = realloc (oldmem_4(D), _10);
    version:7
    ptr-info 0x7f11e2f08798>

 ================================================================= 
[40;35m <Looserules> find realloc stmt free same pointer [0m
*/If realloc() fails, the initial memory block will not be freed() */# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: use location
   43 |     newmem = realloc (oldmem, size);
      |              ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
newmem_1 = PHI <newmem_9(3), newmem_7(4)>
lto1: warning: use location

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location

===== possiable asias =====
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_13 = VDEF <.MEM_12(D)>
newmem_7 = realloc (oldmem_4(D), _10);
./benchmarks/binutils/double_free_1/binutils_df_1.c:43:14: warning: free in this location
   43 |     newmem = realloc (oldmem, size);
      |              ^

===== possiable asias =====
if (newmem_1 == 0B)
./benchmarks/binutils/double_free_1/binutils_df_1.c:44:6: warning: use location
   44 |   if (!newmem)
      |      ^

 ================== warring ================== 
[40;35m  realloc Use after free error! [0m

 ================== warring ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m   need check branch because multiple direction varible[0m

======================================================================


======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f105a0
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _10 = MAX_EXPR <1, size_3(D)>;
    version:10>
 <ssa_name 0x7f11e2f105a0
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _10 = MAX_EXPR <1, size_3(D)>;
    version:10>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f105a0
    type <integer_type 0x7f11e33f17e0 long unsigned int public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f1738 precision:64 min <integer_cst 0x7f11e33dce88 0> max <integer_cst 0x7f11e33dd500 18446744073709551615>
        pointer_to_this <pointer_type 0x7f11e33fd7e0>>
   
    def_stmt _10 = MAX_EXPR <1, size_3(D)>;
    version:10>
is Other function 

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:xrealloc========= [0m
[40;44m =======node_fun:make_cleanup========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================
*pmy_chain_5(D) = new_4;
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_1/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_1/../include/common.h:132:12: warning: use location
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_1/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_1/../include/common.h:131:17: warning: use location
new_4->function = function_8(D);
./benchmarks/binutils/double_free_1/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^
new_4->function = function_8(D);
./benchmarks/binutils/double_free_1/../include/common.h:130:17: warning: use location
new_4->next = _1;
./benchmarks/binutils/double_free_1/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^
new_4->next = _1;
./benchmarks/binutils/double_free_1/../include/common.h:129:13: warning: use location
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
new_4 = malloc (32);
./benchmarks/binutils/double_free_1/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>

 ================== pre trace ptable ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_20 = VDEF <.MEM_19>
exit (1);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:136:17: warning: use location
  136 |                 exit (1);
      |                 ^
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
is Other function make_my_cleanup2
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;42m =======pre_check_funciton:make_cleanup========= [0m
[40;42m =======start_check_funciton:make_cleanup========= [0m

dot graph START

======================================================================
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>

 ================== this stmt hava call fucntion ================== 
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with cleanup_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with cleanup_chain ========= [0m
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
do_my_cleanups (&cleanup_chain, old_chain_2(D));
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with cleanup_chain ========= [0m
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
do_my_cleanups (&cleanup_chain, old_chain_2(D));
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <var_decl 0x7f11e3c84b40 cleanup_chain
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    addressable static unsigned DI ./benchmarks/binutils/double_free_1/../include/common.h:49:24 size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
    align:64 warn_if_not_align:0 context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c> initial <error_mark 0x7f11e33dcba0>>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with cleanup_chain ========= [0m
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:cleanup_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with function ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with function ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10750
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01800 function>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f087c8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10798
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01880 arg>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f087e0>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>

 ================== pre trace ptable ================== 
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# VUSE <.MEM_8>
return _6;
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :889========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
is Other function make_my_cleanup
 
 Start check Pointer Collect  

======================================================================
do_my_cleanups (&cleanup_chain, old_chain_2(D));
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:151:10: warning: use location
  151 |   return make_my_cleanup (&cleanup_chain, function, arg);
      |          ^
this stmt call this function :make_my_cleanup
trace fucntion name:make_my_cleanup 
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f107e0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
    version:5
    ptr-info 0x7f11e2f087f8>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   No memory leak, need more check!  [0m

======================================================================


======================================================================
[40;33m =======POP node_fun stack:make_cleanup========= [0m
[40;44m =======node_fun:make_my_cleanup========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================
*pmy_chain_5(D) = new_4;
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_1/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_1/../include/common.h:132:12: warning: use location
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_1/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_1/../include/common.h:131:17: warning: use location
new_4->function = function_8(D);
./benchmarks/binutils/double_free_1/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^
new_4->function = function_8(D);
./benchmarks/binutils/double_free_1/../include/common.h:130:17: warning: use location
new_4->next = _1;
./benchmarks/binutils/double_free_1/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^
new_4->next = _1;
./benchmarks/binutils/double_free_1/../include/common.h:129:13: warning: use location
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
new_4 = malloc (32);
./benchmarks/binutils/double_free_1/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:pmy_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f108b8
    type <pointer_type 0x7f11e2efd000
        type <pointer_type 0x7f11e2ef4f18 type <record_type 0x7f11e2ef4e70 cleanup>
            public unsigned DI
            size <integer_cst 0x7f11e33dcbb8 constant 64>
            unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e2efd000>>
        public unsigned DI size <integer_cst 0x7f11e33dcbb8 64> unit-size <integer_cst 0x7f11e33dcbd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01900 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08810>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with function ========= [0m
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:function========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10900
    type <pointer_type 0x7f11e2ef4498
        type <function_type 0x7f11e2ef4348 make_cleanup_ftype type <void_type 0x7f11e33f1f18 void>
            QI
            size <integer_cst 0x7f11e33dcca8 constant 8>
            unit-size <integer_cst 0x7f11e33dccc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7f11e2ef64b0 value <pointer_type 0x7f11e33f8000>
                chain <tree_list 0x7f11e33f0b18 value <void_type 0x7f11e33f1f18 void>>> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4498>>
        unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7f11e2f01980 function>
    def_stmt GIMPLE_NOP
    version:3
    ptr-info 0x7f11e2f08828>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with arg ========= [0m
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:arg========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10948
    type <pointer_type 0x7f11e33f8000
        type <void_type 0x7f11e33f1f18 void VOID
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7f11e33f8000>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e33fd9d8>>
    var <parm_decl 0x7f11e2f01a00 arg>
    def_stmt GIMPLE_NOP
    version:4
    ptr-info 0x7f11e2f08840>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>

 ================== pre trace ptable ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :888========  [0m
[40;31m  find return stmt  [0m
[40;31m  this fucntion return heap-object  [0m
# .MEM_20 = VDEF <.MEM_19>
exit (1);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:136:17: warning: use location
  136 |                 exit (1);
      |                 ^
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
is Other function make_my_cleanup2
 
 Start check Pointer Collect  

======================================================================
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_1/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt call this function :make_my_cleanup2
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with (null) ========= [0m
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:old_chain========= [0m
In function ‘make_my_cleanup2’:
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
  127 |   struct cleanup *old_chain = *pmy_chain;
      |                   ^
old_chain_6 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:127:19: warning: use location
old_chain_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
  129 |   new->next = *pmy_chain;
      |               ^
_1 = *pmy_chain_5(D);
./benchmarks/binutils/double_free_1/../include/common.h:129:15: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:(null)========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10990
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
   
    def_stmt _6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
    version:6
    ptr-info 0x7f11e2f08858>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;44m =======node_fun:make_my_cleanup2========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>

 ================== pre trace ptable ================== 
trace fucntion name:malloc 

 ================== pre trace ptable finish================== 
is Reserved word function :malloc
 
 Start check Pointer Collect  

======================================================================
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_1/../include/common.h:133:14: warning: use location
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_1/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_1/../include/common.h:132:12: warning: use location
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_1/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_1/../include/common.h:131:17: warning: use location
new_4->function = function_8(D);
./benchmarks/binutils/double_free_1/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^
new_4->function = function_8(D);
./benchmarks/binutils/double_free_1/../include/common.h:130:17: warning: use location
new_4->next = _1;
./benchmarks/binutils/double_free_1/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^
new_4->next = _1;
./benchmarks/binutils/double_free_1/../include/common.h:129:13: warning: use location
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
new_4 = malloc (32);
./benchmarks/binutils/double_free_1/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt call this function :malloc

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10ab0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <var_decl 0x7f11e2f18000 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7f11e2f08888>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;44m =======node_fun:do_cleanups========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <array_ref 0x7f11e33e6118
    type <integer_type 0x7f11e2efc930 char readonly QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e2eeb798 -128> max <integer_cst 0x7f11e2eeb780 127>
        pointer_to_this <pointer_type 0x7f11e2efc9d8>>
   
    arg:0 <string_cst 0x7f11e2f146c0
        type <array_type 0x7f11e2efd1f8 type <integer_type 0x7f11e2efc930 char>
            BLK
            size <integer_cst 0x7f11e2eeb7e0 constant 184>
            unit-size <integer_cst 0x7f11e2eeb7c8 constant 23>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f11e2efd150>>
        readonly constant static "cleanup!!!!! =========\000">
    arg:1 <integer_cst 0x7f11e33dcf48 type <integer_type 0x7f11e33f15e8 int> constant 0>>
 <array_ref 0x7f11e33e6118
    type <integer_type 0x7f11e2efc930 char readonly QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e2eeb798 -128> max <integer_cst 0x7f11e2eeb780 127>
        pointer_to_this <pointer_type 0x7f11e2efc9d8>>
   
    arg:0 <string_cst 0x7f11e2f146c0
        type <array_type 0x7f11e2efd1f8 type <integer_type 0x7f11e2efc930 char>
            BLK
            size <integer_cst 0x7f11e2eeb7e0 constant 184>
            unit-size <integer_cst 0x7f11e2eeb7c8 constant 23>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f11e2efd150>>
        readonly constant static "cleanup!!!!! =========\000">
    arg:1 <integer_cst 0x7f11e33dcf48 type <integer_type 0x7f11e33f15e8 int> constant 0>>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <array_ref 0x7f11e33e6118
    type <integer_type 0x7f11e2efc930 char readonly QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e2eeb798 -128> max <integer_cst 0x7f11e2eeb780 127>
        pointer_to_this <pointer_type 0x7f11e2efc9d8>>
   
    arg:0 <string_cst 0x7f11e2f146c0
        type <array_type 0x7f11e2efd1f8 type <integer_type 0x7f11e2efc930 char>
            BLK
            size <integer_cst 0x7f11e2eeb7e0 constant 184>
            unit-size <integer_cst 0x7f11e2eeb7c8 constant 23>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f11e2efd150>>
        readonly constant static "cleanup!!!!! =========\000">
    arg:1 <integer_cst 0x7f11e33dcf48 type <integer_type 0x7f11e33f15e8 int> constant 0>>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_19 = VDEF <.MEM_18>
__builtin_puts (&"cleanup!!!!! ========="[0]);
__builtin_puts (&"cleanup!!!!! ========="[0]);
In function ‘do_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:107:25: warning: use location
  107 |                         printf("cleanup!!!!! =========\n");
      |                         ^
this stmt call this function :__builtin_puts
trace fucntion name:__builtin_puts 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_19 = VDEF <.MEM_18>
__builtin_puts (&"cleanup!!!!! ========="[0]);
__builtin_puts (&"cleanup!!!!! ========="[0]);
./benchmarks/binutils/double_free_1/../include/common.h:107:25: warning: use location
this stmt call this function :__builtin_puts
trace fucntion name:__builtin_puts 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
[40;42m =======pre_check_funciton:do_cleanups========= [0m
[40;42m =======start_check_funciton:do_cleanups========= [0m

dot graph START

======================================================================
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>
is Other function 
 
 Start check Pointer Collect  

======================================================================
# .MEM_4 = VDEF <.MEM_3(D)>
do_my_cleanups (&cleanup_chain, old_chain_2(D));
do_my_cleanups (&cleanup_chain, old_chain_2(D));
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_chain ========= [0m
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
# .MEM_4 = VDEF <.MEM_3(D)>
do_my_cleanups (&cleanup_chain, old_chain_2(D));
do_my_cleanups (&cleanup_chain, old_chain_2(D));
In function ‘do_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:118:3: warning: use location
  118 |   do_my_cleanups (&cleanup_chain, old_chain);
      |   ^
this stmt call this function :do_my_cleanups
trace fucntion name:do_my_cleanups 
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_1/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_chain ========= [0m
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
In function ‘do_my_cleanups’:
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                       ^
_1 = ptr_12->next;
./benchmarks/binutils/double_free_1/../include/common.h:105:23: warning: use location
_1

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
  105 |       *pmy_chain = ptr->next;   /* Do this first in case of recursion.  */
      |                  ^
*pmy_chain_11(D) = _1;
./benchmarks/binutils/double_free_1/../include/common.h:105:18: warning: use location
*pmy_chain_11(D)

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
  106 |       (*ptr->function) (ptr->arg);
      |        ^
_2 = ptr_12->function;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_2

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:106:8: warning: use location
_3

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
  108 |                         printf("%x\n", ptr->arg);
      |                         ^
_4 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:108:25: warning: use location
_4

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
  109 |       if (ptr->free_arg)
      |              ^
_5 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:109:14: warning: use location
_5

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
  110 |                                 (*ptr->free_arg) (ptr->arg);
      |                                  ^
_6 = ptr_12->free_arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_6

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:(null)========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7 = ptr_12->arg;
./benchmarks/binutils/double_free_1/../include/common.h:110:34: warning: use location
_7

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
[40;36m ======= relate node_fun argument:old_chain========= [0m
[40;36m ======= relate gimple_assign_lhs:ptr========= [0m
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
  103 |         while ((ptr = *pmy_chain) != old_chain)
      |                     ^
ptr_12 = *pmy_chain_11(D);
./benchmarks/binutils/double_free_1/../include/common.h:103:21: warning: use location
ptr_12

 ================== warring ================== 
[40;35m this pointer possible reference other address [0m
[40;35m or assign other value [0m

 ================== warring ================== 
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7f11e2f10ea0
    type <pointer_type 0x7f11e2ef4f18
        type <record_type 0x7f11e2ef4e70 cleanup BLK
            size <integer_cst 0x7f11e33dcf18 constant 256>
            unit-size <integer_cst 0x7f11e33fa018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e2ef4e70 fields <field_decl 0x7f11e2ef72f8 next> context <translation_unit_decl 0x7f11e33e7168 ./benchmarks/binutils/double_free_1/binutils_df_1.c>
            pointer_to_this <pointer_type 0x7f11e2ef4f18>>
        public unsigned DI
        size <integer_cst 0x7f11e33dcbb8 constant 64>
        unit-size <integer_cst 0x7f11e33dcbd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7f11e2efd000>>
    var <parm_decl 0x7f11e2f01c80 old_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7f11e2f08918>

 ================================================================= 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:2 [0m
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:2 [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:do_cleanups========= [0m
[40;44m =======node_fun:do_my_cleanups========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <array_ref 0x7f11e33e6118
    type <integer_type 0x7f11e2efc930 char readonly QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e2eeb798 -128> max <integer_cst 0x7f11e2eeb780 127>
        pointer_to_this <pointer_type 0x7f11e2efc9d8>>
   
    arg:0 <string_cst 0x7f11e2f146c0
        type <array_type 0x7f11e2efd1f8 type <integer_type 0x7f11e2efc930 char>
            BLK
            size <integer_cst 0x7f11e2eeb7e0 constant 184>
            unit-size <integer_cst 0x7f11e2eeb7c8 constant 23>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f11e2efd150>>
        readonly constant static "cleanup!!!!! =========\000">
    arg:1 <integer_cst 0x7f11e33dcf48 type <integer_type 0x7f11e33f15e8 int> constant 0>>
 <array_ref 0x7f11e33e6118
    type <integer_type 0x7f11e2efc930 char readonly QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e2eeb798 -128> max <integer_cst 0x7f11e2eeb780 127>
        pointer_to_this <pointer_type 0x7f11e2efc9d8>>
   
    arg:0 <string_cst 0x7f11e2f146c0
        type <array_type 0x7f11e2efd1f8 type <integer_type 0x7f11e2efc930 char>
            BLK
            size <integer_cst 0x7f11e2eeb7e0 constant 184>
            unit-size <integer_cst 0x7f11e2eeb7c8 constant 23>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f11e2efd150>>
        readonly constant static "cleanup!!!!! =========\000">
    arg:1 <integer_cst 0x7f11e33dcf48 type <integer_type 0x7f11e33f15e8 int> constant 0>>

 ================== pre trace ptable ================== 

 ================== pre trace ptable finish================== 
 <array_ref 0x7f11e33e6118
    type <integer_type 0x7f11e2efc930 char readonly QI
        size <integer_cst 0x7f11e33dcca8 constant 8>
        unit-size <integer_cst 0x7f11e33dccc0 constant 1>
        align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7f11e33f13f0 precision:8 min <integer_cst 0x7f11e2eeb798 -128> max <integer_cst 0x7f11e2eeb780 127>
        pointer_to_this <pointer_type 0x7f11e2efc9d8>>
   
    arg:0 <string_cst 0x7f11e2f146c0
        type <array_type 0x7f11e2efd1f8 type <integer_type 0x7f11e2efc930 char>
            BLK
            size <integer_cst 0x7f11e2eeb7e0 constant 184>
            unit-size <integer_cst 0x7f11e2eeb7c8 constant 23>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7f11e2efd150>>
        readonly constant static "cleanup!!!!! =========\000">
    arg:1 <integer_cst 0x7f11e33dcf48 type <integer_type 0x7f11e33f15e8 int> constant 0>>
is Other function 
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_19 = VDEF <.MEM_18>
__builtin_puts (&"cleanup!!!!! ========="[0]);
__builtin_puts (&"cleanup!!!!! ========="[0]);
./benchmarks/binutils/double_free_1/../include/common.h:107:25: warning: use location
  107 |                         printf("cleanup!!!!! =========\n");
      |                         ^
this stmt call this function :__builtin_puts
trace fucntion name:__builtin_puts 

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    collect Stmt in loop [0m

======================================================================
# .MEM_19 = VDEF <.MEM_18>
__builtin_puts (&"cleanup!!!!! ========="[0]);
__builtin_puts (&"cleanup!!!!! ========="[0]);
./benchmarks/binutils/double_free_1/../include/common.h:107:25: warning: use location
this stmt call this function :__builtin_puts
trace fucntion name:__builtin_puts 

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 

 ================== Start Use after free Check ================== 

dot graph END
 
 Finish check Pointer Collect  

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = time (&t);
_2 = (unsigned int) _1;
srand (_2);
_3 = rand ();
_4 = _3 % 2;
if (_4 == 1)
  goto <bb 4>; [34.00%]
else
  goto <bb 3>; [66.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 708669601]:

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# _5 = PHI <&buf(2), 0B(3)>
rs6000_xfer_shared_libraries (_5, &len);
t ={v} {CLOBBER};
buf ={v} {CLOBBER};
len ={v} {CLOBBER};
return 0;

=======Mapping node_fun:rs6000_xfer_shared_libraries=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
if (writebuf_3(D) != 0B)
  goto <bb 7>; [70.93%]
else
  goto <bb 3>; [29.07%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 312136752]:
ldi_buf_6 = rs6000_ptrace_ldinfo ();
if (ldi_buf_6 == 0B)
  goto <bb 4>; [0.04%]
else
  goto <bb 5>; [99.96%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 124854]:
exit (1);

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 312011898]:
cleanup_8 = make_cleanup (free, ldi_buf_6);
result_9 = rs6000_aix_ld_info_to_xml (ldi_buf_6);
free (ldi_buf_6);
do_cleanups (cleanup_8);
if (result_9 == 0)
  goto <bb 7>; [50.00%]
else
  goto <bb 6>; [50.00%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 156005949]:
*xfered_len_12(D) = result_9;

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 1073616971]:
# _1 = PHI <-1(2), 0(5), 1(6)>
return _1;

=======Mapping node_fun:rs6000_aix_ld_info_to_xml=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = *ldi_buf_3(D);
_4 = (long unsigned int) _1;
return _4;

=======Mapping node_fun:rs6000_ptrace_ldinfo=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111600]:
ldi_8 = malloc (1024);

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 1073741824]:
# ldi_size_3 = PHI <1024(2), ldi_size_11(4)>
# ldi_4 = PHI <ldi_8(2), ldi_13(4)>
_1 = (long long int) ldi_4;
rc_10 = rs6000_ptrace64 (1, 1, _1, ldi_size_3, 0B);
if (rc_10 != -1)
  goto <bb 5>; [11.00%]
else
  goto <bb 4>; [89.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 955630225]:
ldi_size_11 = ldi_size_3 * 2;
_2 = (long unsigned int) ldi_size_11;
ldi_13 = xrealloc (ldi_4, _2);
goto <bb 3>; [100.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 118111600]:
return ldi_4;

=======Mapping node_fun:rs6000_ptrace64=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = rand ();
_2 = _1 % 2;
if (_2 == 1)
  goto <bb 4>; [34.00%]
else
  goto <bb 3>; [66.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 708669601]:

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073741824]:
# _3 = PHI <1(2), -1(3)>
return _3;

=======Mapping node_fun:xrealloc=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_10 = MAX_EXPR <1, size_3(D)>;
if (oldmem_4(D) == 0B)
  goto <bb 3>; [30.00%]
else
  goto <bb 4>; [70.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 322122544]:
newmem_9 = malloc (_10);
goto <bb 5>; [100.00%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 751619281]:
newmem_7 = realloc (oldmem_4(D), _10);

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 1073741824]:
# newmem_1 = PHI <newmem_9(3), newmem_7(4)>
if (newmem_1 == 0B)
  goto <bb 6>; [0.04%]
else
  goto <bb 7>; [99.96%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 429496]:
exit (1);

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 1073312329]:
return newmem_1;

=======Mapping node_fun:make_cleanup=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
return _5;

=======Mapping node_fun:make_my_cleanup=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
return _6;

=======Mapping node_fun:make_my_cleanup2=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
new_4 = malloc (32);
old_chain_6 = *pmy_chain_5(D);
_1 = *pmy_chain_5(D);
new_4->next = _1;
new_4->function = function_8(D);
new_4->free_arg = free_arg_10(D);
new_4->arg = arg_12(D);
*pmy_chain_5(D) = new_4;
if (old_chain_6 == 0B)
  goto <bb 3>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 429496]:
exit (1);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073312329]:
return old_chain_6;

=======Mapping node_fun:do_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
do_my_cleanups (&cleanup_chain, old_chain_2(D));
return;

=======Mapping node_fun:do_my_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111598]:
goto <bb 6>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
_1 = ptr_12->next;
*pmy_chain_11(D) = _1;
_2 = ptr_12->function;
_3 = ptr_12->arg;
_2 (_3);
__builtin_puts (&"cleanup!!!!! ========="[0]);
_4 = ptr_12->arg;
printf ("%x\n", _4);
_5 = ptr_12->free_arg;
if (_5 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 5>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 668941161]:
_6 = ptr_12->free_arg;
_7 = ptr_12->arg;
_6 (_7);

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 955630225]:
free (ptr_12);

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 1073741824]:
ptr_12 = *pmy_chain_11(D);
if (ptr_12 != old_chain_13(D))
  goto <bb 3>; [89.00%]
else
  goto <bb 7>; [11.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 118111600]:
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 4 [0m
[40;34m    gimple free   count : 2 [0m
[40;34m    all ptable point : 34 [0m
[40;34m    analyzable ptable point : 31 [0m
[40;34m    used_stmt array stack totalsize of : 0.001968 mb[0m
[40;34m    collect time: : 0.003265 s [0m
[40;34m    algorithm time: 0.351927 s [0m
[40;34m    gimple stmt count : : 78 [0m
[40;34m    this report analysis in Fri Feb 18 12:18:52 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  2157k ( 75%)
 phase opt and generate             :   0.11 (100%)   0.29 (100%)   0.40 (100%)   665k ( 23%)
 callgraph functions expansion      :   0.04 ( 36%)   0.01 (  3%)   0.04 ( 10%)   553k ( 19%)
 ipa lto gimple in                  :   0.01 (  9%)   0.00 (  0%)   0.00 (  0%)    80k (  3%)
 dominator optimization             :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)  9568  (  0%)
 tree code sinking                  :   0.01 (  9%)   0.00 (  0%)   0.00 (  0%)  1888  (  0%)
 out of ssa                         :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)  3960  (  0%)
 loop init                          :   0.00 (  0%)   0.00 (  0%)   0.01 (  2%)    37k (  1%)
 loop fini                          :   0.01 (  9%)   0.00 (  0%)   0.00 (  0%)    40  (  0%)
 shorten branches                   :   0.01 (  9%)   0.00 (  0%)   0.00 (  0%)     0  (  0%)
 plugin execution                   :   0.06 ( 55%)   0.28 ( 97%)   0.36 ( 90%)  1472  (  0%)
 initialize rtl                     :   0.01 (  9%)   0.01 (  3%)   0.00 (  0%)    12k (  0%)
 rest of compilation                :   0.00 (  0%)   0.00 (  0%)   0.01 (  3%)    29k (  1%)
 TOTAL                              :   0.11          0.29          0.40         2873k
