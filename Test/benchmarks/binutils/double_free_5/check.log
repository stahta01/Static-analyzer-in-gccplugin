./benchmarks/binutils/double_free_5/binutils_df_5.c:17:26: warning: ‘struct symbol’ declared inside parameter list will not be visible outside of this definition or declaration
   17 | find_oload_champ (struct symbol **oload_syms,
      |                          ^~~~~~
./benchmarks/binutils/double_free_5/binutils_df_5.c:37:24: warning: ‘struct symbol’ declared inside parameter list will not be visible outside of this definition or declaration
   37 |                 struct symbol ***oload_syms,
      |                        ^~~~~~
./benchmarks/binutils/double_free_5/binutils_df_5.c: In function ‘find_oload_champ_namespace_loop’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:24: warning: implicit declaration of function ‘strlen’ [-Wimplicit-function-declaration]
   54 |         int name_len = strlen(qualified_name);
      |                        ^~~~~~
./benchmarks/binutils/double_free_5/binutils_df_5.c:7:1: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
    6 | #include "../include/common.h"
  +++ |+#include <string.h>
    7 | 
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:24: warning: incompatible implicit declaration of built-in function ‘strlen’ [-Wbuiltin-declaration-mismatch]
   54 |         int name_len = strlen(qualified_name);
      |                        ^~~~~~
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:24: note: include ‘<string.h>’ or provide a declaration of ‘strlen’
./benchmarks/binutils/double_free_5/binutils_df_5.c:82:39: warning: passing argument 1 of ‘find_oload_champ’ from incompatible pointer type [-Wincompatible-pointer-types]
   82 |   new_oload_champ = find_oload_champ (new_oload_syms, &new_oload_champ_bv);
      |                                       ^~~~~~~~~~~~~~
      |                                       |
      |                                       struct symbol **
./benchmarks/binutils/double_free_5/binutils_df_5.c:17:35: note: expected ‘struct symbol **’ but argument is of type ‘struct symbol **’
   17 | find_oload_champ (struct symbol **oload_syms,
      |                   ~~~~~~~~~~~~~~~~^~~~~~~~~~
./benchmarks/binutils/double_free_5/binutils_df_5.c: In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:115:55: warning: passing argument 3 of ‘find_oload_champ_namespace_loop’ from incompatible pointer type [-Wincompatible-pointer-types]
  115 |         find_oload_champ_namespace_loop(namespace, 1, &symvec, &bvvec, &oload_champ);
      |                                                       ^~~~~~~
      |                                                       |
      |                                                       symbol ** (*)[10] {aka char ** (*)[10]}
./benchmarks/binutils/double_free_5/binutils_df_5.c:37:34: note: expected ‘struct symbol ***’ but argument is of type ‘symbol ** (*)[10]’ {aka ‘char ** (*)[10]’}
   37 |                 struct symbol ***oload_syms,
      |                 ~~~~~~~~~~~~~~~~~^~~~~~~~~~
./benchmarks/binutils/double_free_5/binutils_df_5.c:115:64: warning: passing argument 4 of ‘find_oload_champ_namespace_loop’ from incompatible pointer type [-Wincompatible-pointer-types]
  115 |         find_oload_champ_namespace_loop(namespace, 1, &symvec, &bvvec, &oload_champ);
      |                                                                ^~~~~~
      |                                                                |
      |                                                                struct badness_vector * (*)[10]
./benchmarks/binutils/double_free_5/binutils_df_5.c:38:41: note: expected ‘struct badness_vector **’ but argument is of type ‘struct badness_vector * (*)[10]’
   38 |                 struct badness_vector **oload_champ_bv,
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cfg                  ------------|      |      |      |      |          |          |
ompexp                           |      |      |      |      |   +100.0%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
ssa                              |      |      |      |      |     -3.1%|          |
nothrow                          |      |      |      |      |     -3.2%|          |
fixup_cfg            ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
einline              ------------|      |      |      |      |          |          |
early_optimizations  ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
ethread              ------------|      |      |      |      |          |          |
esra                 ------------|      |      |      |      |          |          |
ealias               ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
cddce                            |      |      |      |      |     -0.3%|          |
phiopt                           |      |      |      |      |     -0.3%|          |
modref               ------------|      |      |      |      |          |          |
iftoswitch           ------------|      |      |      |      |          |          |
profile_estimate     ------------|      |      |      |      |          |          |
local-pure-const                 |      |      |      |      |          |   +100.0%|
release_ssa          ------------|      |      |      |      |          |          |
local-fnsummary      ------------|      |      |      |      |          |          |
=======ipa_pta=========
===============The first stage : Point of interest stmt collect=================
=======node_fun:main=========

=======node_fun:find_oload_champ_namespace_loop=========

--------GIMPLE Cond -------
succs:= 2
--------GIMPLE Cond -------
succs:= 3
--------GIMPLE Cond -------
succs:= 2
succs:= 3
succs:= 4
--------GIMPLE Cond -------
succs:= 5
succs:= 5
--------GIMPLE Cond -------
succs:= 7
--------GIMPLE Cond -------
succs:= 7
succs:= 9
succs:= 9
succs:= 4
=======node_fun:find_oload_champ=========

=======node_fun:make_cleanup=========

=======node_fun:make_my_cleanup=========

=======node_fun:make_my_cleanup2=========

--------GIMPLE Cond -------
succs:= 2
succs:= 2
=======node_fun:do_cleanups=========

=======node_fun:do_my_cleanups=========

--------GIMPLE Cond -------
succs:= 3
succs:= 3
--------GIMPLE Cond -------
succs:= 6
=======node_fun:discard_my_cleanups=========

succs:= 6
--------GIMPLE Cond -------
succs:= 3
succs:= 3
--------GIMPLE Cond -------
succs:= 6
=======node_fun:discard_cleanups=========

===============The first stage : Point of interest stmt collect=================
start PointerConstraint
pointer ftable is 1 
pointer ptable is 1 
===============The second stage : Mapping stmt=================
# .MEM_2 = VDEF <.MEM_1(D)>
find_oload_champ_namespace_loop ("A::B::C", 1, &symvec, &bvvec, &oload_champ);
# .MEM_3 = VDEF <.MEM_2>
do_cleanups (0B);
# VUSE <.MEM_44>
_3 = strlen (qualified_name_24(D));
# .MEM_47 = VDEF <.MEM_46>
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
# .MEM_50 = VDEF <.MEM_49>
new_oload_syms_37 = malloc (800);
# .MEM_52 = VDEF <.MEM_51>
new_oload_champ_40 = find_oload_champ (new_oload_syms_37, &new_oload_champ_bv);
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
 <var_decl 0x7fa85d8442d0 new_oload_champ_bv
    type <pointer_type 0x7fa85d83bb28
        type <record_type 0x7fa85d83ba80 badness_vector TI
            size <integer_cst 0x7fa85dd09c00 constant 128>
            unit-size <integer_cst 0x7fa85dd09c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d83ba80 fields <field_decl 0x7fa85d835428 length> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d83bb28>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d83bbd0>>
    addressable unsigned DI ./benchmarks/binutils/double_free_5/binutils_df_5.c:48:26 size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fa85d833a00 find_oload_champ_namespace_loop> chain <var_decl 0x7fa85d844240 call_num>>
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
# .MEM_9 = VDEF <.MEM_8(D)>
printf ("%d\n", _1);
# .MEM_10 = VDEF <.MEM_9>
bv_6 = malloc (16);
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
# .MEM_4 = VDEF <.MEM_3(D)>
do_my_cleanups (&cleanup_chain, old_chain_2(D));
# .MEM_19 = VDEF <.MEM_18>
__builtin_puts (&"cleanup!!!!! ========="[0]);
# .MEM_20 = VDEF <.MEM_19>
printf ("%x\n", _4);
# .MEM_15 = VDEF <.MEM_13>
printf ("freearg: %x\n", _5);
# .MEM_4 = VDEF <.MEM_3(D)>
discard_my_cleanups (&cleanup_chain, old_chain_2(D));
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
start collect similar stmtstart collect similar stmtstart collect similar stmtstart collect similar stmt
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
===============The second stage : record fucntion =================

=============== The third stage : Start detection  =================
[40;44m =======node_fun:main========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path main  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_cleanups  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d852200
    type <pointer_type 0x7fa85d832d20
        type <integer_type 0x7fa85d832c78 char readonly public QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85dd1e3f0 precision:8 min <integer_cst 0x7fa85d829738 -128> max <integer_cst 0x7fa85d829720 127> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832d20>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7fa85dd13118 type <integer_type 0x7fa85d832c78 char>
       
        arg:0 <string_cst 0x7fa85d8553c0 type <array_type 0x7fa85d83b498>
            readonly constant static "cleanup!!!!! =========\000">
        arg:1 <integer_cst 0x7fa85dd09f48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa85d852260
    type <pointer_type 0x7fa85d83b690
        type <array_type 0x7fa85d83b5e8 type <integer_type 0x7fa85d832bd0 char>
            SI
            size <integer_cst 0x7fa85dd09df8 constant 32>
            unit-size <integer_cst 0x7fa85dd09e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa85d83b540>
            pointer_to_this <pointer_type 0x7fa85d83b690>>
        unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa85d852240 type <array_type 0x7fa85d83b5e8>
        readonly constant static "%x\012\000">
    ./benchmarks/binutils/double_free_5/../include/common.h:108:11 start: ./benchmarks/binutils/double_free_5/../include/common.h:108:11 finish: ./benchmarks/binutils/double_free_5/../include/common.h:108:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
[40;42m =======pre_check_funciton:do_cleanups========= [0m
[40;42m =======start_check_funciton:do_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d852160
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7fa85e5b1bd0 cleanup_chain type <pointer_type 0x7fa85d832930>
        addressable static unsigned DI ./benchmarks/binutils/double_free_5/../include/common.h:49:24 size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c> initial <error_mark 0x7fa85dd09ba0>>
    ./benchmarks/binutils/double_free_5/../include/common.h:118:3 start: ./benchmarks/binutils/double_free_5/../include/common.h:118:3 finish: ./benchmarks/binutils/double_free_5/../include/common.h:118:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_cleanups========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ_namespace_loop========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path find_oload_champ_namespace_loop  function_call count: 9 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:discard_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path discard_cleanups  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path discard_my_cleanups  function_call count: 2 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:discard_my_cleanups========= [0m
[40;42m =======start_check_funciton:discard_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d852340
    type <pointer_type 0x7fa85d83b150
        type <array_type 0x7fa85d83b0a8 type <integer_type 0x7fa85d832bd0 char>
            BLK
            size <integer_cst 0x7fa85d829810 constant 104>
            unit-size <integer_cst 0x7fa85d8297f8 constant 13>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa85d83b000>
            pointer_to_this <pointer_type 0x7fa85d83b150>>
        unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa85d85c190 type <array_type 0x7fa85d83b0a8>
        readonly constant static "freearg: %x\012\000">
    ./benchmarks/binutils/double_free_5/../include/common.h:94:10 start: ./benchmarks/binutils/double_free_5/../include/common.h:94:10 finish: ./benchmarks/binutils/double_free_5/../include/common.h:94:10>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:discard_my_cleanups========= [0m
[40;42m =======pre_check_funciton:discard_cleanups========= [0m
[40;42m =======start_check_funciton:discard_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d8523e0
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7fa85e5b1bd0 cleanup_chain type <pointer_type 0x7fa85d832930>
        addressable static unsigned DI ./benchmarks/binutils/double_free_5/../include/common.h:49:24 size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c> initial <error_mark 0x7fa85dd09ba0>>
    ./benchmarks/binutils/double_free_5/../include/common.h:71:3 start: ./benchmarks/binutils/double_free_5/../include/common.h:71:3 finish: ./benchmarks/binutils/double_free_5/../include/common.h:71:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:discard_cleanups========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_cleanups  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d852200
    type <pointer_type 0x7fa85d832d20
        type <integer_type 0x7fa85d832c78 char readonly public QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85dd1e3f0 precision:8 min <integer_cst 0x7fa85d829738 -128> max <integer_cst 0x7fa85d829720 127> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832d20>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7fa85dd13118 type <integer_type 0x7fa85d832c78 char>
       
        arg:0 <string_cst 0x7fa85d8553c0 type <array_type 0x7fa85d83b498>
            readonly constant static "cleanup!!!!! =========\000">
        arg:1 <integer_cst 0x7fa85dd09f48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa85d852260
    type <pointer_type 0x7fa85d83b690
        type <array_type 0x7fa85d83b5e8 type <integer_type 0x7fa85d832bd0 char>
            SI
            size <integer_cst 0x7fa85dd09df8 constant 32>
            unit-size <integer_cst 0x7fa85dd09e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa85d83b540>
            pointer_to_this <pointer_type 0x7fa85d83b690>>
        unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa85d852240 type <array_type 0x7fa85d83b5e8>
        readonly constant static "%x\012\000">
    ./benchmarks/binutils/double_free_5/../include/common.h:108:11 start: ./benchmarks/binutils/double_free_5/../include/common.h:108:11 finish: ./benchmarks/binutils/double_free_5/../include/common.h:108:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
[40;42m =======pre_check_funciton:do_cleanups========= [0m
[40;42m =======start_check_funciton:do_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d852160
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7fa85e5b1bd0 cleanup_chain type <pointer_type 0x7fa85d832930>
        addressable static unsigned DI ./benchmarks/binutils/double_free_5/../include/common.h:49:24 size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c> initial <error_mark 0x7fa85dd09ba0>>
    ./benchmarks/binutils/double_free_5/../include/common.h:118:3 start: ./benchmarks/binutils/double_free_5/../include/common.h:118:3 finish: ./benchmarks/binutils/double_free_5/../include/common.h:118:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_cleanups========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path find_oload_champ  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:find_oload_champ========= [0m
[40;42m =======start_check_funciton:find_oload_champ========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85d850750
    type <pointer_type 0x7fa85d83bb28
        type <record_type 0x7fa85d83ba80 badness_vector TI
            size <integer_cst 0x7fa85dd09c00 constant 128>
            unit-size <integer_cst 0x7fa85dd09c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d83ba80 fields <field_decl 0x7fa85d835428 length> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d83bb28>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d83bbd0>>
    var <var_decl 0x7fa85d844cf0 bv>
    def_stmt bv_6 = malloc (16);
    version:6
    ptr-info 0x7fa85d846810>
# .MEM_10 = VDEF <.MEM_9>
bv_6 = malloc (16);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
*oload_champ_bv_7(D) = bv_6;
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:26:25: warning: use location
   26 |         *oload_champ_bv = bv;
      |                         ^
*oload_champ_bv_7(D) = bv_6;
./benchmarks/binutils/double_free_5/binutils_df_5.c:26:25: warning: use location
bv_6 = malloc (16);
./benchmarks/binutils/double_free_5/binutils_df_5.c:25:14: warning: use location
   25 |         bv = malloc(sizeof(struct badness_vector));
      |              ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85d850750
    type <pointer_type 0x7fa85d83bb28
        type <record_type 0x7fa85d83ba80 badness_vector TI
            size <integer_cst 0x7fa85dd09c00 constant 128>
            unit-size <integer_cst 0x7fa85dd09c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d83ba80 fields <field_decl 0x7fa85d835428 length> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d83bb28>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d83bbd0>>
    var <var_decl 0x7fa85d844cf0 bv>
    def_stmt bv_6 = malloc (16);
    version:6
    ptr-info 0x7fa85d846810>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa85df05f40
    type <pointer_type 0x7fa85d83b690
        type <array_type 0x7fa85d83b5e8 type <integer_type 0x7fa85d832bd0 char>
            SI
            size <integer_cst 0x7fa85dd09df8 constant 32>
            unit-size <integer_cst 0x7fa85dd09e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa85d83b540>
            pointer_to_this <pointer_type 0x7fa85d83b690>>
        unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa85df05f20 type <array_type 0x7fa85d83b5e8>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/double_free_5/binutils_df_5.c:21:2 start: ./benchmarks/binutils/double_free_5/binutils_df_5.c:21:2 finish: ./benchmarks/binutils/double_free_5/binutils_df_5.c:21:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa85d8465a0 type <integer_type 0x7fa85dd1e7e0 long unsigned int> constant 16>
[40;33m =======POP node_fun stack:find_oload_champ========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_cleanup  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :4========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85d850c60
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d853120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7fa85d846900>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function ‘main’:
./benchmarks/binutils/double_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function ‘main’:
./benchmarks/binutils/double_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function ‘main’:
./benchmarks/binutils/double_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function ‘main’:
./benchmarks/binutils/double_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function ‘main’:
./benchmarks/binutils/double_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function ‘main’:
./benchmarks/binutils/double_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function ‘main’:
./benchmarks/binutils/double_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function ‘main’:
./benchmarks/binutils/double_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function ‘main’:
./benchmarks/binutils/double_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function ‘main’:
./benchmarks/binutils/double_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
In function ‘main’:
./benchmarks/binutils/double_free_5/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85d850c60
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d853120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7fa85d846900>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa85d846648 type <integer_type 0x7fa85dd1e7e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85d850a68
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e600 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa85d846888>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_5/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_5/../include/common.h:145:10: warning: use location
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85d850a68
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e600 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa85d846888>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;42m =======pre_check_funciton:make_cleanup========= [0m
[40;42m =======start_check_funciton:make_cleanup========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85df059c0
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7fa85e5b1bd0 cleanup_chain type <pointer_type 0x7fa85d832930>
        addressable static unsigned DI ./benchmarks/binutils/double_free_5/../include/common.h:49:24 size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c> initial <error_mark 0x7fa85dd09ba0>>
    ./benchmarks/binutils/double_free_5/../include/common.h:151:10 start: ./benchmarks/binutils/double_free_5/../include/common.h:151:10 finish: ./benchmarks/binutils/double_free_5/../include/common.h:151:10>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:make_cleanup========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ_namespace_loop========= [0m
[40;41m =======recursive_fun:find_oload_champ_namespace_loop========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:find_oload_champ_namespace_loop========= [0m
[40;42m =======start_check_funciton:find_oload_champ_namespace_loop========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85dd11ee8
    type <pointer_type 0x7fa85d832f18
        type <pointer_type 0x7fa85d832348 type <record_type 0x7fa85d832498 symbol>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d832f18>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d832e70>>
    var <var_decl 0x7fa85d844360 new_oload_syms>
    def_stmt new_oload_syms_37 = malloc (800);
    version:37
    ptr-info 0x7fa85d8467e0>
# .MEM_50 = VDEF <.MEM_49>
new_oload_syms_37 = malloc (800);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
   94 |                         free (new_oload_syms);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:86:37: warning: use location
   86 |                         *oload_syms = new_oload_syms;
      |                                     ^
new_oload_champ_40 = find_oload_champ (new_oload_syms_37, &new_oload_champ_bv);
./benchmarks/binutils/double_free_5/binutils_df_5.c:82:21: warning: use location
   82 |   new_oload_champ = find_oload_champ (new_oload_syms, &new_oload_champ_bv);
      |                     ^
this stmt is child function---find_oload_champ-----

 ================== trace ================== 
trace fucntion name:find_oload_champ 
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with new_oload_syms ========= [0m
[40;36m ======= relate stmt argument:new_oload_syms ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:87:38: warning: use location
   87 |                         *oload_champ = new_oload_champ;
      |                                      ^
_10 = new_oload_champ_40 != -1;
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:29: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |                             ^
_12 = _10 | _11;
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:35: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |                                   ^
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
if (_12 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 7
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 8
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
*new_oload_syms_37 = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:80:27: warning: use location
   80 |         new_oload_syms[0] = NULL;
      |                           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (new_oload_syms_37 == 0B)
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (new_oload_syms_37 == 0B)
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
if (new_oload_syms_37 == 0B)
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
if (new_oload_syms_37 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 5
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 6
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
new_oload_syms_37 = malloc (800);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
new_oload_syms_37 = malloc (800);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
new_oload_syms_37 = malloc (800);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:76:26: warning: use location
   76 |         new_oload_syms = malloc(100 * sizeof(struct symbol *)); /* allocation site */
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85dd11ee8
    type <pointer_type 0x7fa85d832f18
        type <pointer_type 0x7fa85d832348 type <record_type 0x7fa85d832498 symbol>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d832f18>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d832e70>>
    var <var_decl 0x7fa85d844360 new_oload_syms>
    def_stmt new_oload_syms_37 = malloc (800);
    version:37
    ptr-info 0x7fa85d8467e0>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
   94 |                         free (new_oload_syms);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_54 = VDEF <.MEM_53>
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_54 = VDEF <.MEM_53>
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7fa85dd11cf0
    type <pointer_type 0x7fa85d832d20
        type <integer_type 0x7fa85d832c78 char readonly public QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85dd1e3f0 precision:8 min <integer_cst 0x7fa85d829738 -128> max <integer_cst 0x7fa85d829720 127> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832d20>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e180 qualified_name>
    def_stmt GIMPLE_NOP
    version:24
    ptr-info 0x7fa85d846768>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_3 = strlen (qualified_name_24(D));
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:24: warning: use location
   54 |         int name_len = strlen(qualified_name);
      |                        ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
name_len_25 = (int) _3;
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:13: warning: use location
   54 |         int name_len = strlen(qualified_name);
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_47 = VDEF <.MEM_46>
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
bb index := 4
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_47 = VDEF <.MEM_46>
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
bb index := 4
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:21: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                     ^
this stmt is child function---find_oload_champ_namespace_loop-----

 ================== trace ================== 
trace fucntion name:find_oload_champ_namespace_loop 
[40;44m =======trace_function_path find_oload_champ_namespace_loop  function_call count: 9 level :0========  [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
# .MEM_58 = VDEF <.MEM_57>
free (_14);
[40;36m ======= node_fun:find_oload_champ_namespace_loop========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_cleanups========= [0m
[40;46m =======add node_fun stack:discard_cleanups========= [0m
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :2========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ========= [0m
[40;46m =======add node_fun stack:find_oload_champ========= [0m
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ_namespace_loop========= [0m
[40;46m =======add node_fun stack:find_oload_champ_namespace_loop========= [0m
[40;44m =======trace_function_path find_oload_champ_namespace_loop  function_call count: 9 level :1========  [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
# .MEM_58 = VDEF <.MEM_57>
free (_14);
[40;36m ======= node_fun:find_oload_champ_namespace_loop========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_cleanups========= [0m
[40;46m =======add node_fun stack:discard_cleanups========= [0m
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :3========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :3========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ========= [0m
[40;46m =======add node_fun stack:find_oload_champ========= [0m
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :3========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :4========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ_namespace_loop========= [0m
[40;41m =======recursive_fun2:find_oload_champ_namespace_loop========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 != 0)
bb index := 4
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 != 0)
bb index := 4
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================
if (_7 != 0)
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
if (_7 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 4
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 12
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
   94 |                         free (new_oload_syms);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:86:37: warning: use location
   86 |                         *oload_syms = new_oload_syms;
      |                                     ^
new_oload_champ_40 = find_oload_champ (new_oload_syms_37, &new_oload_champ_bv);
./benchmarks/binutils/double_free_5/binutils_df_5.c:82:21: warning: use location
   82 |   new_oload_champ = find_oload_champ (new_oload_syms, &new_oload_champ_bv);
      |                     ^
this stmt is child function---find_oload_champ-----

 ================== trace ================== 
trace fucntion name:find_oload_champ 
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:87:38: warning: use location
   87 |                         *oload_champ = new_oload_champ;
      |                                      ^
_10 = new_oload_champ_40 != -1;
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:29: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |                             ^
_12 = _10 | _11;
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:35: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |                                   ^
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
if (_12 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 7
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 8
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
*new_oload_syms_37 = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:80:27: warning: use location
   80 |         new_oload_syms[0] = NULL;
      |                           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (new_oload_syms_37 == 0B)
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (new_oload_syms_37 == 0B)
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
if (new_oload_syms_37 == 0B)
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
if (new_oload_syms_37 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 5
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 6
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_41>
_8 = *oload_syms_26(D);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_41>
_8 = *oload_syms_26(D);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
_8 = *oload_syms_26(D);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:73:18: warning: use location
   73 |   old_cleanups = make_cleanup (free, *oload_syms);                      /* double-free */
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
make_cleanup (free, _8);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:73:18: warning: use location
   73 |   old_cleanups = make_cleanup (free, *oload_syms);                      /* double-free */
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_syms_26(D) = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:57:15: warning: use location
   57 |   *oload_syms = NULL;
      |               ^
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
  103 |       *oload_champ_bv = new_oload_champ_bv;
      |                       ^
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
*oload_champ_bv_28(D) = _13;
./benchmarks/binutils/double_free_5/binutils_df_5.c:88:41: warning: use location
   88 |                         *oload_champ_bv = new_oload_champ_bv;
      |                                         ^
*oload_champ_bv_28(D) = _13;
./benchmarks/binutils/double_free_5/binutils_df_5.c:88:41: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_48>
_9 = *oload_champ_bv_28(D);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_48>
_9 = *oload_champ_bv_28(D);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
_9 = *oload_champ_bv_28(D);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
old_cleanups_35 = make_cleanup (free, _9);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: use location
   89 |                         do_cleanups (old_cleanups);
      |                         ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_champ_bv_28(D) = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:58:19: warning: use location
   58 |   *oload_champ_bv = NULL;
      |                   ^
_5 = qualified_name_24(D) + _4;
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:62: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                                              ^
_6 = *_5;
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:62: warning: use location
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
if (_6 == 58)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 3
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 4
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85dd11cf0
    type <pointer_type 0x7fa85d832d20
        type <integer_type 0x7fa85d832c78 char readonly public QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85dd1e3f0 precision:8 min <integer_cst 0x7fa85d829738 -128> max <integer_cst 0x7fa85d829720 127> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832d20>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e180 qualified_name>
    def_stmt GIMPLE_NOP
    version:24
    ptr-info 0x7fa85d846768>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_54 = VDEF <.MEM_53>
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_55 = VDEF <.MEM_54>
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
  103 |       *oload_champ_bv = new_oload_champ_bv;
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_55 = VDEF <.MEM_54>
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
  103 |       *oload_champ_bv = new_oload_champ_bv;
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa85dd11cf0
    type <pointer_type 0x7fa85d832d20
        type <integer_type 0x7fa85d832c78 char readonly public QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85dd1e3f0 precision:8 min <integer_cst 0x7fa85d829738 -128> max <integer_cst 0x7fa85d829720 127> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832d20>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e180 qualified_name>
    def_stmt GIMPLE_NOP
    version:24
    ptr-info 0x7fa85d846768>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_3 = strlen (qualified_name_24(D));
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:24: warning: use location
   54 |         int name_len = strlen(qualified_name);
      |                        ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
name_len_25 = (int) _3;
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:13: warning: use location
   54 |         int name_len = strlen(qualified_name);
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_47 = VDEF <.MEM_46>
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
bb index := 4
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_47 = VDEF <.MEM_46>
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
bb index := 4
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:21: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                     ^
this stmt is child function---find_oload_champ_namespace_loop-----

 ================== trace ================== 
trace fucntion name:find_oload_champ_namespace_loop 
[40;44m =======trace_function_path find_oload_champ_namespace_loop  function_call count: 9 level :0========  [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
# .MEM_58 = VDEF <.MEM_57>
free (_14);
[40;36m ======= node_fun:find_oload_champ_namespace_loop========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_cleanups========= [0m
[40;46m =======add node_fun stack:discard_cleanups========= [0m
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :2========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ========= [0m
[40;46m =======add node_fun stack:find_oload_champ========= [0m
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ_namespace_loop========= [0m
[40;46m =======add node_fun stack:find_oload_champ_namespace_loop========= [0m
[40;44m =======trace_function_path find_oload_champ_namespace_loop  function_call count: 9 level :1========  [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
# .MEM_58 = VDEF <.MEM_57>
free (_14);
[40;36m ======= node_fun:find_oload_champ_namespace_loop========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_cleanups========= [0m
[40;46m =======add node_fun stack:discard_cleanups========= [0m
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :3========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :3========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ========= [0m
[40;46m =======add node_fun stack:find_oload_champ========= [0m
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :3========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :4========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ_namespace_loop========= [0m
[40;41m =======recursive_fun2:find_oload_champ_namespace_loop========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 != 0)
bb index := 4
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 != 0)
bb index := 4
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================
if (_7 != 0)
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
if (_7 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 4
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 12
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
   94 |                         free (new_oload_syms);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:86:37: warning: use location
   86 |                         *oload_syms = new_oload_syms;
      |                                     ^
new_oload_champ_40 = find_oload_champ (new_oload_syms_37, &new_oload_champ_bv);
./benchmarks/binutils/double_free_5/binutils_df_5.c:82:21: warning: use location
   82 |   new_oload_champ = find_oload_champ (new_oload_syms, &new_oload_champ_bv);
      |                     ^
this stmt is child function---find_oload_champ-----

 ================== trace ================== 
trace fucntion name:find_oload_champ 
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:87:38: warning: use location
   87 |                         *oload_champ = new_oload_champ;
      |                                      ^
_10 = new_oload_champ_40 != -1;
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:29: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |                             ^
_12 = _10 | _11;
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:35: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |                                   ^
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
if (_12 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 7
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 8
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
*new_oload_syms_37 = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:80:27: warning: use location
   80 |         new_oload_syms[0] = NULL;
      |                           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (new_oload_syms_37 == 0B)
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (new_oload_syms_37 == 0B)
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
if (new_oload_syms_37 == 0B)
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
if (new_oload_syms_37 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 5
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 6
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_41>
_8 = *oload_syms_26(D);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_41>
_8 = *oload_syms_26(D);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
_8 = *oload_syms_26(D);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:73:18: warning: use location
   73 |   old_cleanups = make_cleanup (free, *oload_syms);                      /* double-free */
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
make_cleanup (free, _8);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:73:18: warning: use location
   73 |   old_cleanups = make_cleanup (free, *oload_syms);                      /* double-free */
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_syms_26(D) = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:57:15: warning: use location
   57 |   *oload_syms = NULL;
      |               ^
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
  103 |       *oload_champ_bv = new_oload_champ_bv;
      |                       ^
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
*oload_champ_bv_28(D) = _13;
./benchmarks/binutils/double_free_5/binutils_df_5.c:88:41: warning: use location
   88 |                         *oload_champ_bv = new_oload_champ_bv;
      |                                         ^
*oload_champ_bv_28(D) = _13;
./benchmarks/binutils/double_free_5/binutils_df_5.c:88:41: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_48>
_9 = *oload_champ_bv_28(D);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_48>
_9 = *oload_champ_bv_28(D);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
_9 = *oload_champ_bv_28(D);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
old_cleanups_35 = make_cleanup (free, _9);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: use location
   89 |                         do_cleanups (old_cleanups);
      |                         ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_champ_bv_28(D) = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:58:19: warning: use location
   58 |   *oload_champ_bv = NULL;
      |                   ^
_5 = qualified_name_24(D) + _4;
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:62: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                                              ^
_6 = *_5;
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:62: warning: use location
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
if (_6 == 58)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 3
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 4
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85dd11cf0
    type <pointer_type 0x7fa85d832d20
        type <integer_type 0x7fa85d832c78 char readonly public QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85dd1e3f0 precision:8 min <integer_cst 0x7fa85d829738 -128> max <integer_cst 0x7fa85d829720 127> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832d20>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e180 qualified_name>
    def_stmt GIMPLE_NOP
    version:24
    ptr-info 0x7fa85d846768>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_54 = VDEF <.MEM_53>
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_55 = VDEF <.MEM_54>
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
  103 |       *oload_champ_bv = new_oload_champ_bv;
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_55 = VDEF <.MEM_54>
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
  103 |       *oload_champ_bv = new_oload_champ_bv;
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa85df05d40
    type <pointer_type 0x7fa85d8327e0
        type <function_type 0x7fa85d832738 type <void_type 0x7fa85dd1ef18 void>
            QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7fa85d8345f0 value <pointer_type 0x7fa85dd25000>
                chain <tree_list 0x7fa85dd1db18 value <void_type 0x7fa85dd1ef18 void>>> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d8327e0>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <function_decl 0x7fa85d83a300 free type <function_type 0x7fa85d832738>
        addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
        align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
        attributes <tree_list 0x7fa85d834938
            purpose <identifier_node 0x7fa85dd43e10 nothrow>
            chain <tree_list 0x7fa85d834910
                purpose <identifier_node 0x7fa85dd43e38 leaf>>>>
    ./benchmarks/binutils/double_free_5/binutils_df_5.c:73:32 start: ./benchmarks/binutils/double_free_5/binutils_df_5.c:73:32 finish: ./benchmarks/binutils/double_free_5/binutils_df_5.c:73:32>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa85df05d80
    type <pointer_type 0x7fa85d8327e0
        type <function_type 0x7fa85d832738 type <void_type 0x7fa85dd1ef18 void>
            QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7fa85d8345f0 value <pointer_type 0x7fa85dd25000>
                chain <tree_list 0x7fa85dd1db18 value <void_type 0x7fa85dd1ef18 void>>> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d8327e0>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <function_decl 0x7fa85d83a300 free type <function_type 0x7fa85d832738>
        addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
        align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
        attributes <tree_list 0x7fa85d834938
            purpose <identifier_node 0x7fa85dd43e10 nothrow>
            chain <tree_list 0x7fa85d834910
                purpose <identifier_node 0x7fa85dd43e38 leaf>>>>
    ./benchmarks/binutils/double_free_5/binutils_df_5.c:74:32 start: ./benchmarks/binutils/double_free_5/binutils_df_5.c:74:32 finish: ./benchmarks/binutils/double_free_5/binutils_df_5.c:74:32>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa85d8298e8 type <integer_type 0x7fa85dd1e7e0 long unsigned int> constant 800>

dot graph START

======================================================================
 <ssa_name 0x7fa85dd11ea0
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d8443f0 old_cleanups>
    def_stmt old_cleanups_35 = make_cleanup (free, _9);
    version:35
    ptr-info 0x7fa85d8467c8>
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);

 ================== trace ptable================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :888========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :889========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :890========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---make_cleanup-----
this other function ------make_cleanup-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
make_cleanup (free, _8);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:73:18: warning: use location
   73 |   old_cleanups = make_cleanup (free, *oload_syms);                      /* double-free */
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
old_cleanups_35 = make_cleanup (free, _9);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
old_cleanups_35 = make_cleanup (free, _9);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
./benchmarks/binutils/double_free_5/../include/common.h:91:7: warning: use location
   91 |       free (ptr);
      |       ^
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
./benchmarks/binutils/double_free_5/../include/common.h:91:7: warning: use location
   91 |       free (ptr);
      |       ^
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: use location
   89 |                         do_cleanups (old_cleanups);
      |                         ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:3 
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: use location
   89 |                         do_cleanups (old_cleanups);
      |                         ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85dd11ea0
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d8443f0 old_cleanups>
    def_stmt old_cleanups_35 = make_cleanup (free, _9);
    version:35
    ptr-info 0x7fa85d8467c8>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
   94 |                         free (new_oload_syms);
      |                         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_14);
./benchmarks/binutils/double_free_5/binutils_df_5.c:95:25: warning: use location
   95 |                         free (new_oload_champ_bv);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_14);
./benchmarks/binutils/double_free_5/binutils_df_5.c:95:25: warning: Use after free error!: free location 
   95 |                         free (new_oload_champ_bv);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_14);
./benchmarks/binutils/double_free_5/binutils_df_5.c:95:25: warning: Use after free error!: free location 
   95 |                         free (new_oload_champ_bv);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa85dd11ea0
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d8443f0 old_cleanups>
    def_stmt old_cleanups_35 = make_cleanup (free, _9);
    version:35
    ptr-info 0x7fa85d8467c8>
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);

 ================== trace ptable================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :888========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :889========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :890========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---make_cleanup-----
this other function ------make_cleanup-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
make_cleanup (free, _8);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:73:18: warning: use location
   73 |   old_cleanups = make_cleanup (free, *oload_syms);                      /* double-free */
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
old_cleanups_35 = make_cleanup (free, _9);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_65>
return _17;
In function ‘find_oload_champ_namespace_loop’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
old_cleanups_35 = make_cleanup (free, _9);
In function ‘main’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 Expand conflict 
 The same function may have multiple branches :discard_cleanups
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^
=======================Path Constaint===========================

=succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 0
=succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
=succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
=succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
=succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
=succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================

# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
./benchmarks/binutils/double_free_5/../include/common.h:91:7: warning: use location
   91 |       free (ptr);
      |       ^
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: use location
   89 |                         do_cleanups (old_cleanups);
      |                         ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: use location
   89 |                         do_cleanups (old_cleanups);
      |                         ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:3 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85dd11ea0
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d8443f0 old_cleanups>
    def_stmt old_cleanups_35 = make_cleanup (free, _9);
    version:35
    ptr-info 0x7fa85d8467c8>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
   94 |                         free (new_oload_syms);
      |                         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_14);
./benchmarks/binutils/double_free_5/binutils_df_5.c:95:25: warning: use location
   95 |                         free (new_oload_champ_bv);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_14);
./benchmarks/binutils/double_free_5/binutils_df_5.c:95:25: warning: Use after free error!: free location 
   95 |                         free (new_oload_champ_bv);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_14);
./benchmarks/binutils/double_free_5/binutils_df_5.c:95:25: warning: Use after free error!: free location 
   95 |                         free (new_oload_champ_bv);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:3 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:3 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:3 [0m

======================================================================
[40;33m =======POP node_fun stack:find_oload_champ_namespace_loop========= [0m
[40;42m =======pre_check_funciton:main========= [0m
[40;42m =======start_check_funciton:main========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85df05ba0
    type <pointer_type 0x7fa85d83c5e8
        type <array_type 0x7fa85d83c540 type <integer_type 0x7fa85d832bd0 char>
            DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa85d83c498>
            pointer_to_this <pointer_type 0x7fa85d83c5e8>>
        unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa85df05b80 type <array_type 0x7fa85d83c540>
        readonly constant static "A::B::C\000">
    ./benchmarks/binutils/double_free_5/binutils_df_5.c:113:26 start: ./benchmarks/binutils/double_free_5/binutils_df_5.c:113:26 finish: ./benchmarks/binutils/double_free_5/binutils_df_5.c:113:26>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa85d8463f0 type <pointer_type 0x7fa85d832930> constant 0>
[40;33m =======POP node_fun stack:main========= [0m
[40;44m =======node_fun:find_oload_champ_namespace_loop========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path find_oload_champ_namespace_loop  function_call count: 9 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:discard_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path discard_cleanups  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path discard_my_cleanups  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:discard_my_cleanups========= [0m
[40;42m =======start_check_funciton:discard_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d852340
    type <pointer_type 0x7fa85d83b150
        type <array_type 0x7fa85d83b0a8 type <integer_type 0x7fa85d832bd0 char>
            BLK
            size <integer_cst 0x7fa85d829810 constant 104>
            unit-size <integer_cst 0x7fa85d8297f8 constant 13>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa85d83b000>
            pointer_to_this <pointer_type 0x7fa85d83b150>>
        unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa85d85c190 type <array_type 0x7fa85d83b0a8>
        readonly constant static "freearg: %x\012\000">
    ./benchmarks/binutils/double_free_5/../include/common.h:94:10 start: ./benchmarks/binutils/double_free_5/../include/common.h:94:10 finish: ./benchmarks/binutils/double_free_5/../include/common.h:94:10>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:discard_my_cleanups========= [0m
[40;42m =======pre_check_funciton:discard_cleanups========= [0m
[40;42m =======start_check_funciton:discard_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d8523e0
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7fa85e5b1bd0 cleanup_chain type <pointer_type 0x7fa85d832930>
        addressable static unsigned DI ./benchmarks/binutils/double_free_5/../include/common.h:49:24 size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c> initial <error_mark 0x7fa85dd09ba0>>
    ./benchmarks/binutils/double_free_5/../include/common.h:71:3 start: ./benchmarks/binutils/double_free_5/../include/common.h:71:3 finish: ./benchmarks/binutils/double_free_5/../include/common.h:71:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:discard_cleanups========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_cleanups  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d852200
    type <pointer_type 0x7fa85d832d20
        type <integer_type 0x7fa85d832c78 char readonly public QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85dd1e3f0 precision:8 min <integer_cst 0x7fa85d829738 -128> max <integer_cst 0x7fa85d829720 127> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832d20>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7fa85dd13118 type <integer_type 0x7fa85d832c78 char>
       
        arg:0 <string_cst 0x7fa85d8553c0 type <array_type 0x7fa85d83b498>
            readonly constant static "cleanup!!!!! =========\000">
        arg:1 <integer_cst 0x7fa85dd09f48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa85d852260
    type <pointer_type 0x7fa85d83b690
        type <array_type 0x7fa85d83b5e8 type <integer_type 0x7fa85d832bd0 char>
            SI
            size <integer_cst 0x7fa85dd09df8 constant 32>
            unit-size <integer_cst 0x7fa85dd09e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa85d83b540>
            pointer_to_this <pointer_type 0x7fa85d83b690>>
        unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa85d852240 type <array_type 0x7fa85d83b5e8>
        readonly constant static "%x\012\000">
    ./benchmarks/binutils/double_free_5/../include/common.h:108:11 start: ./benchmarks/binutils/double_free_5/../include/common.h:108:11 finish: ./benchmarks/binutils/double_free_5/../include/common.h:108:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
[40;42m =======pre_check_funciton:do_cleanups========= [0m
[40;42m =======start_check_funciton:do_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d852160
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7fa85e5b1bd0 cleanup_chain type <pointer_type 0x7fa85d832930>
        addressable static unsigned DI ./benchmarks/binutils/double_free_5/../include/common.h:49:24 size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c> initial <error_mark 0x7fa85dd09ba0>>
    ./benchmarks/binutils/double_free_5/../include/common.h:118:3 start: ./benchmarks/binutils/double_free_5/../include/common.h:118:3 finish: ./benchmarks/binutils/double_free_5/../include/common.h:118:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_cleanups========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path find_oload_champ  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:find_oload_champ========= [0m
[40;42m =======start_check_funciton:find_oload_champ========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85d850750
    type <pointer_type 0x7fa85d83bb28
        type <record_type 0x7fa85d83ba80 badness_vector TI
            size <integer_cst 0x7fa85dd09c00 constant 128>
            unit-size <integer_cst 0x7fa85dd09c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d83ba80 fields <field_decl 0x7fa85d835428 length> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d83bb28>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d83bbd0>>
    var <var_decl 0x7fa85d844cf0 bv>
    def_stmt bv_6 = malloc (16);
    version:6
    ptr-info 0x7fa85d846810>
# .MEM_10 = VDEF <.MEM_9>
bv_6 = malloc (16);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
*oload_champ_bv_7(D) = bv_6;
In function ‘find_oload_champ_namespace_loop’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:26:25: warning: use location
   26 |         *oload_champ_bv = bv;
      |                         ^
*oload_champ_bv_7(D) = bv_6;
./benchmarks/binutils/double_free_5/binutils_df_5.c:26:25: warning: use location
bv_6 = malloc (16);
./benchmarks/binutils/double_free_5/binutils_df_5.c:25:14: warning: use location
   25 |         bv = malloc(sizeof(struct badness_vector));
      |              ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85d850750
    type <pointer_type 0x7fa85d83bb28
        type <record_type 0x7fa85d83ba80 badness_vector TI
            size <integer_cst 0x7fa85dd09c00 constant 128>
            unit-size <integer_cst 0x7fa85dd09c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d83ba80 fields <field_decl 0x7fa85d835428 length> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d83bb28>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d83bbd0>>
    var <var_decl 0x7fa85d844cf0 bv>
    def_stmt bv_6 = malloc (16);
    version:6
    ptr-info 0x7fa85d846810>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa85df05f40
    type <pointer_type 0x7fa85d83b690
        type <array_type 0x7fa85d83b5e8 type <integer_type 0x7fa85d832bd0 char>
            SI
            size <integer_cst 0x7fa85dd09df8 constant 32>
            unit-size <integer_cst 0x7fa85dd09e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa85d83b540>
            pointer_to_this <pointer_type 0x7fa85d83b690>>
        unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa85df05f20 type <array_type 0x7fa85d83b5e8>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/double_free_5/binutils_df_5.c:21:2 start: ./benchmarks/binutils/double_free_5/binutils_df_5.c:21:2 finish: ./benchmarks/binutils/double_free_5/binutils_df_5.c:21:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa85d8465a0 type <integer_type 0x7fa85dd1e7e0 long unsigned int> constant 16>
[40;33m =======POP node_fun stack:find_oload_champ========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_cleanup  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85d850c60
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d853120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7fa85d846900>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function ‘find_oload_champ_namespace_loop’:
./benchmarks/binutils/double_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function ‘find_oload_champ_namespace_loop’:
./benchmarks/binutils/double_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function ‘find_oload_champ_namespace_loop’:
./benchmarks/binutils/double_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function ‘find_oload_champ_namespace_loop’:
./benchmarks/binutils/double_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function ‘find_oload_champ_namespace_loop’:
./benchmarks/binutils/double_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function ‘find_oload_champ_namespace_loop’:
./benchmarks/binutils/double_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function ‘find_oload_champ_namespace_loop’:
./benchmarks/binutils/double_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function ‘find_oload_champ_namespace_loop’:
./benchmarks/binutils/double_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function ‘find_oload_champ_namespace_loop’:
./benchmarks/binutils/double_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function ‘find_oload_champ_namespace_loop’:
./benchmarks/binutils/double_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
In function ‘find_oload_champ_namespace_loop’:
./benchmarks/binutils/double_free_5/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85d850c60
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d853120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7fa85d846900>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa85d846648 type <integer_type 0x7fa85dd1e7e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85d850a68
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e600 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa85d846888>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_5/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_5/../include/common.h:145:10: warning: use location
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85d850a68
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e600 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa85d846888>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;42m =======pre_check_funciton:make_cleanup========= [0m
[40;42m =======start_check_funciton:make_cleanup========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85df059c0
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7fa85e5b1bd0 cleanup_chain type <pointer_type 0x7fa85d832930>
        addressable static unsigned DI ./benchmarks/binutils/double_free_5/../include/common.h:49:24 size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c> initial <error_mark 0x7fa85dd09ba0>>
    ./benchmarks/binutils/double_free_5/../include/common.h:151:10 start: ./benchmarks/binutils/double_free_5/../include/common.h:151:10 finish: ./benchmarks/binutils/double_free_5/../include/common.h:151:10>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:make_cleanup========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ_namespace_loop========= [0m
[40;41m =======recursive_fun:find_oload_champ_namespace_loop========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;33m =======POP node_fun stack:strlen========= [0m
[40;42m =======pre_check_funciton:find_oload_champ_namespace_loop========= [0m
[40;42m =======start_check_funciton:find_oload_champ_namespace_loop========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85dd11ee8
    type <pointer_type 0x7fa85d832f18
        type <pointer_type 0x7fa85d832348 type <record_type 0x7fa85d832498 symbol>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d832f18>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d832e70>>
    var <var_decl 0x7fa85d844360 new_oload_syms>
    def_stmt new_oload_syms_37 = malloc (800);
    version:37
    ptr-info 0x7fa85d8467e0>
# .MEM_50 = VDEF <.MEM_49>
new_oload_syms_37 = malloc (800);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
   94 |                         free (new_oload_syms);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:86:37: warning: use location
   86 |                         *oload_syms = new_oload_syms;
      |                                     ^
new_oload_champ_40 = find_oload_champ (new_oload_syms_37, &new_oload_champ_bv);
./benchmarks/binutils/double_free_5/binutils_df_5.c:82:21: warning: use location
   82 |   new_oload_champ = find_oload_champ (new_oload_syms, &new_oload_champ_bv);
      |                     ^
this stmt is child function---find_oload_champ-----

 ================== trace ================== 
trace fucntion name:find_oload_champ 
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with new_oload_syms ========= [0m
[40;36m ======= relate stmt argument:new_oload_syms ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:87:38: warning: use location
   87 |                         *oload_champ = new_oload_champ;
      |                                      ^
_10 = new_oload_champ_40 != -1;
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:29: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |                             ^
_12 = _10 | _11;
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:35: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |                                   ^
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
if (_12 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 7
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 8
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
*new_oload_syms_37 = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:80:27: warning: use location
   80 |         new_oload_syms[0] = NULL;
      |                           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (new_oload_syms_37 == 0B)
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (new_oload_syms_37 == 0B)
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
if (new_oload_syms_37 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 5
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 6
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
new_oload_syms_37 = malloc (800);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_50 = VDEF <.MEM_49>
new_oload_syms_37 = malloc (800);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
new_oload_syms_37 = malloc (800);
./benchmarks/binutils/double_free_5/binutils_df_5.c:76:26: warning: use location
   76 |         new_oload_syms = malloc(100 * sizeof(struct symbol *)); /* allocation site */
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85dd11ee8
    type <pointer_type 0x7fa85d832f18
        type <pointer_type 0x7fa85d832348 type <record_type 0x7fa85d832498 symbol>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d832f18>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d832e70>>
    var <var_decl 0x7fa85d844360 new_oload_syms>
    def_stmt new_oload_syms_37 = malloc (800);
    version:37
    ptr-info 0x7fa85d8467e0>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
   94 |                         free (new_oload_syms);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_54 = VDEF <.MEM_53>
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_54 = VDEF <.MEM_53>
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:1 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;32m   Maybe you don't have memory leak.... need more checks  [0m

======================================================================


dot graph START

======================================================================
 <ssa_name 0x7fa85dd11cf0
    type <pointer_type 0x7fa85d832d20
        type <integer_type 0x7fa85d832c78 char readonly public QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85dd1e3f0 precision:8 min <integer_cst 0x7fa85d829738 -128> max <integer_cst 0x7fa85d829720 127> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832d20>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e180 qualified_name>
    def_stmt GIMPLE_NOP
    version:24
    ptr-info 0x7fa85d846768>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_3 = strlen (qualified_name_24(D));
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:24: warning: use location
   54 |         int name_len = strlen(qualified_name);
      |                        ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
name_len_25 = (int) _3;
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:13: warning: use location
   54 |         int name_len = strlen(qualified_name);
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_47 = VDEF <.MEM_46>
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
bb index := 4
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_47 = VDEF <.MEM_46>
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
bb index := 4
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:21: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                     ^
this stmt is child function---find_oload_champ_namespace_loop-----

 ================== trace ================== 
trace fucntion name:find_oload_champ_namespace_loop 
[40;44m =======trace_function_path find_oload_champ_namespace_loop  function_call count: 9 level :0========  [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
# .MEM_58 = VDEF <.MEM_57>
free (_14);
[40;36m ======= node_fun:find_oload_champ_namespace_loop========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_cleanups========= [0m
[40;46m =======add node_fun stack:discard_cleanups========= [0m
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :2========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ========= [0m
[40;46m =======add node_fun stack:find_oload_champ========= [0m
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ_namespace_loop========= [0m
[40;46m =======add node_fun stack:find_oload_champ_namespace_loop========= [0m
[40;44m =======trace_function_path find_oload_champ_namespace_loop  function_call count: 9 level :1========  [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
# .MEM_58 = VDEF <.MEM_57>
free (_14);
[40;36m ======= node_fun:find_oload_champ_namespace_loop========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_cleanups========= [0m
[40;46m =======add node_fun stack:discard_cleanups========= [0m
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :3========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :3========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ========= [0m
[40;46m =======add node_fun stack:find_oload_champ========= [0m
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :3========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :4========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ_namespace_loop========= [0m
[40;41m =======recursive_fun2:find_oload_champ_namespace_loop========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 != 0)
bb index := 4
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 != 0)
bb index := 4
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
if (_7 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 4
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 12
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
   94 |                         free (new_oload_syms);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:86:37: warning: use location
   86 |                         *oload_syms = new_oload_syms;
      |                                     ^
new_oload_champ_40 = find_oload_champ (new_oload_syms_37, &new_oload_champ_bv);
./benchmarks/binutils/double_free_5/binutils_df_5.c:82:21: warning: use location
   82 |   new_oload_champ = find_oload_champ (new_oload_syms, &new_oload_champ_bv);
      |                     ^
this stmt is child function---find_oload_champ-----

 ================== trace ================== 
trace fucntion name:find_oload_champ 
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:87:38: warning: use location
   87 |                         *oload_champ = new_oload_champ;
      |                                      ^
_10 = new_oload_champ_40 != -1;
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:29: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |                             ^
_12 = _10 | _11;
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:35: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |                                   ^
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
if (_12 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 7
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 8
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
*new_oload_syms_37 = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:80:27: warning: use location
   80 |         new_oload_syms[0] = NULL;
      |                           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (new_oload_syms_37 == 0B)
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (new_oload_syms_37 == 0B)
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
if (new_oload_syms_37 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 5
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 6
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_41>
_8 = *oload_syms_26(D);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_41>
_8 = *oload_syms_26(D);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
_8 = *oload_syms_26(D);
./benchmarks/binutils/double_free_5/binutils_df_5.c:73:18: warning: use location
   73 |   old_cleanups = make_cleanup (free, *oload_syms);                      /* double-free */
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
make_cleanup (free, _8);
./benchmarks/binutils/double_free_5/binutils_df_5.c:73:18: warning: use location
   73 |   old_cleanups = make_cleanup (free, *oload_syms);                      /* double-free */
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_syms_26(D) = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:57:15: warning: use location
   57 |   *oload_syms = NULL;
      |               ^
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
  103 |       *oload_champ_bv = new_oload_champ_bv;
      |                       ^
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
*oload_champ_bv_28(D) = _13;
./benchmarks/binutils/double_free_5/binutils_df_5.c:88:41: warning: use location
   88 |                         *oload_champ_bv = new_oload_champ_bv;
      |                                         ^
*oload_champ_bv_28(D) = _13;
./benchmarks/binutils/double_free_5/binutils_df_5.c:88:41: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_48>
_9 = *oload_champ_bv_28(D);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_48>
_9 = *oload_champ_bv_28(D);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
_9 = *oload_champ_bv_28(D);
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
old_cleanups_35 = make_cleanup (free, _9);
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: use location
   89 |                         do_cleanups (old_cleanups);
      |                         ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_champ_bv_28(D) = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:58:19: warning: use location
   58 |   *oload_champ_bv = NULL;
      |                   ^
_5 = qualified_name_24(D) + _4;
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:62: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                                              ^
_6 = *_5;
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:62: warning: use location
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
if (_6 == 58)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 3
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 4
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85dd11cf0
    type <pointer_type 0x7fa85d832d20
        type <integer_type 0x7fa85d832c78 char readonly public QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85dd1e3f0 precision:8 min <integer_cst 0x7fa85d829738 -128> max <integer_cst 0x7fa85d829720 127> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832d20>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e180 qualified_name>
    def_stmt GIMPLE_NOP
    version:24
    ptr-info 0x7fa85d846768>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_54 = VDEF <.MEM_53>
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_55 = VDEF <.MEM_54>
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
  103 |       *oload_champ_bv = new_oload_champ_bv;
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_55 = VDEF <.MEM_54>
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
  103 |       *oload_champ_bv = new_oload_champ_bv;
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa85dd11cf0
    type <pointer_type 0x7fa85d832d20
        type <integer_type 0x7fa85d832c78 char readonly public QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85dd1e3f0 precision:8 min <integer_cst 0x7fa85d829738 -128> max <integer_cst 0x7fa85d829720 127> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832d20>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e180 qualified_name>
    def_stmt GIMPLE_NOP
    version:24
    ptr-info 0x7fa85d846768>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_3 = strlen (qualified_name_24(D));
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:24: warning: use location
   54 |         int name_len = strlen(qualified_name);
      |                        ^
this stmt is child function---strlen-----

 ================== trace ================== 
trace fucntion name:strlen 

 ================== trace ================== 
trace fucntion free:0 
name_len_25 = (int) _3;
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:13: warning: use location
   54 |         int name_len = strlen(qualified_name);
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_47 = VDEF <.MEM_46>
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
bb index := 4
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_47 = VDEF <.MEM_46>
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
bb index := 4
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:21: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                     ^
this stmt is child function---find_oload_champ_namespace_loop-----

 ================== trace ================== 
trace fucntion name:find_oload_champ_namespace_loop 
[40;44m =======trace_function_path find_oload_champ_namespace_loop  function_call count: 9 level :0========  [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
# .MEM_58 = VDEF <.MEM_57>
free (_14);
[40;36m ======= node_fun:find_oload_champ_namespace_loop========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_cleanups========= [0m
[40;46m =======add node_fun stack:discard_cleanups========= [0m
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :2========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :2========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ========= [0m
[40;46m =======add node_fun stack:find_oload_champ========= [0m
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :1========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :3========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ_namespace_loop========= [0m
[40;46m =======add node_fun stack:find_oload_champ_namespace_loop========= [0m
[40;44m =======trace_function_path find_oload_champ_namespace_loop  function_call count: 9 level :1========  [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
# .MEM_58 = VDEF <.MEM_57>
free (_14);
[40;36m ======= node_fun:find_oload_champ_namespace_loop========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_cleanups========= [0m
[40;46m =======add node_fun stack:discard_cleanups========= [0m
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :3========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:do_cleanups========= [0m
[40;46m =======add node_fun stack:do_cleanups========= [0m
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :3========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ========= [0m
[40;46m =======add node_fun stack:find_oload_champ========= [0m
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:make_cleanup========= [0m
[40;46m =======add node_fun stack:make_cleanup========= [0m
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :2========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :3========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :4========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:find_oload_champ_namespace_loop========= [0m
[40;41m =======recursive_fun2:find_oload_champ_namespace_loop========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m
[40;42m =======pre add _ fucntion:strlen========= [0m
[40;46m =======add node_fun stack:strlen========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 != 0)
bb index := 4
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (_7 != 0)
bb index := 4
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 4 ,possiable got to succ := 4

======================================================================
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
if (_7 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 4
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 12
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
   94 |                         free (new_oload_syms);
      |                         ^
this stmt is child function---free-----

 ================== find ================== 
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
[40;32m    HAS FREE STMT count:1 name:free [0m

 ================== find ================== 
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:86:37: warning: use location
   86 |                         *oload_syms = new_oload_syms;
      |                                     ^
new_oload_champ_40 = find_oload_champ (new_oload_syms_37, &new_oload_champ_bv);
./benchmarks/binutils/double_free_5/binutils_df_5.c:82:21: warning: use location
   82 |   new_oload_champ = find_oload_champ (new_oload_syms, &new_oload_champ_bv);
      |                     ^
this stmt is child function---find_oload_champ-----

 ================== trace ================== 
trace fucntion name:find_oload_champ 
[40;44m =======trace_function_path find_oload_champ  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:find_oload_champ========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:87:38: warning: use location
   87 |                         *oload_champ = new_oload_champ;
      |                                      ^
_10 = new_oload_champ_40 != -1;
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:29: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |                             ^
_12 = _10 | _11;
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:35: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |                                   ^
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
if (_12 != 0)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 7
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 8
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 9
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 
*new_oload_syms_37 = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:80:27: warning: use location
   80 |         new_oload_syms[0] = NULL;
      |                           ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (new_oload_syms_37 == 0B)
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
if (new_oload_syms_37 == 0B)
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
if (new_oload_syms_37 == 0B)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 5
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 6
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 7
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_41>
_8 = *oload_syms_26(D);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_41>
_8 = *oload_syms_26(D);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
_8 = *oload_syms_26(D);
./benchmarks/binutils/double_free_5/binutils_df_5.c:73:18: warning: use location
   73 |   old_cleanups = make_cleanup (free, *oload_syms);                      /* double-free */
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
make_cleanup (free, _8);
./benchmarks/binutils/double_free_5/binutils_df_5.c:73:18: warning: use location
   73 |   old_cleanups = make_cleanup (free, *oload_syms);                      /* double-free */
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_syms_26(D) = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:57:15: warning: use location
   57 |   *oload_syms = NULL;
      |               ^
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
  103 |       *oload_champ_bv = new_oload_champ_bv;
      |                       ^
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
*oload_champ_bv_28(D) = _13;
./benchmarks/binutils/double_free_5/binutils_df_5.c:88:41: warning: use location
   88 |                         *oload_champ_bv = new_oload_champ_bv;
      |                                         ^
*oload_champ_bv_28(D) = _13;
./benchmarks/binutils/double_free_5/binutils_df_5.c:88:41: warning: use location

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_48>
_9 = *oload_champ_bv_28(D);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# VUSE <.MEM_48>
_9 = *oload_champ_bv_28(D);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
_9 = *oload_champ_bv_28(D);
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
old_cleanups_35 = make_cleanup (free, _9);
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:1 
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: use location
   89 |                         do_cleanups (old_cleanups);
      |                         ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with qualified_name ========= [0m
[40;36m ======= relate stmt argument:qualified_name ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:1 
*oload_champ_bv_28(D) = 0B;
./benchmarks/binutils/double_free_5/binutils_df_5.c:58:19: warning: use location
   58 |   *oload_champ_bv = NULL;
      |                   ^
_5 = qualified_name_24(D) + _4;
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:62: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                                              ^
_6 = *_5;
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:62: warning: use location
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
if (_6 == 58)

 ================== find cond branch ================= 
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
Cond in fucntion find_oload_champ_namespace_loop basic block 3
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 4
 ================== possible direct basic block ================= 
from find_oload_champ_namespace_loop basic block 5
 ================== warring ================== 
[40;35m    need check this branch possible have return or exit stmt [0m

 ================== warring ================== 

 ================== find cond branch ================= 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85dd11cf0
    type <pointer_type 0x7fa85d832d20
        type <integer_type 0x7fa85d832c78 char readonly public QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85dd1e3f0 precision:8 min <integer_cst 0x7fa85d829738 -128> max <integer_cst 0x7fa85d829720 127> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832d20>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e180 qualified_name>
    def_stmt GIMPLE_NOP
    version:24
    ptr-info 0x7fa85d846768>

 ================== Start Use after free Check ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_53 = VDEF <.MEM_52>
*oload_syms_26(D) = new_oload_syms_37;
./benchmarks/binutils/double_free_5/binutils_df_5.c:101:19: warning: use location
  101 |       *oload_syms = new_oload_syms;
      |                   ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_54 = VDEF <.MEM_53>
*oload_champ_31(D) = new_oload_champ_40;
./benchmarks/binutils/double_free_5/binutils_df_5.c:102:20: warning: use location
  102 |       *oload_champ = new_oload_champ;
      |                    ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_55 = VDEF <.MEM_54>
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
  103 |       *oload_champ_bv = new_oload_champ_bv;
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_55 = VDEF <.MEM_54>
*oload_champ_bv_28(D) = _15;
./benchmarks/binutils/double_free_5/binutils_df_5.c:103:23: warning: use location
  103 |       *oload_champ_bv = new_oload_champ_bv;
      |                       ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:1 [0m

======================================================================

======================================================================
[40;31m 	this stmt need double check [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa85df05d40
    type <pointer_type 0x7fa85d8327e0
        type <function_type 0x7fa85d832738 type <void_type 0x7fa85dd1ef18 void>
            QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7fa85d8345f0 value <pointer_type 0x7fa85dd25000>
                chain <tree_list 0x7fa85dd1db18 value <void_type 0x7fa85dd1ef18 void>>> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d8327e0>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <function_decl 0x7fa85d83a300 free type <function_type 0x7fa85d832738>
        addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
        align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
        attributes <tree_list 0x7fa85d834938
            purpose <identifier_node 0x7fa85dd43e10 nothrow>
            chain <tree_list 0x7fa85d834910
                purpose <identifier_node 0x7fa85dd43e38 leaf>>>>
    ./benchmarks/binutils/double_free_5/binutils_df_5.c:73:32 start: ./benchmarks/binutils/double_free_5/binutils_df_5.c:73:32 finish: ./benchmarks/binutils/double_free_5/binutils_df_5.c:73:32>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa85df05d80
    type <pointer_type 0x7fa85d8327e0
        type <function_type 0x7fa85d832738 type <void_type 0x7fa85dd1ef18 void>
            QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            arg-types <tree_list 0x7fa85d8345f0 value <pointer_type 0x7fa85dd25000>
                chain <tree_list 0x7fa85dd1db18 value <void_type 0x7fa85dd1ef18 void>>> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d8327e0>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <function_decl 0x7fa85d83a300 free type <function_type 0x7fa85d832738>
        addressable nothrow public external in_system_header built-in QI /usr/include/stdlib.h:565:13
        align:8 warn_if_not_align:0 built-in: BUILT_IN_NORMAL:BUILT_IN_FREE context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
        attributes <tree_list 0x7fa85d834938
            purpose <identifier_node 0x7fa85dd43e10 nothrow>
            chain <tree_list 0x7fa85d834910
                purpose <identifier_node 0x7fa85dd43e38 leaf>>>>
    ./benchmarks/binutils/double_free_5/binutils_df_5.c:74:32 start: ./benchmarks/binutils/double_free_5/binutils_df_5.c:74:32 finish: ./benchmarks/binutils/double_free_5/binutils_df_5.c:74:32>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa85d8298e8 type <integer_type 0x7fa85dd1e7e0 long unsigned int> constant 800>

dot graph START

======================================================================
 <ssa_name 0x7fa85dd11ea0
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d8443f0 old_cleanups>
    def_stmt old_cleanups_35 = make_cleanup (free, _9);
    version:35
    ptr-info 0x7fa85d8467c8>
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);

 ================== trace ptable================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :888========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :889========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :890========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---make_cleanup-----
this other function ------make_cleanup-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
make_cleanup (free, _8);
./benchmarks/binutils/double_free_5/binutils_df_5.c:73:18: warning: use location
   73 |   old_cleanups = make_cleanup (free, *oload_syms);                      /* double-free */
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
old_cleanups_35 = make_cleanup (free, _9);
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
old_cleanups_35 = make_cleanup (free, _9);
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
./benchmarks/binutils/double_free_5/../include/common.h:91:7: warning: use location
   91 |       free (ptr);
      |       ^
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
./benchmarks/binutils/double_free_5/../include/common.h:91:7: warning: use location
   91 |       free (ptr);
      |       ^
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:2 
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: use location
   89 |                         do_cleanups (old_cleanups);
      |                         ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:3 
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: use location
   89 |                         do_cleanups (old_cleanups);
      |                         ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:4 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85dd11ea0
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d8443f0 old_cleanups>
    def_stmt old_cleanups_35 = make_cleanup (free, _9);
    version:35
    ptr-info 0x7fa85d8467c8>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
   94 |                         free (new_oload_syms);
      |                         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_14);
./benchmarks/binutils/double_free_5/binutils_df_5.c:95:25: warning: use location
   95 |                         free (new_oload_champ_bv);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_14);
./benchmarks/binutils/double_free_5/binutils_df_5.c:95:25: warning: Use after free error!: free location 
   95 |                         free (new_oload_champ_bv);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_14);
./benchmarks/binutils/double_free_5/binutils_df_5.c:95:25: warning: Use after free error!: free location 
   95 |                         free (new_oload_champ_bv);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:4 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:4 [0m

======================================================================

dot graph START

======================================================================
 <ssa_name 0x7fa85dd11ea0
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d8443f0 old_cleanups>
    def_stmt old_cleanups_35 = make_cleanup (free, _9);
    version:35
    ptr-info 0x7fa85d8467c8>
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);

 ================== trace ptable================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :888========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :889========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :890========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---make_cleanup-----
this other function ------make_cleanup-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_48 = VDEF <.MEM_41>
make_cleanup (free, _8);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
make_cleanup (free, _8);
./benchmarks/binutils/double_free_5/binutils_df_5.c:73:18: warning: use location
   73 |   old_cleanups = make_cleanup (free, *oload_syms);                      /* double-free */
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
old_cleanups_35 = make_cleanup (free, _9);
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_49 = VDEF <.MEM_48>
old_cleanups_35 = make_cleanup (free, _9);
bb index := 5
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 5 ,possiable got to succ := 4

======================================================================
old_cleanups_35 = make_cleanup (free, _9);
./benchmarks/binutils/double_free_5/binutils_df_5.c:74:18: warning: use location
   74 |   old_cleanups = make_cleanup (free, *oload_champ_bv);
      |                  ^
this stmt is child function---make_cleanup-----

 ================== trace ================== 
trace fucntion name:make_cleanup 
[40;44m =======trace_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:make_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;46m =======add node_fun stack:make_my_cleanup========= [0m
[40;44m =======trace_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;36m ======= node_fun:make_my_cleanup========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;46m =======add node_fun stack:make_my_cleanup2========= [0m
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 Expand conflict 
 The same function may have multiple branches :discard_cleanups
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^
=======================Path Constaint===========================

=succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 0
=succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
=succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
=succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
=succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
=succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================

# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^
this stmt is child function---discard_cleanups-----

 ================== trace ================== 
trace fucntion name:discard_cleanups 
[40;44m =======trace_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:discard_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;46m =======add node_fun stack:discard_my_cleanups========= [0m
[40;44m =======trace_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
[40;31m  find free stmt free same pointer [0m
# .MEM_18 = VDEF <.MEM_12>
free (ptr_10);
./benchmarks/binutils/double_free_5/../include/common.h:91:7: warning: use location
   91 |       free (ptr);
      |       ^
[40;36m ======= node_fun:discard_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m

 ================== trace ================== 
trace fucntion free:1 
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: use location
   89 |                         do_cleanups (old_cleanups);
      |                         ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:2 
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: use location
   89 |                         do_cleanups (old_cleanups);
      |                         ^
this stmt is child function---do_cleanups-----

 ================== trace ================== 
trace fucntion name:do_cleanups 
[40;44m =======trace_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;36m ======= node_fun:do_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;46m =======add node_fun stack:do_my_cleanups========= [0m
[40;44m =======trace_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
[40;31m  find free stmt free same pointer [0m
# .MEM_22 = VDEF <.MEM_14>
free (ptr_12);
./benchmarks/binutils/double_free_5/../include/common.h:112:25: warning: use location
  112 |                         free (ptr);
      |                         ^
[40;36m ======= node_fun:do_my_cleanups========= [0m
[40;36m ======= find relate stmt with old_cleanups ========= [0m
[40;36m ======= relate stmt argument:old_cleanups ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:free========= [0m
[40;46m =======add node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;46m =======add node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;46m =======add node_fun stack:__builtin_puts========= [0m

 ================== trace ================== 
trace fucntion free:3 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85dd11ea0
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d8443f0 old_cleanups>
    def_stmt old_cleanups_35 = make_cleanup (free, _9);
    version:35
    ptr-info 0x7fa85d8467c8>
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: use location
   94 |                         free (new_oload_syms);
      |                         ^
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_14);
./benchmarks/binutils/double_free_5/binutils_df_5.c:95:25: warning: use location
   95 |                         free (new_oload_champ_bv);
      |                         ^

 ================== Start Use after free Check ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_14);
./benchmarks/binutils/double_free_5/binutils_df_5.c:95:25: warning: Use after free error!: free location 
   95 |                         free (new_oload_champ_bv);
      |                         ^
# .MEM_56 = VDEF <.MEM_55>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:104:25: warning: use location
  104 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
# .MEM_63 = VDEF <.MEM_62>
do_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:89:25: warning: Use after free error!: free location 
   89 |                         do_cleanups (old_cleanups);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 1
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_57 = VDEF <.MEM_52>
free (new_oload_syms_37);
./benchmarks/binutils/double_free_5/binutils_df_5.c:94:25: warning: Use after free error!: free location 
   94 |                         free (new_oload_syms);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

============================================================
[40;35m <Looserules> find free stmt free same pointer [0m
# .MEM_58 = VDEF <.MEM_57>
free (_14);
./benchmarks/binutils/double_free_5/binutils_df_5.c:95:25: warning: Use after free error!: free location 
   95 |                         free (new_oload_champ_bv);
      |                         ^
# .MEM_59 = VDEF <.MEM_58>
discard_cleanups (old_cleanups_35);
./benchmarks/binutils/double_free_5/binutils_df_5.c:96:25: warning: use location
   96 |                         discard_cleanups (old_cleanups);
      |                         ^

 ================== warring ================== 
[40;35m    Use after free error! [0m
=======================Path Constaint===========================

succs:= 9
if (searched_deeper_16 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:92:17: warning: use location
   92 |         else if (searched_deeper)
      |                 ^
	relate logic:= 1
succs:= 7
if (_12 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:84:12: warning: use location
   84 |         if (new_oload_champ != -1 || call_num == 1)
      |            ^
	relate logic:= 0
succs:= 5
if (new_oload_syms_37 == 0B)
./benchmarks/binutils/double_free_5/binutils_df_5.c:78:12: warning: use location
   78 |         if (!new_oload_syms)
      |            ^
	relate logic:= 0
succs:= 4
if (_7 != 0)
./benchmarks/binutils/double_free_5/binutils_df_5.c:65:20: warning: use location
   65 |                 if (find_oload_champ_namespace_loop (qualified_name, next_namespace_len,
      |                    ^
	relate logic:= 1
succs:= 3
if (_6 == 58)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:45: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |                                             ^
	relate logic:= 1
succs:= 2
if (namespace_len_20(D) < name_len_25)
./benchmarks/binutils/double_free_5/binutils_df_5.c:60:12: warning: use location
   60 |         if ((next_namespace_len < name_len) && qualified_name[next_namespace_len] == ':')
      |            ^
	relate logic:= 1
=======================Path Constaint===========================


 ================== warring ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:2 [0m
[40;31m  	free count:3 [0m
[40;31m  	possible double free [Looserules]:2 [0m
[40;31m  	possible double free [rigorous]:3 [0m

======================================================================

======================================================================
[40;31m  	possible double free [rigorous]:3 [0m

======================================================================
[40;33m =======POP node_fun stack:find_oload_champ_namespace_loop========= [0m
[40;44m =======node_fun:find_oload_champ========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path find_oload_champ  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre_check_funciton:find_oload_champ========= [0m
[40;42m =======start_check_funciton:find_oload_champ========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85d850750
    type <pointer_type 0x7fa85d83bb28
        type <record_type 0x7fa85d83ba80 badness_vector TI
            size <integer_cst 0x7fa85dd09c00 constant 128>
            unit-size <integer_cst 0x7fa85dd09c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d83ba80 fields <field_decl 0x7fa85d835428 length> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d83bb28>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d83bbd0>>
    var <var_decl 0x7fa85d844cf0 bv>
    def_stmt bv_6 = malloc (16);
    version:6
    ptr-info 0x7fa85d846810>
# .MEM_10 = VDEF <.MEM_9>
bv_6 = malloc (16);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================
*oload_champ_bv_7(D) = bv_6;
In function ‘find_oload_champ’:
./benchmarks/binutils/double_free_5/binutils_df_5.c:26:25: warning: use location
   26 |         *oload_champ_bv = bv;
      |                         ^
*oload_champ_bv_7(D) = bv_6;
./benchmarks/binutils/double_free_5/binutils_df_5.c:26:25: warning: use location
bv_6 = malloc (16);
./benchmarks/binutils/double_free_5/binutils_df_5.c:25:14: warning: use location
   25 |         bv = malloc(sizeof(struct badness_vector));
      |              ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85d850750
    type <pointer_type 0x7fa85d83bb28
        type <record_type 0x7fa85d83ba80 badness_vector TI
            size <integer_cst 0x7fa85dd09c00 constant 128>
            unit-size <integer_cst 0x7fa85dd09c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d83ba80 fields <field_decl 0x7fa85d835428 length> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d83bb28>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d83bbd0>>
    var <var_decl 0x7fa85d844cf0 bv>
    def_stmt bv_6 = malloc (16);
    version:6
    ptr-info 0x7fa85d846810>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa85df05f40
    type <pointer_type 0x7fa85d83b690
        type <array_type 0x7fa85d83b5e8 type <integer_type 0x7fa85d832bd0 char>
            SI
            size <integer_cst 0x7fa85dd09df8 constant 32>
            unit-size <integer_cst 0x7fa85dd09e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa85d83b540>
            pointer_to_this <pointer_type 0x7fa85d83b690>>
        unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa85df05f20 type <array_type 0x7fa85d83b5e8>
        readonly constant static "%d\012\000">
    ./benchmarks/binutils/double_free_5/binutils_df_5.c:21:2 start: ./benchmarks/binutils/double_free_5/binutils_df_5.c:21:2 finish: ./benchmarks/binutils/double_free_5/binutils_df_5.c:21:2>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa85d8465a0 type <integer_type 0x7fa85dd1e7e0 long unsigned int> constant 16>
[40;33m =======POP node_fun stack:find_oload_champ========= [0m
[40;44m =======node_fun:make_cleanup========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_cleanup  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :2========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85d850c60
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d853120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7fa85d846900>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
In function ‘make_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85d850c60
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d853120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7fa85d846900>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa85d846648 type <integer_type 0x7fa85dd1e7e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85d850a68
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e600 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa85d846888>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_5/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_5/../include/common.h:145:10: warning: use location
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85d850a68
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e600 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa85d846888>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;42m =======pre_check_funciton:make_cleanup========= [0m
[40;42m =======start_check_funciton:make_cleanup========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85df059c0
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7fa85e5b1bd0 cleanup_chain type <pointer_type 0x7fa85d832930>
        addressable static unsigned DI ./benchmarks/binutils/double_free_5/../include/common.h:49:24 size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c> initial <error_mark 0x7fa85dd09ba0>>
    ./benchmarks/binutils/double_free_5/../include/common.h:151:10 start: ./benchmarks/binutils/double_free_5/../include/common.h:151:10 finish: ./benchmarks/binutils/double_free_5/../include/common.h:151:10>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:make_cleanup========= [0m
[40;44m =======node_fun:make_my_cleanup========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_my_cleanup  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:make_my_cleanup2========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85d850c60
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d853120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7fa85d846900>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
In function ‘make_my_cleanup’:
./benchmarks/binutils/double_free_5/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85d850c60
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d853120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7fa85d846900>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa85d846648 type <integer_type 0x7fa85dd1e7e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup========= [0m
[40;42m =======start_check_funciton:make_my_cleanup========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85d850a68
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e600 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa85d846888>
GIMPLE_NOP

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------
 
 Start check Pointer Collect  

======================================================================
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_5/../include/common.h:145:10: warning: use location
  145 |   return make_my_cleanup2 (pmy_chain, function, arg, NULL);
      |          ^
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
./benchmarks/binutils/double_free_5/../include/common.h:145:10: warning: use location
this stmt is child function---make_my_cleanup2-----

 ================== trace ================== 
trace fucntion name:make_my_cleanup2 
[40;44m =======trace_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;36m ======= node_fun:make_my_cleanup2========= [0m
[40;36m ======= find relate stmt with pmy_chain ========= [0m
[40;36m ======= relate stmt argument:pmy_chain ========= [0m
fucntion collect path finsh
[40;42m =======pre add _ fucntion:exit========= [0m
[40;46m =======add node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;46m =======add node_fun stack:malloc========= [0m

 ================== trace ================== 
trace fucntion free:0 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85d850a68
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    var <parm_decl 0x7fa85d83e600 pmy_chain>
    def_stmt GIMPLE_NOP
    version:2
    ptr-info 0x7fa85d846888>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================
[40;33m =======POP node_fun stack:make_my_cleanup========= [0m
[40;44m =======node_fun:make_my_cleanup2========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path make_my_cleanup2  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:exit========= [0m
[40;33m =======POP node_fun stack:exit========= [0m
[40;42m =======pre add _ fucntion:malloc========= [0m
[40;33m =======POP node_fun stack:malloc========= [0m
[40;42m =======pre_check_funciton:make_my_cleanup2========= [0m
[40;42m =======start_check_funciton:make_my_cleanup2========= [0m

dot graph START

======================================================================
 <ssa_name 0x7fa85d850c60
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d853120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7fa85d846900>
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);

 ================== trace ptable================== 
trace fucntion name:malloc 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr---malloc-----
this Reserved word function ------malloc-----
 
 Start check Pointer Collect  

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_65>
return _17;
In function ‘make_my_cleanup2’:
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_19 = VDEF <.MEM_18>
*pmy_chain_5(D) = new_4;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
*pmy_chain_5(D) = new_4;
./benchmarks/binutils/double_free_5/../include/common.h:133:14: warning: use location
  133 |   *pmy_chain = new;
      |              ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_18 = VDEF <.MEM_17>
new_4->arg = arg_12(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->arg = arg_12(D);
./benchmarks/binutils/double_free_5/../include/common.h:132:12: warning: use location
  132 |   new->arg = arg;
      |            ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_17 = VDEF <.MEM_16>
new_4->free_arg = free_arg_10(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->free_arg = free_arg_10(D);
./benchmarks/binutils/double_free_5/../include/common.h:131:17: warning: use location
  131 |   new->free_arg = free_arg;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
./benchmarks/binutils/double_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_16 = VDEF <.MEM_15>
new_4->function = function_8(D);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->function = function_8(D);
./benchmarks/binutils/double_free_5/../include/common.h:130:17: warning: use location
  130 |   new->function = function;
      |                 ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
./benchmarks/binutils/double_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_15 = VDEF <.MEM_14>
new_4->next = _1;
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4->next = _1;
./benchmarks/binutils/double_free_5/../include/common.h:129:13: warning: use location
  129 |   new->next = *pmy_chain;
      |             ^

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
beacuse in succ := 12 have return or exit
# VUSE <.MEM_65>
return _17;
lto1: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 12

======================================================================

======================================================================
[40;31m    branch possiable have return or exit  [0m
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
bb index := 2
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
  138 |   return old_chain;
      |          ^
beacuse in succ := 4 have return or exit
# VUSE <.MEM_19>
return old_chain_6;
./benchmarks/binutils/double_free_5/../include/common.h:138:10: warning: use location
gimple stmt in succ := 2 ,possiable got to succ := 4

======================================================================
new_4 = malloc (32);
./benchmarks/binutils/double_free_5/../include/common.h:126:26: warning: use location
  126 |     = (struct cleanup *) malloc (sizeof (struct cleanup));
      |                          ^
this stmt is child function---malloc-----

 ================== trace ================== 

 ================== Start Looserules free Check ================== 

 ================== warring ================== 
[40;35m   this module possiable false positives [0m

 ================== warring ================== 
 <ssa_name 0x7fa85d850c60
    type <pointer_type 0x7fa85d832930
        type <record_type 0x7fa85d832888 cleanup BLK
            size <integer_cst 0x7fa85dd09f18 constant 256>
            unit-size <integer_cst 0x7fa85dd27018 constant 32>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85d832888 fields <field_decl 0x7fa85d8352f8 next> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832930>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fa85d839e70>>
    var <var_decl 0x7fa85d853120 new>
    def_stmt new_4 = malloc (32);
    version:4
    ptr-info 0x7fa85d846900>

 ================== Start Use after free Check ================== 

dot graph END

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m    no free stmt possible memory leak [0m

======================================================================

dot graph START

======================================================================

 ================== collect possiable invalid ================== 
 <integer_cst 0x7fa85d846648 type <integer_type 0x7fa85dd1e7e0 long unsigned int> constant 32>
[40;33m =======POP node_fun stack:make_my_cleanup2========= [0m
[40;44m =======node_fun:do_cleanups========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path do_cleanups  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:do_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d852200
    type <pointer_type 0x7fa85d832d20
        type <integer_type 0x7fa85d832c78 char readonly public QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85dd1e3f0 precision:8 min <integer_cst 0x7fa85d829738 -128> max <integer_cst 0x7fa85d829720 127> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832d20>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7fa85dd13118 type <integer_type 0x7fa85d832c78 char>
       
        arg:0 <string_cst 0x7fa85d8553c0 type <array_type 0x7fa85d83b498>
            readonly constant static "cleanup!!!!! =========\000">
        arg:1 <integer_cst 0x7fa85dd09f48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa85d852260
    type <pointer_type 0x7fa85d83b690
        type <array_type 0x7fa85d83b5e8 type <integer_type 0x7fa85d832bd0 char>
            SI
            size <integer_cst 0x7fa85dd09df8 constant 32>
            unit-size <integer_cst 0x7fa85dd09e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa85d83b540>
            pointer_to_this <pointer_type 0x7fa85d83b690>>
        unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa85d852240 type <array_type 0x7fa85d83b5e8>
        readonly constant static "%x\012\000">
    ./benchmarks/binutils/double_free_5/../include/common.h:108:11 start: ./benchmarks/binutils/double_free_5/../include/common.h:108:11 finish: ./benchmarks/binutils/double_free_5/../include/common.h:108:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
[40;42m =======pre_check_funciton:do_cleanups========= [0m
[40;42m =======start_check_funciton:do_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d852160
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7fa85e5b1bd0 cleanup_chain type <pointer_type 0x7fa85d832930>
        addressable static unsigned DI ./benchmarks/binutils/double_free_5/../include/common.h:49:24 size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c> initial <error_mark 0x7fa85dd09ba0>>
    ./benchmarks/binutils/double_free_5/../include/common.h:118:3 start: ./benchmarks/binutils/double_free_5/../include/common.h:118:3 finish: ./benchmarks/binutils/double_free_5/../include/common.h:118:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_cleanups========= [0m
[40;44m =======node_fun:do_my_cleanups========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path do_my_cleanups  function_call count: 3 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:__builtin_puts========= [0m
[40;33m =======POP node_fun stack:__builtin_puts========= [0m
[40;42m =======pre_check_funciton:do_my_cleanups========= [0m
[40;42m =======start_check_funciton:do_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d852200
    type <pointer_type 0x7fa85d832d20
        type <integer_type 0x7fa85d832c78 char readonly public QI
            size <integer_cst 0x7fa85dd09ca8 constant 8>
            unit-size <integer_cst 0x7fa85dd09cc0 constant 1>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fa85dd1e3f0 precision:8 min <integer_cst 0x7fa85d829738 -128> max <integer_cst 0x7fa85d829720 127> context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fa85d832d20>>
        public unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <array_ref 0x7fa85dd13118 type <integer_type 0x7fa85d832c78 char>
       
        arg:0 <string_cst 0x7fa85d8553c0 type <array_type 0x7fa85d83b498>
            readonly constant static "cleanup!!!!! =========\000">
        arg:1 <integer_cst 0x7fa85dd09f48 constant 0>>>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================

dot graph START

======================================================================
 <addr_expr 0x7fa85d852260
    type <pointer_type 0x7fa85d83b690
        type <array_type 0x7fa85d83b5e8 type <integer_type 0x7fa85d832bd0 char>
            SI
            size <integer_cst 0x7fa85dd09df8 constant 32>
            unit-size <integer_cst 0x7fa85dd09e10 constant 4>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa85d83b540>
            pointer_to_this <pointer_type 0x7fa85d83b690>>
        unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa85d852240 type <array_type 0x7fa85d83b5e8>
        readonly constant static "%x\012\000">
    ./benchmarks/binutils/double_free_5/../include/common.h:108:11 start: ./benchmarks/binutils/double_free_5/../include/common.h:108:11 finish: ./benchmarks/binutils/double_free_5/../include/common.h:108:11>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:do_my_cleanups========= [0m
[40;44m =======node_fun:discard_my_cleanups========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path discard_my_cleanups  function_call count: 2 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:discard_my_cleanups========= [0m
[40;42m =======start_check_funciton:discard_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d852340
    type <pointer_type 0x7fa85d83b150
        type <array_type 0x7fa85d83b0a8 type <integer_type 0x7fa85d832bd0 char>
            BLK
            size <integer_cst 0x7fa85d829810 constant 104>
            unit-size <integer_cst 0x7fa85d8297f8 constant 13>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa85d83b000>
            pointer_to_this <pointer_type 0x7fa85d83b150>>
        unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa85d85c190 type <array_type 0x7fa85d83b0a8>
        readonly constant static "freearg: %x\012\000">
    ./benchmarks/binutils/double_free_5/../include/common.h:94:10 start: ./benchmarks/binutils/double_free_5/../include/common.h:94:10 finish: ./benchmarks/binutils/double_free_5/../include/common.h:94:10>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:discard_my_cleanups========= [0m
[40;44m =======node_fun:discard_cleanups========= [0m
[40;44m fucntion collect path  [0m
[40;44m =======print_function_path discard_cleanups  function_call count: 1 level :0========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:discard_my_cleanups========= [0m
[40;44m =======print_function_type 0  ========  [0m
[40;44m =======print_function_path discard_my_cleanups  function_call count: 2 level :1========  [0m
[40;44m =======print_function_type 0  ========  [0m
[40;42m =======pre add _ fucntion:printf========= [0m
[40;33m =======POP node_fun stack:printf========= [0m
[40;42m =======pre add _ fucntion:free========= [0m
[40;33m =======POP node_fun stack:free========= [0m
[40;42m =======pre_check_funciton:discard_my_cleanups========= [0m
[40;42m =======start_check_funciton:discard_my_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d852340
    type <pointer_type 0x7fa85d83b150
        type <array_type 0x7fa85d83b0a8 type <integer_type 0x7fa85d832bd0 char>
            BLK
            size <integer_cst 0x7fa85d829810 constant 104>
            unit-size <integer_cst 0x7fa85d8297f8 constant 13>
            align:8 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality domain <integer_type 0x7fa85d83b000>
            pointer_to_this <pointer_type 0x7fa85d83b150>>
        unsigned DI
        size <integer_cst 0x7fa85dd09bb8 constant 64>
        unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    readonly constant
    arg:0 <string_cst 0x7fa85d85c190 type <array_type 0x7fa85d83b0a8>
        readonly constant static "freearg: %x\012\000">
    ./benchmarks/binutils/double_free_5/../include/common.h:94:10 start: ./benchmarks/binutils/double_free_5/../include/common.h:94:10 finish: ./benchmarks/binutils/double_free_5/../include/common.h:94:10>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:discard_my_cleanups========= [0m
[40;42m =======pre_check_funciton:discard_cleanups========= [0m
[40;42m =======start_check_funciton:discard_cleanups========= [0m

dot graph START

======================================================================
 <addr_expr 0x7fa85d8523e0
    type <pointer_type 0x7fa85d839e70
        type <pointer_type 0x7fa85d832930 type <record_type 0x7fa85d832888 cleanup>
            public unsigned DI
            size <integer_cst 0x7fa85dd09bb8 constant 64>
            unit-size <integer_cst 0x7fa85dd09bd0 constant 8>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
            pointer_to_this <pointer_type 0x7fa85d839e70>>
        public unsigned DI size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality>
    constant
    arg:0 <var_decl 0x7fa85e5b1bd0 cleanup_chain type <pointer_type 0x7fa85d832930>
        addressable static unsigned DI ./benchmarks/binutils/double_free_5/../include/common.h:49:24 size <integer_cst 0x7fa85dd09bb8 64> unit-size <integer_cst 0x7fa85dd09bd0 8>
        align:64 warn_if_not_align:0 context <translation_unit_decl 0x7fa85dd14168 ./benchmarks/binutils/double_free_5/binutils_df_5.c> initial <error_mark 0x7fa85dd09ba0>>
    ./benchmarks/binutils/double_free_5/../include/common.h:71:3 start: ./benchmarks/binutils/double_free_5/../include/common.h:71:3 finish: ./benchmarks/binutils/double_free_5/../include/common.h:71:3>

 ================== trace ptable================== 

 ================== trace ptable ================== 
GIMPLE CODE :addr_expr--------
this other function -----------

======================================================================
[40;35m  	Looserules free count:0 [0m
[40;31m  	free count:0 [0m

======================================================================

======================================================================
[40;31m 	Can't find this fucntion in Pointer table [0m
[40;31m 	Possiable no other stmt relate with this stmt [0m

======================================================================
[40;33m =======POP node_fun stack:discard_cleanups========= [0m
fucntion collect path finsh

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
find_oload_champ_namespace_loop ("A::B::C", 1, &symvec, &bvvec, &oload_champ);
do_cleanups (0B);
symvec ={v} {CLOBBER};
bvvec ={v} {CLOBBER};
oload_champ ={v} {CLOBBER};
return 0;

=======Mapping node_fun:find_oload_champ_namespace_loop=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = static_call_num;
_2 = _1 + 1;
static_call_num = _2;
call_num_23 = static_call_num;
_3 = strlen (qualified_name_24(D));
name_len_25 = (int) _3;
*oload_syms_26(D) = 0B;
*oload_champ_bv_28(D) = 0B;
if (namespace_len_20(D) < name_len_25)
  goto <bb 3>; [67.00%]
else
  goto <bb 5>; [33.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 719407025]:
_4 = (sizetype) namespace_len_20(D);
_5 = qualified_name_24(D) + _4;
_6 = *_5;
if (_6 == 58)
  goto <bb 4>; [20.24%]
else
  goto <bb 5>; [79.76%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 145607981]:
next_namespace_len_30 = namespace_len_20(D) + 3;
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
if (_7 != 0)
  goto <bb 12>; [34.00%]
else
  goto <bb 5>; [66.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 1024235111]:
# searched_deeper_16 = PHI <0(2), 0(3), 1(4)>
_8 = *oload_syms_26(D);
make_cleanup (free, _8);
_9 = *oload_champ_bv_28(D);
old_cleanups_35 = make_cleanup (free, _9);
new_oload_syms_37 = malloc (800);
if (new_oload_syms_37 == 0B)
  goto <bb 6>; [0.04%]
else
  goto <bb 7>; [99.96%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 409693]:
exit (1);

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 1023825418]:
*new_oload_syms_37 = 0B;
new_oload_champ_40 = find_oload_champ (new_oload_syms_37, &new_oload_champ_bv);
_10 = new_oload_champ_40 != -1;
_11 = call_num_23 == 1;
_12 = _10 | _11;
if (_12 != 0)
  goto <bb 8>; [20.24%]
else
  goto <bb 9>; [79.76%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 207222263]:
*oload_syms_26(D) = new_oload_syms_37;
*oload_champ_31(D) = new_oload_champ_40;
_13 = new_oload_champ_bv;
*oload_champ_bv_28(D) = _13;
do_cleanups (old_cleanups_35);
goto <bb 12>; [100.00%]

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 816603155]:
if (searched_deeper_16 != 0)
  goto <bb 10>; [50.00%]
else
  goto <bb 11>; [50.00%]

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 408301577]:
free (new_oload_syms_37);
_14 = new_oload_champ_bv;
free (_14);
discard_cleanups (old_cleanups_35);
goto <bb 12>; [100.00%]

=======is loop:0=========

 bb index 11 
<bb 11> [local count: 408301577]:
*oload_syms_26(D) = new_oload_syms_37;
*oload_champ_31(D) = new_oload_champ_40;
_15 = new_oload_champ_bv;
*oload_champ_bv_28(D) = _15;
discard_cleanups (old_cleanups_35);

=======is loop:0=========

 bb index 12 
<bb 12> [local count: 1073332133]:
# _17 = PHI <1(4), 1(8), 0(10), 0(11)>
new_oload_champ_bv ={v} {CLOBBER};
return _17;

=======Mapping node_fun:find_oload_champ=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = MEM[(int *)oload_syms_3(D)];
printf ("%d\n", _1);
bv_6 = malloc (16);
*oload_champ_bv_7(D) = bv_6;
return -1;

=======Mapping node_fun:make_cleanup=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
return _5;

=======Mapping node_fun:make_my_cleanup=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
return _6;

=======Mapping node_fun:make_my_cleanup2=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
new_4 = malloc (32);
old_chain_6 = *pmy_chain_5(D);
_1 = *pmy_chain_5(D);
new_4->next = _1;
new_4->function = function_8(D);
new_4->free_arg = free_arg_10(D);
new_4->arg = arg_12(D);
*pmy_chain_5(D) = new_4;
if (old_chain_6 == 0B)
  goto <bb 3>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 429496]:
exit (1);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073312329]:
return old_chain_6;

=======Mapping node_fun:do_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
do_my_cleanups (&cleanup_chain, old_chain_2(D));
return;

=======Mapping node_fun:do_my_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111598]:
goto <bb 6>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
_1 = ptr_12->next;
*pmy_chain_11(D) = _1;
_2 = ptr_12->function;
_3 = ptr_12->arg;
_2 (_3);
__builtin_puts (&"cleanup!!!!! ========="[0]);
_4 = ptr_12->arg;
printf ("%x\n", _4);
_5 = ptr_12->free_arg;
if (_5 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 5>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 668941161]:
_6 = ptr_12->free_arg;
_7 = ptr_12->arg;
_6 (_7);

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 955630225]:
free (ptr_12);

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 1073741824]:
ptr_12 = *pmy_chain_11(D);
if (ptr_12 != old_chain_13(D))
  goto <bb 3>; [89.00%]
else
  goto <bb 7>; [11.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 118111600]:
return;

=======Mapping node_fun:discard_my_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111598]:
goto <bb 6>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
_1 = ptr_10->next;
*pmy_chain_9(D) = _1;
_2 = ptr_10->free_arg;
if (_2 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 5>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 668941161]:
_3 = ptr_10->free_arg;
_4 = ptr_10->arg;
_3 (_4);

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 955630225]:
free (ptr_10);

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 1073741824]:
ptr_10 = *pmy_chain_9(D);
if (ptr_10 != old_chain_11(D))
  goto <bb 3>; [89.00%]
else
  goto <bb 7>; [11.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 118111600]:
_5 = ptr_10->arg;
printf ("freearg: %x\n", _5);
return;

=======Mapping node_fun:discard_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
discard_my_cleanups (&cleanup_chain, old_chain_2(D));
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 3 [0m
[40;34m    gimple free   count : 4 [0m
[40;34m    find Entry point : 6 [0m
[40;34m    used_stmt array stack totalsize of : 0.002176 mb[0m
[40;34m    collect time: : 0.000318 s [0m
[40;34m    algorithm time: 0.110284 s [0m
[40;34m    gimple stmt count : : 106 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
Profile consistency report:

                                 |mismatch     |mismatch     |                     |
Pass name                        |IN    |IN    |OUT   |OUT   |overall              |
                                 |freq  |count |freq  |count |size      |time      |
cp                   ------------|      |      |      |      |          |          |
inline               ------------|      |      |      |      |          |          |
fixup_cfg            ------------|      |      |      |      |          |          |
adjust_alignment     ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
backprop             ------------|      |      |      |      |          |          |
phiprop              ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
objsz                ------------|      |      |      |      |          |          |
alias                ------------|      |      |      |      |          |          |
retslot              ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
stdarg               ------------|      |      |      |      |          |          |
cdce                 ------------|      |      |      |      |          |          |
cselim               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
ifcombine            ------------|      |      |      |      |          |          |
mergephi             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ch                               |      |      |      |      |     +1.7%|     +0.0%|
cplxlower                        |      |      |      |      |     +1.7%|     +0.0%|
sra                  ------------|      |      |      |      |          |          |
dom                              |      |      |      |      |     -1.1%|     -0.5%|
copyprop                         |      |      |      |      |     -1.1%|     -0.5%|
reassoc              ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
ccp                  ------------|      |      |      |      |          |          |
sincos               ------------|      |      |      |      |          |          |
laddress             ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
walloca              ------------|      |      |      |      |          |          |
sink                 ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
fix_loops            ------------|      |      |      |      |          |          |
loop                 ------------|      |      |      |      |          |          |
loopinit                         |      |      |      |      |    -69.8%|    -72.1%|
sccp                 ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
ivcanon              ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
cunroll              ------------|      |      |      |      |          |          |
ivopts               ------------|      |      |      |      |          |          |
lim                  ------------|      |      |      |      |          |          |
loopdone             ------------|      |      |      |      |          |          |
no_loop                          |      |      |      |      |   +231.5%|   +258.7%|
veclower2            ------------|      |      |      |      |          |          |
switchlower          ------------|      |      |      |      |          |          |
reassoc              ------------|      |      |      |      |          |          |
slsr                 ------------|      |      |      |      |          |          |
dom                  ------------|      |      |      |      |          |          |
strlen               ------------|      |      |      |      |          |          |
copyprop             ------------|      |      |      |      |          |          |
wrestrict            ------------|      |      |      |      |          |          |
cddce                ------------|      |      |      |      |          |          |
forwprop             ------------|      |      |      |      |          |          |
phiopt               ------------|      |      |      |      |          |          |
fab                  ------------|      |      |      |      |          |          |
dce                  ------------|      |      |      |      |          |          |
crited               ------------|      |      |      |      |          |          |
uncprop              ------------|      |      |      |      |          |          |
local-pure-const     ------------|      |      |      |      |          |          |
modref               ------------|      |      |      |      |          |          |
nrv                  ------------|      |      |      |      |          |          |
isel                 ------------|      |      |      |      |          |          |
optimized            ------------|      |      |      |      |          |          |
expand                           |      |      |      |      |----------|----------|
vregs                            |      |      |      |      |    +70.3%|    +38.5%|
into_cfglayout                   |      |      |      |      |     -1.0%|     -0.4%|
jump                             |      |      |      |      |     -1.0%|     -0.4%|
subreg1              ------------|      |      |      |      |          |          |
dfinit               ------------|      |      |      |      |          |          |
cse1                 ------------|      |      |      |      |          |          |
fwprop1                          |      |      |      |      |     -1.4%|     -1.8%|
ce1                              |      |      |      |      |     -1.4%|     -1.8%|
reginfo                          |      |      |      |      |          |     +0.0%|
loop2                ------------|      |      |      |      |          |          |
loop2_init           ------------|      |      |      |      |          |          |
loop2_invariant      ------------|      |      |      |      |          |          |
loop2_done           ------------|      |      |      |      |          |          |
dse1                 ------------|      |      |      |      |          |          |
fwprop2              ------------|      |      |      |      |          |          |
init-regs            ------------|      |      |      |      |          |          |
combine                          |      |      |      |      |     +4.1%|     +4.6%|
ce2                              |      |      |      |      |     +3.9%|     +4.4%|
outof_cfglayout                  |      |      |      |      |     +0.8%|     +0.3%|
split1                           |      |      |      |      |     +0.8%|     +0.3%|
subreg3              ------------|      |      |      |      |          |          |
mode_sw              ------------|      |      |      |      |          |          |
asmcons              ------------|      |      |      |      |          |          |
ira                              |      |      |      |      |          |     +0.1%|
reload                           |      |      |      |      |     -9.7%|    -11.8%|
postreload                       |      |      |      |      |    -10.7%|    -13.5%|
split2               ------------|      |      |      |      |          |          |
cmpelim              ------------|      |      |      |      |          |          |
pro_and_epilogue                 |      |      |      |      |    +14.8%|    +15.6%|
dse2                             |      |      |      |      |    +12.9%|    +13.5%|
csa                  ------------|      |      |      |      |          |          |
jump2                ------------|      |      |      |      |          |          |
ce3                              |      |      |      |      |          |     +0.0%|
cprop_hardreg                    |      |      |      |      |          |     +0.0%|
rtl_dce              ------------|      |      |      |      |          |          |
bbro                             |      |      |      |      |     +0.4%|     +0.1%|
split4                           |      |      |      |      |     +0.4%|     +0.1%|
stack                ------------|      |      |      |      |          |          |
zero_call_used_regs  ------------|      |      |      |      |          |          |
alignments           ------------|      |      |      |      |          |          |
