../Compiler/newplugin.so 11.2.0 
./benchmarks/binutils/double_free_5/binutils_df_5.c:17:26: warning: â€˜struct symbolâ€™ declared inside parameter list will not be visible outside of this definition or declaration
   17 | find_oload_champ (struct symbol **oload_syms,
      |                          ^~~~~~
./benchmarks/binutils/double_free_5/binutils_df_5.c:37:24: warning: â€˜struct symbolâ€™ declared inside parameter list will not be visible outside of this definition or declaration
   37 |                 struct symbol ***oload_syms,
      |                        ^~~~~~
./benchmarks/binutils/double_free_5/binutils_df_5.c: In function â€˜find_oload_champ_namespace_loopâ€™:
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:24: warning: implicit declaration of function â€˜strlenâ€™ [-Wimplicit-function-declaration]
   54 |         int name_len = strlen(qualified_name);
      |                        ^~~~~~
./benchmarks/binutils/double_free_5/binutils_df_5.c:7:1: note: include â€˜<string.h>â€™ or provide a declaration of â€˜strlenâ€™
    6 | #include "../include/common.h"
  +++ |+#include <string.h>
    7 | 
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:24: warning: incompatible implicit declaration of built-in function â€˜strlenâ€™ [-Wbuiltin-declaration-mismatch]
   54 |         int name_len = strlen(qualified_name);
      |                        ^~~~~~
./benchmarks/binutils/double_free_5/binutils_df_5.c:54:24: note: include â€˜<string.h>â€™ or provide a declaration of â€˜strlenâ€™
./benchmarks/binutils/double_free_5/binutils_df_5.c:82:39: warning: passing argument 1 of â€˜find_oload_champâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
   82 |   new_oload_champ = find_oload_champ (new_oload_syms, &new_oload_champ_bv);
      |                                       ^~~~~~~~~~~~~~
      |                                       |
      |                                       struct symbol **
./benchmarks/binutils/double_free_5/binutils_df_5.c:17:35: note: expected â€˜struct symbol **â€™ but argument is of type â€˜struct symbol **â€™
   17 | find_oload_champ (struct symbol **oload_syms,
      |                   ~~~~~~~~~~~~~~~~^~~~~~~~~~
./benchmarks/binutils/double_free_5/binutils_df_5.c: In function â€˜mainâ€™:
./benchmarks/binutils/double_free_5/binutils_df_5.c:115:55: warning: passing argument 3 of â€˜find_oload_champ_namespace_loopâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  115 |         find_oload_champ_namespace_loop(namespace, 1, &symvec, &bvvec, &oload_champ);
      |                                                       ^~~~~~~
      |                                                       |
      |                                                       symbol ** (*)[10] {aka char ** (*)[10]}
./benchmarks/binutils/double_free_5/binutils_df_5.c:37:34: note: expected â€˜struct symbol ***â€™ but argument is of type â€˜symbol ** (*)[10]â€™ {aka â€˜char ** (*)[10]â€™}
   37 |                 struct symbol ***oload_syms,
      |                 ~~~~~~~~~~~~~~~~~^~~~~~~~~~
./benchmarks/binutils/double_free_5/binutils_df_5.c:115:64: warning: passing argument 4 of â€˜find_oload_champ_namespace_loopâ€™ from incompatible pointer type [-Wincompatible-pointer-types]
  115 |         find_oload_champ_namespace_loop(namespace, 1, &symvec, &bvvec, &oload_champ);
      |                                                                ^~~~~~
      |                                                                |
      |                                                                struct badness_vector * (*)[10]
./benchmarks/binutils/double_free_5/binutils_df_5.c:38:41: note: expected â€˜struct badness_vector **â€™ but argument is of type â€˜struct badness_vector * (*)[10]â€™
   38 |                 struct badness_vector **oload_champ_bv,
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  1298k ( 52%)
 phase parsing                      :   0.01 (100%)   0.02 ( 67%)   0.04 ( 80%)   999k ( 40%)
 phase opt and generate             :   0.00 (  0%)   0.01 ( 33%)   0.01 ( 20%)   177k (  7%)
 callgraph ipa passes               :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)    99k (  4%)
 preprocessing                      :   0.01 (100%)   0.01 ( 33%)   0.03 ( 60%)   289k ( 12%)
 lexical analysis                   :   0.00 (  0%)   0.01 ( 33%)   0.01 ( 20%)     0  (  0%)
 plugin execution                   :   0.00 (  0%)   0.01 ( 33%)   0.00 (  0%)     0  (  0%)
 remove unused locals               :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)     0  (  0%)
 TOTAL                              :   0.01          0.03          0.05         2485k
../Compiler/newplugin.so 11.2.0 

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)  2157k ( 97%)
 phase stream out                   :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)     0  (  0%)
 garbage collection                 :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)     0  (  0%)
 TOTAL                              :   0.00          0.00          0.01         2214k
../Compiler/newplugin.so 11.2.0 
--------plugin argument-----------
contextsentive 1
debugoutput 0
debugmod 0
=======ipa_pta=========
=============== The first stage : Point of interest stmt collect =================
=======node_fun:main=========
=======node_fun:find_oload_champ_namespace_loop=========
=======node_fun:find_oload_champ=========
=======node_fun:make_cleanup=========
=======node_fun:make_my_cleanup=========
=======node_fun:make_my_cleanup2=========
=======node_fun:do_cleanups=========
=======node_fun:do_my_cleanups=========
=======node_fun:discard_my_cleanups=========
=======node_fun:discard_cleanups=========
=============== The first stage :  record fucntion =================
start PointerConstraint
ptable point 37 
===============The second stage : Mapping stmt=================
# .MEM_2 = VDEF <.MEM_1(D)>
find_oload_champ_namespace_loop ("A::B::C", 1, &symvec, &bvvec, &oload_champ);
# .MEM_3 = VDEF <.MEM_2>
do_cleanups (0B);
# VUSE <.MEM_45>
_3 = strlen (qualified_name_24(D));
# .MEM_48 = VDEF <.MEM_47>
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
# .MEM_49 = VDEF <.MEM_42>
old_cleanups_34 = make_cleanup (free, _8);
# .MEM_50 = VDEF <.MEM_49>
old_cleanups_36 = make_cleanup (free, _9);
# .MEM_51 = VDEF <.MEM_50>
new_oload_syms_38 = malloc (800);
# .MEM_53 = VDEF <.MEM_52>
new_oload_champ_41 = find_oload_champ (new_oload_syms_38, &new_oload_champ_bv);
# .MEM_64 = VDEF <.MEM_63>
do_cleanups (old_cleanups_36);
 <var_decl 0x7fccdd0ef2d0 new_oload_champ_bv
    type <pointer_type 0x7fccdd0e6b28
        type <record_type 0x7fccdd0e6a80 badness_vector TI
            size <integer_cst 0x7fccdd5d9c00 constant 128>
            unit-size <integer_cst 0x7fccdd5d9c18 constant 16>
            align:64 warn_if_not_align:0 symtab:0 alias-set -1 canonical-type 0x7fccdd0e6a80 fields <field_decl 0x7fccdd0e0428 length> context <translation_unit_decl 0x7fccdd5e4168 ./benchmarks/binutils/double_free_5/binutils_df_5.c>
            pointer_to_this <pointer_type 0x7fccdd0e6b28>>
        public unsigned DI
        size <integer_cst 0x7fccdd5d9bb8 constant 64>
        unit-size <integer_cst 0x7fccdd5d9bd0 constant 8>
        align:64 warn_if_not_align:0 symtab:0 alias-set -1 structural-equality
        pointer_to_this <pointer_type 0x7fccdd0e6bd0>>
    addressable unsigned DI ./benchmarks/binutils/double_free_5/binutils_df_5.c:48:26 size <integer_cst 0x7fccdd5d9bb8 64> unit-size <integer_cst 0x7fccdd5d9bd0 8>
    align:64 warn_if_not_align:0 context <function_decl 0x7fccdd0dea00 find_oload_champ_namespace_loop> chain <var_decl 0x7fccdd0ef240 call_num>>
# .MEM_60 = VDEF <.MEM_59>
discard_cleanups (old_cleanups_36);
# .MEM_57 = VDEF <.MEM_56>
discard_cleanups (old_cleanups_36);
# .MEM_9 = VDEF <.MEM_8(D)>
printf ("%d\n", _1);
# .MEM_10 = VDEF <.MEM_9>
bv_6 = malloc (16);
# .MEM_7 = VDEF <.MEM_6(D)>
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
# .MEM_8 = VDEF <.MEM_7(D)>
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
# .MEM_14 = VDEF <.MEM_13(D)>
new_4 = malloc (32);
# .MEM_4 = VDEF <.MEM_3(D)>
do_my_cleanups (&cleanup_chain, old_chain_2(D));
# .MEM_19 = VDEF <.MEM_18>
__builtin_puts (&"cleanup!!!!! ========="[0]);
# .MEM_20 = VDEF <.MEM_19>
printf ("%x\n", _4);
# .MEM_15 = VDEF <.MEM_13>
printf ("freearg: %x\n", _5);
# .MEM_4 = VDEF <.MEM_3(D)>
discard_my_cleanups (&cleanup_chain, old_chain_2(D));
===============The second stage : Program slicing=================
===============The second stage : build fucntion type=================
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
      |||
      |||
      |||
      |||
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;41mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

=============== The third stage : Start detection  =================

=============== The third stage : detection  End=================

===============Print ALL GIMPLE IR=================
=======Mapping node_fun:main=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
find_oload_champ_namespace_loop ("A::B::C", 1, &symvec, &bvvec, &oload_champ);
do_cleanups (0B);
symvec ={v} {CLOBBER};
bvvec ={v} {CLOBBER};
oload_champ ={v} {CLOBBER};
return 0;

=======Mapping node_fun:find_oload_champ_namespace_loop=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = static_call_num;
_2 = _1 + 1;
static_call_num = _2;
call_num_23 = static_call_num;
_3 = strlen (qualified_name_24(D));
name_len_25 = (int) _3;
*oload_syms_26(D) = 0B;
*oload_champ_bv_28(D) = 0B;
if (namespace_len_20(D) < name_len_25)
  goto <bb 3>; [67.00%]
else
  goto <bb 5>; [33.00%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 719407025]:
_4 = (sizetype) namespace_len_20(D);
_5 = qualified_name_24(D) + _4;
_6 = *_5;
if (_6 == 58)
  goto <bb 4>; [20.24%]
else
  goto <bb 5>; [79.76%]

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 145607981]:
next_namespace_len_30 = namespace_len_20(D) + 3;
_7 = find_oload_champ_namespace_loop (qualified_name_24(D), next_namespace_len_30, oload_syms_26(D), oload_champ_bv_28(D), oload_champ_31(D));
if (_7 != 0)
  goto <bb 12>; [34.00%]
else
  goto <bb 5>; [66.00%]

=======is loop:0=========

 bb index 5 
<bb 5> [local count: 1024235111]:
# searched_deeper_16 = PHI <0(2), 0(3), 1(4)>
_8 = *oload_syms_26(D);
old_cleanups_34 = make_cleanup (free, _8);
_9 = *oload_champ_bv_28(D);
old_cleanups_36 = make_cleanup (free, _9);
new_oload_syms_38 = malloc (800);
if (new_oload_syms_38 == 0B)
  goto <bb 6>; [0.04%]
else
  goto <bb 7>; [99.96%]

=======is loop:0=========

 bb index 6 
<bb 6> [local count: 409693]:
exit (1);

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 1023825418]:
*new_oload_syms_38 = 0B;
new_oload_champ_41 = find_oload_champ (new_oload_syms_38, &new_oload_champ_bv);
_10 = new_oload_champ_41 != -1;
_11 = call_num_23 == 1;
_12 = _10 | _11;
if (_12 != 0)
  goto <bb 8>; [20.24%]
else
  goto <bb 9>; [79.76%]

=======is loop:0=========

 bb index 8 
<bb 8> [local count: 207222263]:
*oload_syms_26(D) = new_oload_syms_38;
*oload_champ_31(D) = new_oload_champ_41;
_13 = new_oload_champ_bv;
*oload_champ_bv_28(D) = _13;
do_cleanups (old_cleanups_36);
goto <bb 12>; [100.00%]

=======is loop:0=========

 bb index 9 
<bb 9> [local count: 816603155]:
if (searched_deeper_16 != 0)
  goto <bb 10>; [50.00%]
else
  goto <bb 11>; [50.00%]

=======is loop:0=========

 bb index 10 
<bb 10> [local count: 408301577]:
free (new_oload_syms_38);
_14 = new_oload_champ_bv;
free (_14);
discard_cleanups (old_cleanups_36);
goto <bb 12>; [100.00%]

=======is loop:0=========

 bb index 11 
<bb 11> [local count: 408301577]:
*oload_syms_26(D) = new_oload_syms_38;
*oload_champ_31(D) = new_oload_champ_41;
_15 = new_oload_champ_bv;
*oload_champ_bv_28(D) = _15;
discard_cleanups (old_cleanups_36);

=======is loop:0=========

 bb index 12 
<bb 12> [local count: 1073332133]:
# _17 = PHI <1(4), 1(8), 0(10), 0(11)>
new_oload_champ_bv ={v} {CLOBBER};
return _17;

=======Mapping node_fun:find_oload_champ=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_1 = MEM[(int *)oload_syms_3(D)];
printf ("%d\n", _1);
bv_6 = malloc (16);
*oload_champ_bv_7(D) = bv_6;
return -1;

=======Mapping node_fun:make_cleanup=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_5 = make_my_cleanup (&cleanup_chain, function_2(D), arg_3(D));
return _5;

=======Mapping node_fun:make_my_cleanup=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
_6 = make_my_cleanup2 (pmy_chain_2(D), function_3(D), arg_4(D), 0B);
return _6;

=======Mapping node_fun:make_my_cleanup2=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
new_4 = malloc (32);
old_chain_6 = *pmy_chain_5(D);
_1 = *pmy_chain_5(D);
new_4->next = _1;
new_4->function = function_8(D);
new_4->free_arg = free_arg_10(D);
new_4->arg = arg_12(D);
*pmy_chain_5(D) = new_4;
if (old_chain_6 == 0B)
  goto <bb 3>; [0.04%]
else
  goto <bb 4>; [99.96%]

=======is loop:0=========

 bb index 3 
<bb 3> [local count: 429496]:
exit (1);

=======is loop:0=========

 bb index 4 
<bb 4> [local count: 1073312329]:
return old_chain_6;

=======Mapping node_fun:do_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
do_my_cleanups (&cleanup_chain, old_chain_2(D));
return;

=======Mapping node_fun:do_my_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111598]:
goto <bb 6>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
_1 = ptr_12->next;
*pmy_chain_11(D) = _1;
_2 = ptr_12->function;
_3 = ptr_12->arg;
_2 (_3);
__builtin_puts (&"cleanup!!!!! ========="[0]);
_4 = ptr_12->arg;
printf ("%x\n", _4);
_5 = ptr_12->free_arg;
if (_5 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 5>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 668941161]:
_6 = ptr_12->free_arg;
_7 = ptr_12->arg;
_6 (_7);

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 955630225]:
free (ptr_12);

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 1073741824]:
ptr_12 = *pmy_chain_11(D);
if (ptr_12 != old_chain_13(D))
  goto <bb 3>; [89.00%]
else
  goto <bb 7>; [11.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 118111600]:
return;

=======Mapping node_fun:discard_my_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 118111598]:
goto <bb 6>; [100.00%]

=======is loop:1=========

 bb index 3 
<bb 3> [local count: 955630225]:
_1 = ptr_10->next;
*pmy_chain_9(D) = _1;
_2 = ptr_10->free_arg;
if (_2 != 0B)
  goto <bb 4>; [70.00%]
else
  goto <bb 5>; [30.00%]

=======is loop:1=========

 bb index 4 
<bb 4> [local count: 668941161]:
_3 = ptr_10->free_arg;
_4 = ptr_10->arg;
_3 (_4);

=======is loop:1=========

 bb index 5 
<bb 5> [local count: 955630225]:
free (ptr_10);

=======is loop:1=========

 bb index 6 
<bb 6> [local count: 1073741824]:
ptr_10 = *pmy_chain_9(D);
if (ptr_10 != old_chain_11(D))
  goto <bb 3>; [89.00%]
else
  goto <bb 7>; [11.00%]

=======is loop:0=========

 bb index 7 
<bb 7> [local count: 118111600]:
_5 = ptr_10->arg;
printf ("freearg: %x\n", _5);
return;

=======Mapping node_fun:discard_cleanups=========
=======is loop:0=========

 bb index 2 
<bb 2> [local count: 1073741824]:
discard_my_cleanups (&cleanup_chain, old_chain_2(D));
return;


===============Print ALL GIMPLE IR=================
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
    =()=
 ,/'_||_
  (___  `.
 ./  `=='
                   
    ~~~~~~~~~~~  
 ~~~~~~
           ~~~~~~~
[40;34m    gimple malloc count : 3 [0m
[40;34m    gimple free   count : 4 [0m
[40;34m    all ptable point : 37 [0m
[40;34m    analyzable ptable point : 32 [0m
[40;34m    analyzable ptable all point stmt : 160 [0m
[40;34m    used_stmt array stack totalsize of : 0.005872 mb[0m
[40;34m    collect time: : 0.000284 s [0m
[40;34m    mapping time: : 0.001412 s [0m
[40;34m    algorithm time: 0.011042 s [0m
[40;34m    gimple stmt count : : 106 [0m
[40;34m    this report analysis in Sun Jun 26 13:53:07 2022
 [0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m
[40;32mSTART CHECKSTART CHECKSTART CHECKSTART CHECKSTART CHECK[0m

Time variable                                   usr           sys          wall           GGC
 phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)  2157k ( 75%)
 phase opt and generate             :   0.03 (100%)   0.01 (100%)   0.04 ( 80%)   656k ( 23%)
 callgraph functions expansion      :   0.01 ( 33%)   0.01 (100%)   0.03 ( 60%)   535k ( 19%)
 df scan insns                      :   0.00 (  0%)   0.01 (100%)   0.00 (  0%)   480  (  0%)
 df live regs                       :   0.00 (  0%)   0.00 (  0%)   0.02 ( 40%)     0  (  0%)
 tree forward propagate             :   0.00 (  0%)   0.00 (  0%)   0.01 ( 20%)   648  (  0%)
 dead store elim2                   :   0.01 ( 33%)   0.00 (  0%)   0.00 (  0%)  5800  (  0%)
 plugin execution                   :   0.02 ( 67%)   0.00 (  0%)   0.01 ( 20%)  1408  (  0%)
 TOTAL                              :   0.03          0.01          0.05         2864k
