
;; Function strcpy (strcpy, funcdef_no=45, decl_uid=750, cgraph_uid=45, symbol_order=45)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__dest = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__src = &PARM_NOALIAS(11)
PARM_NOALIAS(11) = &NONLOCAL
CALLUSED(13) = CALLUSED(13) + UNKNOWN
CALLUSED(13) = *CALLUSED(13) + UNKNOWN
CALLUSED(13) = __dest
CALLUSED(13) = &NONLOCAL
_1 = CALLUSED(13)
_1 = NONLOCAL
_6 = __dest
doubledereftmp(17) = *__src
*__dest = doubledereftmp(17)
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__dest = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__src = { PARM_NOALIAS(11) }
PARM_NOALIAS(11) = { NONLOCAL }
__builtin_object_size = { }
CALLUSED(13) = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLCLOBBERED(14) = { }
_1 = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
_6 = { PARM_NOALIAS(9) } same as __dest
doubledereftmp(17) = { NONLOCAL }


Alias information for strcpy

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4358 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__dest_3(D), points-to NULL, points-to vars: { D.4358 } (nonlocal, escaped, restrict)
__src_4(D), points-to NULL, points-to vars: { D.4359 } (nonlocal, restrict)
_6, points-to NULL, points-to vars: { D.4358 } (nonlocal, escaped, restrict)

__attribute__((__artificial__, __gnu_inline__, __always_inline__, __nothrow__, __leaf__))
strcpy (char * restrict __dest, const char * restrict __src)
{
  long unsigned int _1;
  char * _6;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__dest_3(D), 1);
  _6 = __builtin___strcpy_chk (__dest_3(D), __src_4(D), _1);
  return _6;

}



;; Function goodG2B (goodG2B, funcdef_no=83, decl_uid=4336, cgraph_uid=83, symbol_order=83)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
data_4 = &HEAP(10)
CALLUSED(12) = CALLUSED(12) + UNKNOWN
CALLUSED(12) = *CALLUSED(12) + UNKNOWN
CALLUSED(12) = data_4
CALLUSED(12) = &NONLOCAL
_5 = CALLUSED(12)
_5 = NONLOCAL
_8 = _5
_8 = &NONLOCAL
_9 = data_4
_11 = _9
ESCAPED = data_4
ESCAPED = data_4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(10) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
alloca = { }
data_4 = { HEAP(10) }
HEAP(10) = { ESCAPED NONLOCAL }
__builtin_object_size = { }
CALLUSED(12) = { ESCAPED NONLOCAL HEAP(10) }
CALLCLOBBERED(13) = { }
_5 = { ESCAPED NONLOCAL HEAP(10) }
_8 = { ESCAPED NONLOCAL HEAP(10) } same as _5
_9 = { HEAP(10) } same as data_4
_11 = { HEAP(10) } same as data_4
printLine = { }
CWE401_Memory_Leak__char_malloc_54b_goodG2BSink = { }


Alias information for goodG2B

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4363 } (escaped, escaped heap)

Flow-insensitive points-to information

data_4, points-to NULL, points-to vars: { D.4363 } (escaped, escaped heap)
_9, points-to NULL, points-to vars: { D.4363 } (escaped, escaped heap)
_11, points-to NULL, points-to vars: { D.4363 } (escaped, escaped heap)

goodG2B ()
{
  char * D.4362;
  char * data;
  long unsigned int _5;
  long unsigned int _8;
  char * _9;

  <bb 2> [100.00%]:
  data_4 = __builtin_alloca (100);
  _5 = __builtin_object_size (data_4, 1);
  _8 = MIN_EXPR <_5, 100>;
  _9 = __builtin___strcpy_chk (data_4, "A String", _8);
  _11 = _9;
  printLine (data_4);
  CWE401_Memory_Leak__char_malloc_54b_goodG2BSink (data_4);
  return;

}



;; Function goodB2G (goodB2G, funcdef_no=84, decl_uid=4341, cgraph_uid=84, symbol_order=84)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
data_4 = &HEAP(10)
ESCAPED = &NONLOCAL
CALLUSED(13) = CALLUSED(13) + UNKNOWN
CALLUSED(13) = *CALLUSED(13) + UNKNOWN
CALLUSED(13) = data_4
CALLUSED(13) = &NONLOCAL
_5 = CALLUSED(13)
_5 = NONLOCAL
_9 = _5
_9 = &NONLOCAL
_10 = data_4
_12 = _10
ESCAPED = data_4
ESCAPED = data_4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(10) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
malloc = { }
data_4 = { HEAP(10) }
HEAP(10) = { ESCAPED NONLOCAL }
exit = { }
__builtin_object_size = { }
CALLUSED(13) = { ESCAPED NONLOCAL HEAP(10) }
CALLCLOBBERED(14) = { }
_5 = { ESCAPED NONLOCAL HEAP(10) }
_9 = { ESCAPED NONLOCAL HEAP(10) } same as _5
_10 = { HEAP(10) } same as data_4
_12 = { HEAP(10) } same as data_4
printLine = { }
CWE401_Memory_Leak__char_malloc_54b_goodB2GSink = { }


Alias information for goodB2G

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4367 } (escaped, escaped heap)

Flow-insensitive points-to information

data_4, points-to NULL, points-to vars: { D.4367 } (escaped, escaped heap)
_10, points-to NULL, points-to vars: { D.4367 } (escaped, escaped heap)
_12, points-to NULL, points-to vars: { D.4367 } (escaped, escaped heap)

goodB2G ()
{
  char * D.4366;
  char * data;
  long unsigned int _5;
  long unsigned int _9;
  char * _10;

  <bb 2> [0.00%]:
  data_4 = malloc (100);
  if (data_4 == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  exit (-1);

  <bb 4> [100.00%]:
  _5 = __builtin_object_size (data_4, 1);
  _9 = MIN_EXPR <_5, 100>;
  _10 = __builtin___strcpy_chk (data_4, "A String", _9);
  _12 = _10;
  printLine (data_4);
  CWE401_Memory_Leak__char_malloc_54b_goodB2GSink (data_4);
  return;

}



;; Function CWE401_Memory_Leak__char_malloc_54_bad (CWE401_Memory_Leak__char_malloc_54_bad, funcdef_no=82, decl_uid=4331, cgraph_uid=82, symbol_order=82)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
data_4 = &HEAP(10)
ESCAPED = &NONLOCAL
CALLUSED(13) = CALLUSED(13) + UNKNOWN
CALLUSED(13) = *CALLUSED(13) + UNKNOWN
CALLUSED(13) = data_4
CALLUSED(13) = &NONLOCAL
_5 = CALLUSED(13)
_5 = NONLOCAL
_9 = _5
_9 = &NONLOCAL
_10 = data_4
_12 = _10
ESCAPED = data_4
ESCAPED = data_4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(10) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
malloc = { }
data_4 = { HEAP(10) }
HEAP(10) = { ESCAPED NONLOCAL }
exit = { }
__builtin_object_size = { }
CALLUSED(13) = { ESCAPED NONLOCAL HEAP(10) }
CALLCLOBBERED(14) = { }
_5 = { ESCAPED NONLOCAL HEAP(10) }
_9 = { ESCAPED NONLOCAL HEAP(10) } same as _5
_10 = { HEAP(10) } same as data_4
_12 = { HEAP(10) } same as data_4
printLine = { }
CWE401_Memory_Leak__char_malloc_54b_badSink = { }


Alias information for CWE401_Memory_Leak__char_malloc_54_bad

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.4371 } (escaped, escaped heap)

Flow-insensitive points-to information

data_4, points-to NULL, points-to vars: { D.4371 } (escaped, escaped heap)
_10, points-to NULL, points-to vars: { D.4371 } (escaped, escaped heap)
_12, points-to NULL, points-to vars: { D.4371 } (escaped, escaped heap)

CWE401_Memory_Leak__char_malloc_54_bad ()
{
  char * D.4370;
  char * data;
  long unsigned int _5;
  long unsigned int _9;
  char * _10;

  <bb 2> [0.00%]:
  data_4 = malloc (100);
  if (data_4 == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  exit (-1);

  <bb 4> [100.00%]:
  _5 = __builtin_object_size (data_4, 1);
  _9 = MIN_EXPR <_5, 100>;
  _10 = __builtin___strcpy_chk (data_4, "A String", _9);
  _12 = _10;
  printLine (data_4);
  CWE401_Memory_Leak__char_malloc_54b_badSink (data_4);
  return;

}



;; Function CWE401_Memory_Leak__char_malloc_54_good (CWE401_Memory_Leak__char_malloc_54_good, funcdef_no=85, decl_uid=4344, cgraph_uid=85, symbol_order=85)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
goodG2B = { }
goodB2G = { }


Alias information for CWE401_Memory_Leak__char_malloc_54_good

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


CWE401_Memory_Leak__char_malloc_54_good ()
{
  <bb 2> [0.00%]:
  goodG2B ();
  goodB2G ();
  return;

}


