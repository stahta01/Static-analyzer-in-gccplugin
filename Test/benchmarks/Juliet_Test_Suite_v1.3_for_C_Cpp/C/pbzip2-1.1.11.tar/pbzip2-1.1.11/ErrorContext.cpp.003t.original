
;; Function bool __gnu_cxx::__is_null_pointer(std::nullptr_t) (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr __gnu_cxx::__ops::_Iter_less_iter __gnu_cxx::__ops::__iter_less_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.7902, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_less_val::_Iter_less_val(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


{
  
}


;; Function __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_less_val() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.7973, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_comp_val(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.7978, {}>>>;


;; Function __gnu_cxx::__ops::_Val_less_iter::_Val_less_iter(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


{
  
}


;; Function __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_less_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.8040, {}>>>;


;; Function __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_comp_iter(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.8045, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_iter __gnu_cxx::__ops::__iter_equal_to_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.8083, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_equal_to_val() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.8130, {}>>>;


;; Function __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_comp_val(__gnu_cxx::__ops::_Iter_equal_to_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.8143, {}>>>;


;; Function constexpr int std::__lg(int) (null)
;; enabled by -tree-original


return <retval> = (int) (31 - (unsigned int) __builtin_clz ((unsigned int) __n));


;; Function constexpr unsigned int std::__lg(unsigned int) (null)
;; enabled by -tree-original


return <retval> = 31 - (unsigned int) __builtin_clz (__n);


;; Function constexpr long int std::__lg(long int) (null)
;; enabled by -tree-original


return <retval> = (long int) (63 - (long unsigned int) __builtin_clzl ((long unsigned int) __n));


;; Function constexpr long unsigned int std::__lg(long unsigned int) (null)
;; enabled by -tree-original


return <retval> = 63 - (long unsigned int) __builtin_clzl (__n);


;; Function constexpr long long int std::__lg(long long int) (null)
;; enabled by -tree-original


return <retval> = (long long int) (63 - (long unsigned int) __builtin_clzll ((long long unsigned int) __n));


;; Function constexpr long long unsigned int std::__lg(long long unsigned int) (null)
;; enabled by -tree-original


return <retval> = (long long unsigned int) (63 - (long unsigned int) __builtin_clzll (__n));


;; Function wint_t btowc(int) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin_constant_p (__c) == 0 || (unsigned int) __c > 127 ? __btowc_alias (__c) : (wint_t) __c>>
   >>>;


;; Function int wctob(wint_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin_constant_p (__wc) == 0 || __wc > 127 ? __wctob_alias (__wc) : (int) __wc>>
   >>>;


;; Function size_t mbrlen(const char*, size_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __ps != 0B ? mbrtowc (0B, __s, __n, __ps) : __mbrlen (__s, __n, 0B)>>
   >>>;


;; Function wchar_t* wmemcpy(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __s1, 0) != 18446744073709551615)
    {
      if (__builtin_constant_p (__n) == 0)
        {
          <<cleanup_point return <retval> = __wmemcpy_chk (__s1, __s2, __n, __builtin_object_size ((const void *) __s1, 0) / 4)>>;
        }
      if (__builtin_object_size ((const void *) __s1, 0) / 4 < __n)
        {
          <<cleanup_point return <retval> = __wmemcpy_chk_warn (__s1, __s2, __n, __builtin_object_size ((const void *) __s1, 0) / 4)>>;
        }
    }
  <<cleanup_point return <retval> = __wmemcpy_alias (__s1, __s2, __n)>>;
   >>>;


;; Function wchar_t* wmemmove(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __s1, 0) != 18446744073709551615)
    {
      if (__builtin_constant_p (__n) == 0)
        {
          <<cleanup_point return <retval> = __wmemmove_chk (__s1, __s2, __n, __builtin_object_size ((const void *) __s1, 0) / 4)>>;
        }
      if (__builtin_object_size ((const void *) __s1, 0) / 4 < __n)
        {
          <<cleanup_point return <retval> = __wmemmove_chk_warn (__s1, __s2, __n, __builtin_object_size ((const void *) __s1, 0) / 4)>>;
        }
    }
  <<cleanup_point return <retval> = __wmemmove_alias (__s1, __s2, __n)>>;
   >>>;


;; Function wchar_t* wmempcpy(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __s1, 0) != 18446744073709551615)
    {
      if (__builtin_constant_p (__n) == 0)
        {
          <<cleanup_point return <retval> = __wmempcpy_chk (__s1, __s2, __n, __builtin_object_size ((const void *) __s1, 0) / 4)>>;
        }
      if (__builtin_object_size ((const void *) __s1, 0) / 4 < __n)
        {
          <<cleanup_point return <retval> = __wmempcpy_chk_warn (__s1, __s2, __n, __builtin_object_size ((const void *) __s1, 0) / 4)>>;
        }
    }
  <<cleanup_point return <retval> = __wmempcpy_alias (__s1, __s2, __n)>>;
   >>>;


;; Function wchar_t* wmemset(wchar_t*, wchar_t, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __s, 0) != 18446744073709551615)
    {
      if (__builtin_constant_p (__n) == 0)
        {
          <<cleanup_point return <retval> = __wmemset_chk (__s, __c, __n, __builtin_object_size ((const void *) __s, 0) / 4)>>;
        }
      if (__builtin_object_size ((const void *) __s, 0) / 4 < __n)
        {
          <<cleanup_point return <retval> = __wmemset_chk_warn (__s, __c, __n, __builtin_object_size ((const void *) __s, 0) / 4)>>;
        }
    }
  <<cleanup_point return <retval> = __wmemset_alias (__s, __c, __n)>>;
   >>>;


;; Function wchar_t* wcscpy(wchar_t*, const wchar_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __dest, 1) != 18446744073709551615)
    {
      <<cleanup_point return <retval> = __wcscpy_chk (__dest, __src, __builtin_object_size ((const void *) __dest, 1) / 4)>>;
    }
  <<cleanup_point return <retval> = __wcscpy_alias (__dest, __src)>>;
   >>>;


;; Function wchar_t* wcpcpy(wchar_t*, const wchar_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __dest, 1) != 18446744073709551615)
    {
      <<cleanup_point return <retval> = __wcpcpy_chk (__dest, __src, __builtin_object_size ((const void *) __dest, 1) / 4)>>;
    }
  <<cleanup_point return <retval> = __wcpcpy_alias (__dest, __src)>>;
   >>>;


;; Function wchar_t* wcsncpy(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __dest, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__n) == 0)
        {
          <<cleanup_point return <retval> = __wcsncpy_chk (__dest, __src, __n, __builtin_object_size ((const void *) __dest, 1) / 4)>>;
        }
      if (__builtin_object_size ((const void *) __dest, 1) / 4 < __n)
        {
          <<cleanup_point return <retval> = __wcsncpy_chk_warn (__dest, __src, __n, __builtin_object_size ((const void *) __dest, 1) / 4)>>;
        }
    }
  <<cleanup_point return <retval> = __wcsncpy_alias (__dest, __src, __n)>>;
   >>>;


;; Function wchar_t* wcpncpy(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __dest, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__n) == 0)
        {
          <<cleanup_point return <retval> = __wcpncpy_chk (__dest, __src, __n, __builtin_object_size ((const void *) __dest, 1) / 4)>>;
        }
      if (__builtin_object_size ((const void *) __dest, 1) / 4 < __n)
        {
          <<cleanup_point return <retval> = __wcpncpy_chk_warn (__dest, __src, __n, __builtin_object_size ((const void *) __dest, 1) / 4)>>;
        }
    }
  <<cleanup_point return <retval> = __wcpncpy_alias (__dest, __src, __n)>>;
   >>>;


;; Function wchar_t* wcscat(wchar_t*, const wchar_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __dest, 1) != 18446744073709551615)
    {
      <<cleanup_point return <retval> = __wcscat_chk (__dest, __src, __builtin_object_size ((const void *) __dest, 1) / 4)>>;
    }
  <<cleanup_point return <retval> = __wcscat_alias (__dest, __src)>>;
   >>>;


;; Function wchar_t* wcsncat(wchar_t*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __dest, 1) != 18446744073709551615)
    {
      <<cleanup_point return <retval> = __wcsncat_chk (__dest, __src, __n, __builtin_object_size ((const void *) __dest, 1) / 4)>>;
    }
  <<cleanup_point return <retval> = __wcsncat_alias (__dest, __src, __n)>>;
   >>>;


;; Function int swprintf(wchar_t*, size_t, const wchar_t*, ...) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __swprintf_chk (__s, __n, 1, __builtin_object_size ((const void *) __s, 1) / 4, __fmt, __builtin_va_arg_pack ())>>;
  <<cleanup_point return <retval> = __swprintf_alias (__s, __n, __fmt, __builtin_va_arg_pack ())>>;
   >>>;


;; Function int vswprintf(wchar_t*, size_t, const wchar_t*, __va_list_tag*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __vswprintf_chk (__s, __n, 1, __builtin_object_size ((const void *) __s, 1) / 4, __fmt, __ap)>>;
  <<cleanup_point return <retval> = __vswprintf_alias (__s, __n, __fmt, __ap)>>;
   >>>;


;; Function int wprintf(const wchar_t*, ...) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __wprintf_chk (1, __fmt, __builtin_va_arg_pack ())>>;


;; Function int fwprintf(__FILE*, const wchar_t*, ...) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __fwprintf_chk (__stream, 1, __fmt, __builtin_va_arg_pack ())>>;


;; Function int vwprintf(const wchar_t*, __va_list_tag*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __vwprintf_chk (1, __fmt, __ap)>>;


;; Function int vfwprintf(__FILE*, const wchar_t*, __va_list_tag*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __vfwprintf_chk (__stream, 1, __fmt, __ap)>>;


;; Function wchar_t* fgetws(wchar_t*, int, __FILE*) (null)
;; enabled by -tree-original


if (__builtin_object_size ((const void *) __s, 1) != 18446744073709551615)
  {
    if (__builtin_constant_p (__n) == 0 || __n <= 0)
      {
        <<cleanup_point return <retval> = __fgetws_chk (__s, __builtin_object_size ((const void *) __s, 1) / 4, __n, __stream)>>;
      }
    if ((size_t) __n > __builtin_object_size ((const void *) __s, 1) / 4)
      {
        <<cleanup_point return <retval> = __fgetws_chk_warn (__s, __builtin_object_size ((const void *) __s, 1) / 4, __n, __stream)>>;
      }
  }
<<cleanup_point return <retval> = __fgetws_alias (__s, __n, __stream)>>;


;; Function wchar_t* fgetws_unlocked(wchar_t*, int, __FILE*) (null)
;; enabled by -tree-original


if (__builtin_object_size ((const void *) __s, 1) != 18446744073709551615)
  {
    if (__builtin_constant_p (__n) == 0 || __n <= 0)
      {
        <<cleanup_point return <retval> = __fgetws_unlocked_chk (__s, __builtin_object_size ((const void *) __s, 1) / 4, __n, __stream)>>;
      }
    if ((size_t) __n > __builtin_object_size ((const void *) __s, 1) / 4)
      {
        <<cleanup_point return <retval> = __fgetws_unlocked_chk_warn (__s, __builtin_object_size ((const void *) __s, 1) / 4, __n, __stream)>>;
      }
  }
<<cleanup_point return <retval> = __fgetws_unlocked_alias (__s, __n, __stream)>>;


;; Function size_t wcrtomb(char*, wchar_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __s, 1) != 18446744073709551615 && __builtin_object_size ((const void *) __s, 1) <= 15)
    {
      <<cleanup_point return <retval> = __wcrtomb_chk (__s, __wchar, __ps, __builtin_object_size ((const void *) __s, 1))>>;
    }
  <<cleanup_point return <retval> = __wcrtomb_alias (__s, __wchar, __ps)>>;
   >>>;


;; Function size_t mbsrtowcs(wchar_t*, const char**, size_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __dst, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          <<cleanup_point return <retval> = __mbsrtowcs_chk (__dst, __src, __len, __ps, __builtin_object_size ((const void *) __dst, 1) / 4)>>;
        }
      if (__builtin_object_size ((const void *) __dst, 1) / 4 < __len)
        {
          <<cleanup_point return <retval> = __mbsrtowcs_chk_warn (__dst, __src, __len, __ps, __builtin_object_size ((const void *) __dst, 1) / 4)>>;
        }
    }
  <<cleanup_point return <retval> = __mbsrtowcs_alias (__dst, __src, __len, __ps)>>;
   >>>;


;; Function size_t wcsrtombs(char*, const wchar_t**, size_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __dst, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          <<cleanup_point return <retval> = __wcsrtombs_chk (__dst, __src, __len, __ps, __builtin_object_size ((const void *) __dst, 1))>>;
        }
      if (__builtin_object_size ((const void *) __dst, 1) < __len)
        {
          <<cleanup_point return <retval> = __wcsrtombs_chk_warn (__dst, __src, __len, __ps, __builtin_object_size ((const void *) __dst, 1))>>;
        }
    }
  <<cleanup_point return <retval> = __wcsrtombs_alias (__dst, __src, __len, __ps)>>;
   >>>;


;; Function size_t mbsnrtowcs(wchar_t*, const char**, size_t, size_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __dst, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          <<cleanup_point return <retval> = __mbsnrtowcs_chk (__dst, __src, __nmc, __len, __ps, __builtin_object_size ((const void *) __dst, 1) / 4)>>;
        }
      if (__builtin_object_size ((const void *) __dst, 1) / 4 < __len)
        {
          <<cleanup_point return <retval> = __mbsnrtowcs_chk_warn (__dst, __src, __nmc, __len, __ps, __builtin_object_size ((const void *) __dst, 1) / 4)>>;
        }
    }
  <<cleanup_point return <retval> = __mbsnrtowcs_alias (__dst, __src, __nmc, __len, __ps)>>;
   >>>;


;; Function size_t wcsnrtombs(char*, const wchar_t**, size_t, size_t, mbstate_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __dst, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          <<cleanup_point return <retval> = __wcsnrtombs_chk (__dst, __src, __nwc, __len, __ps, __builtin_object_size ((const void *) __dst, 1))>>;
        }
      if (__builtin_object_size ((const void *) __dst, 1) < __len)
        {
          <<cleanup_point return <retval> = __wcsnrtombs_chk_warn (__dst, __src, __nwc, __len, __ps, __builtin_object_size ((const void *) __dst, 1))>>;
        }
    }
  <<cleanup_point return <retval> = __wcsnrtombs_alias (__dst, __src, __nwc, __len, __ps)>>;
   >>>;


;; Function static void std::char_traits<char>::assign(std::char_traits<char>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<char>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (unsigned char) *__c1 < (unsigned char) *__c2
   >>>;


;; Function static int std::char_traits<char>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0;
  }
return <retval> = __builtin_memcmp ((const void *) __s1, (const void *) __s2, __n);


;; Function static std::size_t std::char_traits<char>::length(const char_type*) (null)
;; enabled by -tree-original


return <retval> = __builtin_strlen (__s);


;; Function static const char_type* std::char_traits<char>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0B;
  }
return <retval> = (const char_type *) __builtin_memchr ((const void *) __s, (int) *__a, __n);


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::move(std::char_traits<char>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::copy(std::char_traits<char>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static std::char_traits<char>::char_type* std::char_traits<char>::assign(std::char_traits<char>::char_type*, std::size_t, std::char_traits<char>::char_type) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memset ((void *) __s, (int) __a, __n)>>;


;; Function static constexpr std::char_traits<char>::char_type std::char_traits<char>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) (unsigned char) *__c
   >>>;


;; Function static constexpr bool std::char_traits<char>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1
   >>>;


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__c != -1 ? (int_type) *__c : 0>>
   >>>;


;; Function static void std::char_traits<wchar_t>::assign(std::char_traits<wchar_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;


;; Function static int std::char_traits<wchar_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0;
  }
else
  {
    return <retval> = wmemcmp (__s1, __s2, __n);
  }


;; Function static std::size_t std::char_traits<wchar_t>::length(const char_type*) (null)
;; enabled by -tree-original


return <retval> = wcslen (__s);


;; Function static const char_type* std::char_traits<wchar_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0B;
  }
else
  {
    return <retval> = (const char_type *) wmemchr (__s, (char_type) *__a, __n);
  }


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::move(std::char_traits<wchar_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) wmemmove (__s1, __s2, __n)>>;


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::copy(std::char_traits<wchar_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) wmemcpy (__s1, __s2, __n)>>;


;; Function static std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::assign(std::char_traits<wchar_t>::char_type*, std::size_t, std::char_traits<wchar_t>::char_type) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s;
  }
<<cleanup_point return <retval> = (char_type *) wmemset (__s, __a, __n)>>;


;; Function static constexpr std::char_traits<wchar_t>::char_type std::char_traits<wchar_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<wchar_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.10452, 4294967295>) ? 0 : (int_type) *__c>>
   >>>;


;; Function static void std::char_traits<char16_t>::assign(std::char_traits<char16_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;


;; Function static int std::char_traits<char16_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.10627>;
        if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 2)), (const char_type &) (__s2 + (sizetype) (__i * 2)))>>)
          {
            return <retval> = -1;
          }
        else
          {
            if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 2)), (const char_type &) (__s1 + (sizetype) (__i * 2)))>>)
              {
                return <retval> = 1;
              }
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.10627>:;
  }
  return <retval> = 0;
}


;; Function static std::size_t std::char_traits<char16_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  while (1)
    {
      if (<<cleanup_point !std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) &TARGET_EXPR <D.10631, 0>)>>) (void) 0; else goto <D.10632>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
    }
  <D.10632>:;
  return <retval> = __i;
}


;; Function static const char_type* std::char_traits<char16_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.10636>;
        if (<<cleanup_point std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), __a)>>)
          {
            return <retval> = __s + (sizetype) (__i * 2);
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.10636>:;
  }
  return <retval> = 0B;
}


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::move(std::char_traits<char16_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::copy(std::char_traits<char16_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::assign(std::char_traits<char16_t>::char_type*, std::size_t, std::char_traits<char16_t>::char_type) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.10642>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) &__a) >>>>>;
        <<cleanup_point (void)  ++__i>>;
      }
    <D.10642>:;
  }
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char16_t>::char_type std::char_traits<char16_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<char16_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.10649, 65535>) ? 0 : (int_type) *__c>>
   >>>;


;; Function static void std::char_traits<char32_t>::assign(std::char_traits<char32_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;


;; Function static int std::char_traits<char32_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.10703>;
        if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 4)), (const char_type &) (__s2 + (sizetype) (__i * 4)))>>)
          {
            return <retval> = -1;
          }
        else
          {
            if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 4)), (const char_type &) (__s1 + (sizetype) (__i * 4)))>>)
              {
                return <retval> = 1;
              }
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.10703>:;
  }
  return <retval> = 0;
}


;; Function static std::size_t std::char_traits<char32_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  while (1)
    {
      if (<<cleanup_point !std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) &TARGET_EXPR <D.10707, 0>)>>) (void) 0; else goto <D.10708>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
    }
  <D.10708>:;
  return <retval> = __i;
}


;; Function static const char_type* std::char_traits<char32_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.10712>;
        if (<<cleanup_point std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), __a)>>)
          {
            return <retval> = __s + (sizetype) (__i * 4);
          }
        <<cleanup_point (void)  ++__i>>;
      }
    <D.10712>:;
  }
  return <retval> = 0B;
}


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::move(std::char_traits<char32_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 4)>>;


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::copy(std::char_traits<char32_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n * 4)>>;


;; Function static std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::assign(std::char_traits<char32_t>::char_type*, std::size_t, std::char_traits<char32_t>::char_type) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    while (1)
      {
        if (__i >= __n) goto <D.10718>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) &__a) >>>>>;
        <<cleanup_point (void)  ++__i>>;
      }
    <D.10718>:;
  }
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char32_t>::char_type std::char_traits<char32_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<char32_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.10725, 4294967295>) ? 0 : (int_type) *__c>>
   >>>;


;; Function std::exception::exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int (*__vtbl_ptr_type) () * _vptr.exception;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception *) this)->_vptr.exception = &_ZTVSt9exception + 16) >>>>>;
  }
   >>>;


;; Function std::bad_exception::bad_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*__vtbl_ptr_type) () * _vptr.exception;
    } D.10778;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_exception *) this)->D.10777) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_exception *) this)->D.10777._vptr.exception = &_ZTVSt13bad_exception + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_exception *) this)->D.10777);
      }
  }
   >>>;


;; Function const char* std::type_info::name() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *(const char *) ((const struct type_info *) this)->__name == 42 ? (const char *) ((const struct type_info *) this)->__name + 1 : (const char *) ((const struct type_info *) this)->__name
   >>>;


;; Function bool std::type_info::before(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *(const char *) ((const struct type_info *) this)->__name == 42 && *(const char *) __arg->__name == 42 ? (const char *) ((const struct type_info *) this)->__name < (const char *) __arg->__name : __builtin_strcmp ((const char *) ((const struct type_info *) this)->__name, (const char *) __arg->__name) < 0
   >>>;


;; Function bool std::type_info::operator==(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char *) ((const struct type_info *) this)->__name == (const char *) __arg->__name || *(const char *) ((const struct type_info *) this)->__name != 42 && __builtin_strcmp ((const char *) ((const struct type_info *) this)->__name, (const char *) __arg->__name) == 0
   >>>;


;; Function bool std::type_info::operator!=(const std::type_info&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::type_info::operator== ((const struct type_info *) this, __arg)>>
   >>>;


;; Function std::size_t std::type_info::hash_code() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_bytes ((const void *) std::type_info::name ((const struct type_info *) this), __builtin_strlen (std::type_info::name ((const struct type_info *) this)), 3339675911)>>
   >>>;


;; Function std::type_info::type_info(const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int (*__vtbl_ptr_type) () * _vptr.type_info;
    const char * __name;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct type_info *) this)->_vptr.type_info = &_ZTVSt9type_info + 16) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct type_info *) this)->__name = __n) >>>>>;
}


;; Function std::bad_cast::bad_cast() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*__vtbl_ptr_type) () * _vptr.exception;
    } D.10929;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_cast *) this)->D.10928) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_cast *) this)->D.10928._vptr.exception = &_ZTVSt8bad_cast + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_cast *) this)->D.10928);
      }
  }
   >>>;


;; Function std::bad_typeid::bad_typeid() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*__vtbl_ptr_type) () * _vptr.exception;
    } D.10958;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_typeid *) this)->D.10957) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_typeid *) this)->D.10957._vptr.exception = &_ZTVSt10bad_typeid + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_typeid *) this)->D.10957);
      }
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::nullptr_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    void * _M_exception_object;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception_ptr *) this)->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    void * _M_exception_object;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception_ptr *) this)->_M_exception_object = __o->_M_exception_object) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__o->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr& std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::swap (&TARGET_EXPR <D.11065, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.11065
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  NON_LVALUE_EXPR <__o> >>>>, (struct exception_ptr &) this) >>>>>;
  return <retval> = (struct exception_ptr &) this;
   >>>;


;; Function std::__exception_ptr::exception_ptr::operator bool() const (null)
;; enabled by -tree-original


return <retval> = (void *) ((const struct exception_ptr *) this)->_M_exception_object != 0B;


;; Function void std::__exception_ptr::swap(std::__exception_ptr::exception_ptr&, std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::swap ((struct exception_ptr *) __lhs, __rhs) >>>>>;


;; Function std::nested_exception::nested_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int (*__vtbl_ptr_type) () * _vptr.nested_exception;
    struct exception_ptr _M_ptr;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct nested_exception *) this)->_vptr.nested_exception = &_ZTVSt16nested_exception + 16) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct nested_exception *) this)->_M_ptr = TARGET_EXPR <D.11147, <<< Unknown tree: aggr_init_expr
  3
  current_exception
  D.11147 >>>>) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__exception_ptr::exception_ptr::~exception_ptr (&((struct nested_exception *) this)->_M_ptr);
      }
  }
   >>>;


;; Function void std::nested_exception::rethrow_nested() const (null)
;; enabled by -tree-original


if (<<cleanup_point std::__exception_ptr::exception_ptr::operator bool (&((const struct nested_exception *) this)->_M_ptr)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::rethrow_exception (&TARGET_EXPR <D.11152, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.11152
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>) >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::terminate () >>>>>;


;; Function std::__exception_ptr::exception_ptr std::nested_exception::nested_ptr() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return *<retval> = TARGET_EXPR <D.11154, <<< Unknown tree: aggr_init_expr
  5
  __comp_ctor 
  D.11154
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>>>
   >>>;


;; Function void std::__rethrow_if_nested_impl(const void*) (null)
;; enabled by -tree-original





;; Function std::bad_alloc::bad_alloc() (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      int (*__vtbl_ptr_type) () * _vptr.exception;
    } D.11256;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_alloc *) this)->D.11255) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_alloc *) this)->D.11255._vptr.exception = &_ZTVSt9bad_alloc + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_alloc *) this)->D.11255);
      }
  }
   >>>;


;; Function std::bad_array_new_length::bad_array_new_length() (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct 
    {
      struct 
      {
        int (*__vtbl_ptr_type) () * _vptr.exception;
      } D.11256;
    } D.11285;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::bad_alloc::bad_alloc (&((struct bad_array_new_length *) this)->D.11284) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_array_new_length *) this)->D.11284.D.11255._vptr.exception = &_ZTVSt20bad_array_new_length + 16) >>>>>;
      }
    catch
      {
        std::bad_alloc::~bad_alloc (&((struct bad_array_new_length *) this)->D.11284);
      }
  }
   >>>;


;; Function void* operator new(std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __p
   >>>;


;; Function void* operator new [](std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __p
   >>>;


;; Function void operator delete(void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void operator delete [](void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function int std::__convert_from_v(__locale_struct* const&, char*, int, const char*, ...) (null)
;; enabled by -tree-original


{
  struct __locale_struct * __old;
  struct  __args[1];
  const int __ret;

    struct __locale_struct * __old;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__old = __gnu_cxx::__uselocale ((struct __locale_struct *) *__cloc)) >>>>>;
    struct  __args[1];
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((struct  *) &__args, __fmt) >>>>>;
    const int __ret;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = __builtin_vsnprintf (__out, (long unsigned int) __size, __fmt, (struct  *) &__args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((struct  *) &__args) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __gnu_cxx::__uselocale (__old) >>>>>;
  return <retval> = (int) __ret;
}


;; Function __pthread_cleanup_class::__pthread_cleanup_class(void (*)(void*), void*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    void (*<Tf2>) (void *) __cancel_routine;
    void * __cancel_arg;
    int __do_it;
    int __cancel_type;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__cancel_routine = __fct) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__cancel_arg = __arg) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__do_it = 1) >>>>>;
}


;; Function __pthread_cleanup_class::~__pthread_cleanup_class() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct __pthread_cleanup_class *) this)->__do_it != 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  ((struct __pthread_cleanup_class *) this)->__cancel_routine (((struct __pthread_cleanup_class *) this)->__cancel_arg) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          void (*<Tf2>) (void *) __cancel_routine;
          void * __cancel_arg;
          int __do_it;
          int __cancel_type;
        } &) this = {CLOBBER};
      }
  }
  <D.14357>:;
   >>>;


;; Function void __pthread_cleanup_class::__setdoit(int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __pthread_cleanup_class *) this)->__do_it = __newval) >>>>>;


;; Function void __pthread_cleanup_class::__defer() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_setcanceltype (0, &((struct __pthread_cleanup_class *) this)->__cancel_type) >>>>>;


;; Function void __pthread_cleanup_class::__restore() const (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_setcanceltype ((int) ((const struct __pthread_cleanup_class *) this)->__cancel_type, 0B) >>>>>;


;; Function int pthread_equal(pthread_t, pthread_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = __thread1 == __thread2
   >>>;


;; Function int __gthread_active_p() (null)
;; enabled by -tree-original


{
  static void * const __gthread_active_ptr = (void *) __gthrw___pthread_key_create;

  <<cleanup_point   static void * const __gthread_active_ptr = (void *) __gthrw___pthread_key_create;>>;
  return <retval> = (void *) __gthrw___pthread_key_create != 0B;
}


;; Function int __gthread_create(__gthread_t*, void* (*)(void*), void*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_create (__threadid, 0B, __func, __args)>>;


;; Function int __gthread_join(__gthread_t, void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_join (__threadid, __value_ptr)>>;


;; Function int __gthread_detach(__gthread_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_detach (__threadid)>>;


;; Function int __gthread_equal(__gthread_t, __gthread_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_equal (__t1, __t2)>>;


;; Function __gthread_t __gthread_self() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_self ()>>;


;; Function int __gthread_yield() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_sched_yield ()>>;


;; Function int __gthread_once(__gthread_once_t*, void (*)()) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gthrw_pthread_once (__once, __func)>>;
  }
else
  {
    return <retval> = -1;
  }


;; Function int __gthread_key_create(__gthread_key_t*, void (*)(void*)) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_key_create (__key, __dtor)>>;


;; Function int __gthread_key_delete(__gthread_key_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_key_delete (__key)>>;


;; Function void* __gthread_getspecific(__gthread_key_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_getspecific (__key)>>;


;; Function int __gthread_setspecific(__gthread_key_t, const void*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_setspecific (__key, __ptr)>>;


;; Function void __gthread_mutex_init_function(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __gthrw_pthread_mutex_init (__mutex, 0B) >>>>>;
  }


;; Function int __gthread_mutex_destroy(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_destroy (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_lock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_lock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_trylock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_trylock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_timedlock(__gthread_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_unlock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gthrw_pthread_mutex_unlock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_lock (__mutex)>>;


;; Function int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_trylock (__mutex)>>;


;; Function int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_timedlock (__mutex, __abs_timeout)>>;


;; Function int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_unlock (__mutex)>>;


;; Function int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_destroy (__mutex)>>;


;; Function int __gthread_cond_broadcast(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_cond_broadcast (__cond)>>;


;; Function int __gthread_cond_signal(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_cond_signal (__cond)>>;


;; Function int __gthread_cond_wait(__gthread_cond_t*, __gthread_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_timedwait(__gthread_cond_t*, __gthread_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout)>>;


;; Function int __gthread_cond_wait_recursive(__gthread_cond_t*, __gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_destroy(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthrw_pthread_cond_destroy (__cond)>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4)>>;


;; Function void __gnu_cxx::__atomic_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


{
  _Atomic_word __result = *__mem;

    _Atomic_word __result = *__mem;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__mem = *__mem + __val) >>>>>;
  return <retval> = __result;
}


;; Function void __gnu_cxx::__atomic_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__mem = *__mem + __val) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add ((volatile _Atomic_word *) __mem, __val)>>;
  }
else
  {
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add_single (__mem, __val)>>;
  }


;; Function void __gnu_cxx::__atomic_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add ((volatile _Atomic_word *) __mem, __val) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_single (__mem, __val) >>>>>;
  }


;; Function int atoi(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = (int) strtol (__nptr, 0B, 10)>>
   >>>;


;; Function long int atol(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = strtol (__nptr, 0B, 10)>>
   >>>;


;; Function long long int atoll(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = strtoll (__nptr, 0B, 10)>>
   >>>;


;; Function __uint16_t __bswap_16(__uint16_t) (null)
;; enabled by -tree-original


return <retval> = __builtin_bswap16 ((int) __bsx);


;; Function __uint32_t __bswap_32(__uint32_t) (null)
;; enabled by -tree-original


return <retval> = __builtin_bswap32 (__bsx);


;; Function __uint64_t __bswap_64(__uint64_t) (null)
;; enabled by -tree-original


return <retval> = __builtin_bswap64 (__bsx);


;; Function __uint16_t __uint16_identity(__uint16_t) (null)
;; enabled by -tree-original


return <retval> = __x;


;; Function __uint32_t __uint32_identity(__uint32_t) (null)
;; enabled by -tree-original


return <retval> = __x;


;; Function __uint64_t __uint64_identity(__uint64_t) (null)
;; enabled by -tree-original


return <retval> = __x;


;; Function void* bsearch(const void*, const void*, size_t, size_t, __compar_fn_t) (null)
;; enabled by -tree-original


{
  size_t __l;
  size_t __u;
  size_t __idx;
  const void * __p;
  int __comparison;

    size_t __l;
    size_t __u;
    size_t __idx;
    const void * __p;
    int __comparison;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__l = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__u = __nmemb) >>>>>;
  while (1)
    {
      if (__l >= __u) goto <D.17393>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__idx = (__l + __u) / 2) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__p = __base + (sizetype) (__idx * __size)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__comparison = __compar (__key, __p)) >>>>>;
      if (__comparison < 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__u = __idx) >>>>>;
        }
      else
        {
          if (__comparison > 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__l = __idx + 1) >>>>>;
            }
          else
            {
              return <retval> = (void *) __p;
            }
        }
    }
  <D.17393>:;
  return <retval> = 0B;
}


;; Function double atof(const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = strtod (__nptr, 0B)>>
   >>>;


;; Function char* realpath(const char*, char*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __resolved, 1) != 18446744073709551615)
    {
      <<cleanup_point return <retval> = __realpath_chk (__name, __resolved, __builtin_object_size ((const void *) __resolved, 1))>>;
    }
  <<cleanup_point return <retval> = __realpath_alias (__name, __resolved)>>;
   >>>;


;; Function int ptsname_r(int, char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__buflen) == 0)
        {
          <<cleanup_point return <retval> = __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size ((const void *) __buf, 1))>>;
        }
      if (__builtin_object_size ((const void *) __buf, 1) < __buflen)
        {
          <<cleanup_point return <retval> = __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size ((const void *) __buf, 1))>>;
        }
    }
  <<cleanup_point return <retval> = __ptsname_r_alias (__fd, __buf, __buflen)>>;
   >>>;


;; Function int wctomb(char*, wchar_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __s, 1) != 18446744073709551615 && __builtin_object_size ((const void *) __s, 1) <= 15)
    {
      <<cleanup_point return <retval> = __wctomb_chk (__s, __wchar, __builtin_object_size ((const void *) __s, 1))>>;
    }
  <<cleanup_point return <retval> = __wctomb_alias (__s, __wchar)>>;
   >>>;


;; Function size_t mbstowcs(wchar_t*, const char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __dst, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          <<cleanup_point return <retval> = __mbstowcs_chk (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1) / 4)>>;
        }
      if (__builtin_object_size ((const void *) __dst, 1) / 4 < __len)
        {
          <<cleanup_point return <retval> = __mbstowcs_chk_warn (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1) / 4)>>;
        }
    }
  <<cleanup_point return <retval> = __mbstowcs_alias (__dst, __src, __len)>>;
   >>>;


;; Function size_t wcstombs(char*, const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __dst, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          <<cleanup_point return <retval> = __wcstombs_chk (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1))>>;
        }
      if (__builtin_object_size ((const void *) __dst, 1) < __len)
        {
          <<cleanup_point return <retval> = __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size ((const void *) __dst, 1))>>;
        }
    }
  <<cleanup_point return <retval> = __wcstombs_alias (__dst, __src, __len)>>;
   >>>;


;; Function long int std::abs(long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__i>;


;; Function long long int std::abs(long long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr double std::abs(double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr float std::abs(float) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr long double std::abs(long double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr __int128 std::abs(__int128) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr __float128 std::abs(__float128) (null)
;; enabled by -tree-original


return <retval> = __x < 0.0 ? -NON_LVALUE_EXPR <__x> : __x;


;; Function ldiv_t std::div(long int, long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.17660, ldiv (__i, __j)>>>;


;; Function lldiv_t __gnu_cxx::div(long long int, long long int) (null)
;; enabled by -tree-original


{
  struct lldiv_t __q;

    struct lldiv_t __q;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__q.quot = __n / __d) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__q.rem = __n % __d) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.17735, __q>>>;
}


;; Function int getchar() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = getc (stdin)>>;


;; Function int fgetc_unlocked(FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect (__fp->_IO_read_ptr >= __fp->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) __fp->_IO_read_ptr++ >>;


;; Function int getc_unlocked(FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect (__fp->_IO_read_ptr >= __fp->_IO_read_end, 0) != 0 ? __uflow (__fp) : (int) *(unsigned char *) __fp->_IO_read_ptr++ >>;


;; Function int getchar_unlocked() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect (stdin->_IO_read_ptr >= stdin->_IO_read_end, 0) != 0 ? __uflow (stdin) : (int) *(unsigned char *) stdin->_IO_read_ptr++ >>;


;; Function int putchar(int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = putc (__c, stdout)>>;


;; Function int fputc_unlocked(int, FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect (__stream->_IO_write_ptr >= __stream->_IO_write_end, 0) != 0 ? __overflow (__stream, (int) (unsigned char) __c) : (int) (unsigned char) (*__stream->_IO_write_ptr++  = (char) __c)>>;


;; Function int putc_unlocked(int, FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect (__stream->_IO_write_ptr >= __stream->_IO_write_end, 0) != 0 ? __overflow (__stream, (int) (unsigned char) __c) : (int) (unsigned char) (*__stream->_IO_write_ptr++  = (char) __c)>>;


;; Function int putchar_unlocked(int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __builtin_expect (stdout->_IO_write_ptr >= stdout->_IO_write_end, 0) != 0 ? __overflow (stdout, (int) (unsigned char) __c) : (int) (unsigned char) (*stdout->_IO_write_ptr++  = (char) __c)>>;


;; Function __ssize_t getline(char**, size_t*, FILE*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __getdelim (__lineptr, __n, 10, __stream)>>;


;; Function int feof_unlocked(FILE*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (__stream->_flags & 16) != 0
   >>>;


;; Function int ferror_unlocked(FILE*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (__stream->_flags & 32) != 0
   >>>;


;; Function int sprintf(char*, const char*, ...) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin___sprintf_chk (__s, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __builtin_va_arg_pack ())>>
   >>>;


;; Function int vsprintf(char*, const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin___vsprintf_chk (__s, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __ap)>>
   >>>;


;; Function int snprintf(char*, size_t, const char*, ...) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin___snprintf_chk (__s, __n, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __builtin_va_arg_pack ())>>
   >>>;


;; Function int vsnprintf(char*, size_t, const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin___vsnprintf_chk (__s, __n, 1, __builtin_object_size ((const void *) __s, 1), __fmt, __ap)>>
   >>>;


;; Function int fprintf(FILE*, const char*, ...) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __fprintf_chk (__stream, 1, __fmt, __builtin_va_arg_pack ())>>;


;; Function int printf(const char*, ...) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __printf_chk (1, __fmt, __builtin_va_arg_pack ())>>;


;; Function int vprintf(const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __vfprintf_chk (stdout, 1, __fmt, __ap)>>;


;; Function int vfprintf(FILE*, const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __vfprintf_chk (__stream, 1, __fmt, __ap)>>;


;; Function int dprintf(int, const char*, ...) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __dprintf_chk (__fd, 1, __fmt, __builtin_va_arg_pack ())>>;


;; Function int vdprintf(int, const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __vdprintf_chk (__fd, 1, __fmt, __ap)>>;


;; Function int asprintf(char**, const char*, ...) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __asprintf_chk (__ptr, 1, __fmt, __builtin_va_arg_pack ())>>
   >>>;


;; Function int __asprintf(char**, const char*, ...) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __asprintf_chk (__ptr, 1, __fmt, __builtin_va_arg_pack ())>>
   >>>;


;; Function int obstack_printf(obstack*, const char*, ...) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __obstack_printf_chk (__obstack, 1, __fmt, __builtin_va_arg_pack ())>>
   >>>;


;; Function int vasprintf(char**, const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __vasprintf_chk (__ptr, 1, __fmt, __ap)>>
   >>>;


;; Function int obstack_vprintf(obstack*, const char*, __va_list_tag*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __obstack_vprintf_chk (__obstack, 1, __fmt, __ap)>>
   >>>;


;; Function char* fgets(char*, int, FILE*) (null)
;; enabled by -tree-original


if (__builtin_object_size ((const void *) __s, 1) != 18446744073709551615)
  {
    if (__builtin_constant_p (__n) == 0 || __n <= 0)
      {
        <<cleanup_point return <retval> = __fgets_chk (__s, __builtin_object_size ((const void *) __s, 1), __n, __stream)>>;
      }
    if ((size_t) __n > __builtin_object_size ((const void *) __s, 1))
      {
        <<cleanup_point return <retval> = __fgets_chk_warn (__s, __builtin_object_size ((const void *) __s, 1), __n, __stream)>>;
      }
  }
<<cleanup_point return <retval> = __fgets_alias (__s, __n, __stream)>>;


;; Function size_t fread(void*, size_t, size_t, FILE*) (null)
;; enabled by -tree-original


if (__builtin_object_size ((const void *) __ptr, 0) != 18446744073709551615)
  {
    if ((__builtin_constant_p (__size) == 0 || __builtin_constant_p (__n) == 0) || (__size | __n) > 4294967295)
      {
        <<cleanup_point return <retval> = __fread_chk (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream)>>;
      }
    if (__size * __n > __builtin_object_size ((const void *) __ptr, 0))
      {
        <<cleanup_point return <retval> = __fread_chk_warn (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream)>>;
      }
  }
<<cleanup_point return <retval> = __fread_alias (__ptr, __size, __n, __stream)>>;


;; Function char* fgets_unlocked(char*, int, FILE*) (null)
;; enabled by -tree-original


if (__builtin_object_size ((const void *) __s, 1) != 18446744073709551615)
  {
    if (__builtin_constant_p (__n) == 0 || __n <= 0)
      {
        <<cleanup_point return <retval> = __fgets_unlocked_chk (__s, __builtin_object_size ((const void *) __s, 1), __n, __stream)>>;
      }
    if ((size_t) __n > __builtin_object_size ((const void *) __s, 1))
      {
        <<cleanup_point return <retval> = __fgets_unlocked_chk_warn (__s, __builtin_object_size ((const void *) __s, 1), __n, __stream)>>;
      }
  }
<<cleanup_point return <retval> = __fgets_unlocked_alias (__s, __n, __stream)>>;


;; Function size_t fread_unlocked(void*, size_t, size_t, FILE*) (null)
;; enabled by -tree-original


{
  if (__builtin_object_size ((const void *) __ptr, 0) != 18446744073709551615)
    {
      if ((__builtin_constant_p (__size) == 0 || __builtin_constant_p (__n) == 0) || (__size | __n) > 4294967295)
        {
          <<cleanup_point return <retval> = __fread_unlocked_chk (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream)>>;
        }
      if (__size * __n > __builtin_object_size ((const void *) __ptr, 0))
        {
          <<cleanup_point return <retval> = __fread_unlocked_chk_warn (__ptr, __builtin_object_size ((const void *) __ptr, 0), __size, __n, __stream)>>;
        }
    }
  {
    if (((__builtin_constant_p (__size) != 0 && __builtin_constant_p (__n) != 0) && (__size | __n) <= 4294967295) && __size * __n <= 8)
      {
        {
          size_t __cnt = __size * __n;
          char * __cptr = (char *) __ptr;

                    size_t __cnt = __size * __n;
                    char * __cptr = (char *) __ptr;
          if (__cnt == 0)
            {
              return <retval> = 0;
            }
          {
            while (1)
              {
                if (__cnt == 0) goto <D.18402>;
                {
                  int __c;

                                    int __c;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__c = getc_unlocked (__stream)) >>>>>;
                  if (__c == -1) goto <D.18402>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__cptr++  = (char) __c) >>>>>;
                }
                <<cleanup_point (void)  --__cnt>>;
              }
            <D.18402>:;
          }
          return <retval> = (long unsigned int) ((long int) __cptr - (long int) __ptr) / __size;
        }
      }
  }
  <<cleanup_point return <retval> = __fread_unlocked_alias (__ptr, __size, __n, __stream)>>;
}


;; Function int std::__cxx11::stoi(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, char, int> (strtol, (const char *) "stoi", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int> (strtol, (const char *) "stol", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int> (strtoul, (const char *) "stoul", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int> (strtoll, (const char *) "stoll", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int> (strtoull, (const char *) "stoull", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function float std::__cxx11::stof(const string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<float> (strtof, (const char *) "stof", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function double std::__cxx11::stod(const string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<double> (strtod, (const char *) "stod", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double> (strtold, (const char *) "stold", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function std::__cxx11::string std::__cxx11::to_string(int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.19756, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19756
  vsnprintf
  16
  (const char *) "%d"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.19822, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19822
  vsnprintf
  16
  (const char *) "%u"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.19826, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19826
  vsnprintf
  32
  (const char *) "%ld"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.19830, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19830
  vsnprintf
  32
  (const char *) "%lu"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.19834, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19834
  vsnprintf
  32
  (const char *) "%lld"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(long long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.19838, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19838
  vsnprintf
  32
  (const char *) "%llu"
  __val >>>>>>;


;; Function std::__cxx11::string std::__cxx11::to_string(float) (null)
;; enabled by -tree-original


{
  const int __n = 58;

  <<cleanup_point   const int __n = 58;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.19869, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19869
  vsnprintf
  58
  (const char *) "%f"
  (double) __val >>>>>>;
}


;; Function std::__cxx11::string std::__cxx11::to_string(double) (null)
;; enabled by -tree-original


{
  const int __n = 328;

  <<cleanup_point   const int __n = 328;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.19900, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19900
  vsnprintf
  328
  (const char *) "%f"
  __val >>>>>>;
}


;; Function std::__cxx11::string std::__cxx11::to_string(long double) (null)
;; enabled by -tree-original


{
  const int __n = 4952;

  <<cleanup_point   const int __n = 4952;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.19931, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.19931
  vsnprintf
  4952
  (const char *) "%Lf"
  __val >>>>>>;
}


;; Function int std::__cxx11::stoi(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, wchar_t, int> (wcstol, (const char *) "stoi", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int> (wcstol, (const char *) "stol", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int> (wcstoul, (const char *) "stoul", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int> (wcstoll, (const char *) "stoll", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int> (wcstoull, (const char *) "stoull", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function float std::__cxx11::stof(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<float> (wcstof, (const char *) "stof", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function double std::__cxx11::stod(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<double> (wcstod, (const char *) "stod", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double> (wcstold, (const char *) "stold", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.21155, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.21155
  vswprintf
  16
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.21221, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.21221
  vswprintf
  16
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.21225, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.21225
  vswprintf
  32
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.21229, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.21229
  vswprintf
  32
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.21233, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.21233
  vswprintf
  32
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.21237, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.21237
  vswprintf
  32
  (const wchar_t *) "%"
  __val >>>>>>;


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(float) (null)
;; enabled by -tree-original


{
  const int __n = 58;

  <<cleanup_point   const int __n = 58;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.21242, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.21242
  vswprintf
  58
  (const wchar_t *) "%"
  (double) __val >>>>>>;
}


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(double) (null)
;; enabled by -tree-original


{
  const int __n = 328;

  <<cleanup_point   const int __n = 328;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.21247, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.21247
  vswprintf
  328
  (const wchar_t *) "%"
  __val >>>>>>;
}


;; Function std::__cxx11::wstring std::__cxx11::to_wstring(long double) (null)
;; enabled by -tree-original


{
  const int __n = 4952;

  <<cleanup_point   const int __n = 4952;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.21252, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.21252
  vswprintf
  4952
  (const wchar_t *) "%"
  __val >>>>>>;
}


;; Function std::size_t std::hash<bool>::operator()(bool) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<char>::operator()(char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<signed char>::operator()(signed char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<unsigned char>::operator()(unsigned char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<wchar_t>::operator()(wchar_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<char16_t>::operator()(char16_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<char32_t>::operator()(char32_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<short int>::operator()(short int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<int>::operator()(int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long int>::operator()(long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long long int>::operator()(long long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<short unsigned int>::operator()(short unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<unsigned int>::operator()(unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long unsigned int>::operator()(long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __val
   >>>;


;; Function std::size_t std::hash<long long unsigned int>::operator()(long long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<__int128>::operator()(__int128) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<__int128 unsigned>::operator()(__int128 unsigned) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function static std::size_t std::_Hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_bytes (__ptr, __clength, __seed)>>;


;; Function static std::size_t std::_Fnv_hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Fnv_hash_bytes (__ptr, __clength, __seed)>>;


;; Function std::size_t std::hash<float>::operator()(float) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<float> ((const float &) &__val) : 0>>
   >>>;


;; Function std::size_t std::hash<double>::operator()(double) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<double> ((const double &) &__val) : 0>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<char> >::operator()(const string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char>::data ((const struct string *) __s), std::__cxx11::basic_string<char>::length ((const struct string *) __s), 3339675911)>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<wchar_t> >::operator()(const wstring&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<wchar_t>::data ((const struct wstring *) __s), std::__cxx11::basic_string<wchar_t>::length ((const struct wstring *) __s) * 4, 3339675911)>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<char16_t> >::operator()(const u16string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char16_t>::data ((const struct u16string *) __s), std::__cxx11::basic_string<char16_t>::length ((const struct u16string *) __s) * 2, 3339675911)>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<char32_t> >::operator()(const u32string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char32_t>::data ((const struct u32string *) __s), std::__cxx11::basic_string<char32_t>::length ((const struct u32string *) __s) * 4, 3339675911)>>
   >>>;


;; Function std::__cxx11::basic_string<char> std::literals::string_literals::operator""s(const char*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.24271, <<< Unknown tree: aggr_init_expr
  7
  __comp_ctor 
  D.24271
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.24270, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.24270
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<wchar_t> std::literals::string_literals::operator""s(const wchar_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.24278, <<< Unknown tree: aggr_init_expr
  7
  __comp_ctor 
  D.24278
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.24277, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.24277
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char16_t> std::literals::string_literals::operator""s(const char16_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.24338, <<< Unknown tree: aggr_init_expr
  7
  __comp_ctor 
  D.24338
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.24337, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.24337
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char32_t> std::literals::string_literals::operator""s(const char32_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.24407, <<< Unknown tree: aggr_init_expr
  7
  __comp_ctor 
  D.24407
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.24406, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.24406
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function ssize_t read(int, void*, size_t) (null)
;; enabled by -tree-original


if (__builtin_object_size ((const void *) __buf, 0) != 18446744073709551615)
  {
    if (__builtin_constant_p (__nbytes) == 0)
      {
        <<cleanup_point return <retval> = __read_chk (__fd, __buf, __nbytes, __builtin_object_size ((const void *) __buf, 0))>>;
      }
    if (__builtin_object_size ((const void *) __buf, 0) < __nbytes)
      {
        <<cleanup_point return <retval> = __read_chk_warn (__fd, __buf, __nbytes, __builtin_object_size ((const void *) __buf, 0))>>;
      }
  }
<<cleanup_point return <retval> = __read_alias (__fd, __buf, __nbytes)>>;


;; Function ssize_t pread(int, void*, size_t, __off64_t) (*pread64)
;; enabled by -tree-original


if (__builtin_object_size ((const void *) __buf, 0) != 18446744073709551615)
  {
    if (__builtin_constant_p (__nbytes) == 0)
      {
        <<cleanup_point return <retval> = __pread64_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size ((const void *) __buf, 0))>>;
      }
    if (__builtin_object_size ((const void *) __buf, 0) < __nbytes)
      {
        <<cleanup_point return <retval> = __pread64_chk_warn (__fd, __buf, __nbytes, __offset, __builtin_object_size ((const void *) __buf, 0))>>;
      }
  }
<<cleanup_point return <retval> = __pread64_alias (__fd, __buf, __nbytes, __offset)>>;


;; Function ssize_t pread64(int, void*, size_t, __off64_t) (null)
;; enabled by -tree-original


if (__builtin_object_size ((const void *) __buf, 0) != 18446744073709551615)
  {
    if (__builtin_constant_p (__nbytes) == 0)
      {
        <<cleanup_point return <retval> = __pread64_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size ((const void *) __buf, 0))>>;
      }
    if (__builtin_object_size ((const void *) __buf, 0) < __nbytes)
      {
        <<cleanup_point return <retval> = __pread64_chk_warn (__fd, __buf, __nbytes, __offset, __builtin_object_size ((const void *) __buf, 0))>>;
      }
  }
<<cleanup_point return <retval> = __pread64_alias (__fd, __buf, __nbytes, __offset)>>;


;; Function ssize_t readlink(const char*, char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          <<cleanup_point return <retval> = __readlink_chk (__path, __buf, __len, __builtin_object_size ((const void *) __buf, 1))>>;
        }
      if (__builtin_object_size ((const void *) __buf, 1) < __len)
        {
          <<cleanup_point return <retval> = __readlink_chk_warn (__path, __buf, __len, __builtin_object_size ((const void *) __buf, 1))>>;
        }
    }
  <<cleanup_point return <retval> = __readlink_alias (__path, __buf, __len)>>;
   >>>;


;; Function ssize_t readlinkat(int, const char*, char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          <<cleanup_point return <retval> = __readlinkat_chk (__fd, __path, __buf, __len, __builtin_object_size ((const void *) __buf, 1))>>;
        }
      if (__builtin_object_size ((const void *) __buf, 1) < __len)
        {
          <<cleanup_point return <retval> = __readlinkat_chk_warn (__fd, __path, __buf, __len, __builtin_object_size ((const void *) __buf, 1))>>;
        }
    }
  <<cleanup_point return <retval> = __readlinkat_alias (__fd, __path, __buf, __len)>>;
   >>>;


;; Function char* getcwd(char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__size) == 0)
        {
          <<cleanup_point return <retval> = __getcwd_chk (__buf, __size, __builtin_object_size ((const void *) __buf, 1))>>;
        }
      if (__builtin_object_size ((const void *) __buf, 1) < __size)
        {
          <<cleanup_point return <retval> = __getcwd_chk_warn (__buf, __size, __builtin_object_size ((const void *) __buf, 1))>>;
        }
    }
  <<cleanup_point return <retval> = __getcwd_alias (__buf, __size)>>;
   >>>;


;; Function char* getwd(char*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      <<cleanup_point return <retval> = __getwd_chk (__buf, __builtin_object_size ((const void *) __buf, 1))>>;
    }
  <<cleanup_point return <retval> = __getwd_warn (__buf)>>;
   >>>;


;; Function size_t confstr(int, char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__len) == 0)
        {
          <<cleanup_point return <retval> = __confstr_chk (__name, __buf, __len, __builtin_object_size ((const void *) __buf, 1))>>;
        }
      if (__builtin_object_size ((const void *) __buf, 1) < __len)
        {
          <<cleanup_point return <retval> = __confstr_chk_warn (__name, __buf, __len, __builtin_object_size ((const void *) __buf, 1))>>;
        }
    }
  <<cleanup_point return <retval> = __confstr_alias (__name, __buf, __len)>>;
   >>>;


;; Function int getgroups(int, __gid_t*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __list, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__size) == 0 || __size < 0)
        {
          <<cleanup_point return <retval> = __getgroups_chk (__size, __list, __builtin_object_size ((const void *) __list, 1))>>;
        }
      if ((long unsigned int) __size * 4 > __builtin_object_size ((const void *) __list, 1))
        {
          <<cleanup_point return <retval> = __getgroups_chk_warn (__size, __list, __builtin_object_size ((const void *) __list, 1))>>;
        }
    }
  <<cleanup_point return <retval> = __getgroups_alias (__size, __list)>>;
   >>>;


;; Function int ttyname_r(int, char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__buflen) == 0)
        {
          <<cleanup_point return <retval> = __ttyname_r_chk (__fd, __buf, __buflen, __builtin_object_size ((const void *) __buf, 1))>>;
        }
      if (__builtin_object_size ((const void *) __buf, 1) < __buflen)
        {
          <<cleanup_point return <retval> = __ttyname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size ((const void *) __buf, 1))>>;
        }
    }
  <<cleanup_point return <retval> = __ttyname_r_alias (__fd, __buf, __buflen)>>;
   >>>;


;; Function int getlogin_r(char*, size_t) (null)
;; enabled by -tree-original


if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
  {
    if (__builtin_constant_p (__buflen) == 0)
      {
        <<cleanup_point return <retval> = __getlogin_r_chk (__buf, __buflen, __builtin_object_size ((const void *) __buf, 1))>>;
      }
    if (__builtin_object_size ((const void *) __buf, 1) < __buflen)
      {
        <<cleanup_point return <retval> = __getlogin_r_chk_warn (__buf, __buflen, __builtin_object_size ((const void *) __buf, 1))>>;
      }
  }
<<cleanup_point return <retval> = __getlogin_r_alias (__buf, __buflen)>>;


;; Function int gethostname(char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__buflen) == 0)
        {
          <<cleanup_point return <retval> = __gethostname_chk (__buf, __buflen, __builtin_object_size ((const void *) __buf, 1))>>;
        }
      if (__builtin_object_size ((const void *) __buf, 1) < __buflen)
        {
          <<cleanup_point return <retval> = __gethostname_chk_warn (__buf, __buflen, __builtin_object_size ((const void *) __buf, 1))>>;
        }
    }
  <<cleanup_point return <retval> = __gethostname_alias (__buf, __buflen)>>;
   >>>;


;; Function int getdomainname(char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __buf, 1) != 18446744073709551615)
    {
      if (__builtin_constant_p (__buflen) == 0)
        {
          <<cleanup_point return <retval> = __getdomainname_chk (__buf, __buflen, __builtin_object_size ((const void *) __buf, 1))>>;
        }
      if (__builtin_object_size ((const void *) __buf, 1) < __buflen)
        {
          <<cleanup_point return <retval> = __getdomainname_chk_warn (__buf, __buflen, __builtin_object_size ((const void *) __buf, 1))>>;
        }
    }
  <<cleanup_point return <retval> = __getdomainname_alias (__buf, __buflen)>>;
   >>>;


;; Function intmax_t strtoimax(const char*, char**, int) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __strtol_internal (nptr, endptr, base, 0)>>
   >>>;


;; Function uintmax_t strtoumax(const char*, char**, int) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __strtoul_internal (nptr, endptr, base, 0)>>
   >>>;


;; Function intmax_t wcstoimax(const wchar_t*, wchar_t**, int) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __wcstol_internal (nptr, endptr, base, 0)>>
   >>>;


;; Function uintmax_t wcstoumax(const wchar_t*, wchar_t**, int) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __wcstoul_internal (nptr, endptr, base, 0)>>
   >>>;


;; Function outBuff::outBuff(char*, unsigned int, int, int, unsigned int, bool, outBuff*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char * buf;
    unsigned int bufSize;
    int blockNumber;
    int sequenceNumber;
    unsigned int inSize;
    bool isLastInSequence;
    struct outBuff * next;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct outBuff *) this)->buf = aBuf) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct outBuff *) this)->bufSize = aBufSize) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct outBuff *) this)->blockNumber = aBlockNumber) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct outBuff *) this)->sequenceNumber = aSequenceNumber) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct outBuff *) this)->inSize = aInSize) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct outBuff *) this)->isLastInSequence = isLast) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct outBuff *) this)->next = aNext) >>>>>;
}


;; Function queue::queue() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct ElementType * * qData;
    long int size;
    long int count;
    long int head;
    long int tail;
    int full;
    int empty;
    int topLevelFull;
    int topLevelEmpty;
    union pthread_mutex_t * mut;
    union pthread_cond_t * notFull;
    union pthread_cond_t * notEmpty;
    pthread_t * consumers;
    struct ElementType * lastElement;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->count = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->lastElement = 0B) >>>>>;
}


;; Function void queue::clear() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->empty = 1) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->full = 0) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->head = 0) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->tail = 0) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->count = 0) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->lastElement = 0B) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->topLevelFull = 0) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->topLevelEmpty = 1) >>>>>;


;; Function void queue::add(queue::ElementTypePtr) (null)
;; enabled by -tree-original


if (element->sequenceNumber > 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->lastElement->next = element) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(((struct queue *) this)->qData + (sizetype) ((long unsigned int) ((struct queue *) this)->tail * 8)) = element) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct queue *) this)->tail >>>>>;
    if (((struct queue *) this)->tail == ((struct queue *) this)->size)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->tail = 0) >>>>>;
      }
    if (((struct queue *) this)->tail == ((struct queue *) this)->head)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->topLevelFull = 1) >>>>>;
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->topLevelEmpty = 0) >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->lastElement = element) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct queue *) this)->count >>>>>;
if (((struct queue *) this)->count == ((struct queue *) this)->size)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->full = 1) >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->empty = 0) >>>>>;


;; Function int queue::remove(queue::ElementType*&) (null)
;; enabled by -tree-original


{
  struct ElementType * & headElem = (struct ElementType * &) (((struct queue *) this)->qData + (sizetype) ((long unsigned int) ((struct queue *) this)->head * 8));

    struct ElementType * & headElem = (struct ElementType * &) (((struct queue *) this)->qData + (sizetype) ((long unsigned int) ((struct queue *) this)->head * 8));
  if (*element != 0B && !(*element)->isLastInSequence)
    {
      if ((*element)->next != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*element = (*element)->next) >>>>>;
        }
      else
        {
          return <retval> = 0;
        }
    }
  else
    {
      if (((struct queue *) this)->topLevelEmpty != 0)
        {
          return <retval> = 0;
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*element = *headElem) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct queue *) this)->head >>>>>;
          if (((struct queue *) this)->head == ((struct queue *) this)->size)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->head = 0) >>>>>;
            }
          if (((struct queue *) this)->head == ((struct queue *) this)->tail)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->topLevelEmpty = 1) >>>>>;
            }
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->topLevelFull = 0) >>>>>;
        }
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  --((struct queue *) this)->count >>>>>;
  if (((struct queue *) this)->count == 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->empty = 1) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct queue *) this)->full = 0) >>>>>;
  return <retval> = 1;
}


;; Function pbzip2::ErrorContext::ErrorContext() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _first_kernel_err_no;
    int _last_kernel_err_no;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ErrorContext *) this)->_first_kernel_err_no = 0) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ErrorContext *) this)->_last_kernel_err_no = 0) >>>>>;
}


;; Function void* memchr(void*, int, size_t) (*memchr)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = __builtin_memchr ((const void *) __s, __c, __n)
   >>>;


;; Function const void* memchr(const void*, int, size_t) (*memchr)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (const void *) __builtin_memchr (__s, __c, __n)
   >>>;


;; Function char* strchr(char*, int) (*strchr)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = __builtin_strchr ((const char *) __s, __c)
   >>>;


;; Function const char* strchr(const char*, int) (*strchr)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (const char *) __builtin_strchr (__s, __c)
   >>>;


;; Function char* strrchr(char*, int) (*strrchr)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = __builtin_strrchr ((const char *) __s, __c)
   >>>;


;; Function const char* strrchr(const char*, int) (*strrchr)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (const char *) __builtin_strrchr (__s, __c)
   >>>;


;; Function char* strpbrk(char*, const char*) (*strpbrk)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = __builtin_strpbrk ((const char *) __s, __accept)
   >>>;


;; Function const char* strpbrk(const char*, const char*) (*strpbrk)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (const char *) __builtin_strpbrk (__s, __accept)
   >>>;


;; Function char* strstr(char*, const char*) (*strstr)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = __builtin_strstr ((const char *) __haystack, __needle)
   >>>;


;; Function const char* strstr(const char*, const char*) (*strstr)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (const char *) __builtin_strstr (__haystack, __needle)
   >>>;


;; Function char* index(char*, int) (*index)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = __builtin_index ((const char *) __s, __c)
   >>>;


;; Function const char* index(const char*, int) (*index)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (const char *) __builtin_index (__s, __c)
   >>>;


;; Function char* rindex(char*, int) (*rindex)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = __builtin_rindex ((const char *) __s, __c)
   >>>;


;; Function const char* rindex(const char*, int) (*rindex)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  return <retval> = (const char *) __builtin_rindex (__s, __c)
   >>>;


;; Function void bcopy(const void*, void*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size ((const void *) __dest, 0)) >>>>>
   >>>;


;; Function void bzero(void*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin___memset_chk (__dest, 0, __len, __builtin_object_size ((const void *) __dest, 0)) >>>>>
   >>>;


;; Function void* memcpy(void*, const void*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size ((const void *) __dest, 0))>>
   >>>;


;; Function void* memmove(void*, const void*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size ((const void *) __dest, 0))>>
   >>>;


;; Function void* mempcpy(void*, const void*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin___mempcpy_chk (__dest, __src, __len, __builtin_object_size ((const void *) __dest, 0))>>
   >>>;


;; Function void* memset(void*, int, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size ((const void *) __dest, 0))>>
   >>>;


;; Function void explicit_bzero(void*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  __explicit_bzero_chk (__dest, __len, __builtin_object_size ((const void *) __dest, 0)) >>>>>
   >>>;


;; Function char* strcpy(char*, const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin___strcpy_chk (__dest, __src, __builtin_object_size ((const void *) __dest, 1))>>
   >>>;


;; Function char* stpcpy(char*, const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin___stpcpy_chk (__dest, __src, __builtin_object_size ((const void *) __dest, 1))>>
   >>>;


;; Function char* strncpy(char*, const char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size ((const void *) __dest, 1))>>
   >>>;


;; Function char* stpncpy(char*, const char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  if (__builtin_object_size ((const void *) __dest, 1) != 18446744073709551615 && (__builtin_constant_p (__n) == 0 || __builtin_object_size ((const void *) __dest, 1) < __n))
    {
      <<cleanup_point return <retval> = __stpncpy_chk (__dest, __src, __n, __builtin_object_size ((const void *) __dest, 1))>>;
    }
  <<cleanup_point return <retval> = __stpncpy_alias (__dest, __src, __n)>>;
   >>>;


;; Function char* strcat(char*, const char*) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin___strcat_chk (__dest, __src, __builtin_object_size ((const void *) __dest, 1))>>
   >>>;


;; Function char* strncat(char*, const char*, size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point return <retval> = __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size ((const void *) __dest, 1))>>
   >>>;


;; Function static pbzip2::ErrorContext* pbzip2::ErrorContext::getInstance() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_mutex_lock (&_err_ctx_mutex) >>>>>;
if (_instance == 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (_instance = TARGET_EXPR <D.26670, operator new (8, (const struct nothrow_t &) &nothrow)>;, (struct ErrorContext *) D.26670 != 0B ? try
    {
      pbzip2::ErrorContext::ErrorContext ((struct ErrorContext *) D.26670);
    }
  catch
    {
      operator delete (D.26670, (const struct nothrow_t &) &nothrow);
    }, (struct ErrorContext *) D.26670; : (struct ErrorContext *) D.26670;) >>>>>;
    if (_instance == 0B)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fprintf (stderr, (const char *) "pbzip2: *ERROR: Can\'t initialize error context - out of memory!\n") >>>>>;
      }
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_mutex_unlock (&_err_ctx_mutex) >>>>>;
return <retval> = _instance;


;; Function static void pbzip2::ErrorContext::printErrnoMsg(FILE*, int) (null)
;; enabled by -tree-original


if (err != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) fprintf (out, (const char *) "pbzip2: *ERROR: system call failed with errno=[%d: %s]!\n", err, strerror (err)) >>>>>;
  }


;; Function static void pbzip2::ErrorContext::syncPrintErrnoMsg(FILE*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_mutex_lock (&_err_ctx_mutex) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  pbzip2::ErrorContext::printErrnoMsg (out, err) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_mutex_unlock (&_err_ctx_mutex) >>>>>;


;; Function void pbzip2::ErrorContext::printErrorMessages(FILE*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_mutex_lock (&_err_ctx_mutex) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  pbzip2::ErrorContext::printErrnoMsg (out, ((struct ErrorContext *) this)->_first_kernel_err_no) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  pbzip2::ErrorContext::printErrnoMsg (out, ((struct ErrorContext *) this)->_last_kernel_err_no) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_mutex_unlock (&_err_ctx_mutex) >>>>>;


;; Function void pbzip2::ErrorContext::saveError() (null)
;; enabled by -tree-original


{
  int newerr = *__errno_location ();

    int newerr = *__errno_location ();
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_mutex_lock (&_err_ctx_mutex) >>>>>;
  {
    if (newerr != 0)
      {
        {
          int & err_ref = (int &) (((struct ErrorContext *) this)->_first_kernel_err_no == 0 ? &((struct ErrorContext *) this)->_first_kernel_err_no : &((struct ErrorContext *) this)->_last_kernel_err_no);

                    int & err_ref = (int &) (((struct ErrorContext *) this)->_first_kernel_err_no == 0 ? &((struct ErrorContext *) this)->_first_kernel_err_no : &((struct ErrorContext *) this)->_last_kernel_err_no);
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*err_ref = newerr) >>>>>;
        }
      }
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ErrorContext *) this)->_last_kernel_err_no = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_mutex_unlock (&_err_ctx_mutex) >>>>>;
}


;; Function void pbzip2::ErrorContext::reset() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_mutex_lock (&_err_ctx_mutex) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ErrorContext *) this)->_first_kernel_err_no = ((struct ErrorContext *) this)->_last_kernel_err_no = 0) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_mutex_unlock (&_err_ctx_mutex) >>>>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.26730>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long int) __tmp, TARGET_EXPR <D.26842, *(struct integral_constant &) &TARGET_EXPR <D.26808, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.26879>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    long int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long int) __tmp, TARGET_EXPR <D.26943, *(struct integral_constant &) &TARGET_EXPR <D.26933, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.26980>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long unsigned int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long unsigned int __tmp;

    long unsigned int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long unsigned int) __tmp, TARGET_EXPR <D.27035, *(struct integral_constant &) &TARGET_EXPR <D.27025, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.27072>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long int __tmp;

    long long int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long long int) __tmp, TARGET_EXPR <D.27127, *(struct integral_constant &) &TARGET_EXPR <D.27117, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.27164>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIyycJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long long unsigned int) __tmp, TARGET_EXPR <D.27219, *(struct integral_constant &) &TARGET_EXPR <D.27209, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = float; _Ret = float; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = float; _Ret = float; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.27256>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483648e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  float __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const float __tmp;

    float __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const float __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((float) __tmp, TARGET_EXPR <D.27311, *(struct integral_constant &) &TARGET_EXPR <D.27301, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (float) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = double; _Ret = double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = double; _Ret = double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.27348>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  double __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const double __tmp;

    double __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((double) __tmp, TARGET_EXPR <D.27403, *(struct integral_constant &) &TARGET_EXPR <D.27393, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.27440>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIeecJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long double __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long double __tmp;

    long double __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long double) __tmp, TARGET_EXPR <D.27495, *(struct integral_constant &) &TARGET_EXPR <D.27485, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((long int) __endptr - (long int) __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function _String __gnu_cxx::__to_xstring(int (*)(_CharT*, std::size_t, const _CharT*, __va_list_tag*), std::size_t, const _CharT*, ...) [with _String = std::__cxx11::basic_string<char>; _CharT = char; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  char * __s;
  struct  __args[1];
  const int __len;

    char * __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__s = (char *) __builtin_alloca (NON_LVALUE_EXPR <__n>)) >>>>>;
    struct  __args[1];
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((struct  *) &__args, __fmt) >>>>>;
    const int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = __convf (__s, __n, __fmt, (struct  *) &__args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((struct  *) &__args) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.27684, <<< Unknown tree: aggr_init_expr
  7
  __comp_ctor 
  D.27684
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __s
  __s + (sizetype) __len
  (const struct allocator &) &TARGET_EXPR <D.27683, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.27683
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
}


;; Function std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        char * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.27688>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._71 D.19671;
        } &) this = {CLOBBER};
      }
  }
  <D.27686>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._71 D.19671;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), (struct allocator &) std::move<std::allocator<char>&> ((struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char>::copy ((char *) &((struct basic_string *) this)->D.18739._M_local_buf, (const char_type *) &__str->D.18739._M_local_buf, 16) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __str->D.18739._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_length ((struct basic_string *) this, std::__cxx11::basic_string<char>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.27771>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIliwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long int) __tmp, TARGET_EXPR <D.27791, *(struct integral_constant &) &TARGET_EXPR <D.27790, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.27828>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIllwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    long int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long int) __tmp, TARGET_EXPR <D.27848, *(struct integral_constant &) &TARGET_EXPR <D.27847, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.27885>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaImmwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long unsigned int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long unsigned int __tmp;

    long unsigned int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long unsigned int) __tmp, TARGET_EXPR <D.27905, *(struct integral_constant &) &TARGET_EXPR <D.27904, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.27942>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (unsigned long) __val + 2147483648 > 4294967295;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIxxwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long int __tmp;

    long long int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long long int) __tmp, TARGET_EXPR <D.27962, *(struct integral_constant &) &TARGET_EXPR <D.27961, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.27999>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIyywJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long long unsigned int) __tmp, TARGET_EXPR <D.28019, *(struct integral_constant &) &TARGET_EXPR <D.28018, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.28056>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483648e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIffwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  float __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const float __tmp;

    float __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const float __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((float) __tmp, TARGET_EXPR <D.28076, *(struct integral_constant &) &TARGET_EXPR <D.28075, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (float) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.28113>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIddwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  double __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const double __tmp;

    double __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((double) __tmp, TARGET_EXPR <D.28133, *(struct integral_constant &) &TARGET_EXPR <D.28132, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    int _M_errno;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *__errno_location ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (*__errno_location () == 0)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__errno_location () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct 
        {
          int _M_errno;
        } &) this = {CLOBBER};
      }
  }
  <D.28170>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIeewJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_)
;; enabled by -tree-original


{
  long double __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long double __tmp;

    long double __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *__errno_location () == 34 || __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Range_chk::_S_chk ((long double) __tmp, TARGET_EXPR <D.28190, *(struct integral_constant &) &TARGET_EXPR <D.28189, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (((long int) __endptr - (long int) __str) /[ex] 4)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long unsigned int]::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function _String __gnu_cxx::__to_xstring(int (*)(_CharT*, std::size_t, const _CharT*, __va_list_tag*), std::size_t, const _CharT*, ...) [with _String = std::__cxx11::basic_string<wchar_t>; _CharT = wchar_t; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


{
  wchar_t * __s;
  struct  __args[1];
  const int __len;

    wchar_t * __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__s = (wchar_t *) __builtin_alloca (__n * 4)) >>>>>;
    struct  __args[1];
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((struct  *) &__args, __fmt) >>>>>;
    const int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = __convf (__s, __n, __fmt, (struct  *) &__args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((struct  *) &__args) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.28222, <<< Unknown tree: aggr_init_expr
  7
  __comp_ctor 
  D.28222
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __s
  __s + (sizetype) ((long unsigned int) __len * 4)
  (const struct allocator &) &TARGET_EXPR <D.28221, <<< Unknown tree: aggr_init_expr
  4
  __comp_ctor 
  D.28221
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
}


;; Function std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<wchar_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        wchar_t * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.28226>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._71 D.21070;
        } &) this = {CLOBBER};
      }
  }
  <D.28224>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._71 D.21070;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), (struct allocator &) std::move<std::allocator<wchar_t>&> ((struct allocator &) std::__cxx11::basic_string<wchar_t>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<wchar_t>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<wchar_t>::copy ((wchar_t *) &((struct basic_string *) this)->D.20139._M_local_buf, (const char_type *) &__str->D.20139._M_local_buf, 4) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __str->D.20139._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_length ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = float; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 4, 3339675911)>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = double; std::size_t = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 8, 3339675911)>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char16_t *) std::__cxx11::basic_string<char16_t>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char32_t *) std::__cxx11::basic_string<char32_t>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<char>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.28287>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._71 D.19671;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<const char*> ((struct basic_string *) this, __s, __s + (sizetype) NON_LVALUE_EXPR <__n>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<wchar_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<wchar_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.28304>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._71 D.21070;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 4)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char16_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<char16_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.28321>:;
   >>>;


;; Function std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char16_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        char16_t * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.28356>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._71 D.22943;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char16_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 2)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._71 D.22943;
        } &) this = {CLOBBER};
      }
  }
  <D.28369>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._71 D.22943;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char16_t>::_M_local_data ((struct basic_string *) this), (struct allocator &) std::move<std::allocator<char16_t>&> ((struct allocator &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<char16_t>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char16_t>::copy ((char16_t *) &((struct basic_string *) this)->D.22012._M_local_buf, (const char_type *) &__str->D.22012._M_local_buf, 8) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_capacity ((struct basic_string *) this, __str->D.22012._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_length ((struct basic_string *) this, std::__cxx11::basic_string<char16_t>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<char16_t>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::new_allocator ((struct new_allocator *) this) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char32_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    try
      {
        
      }
    finally
      {
        __gnu_cxx::new_allocator<char32_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
  <D.28388>:;
   >>>;


;; Function std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char32_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct 
      {
        char32_t * _M_p;
      } &) this = {CLOBBER};
    }
}
<D.28423>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._71 D.24260;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char32_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 4)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct 
        {
          struct _Alloc_hider _M_dataplus;
          size_type _M_string_length;
          union ._71 D.24260;
        } &) this = {CLOBBER};
      }
  }
  <D.28436>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._71 D.24260;
  } &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char32_t>::_M_local_data ((struct basic_string *) this), (struct allocator &) std::move<std::allocator<char32_t>&> ((struct allocator &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<char32_t>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char32_t>::copy ((char32_t *) &((struct basic_string *) this)->D.23329._M_local_buf, (const char_type *) &__str->D.23329._M_local_buf, 4) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_capacity ((struct basic_string *) this, __str->D.23329._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_length ((struct basic_string *) this, std::__cxx11::basic_string<char32_t>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<char32_t>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


return <retval> = (char *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = char*; <template-parameter-2-2> = void; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._71 D.19671;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> ((struct basic_string *) this, __beg, __end) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.18739._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char *) std::pointer_traits<char*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.18739._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<char>&; typename std::remove_reference< <template-parameter-1-1> >::type = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, _Alloc&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char>::allocator ((struct allocator *) this, (const struct allocator &) std::move<std::allocator<char>&> ((struct allocator &) __a)) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char>::~allocator ((struct allocator *) this);
    }
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.18739._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + (sizetype) NON_LVALUE_EXPR <__n>), (const char_type &) &TARGET_EXPR <D.28506, 0>) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


return <retval> = (wchar_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = wchar_t*; <template-parameter-2-2> = void; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    struct _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    union ._71 D.21070;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<wchar_t*> ((struct basic_string *) this, __beg, __end) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<wchar_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.20139._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (wchar_t *) std::pointer_traits<wchar_t*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.20139._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<wchar_t>&; typename std::remove_reference< <template-parameter-1-1> >::type = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, _Alloc&&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    wchar_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<wchar_t>::allocator ((struct allocator *) this, (const struct allocator &) std::move<std::allocator<wchar_t>&> ((struct allocator &) __a)) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<wchar_t>::~allocator ((struct allocator *) this);
    }
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<wchar_t>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.20139._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 4)), (const char_type &) &TARGET_EXPR <D.28562, 0>) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


return <retval> = (char16_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


return <retval> = (char32_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.28569>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct_aux<const char*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.28610, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.28653>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    wchar_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<wchar_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<wchar_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct_aux<const wchar_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.28670, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.28680>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) std::pointer_traits<char16_t*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.22012._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char16_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char16_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char16_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct_aux<const char16_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.28733, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char16_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.22012._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<char16_t>&; typename std::remove_reference< <template-parameter-1-1> >::type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, _Alloc&&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char16_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char16_t>::allocator ((struct allocator *) this, (const struct allocator &) std::move<std::allocator<char16_t>&> ((struct allocator &) __a)) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char16_t>::~allocator ((struct allocator *) this);
    }
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char16_t *) std::__cxx11::basic_string<char16_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char16_t>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.22012._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) (std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 2)), (const char_type &) &TARGET_EXPR <D.28750, 0>) >>>>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.28755>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) std::pointer_traits<char32_t*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.23329._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char32_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char32_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char32_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct_aux<const char32_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.28808, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char32_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.23329._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<char32_t>&; typename std::remove_reference< <template-parameter-1-1> >::type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, _Alloc&&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct 
  {
    char32_t * _M_p;
  } &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char32_t>::allocator ((struct allocator *) this, (const struct allocator &) std::move<std::allocator<char32_t>&> ((struct allocator &) __a)) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char32_t>::~allocator ((struct allocator *) this);
    }
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char32_t *) std::__cxx11::basic_string<char32_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char32_t>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.23329._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) (std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 4)), (const char_type &) &TARGET_EXPR <D.28825, 0>) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct_aux<char*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.28834, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = char; std::pointer_traits<_Tp*>::pointer = char*; std::__make_not_void<_Tp> = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char *) std::addressof<char> ((char &) __r)>>
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char *) std::pointer_traits<const char*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.18739._M_local_buf)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct_aux<wchar_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.28900, {}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<wchar_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<wchar_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = wchar_t; std::pointer_traits<_Tp*>::pointer = wchar_t*; std::__make_not_void<_Tp> = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (wchar_t *) std::addressof<wchar_t> ((wchar_t &) __r)>>
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<wchar_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const wchar_t *) std::pointer_traits<const wchar_t*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.20139._M_local_buf)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<const char*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.29078, *(struct forward_iterator_tag &) &TARGET_EXPR <D.29058, {}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.29101, *(struct forward_iterator_tag &) &TARGET_EXPR <D.29090, {}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = char16_t; std::pointer_traits<_Tp*>::pointer = char16_t*; std::__make_not_void<_Tp> = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char16_t *) std::addressof<char16_t> ((char16_t &) __r)>>
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char16_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.29141, *(struct forward_iterator_tag &) &TARGET_EXPR <D.29130, {}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char16_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char16_t *) std::pointer_traits<const char16_t*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.22012._M_local_buf)>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = char32_t; std::pointer_traits<_Tp*>::pointer = char32_t*; std::__make_not_void<_Tp> = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char32_t *) std::addressof<char32_t> ((char32_t &) __r)>>
   >>>;


;; Function std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
    try
      {
        
      }
    catch
      {
        __gnu_cxx::new_allocator<char32_t>::~new_allocator ((struct new_allocator *) this);
      }
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.29216, *(struct forward_iterator_tag &) &TARGET_EXPR <D.29205, {}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: eh_spec_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char32_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char32_t *) std::pointer_traits<const char32_t*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.23329._M_local_buf)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.29266, *(struct forward_iterator_tag &) &TARGET_EXPR <D.29255, {}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>; std::allocator_traits<std::allocator<_CharT> >::pointer = char*; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::deallocate ((struct new_allocator *) __a, __p, __n) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char *) __r
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char> (__r)>>
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const char; std::pointer_traits<_Tp*>::pointer = const char*; std::__make_not_void<_Tp> = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::addressof<const char> ((const char &) __r)>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<wchar_t*> ((struct basic_string *) this, __beg, __end, TARGET_EXPR <D.29292, *(struct forward_iterator_tag &) &TARGET_EXPR <D.29281, {}>>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = wchar_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<wchar_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = wchar_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::deallocate ((struct new_allocator *) __a, __p, __n) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (wchar_t *) __r
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<wchar_t> (__r)>>
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const wchar_t; std::pointer_traits<_Tp*>::pointer = const wchar_t*; std::__make_not_void<_Tp> = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::addressof<const wchar_t> ((const wchar_t &) __r)>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const wchar_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const wchar_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy_chars (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char16_t *) __r
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char16_t> (__r)>>
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char16_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char16_t*> (__beg, __end)) >>>>>;
  if (__dnew > 7)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char16_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_S_copy_chars (std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = char16_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::deallocate ((struct new_allocator *) __a, __p, __n) >>>>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const char16_t; std::pointer_traits<_Tp*>::pointer = const char16_t*; std::__make_not_void<_Tp> = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char16_t *) std::addressof<const char16_t> ((const char16_t &) __r)>>
   >>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char32_t *) __r
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char32_t> (__r)>>
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char32_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char32_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char32_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_S_copy_chars (std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = char32_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::deallocate ((struct new_allocator *) __a, __p, __n) >>>>>;


;; Function static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const char32_t; std::pointer_traits<_Tp*>::pointer = const char32_t*; std::__make_not_void<_Tp> = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char32_t *) std::addressof<const char32_t> ((const char32_t &) __r)>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<char> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char; __gnu_cxx::new_allocator<_Tp>::pointer = char*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char *) __r
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char> (__r)>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<wchar_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<wchar_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy_chars (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = wchar_t; __gnu_cxx::new_allocator<_Tp>::pointer = wchar_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const wchar_t *) __r
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const wchar_t> (__r)>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.30256, {}>>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (long int) __last - (long int) __first;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char*> (__first, __last, TARGET_EXPR <D.30246, TARGET_EXPR <D.30259, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, __k1, (size_type) ((long int) __k2 - (long int) __k1)) >>>>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const wchar_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const wchar_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.30275, {}>>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = ((long int) __last - (long int) __first) /[ex] 4;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const wchar_t*> (__first, __last, TARGET_EXPR <D.30265, TARGET_EXPR <D.30278, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy (__p, __k1, (size_type) (((long int) __k2 - (long int) __k1) /[ex] 4)) >>>>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char16_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char16_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.30294, {}>>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char16_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = ((long int) __last - (long int) __first) /[ex] 2;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char16_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char16_t*> (__first, __last, TARGET_EXPR <D.30284, TARGET_EXPR <D.30297, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (char16_t *) std::allocator_traits<std::allocator<char16_t> >::allocate ((struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_S_copy (__p, __k1, (size_type) (((long int) __k2 - (long int) __k1) /[ex] 2)) >>>>>
   >>>;


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::pointer = char16_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char16_t *) __r
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char16_t> (__r)>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char32_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char32_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.30319, {}>>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char32_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = ((long int) __last - (long int) __first) /[ex] 4;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char32_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char32_t*> (__first, __last, TARGET_EXPR <D.30309, TARGET_EXPR <D.30322, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (char32_t *) std::allocator_traits<std::allocator<char32_t> >::allocate ((struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_S_copy (__p, __k1, (size_type) (((long int) __k2 - (long int) __k1) /[ex] 4)) >>>>>
   >>>;


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::pointer = char32_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char32_t *) __r
   >>>;


;; Function _Tp* std::addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char32_t> (__r)>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = char] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = char*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.30344, {}>>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = char*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = (long int) __last - (long int) __first;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = char*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<char*> (__first, __last, TARGET_EXPR <D.30334, TARGET_EXPR <D.30347, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _CharT*, _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, (const char *) __k1, (size_type) ((long int) __k2 - (long int) __k1)) >>>>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = wchar_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits<_Iterator>::iterator_category std::__iterator_category(const _Iter&) [with _Iter = wchar_t*; typename std::iterator_traits<_Iterator>::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.30363, {}>>>;


;; Function constexpr typename std::iterator_traits<_Iterator>::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


return <retval> = ((long int) __last - (long int) __first) /[ex] 4;


;; Function typename std::iterator_traits<_Iterator>::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = wchar_t*; typename std::iterator_traits<_Iterator>::difference_type = long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<wchar_t*> (__first, __last, TARGET_EXPR <D.30353, TARGET_EXPR <D.30366, {}>>;, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _CharT*, _CharT*) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy (__p, (const wchar_t *) __k1, (size_type) (((long int) __k2 - (long int) __k1) /[ex] 4)) >>>>>
   >>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char>::copy (__d, __s, __n) >>>>>;
  }


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<wchar_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char16_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::pointer = char16_t*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) __gnu_cxx::new_allocator<char16_t>::allocate ((struct new_allocator *) __a, __n, 0B)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char16_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char32_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;


;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::pointer = char32_t*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) __gnu_cxx::new_allocator<char32_t>::allocate ((struct new_allocator *) __a, __n, 0B)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char32_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gnu_cxx::new_allocator<char16_t>::max_size ((const struct new_allocator *) __a)>>
   >>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::pointer = char16_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point __gnu_cxx::new_allocator<char16_t>::max_size ((struct new_allocator *) this) < __n>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
  }
<<cleanup_point return <retval> = (char16_t *) operator new (__n * 2)>>;


;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::size_type = long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gnu_cxx::new_allocator<char32_t>::max_size ((const struct new_allocator *) __a)>>
   >>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::pointer = char32_t*; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point __gnu_cxx::new_allocator<char32_t>::max_size ((struct new_allocator *) this) < __n>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
  }
<<cleanup_point return <retval> = (char32_t *) operator new (__n * 4)>>;


;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 9223372036854775807
   >>>;


;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4611686018427387903
   >>>;

