pbzip2::BZ2StreamScanner::BZ2StreamScanner(int, size_t) (struct BZ2StreamScanner * const this, int hInFile, size_t inBuffCapacity)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    _1 = &_ZTVN6pbzip216BZ2StreamScannerE + 16;
    this->_vptr.BZ2StreamScanner = _1;
    _2 = &this->_bz2Header;
    std::__cxx11::basic_string<unsigned char>::basic_string (_2);
    try
      {
        _3 = &this->_bz2HeaderZero;
        std::__cxx11::basic_string<unsigned char>::basic_string (_3);
        try
          {
            this->_inBuff = 0B;
            this->_inBuffCapacity = 0;
            _4 = &this->_outBuff;
            outBuff::outBuff (_4, 0B, 0, 0, 0, 0, 1, 0B);
            this->_outBuff.buf = 0B;
            this->_outBuff.bufSize = 0;
            pbzip2::BZ2StreamScanner::init (this, hInFile, inBuffCapacity);
          }
        catch
          {
            _5 = &this->_bz2HeaderZero;
            std::__cxx11::basic_string<unsigned char>::~basic_string (_5);
          }
      }
    catch
      {
        _6 = &this->_bz2Header;
        std::__cxx11::basic_string<unsigned char>::~basic_string (_6);
      }
  }
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string() [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this)
{
  struct allocator D.38463;

  try
    {
      MEM[(struct  &)this] = {CLOBBER};
      {
        _1 = &this->_M_dataplus;
        std::allocator<unsigned char>::allocator (&D.38463);
        try
          {
            try
              {
                _2 = std::__cxx11::basic_string<unsigned char>::_M_local_data (this);
                std::__cxx11::basic_string<unsigned char>::_Alloc_hider::_Alloc_hider (_1, _2, &D.38463);
              }
            finally
              {
                std::allocator<unsigned char>::~allocator (&D.38463);
              }
          }
        finally
          {
            D.38463 = {CLOBBER};
          }
        try
          {
            std::__cxx11::basic_string<unsigned char>::_M_set_length (this, 0);
          }
        catch
          {
            _3 = &this->_M_dataplus;
            std::__cxx11::basic_string<unsigned char>::_Alloc_hider::~_Alloc_hider (_3);
          }
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = unsigned char] (struct allocator * const this)
{
  try
    {
      {
        __gnu_cxx::new_allocator<unsigned char>::new_allocator (this);
        try
          {

          }
        catch
          {
            __gnu_cxx::new_allocator<unsigned char>::~new_allocator (this);
          }
      }
    }
  catch
    {
      <<<eh_filter (NULL)>>>
        {
          
            _1 = __builtin_eh_pointer (0);
            __cxa_call_unexpected (_1);
          
        }
    }
}


__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = unsigned char] (struct new_allocator * const this)
{
  try
    {
      {

      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this)
{
  unsigned char * D.41127;

  _1 = &this->D.29808._M_local_buf;
  D.41127 = std::pointer_traits<unsigned char*>::pointer_to (_1);
  return D.41127;
}


static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = unsigned char] (__make_not_void & __r)
{
  unsigned char * D.41129;

  try
    {
      D.41129 = std::addressof<unsigned char> (__r);
      return D.41129;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


_Tp* std::addressof(_Tp&) [with _Tp = unsigned char] (unsigned char & __r)
{
  unsigned char * D.41131;

  try
    {
      D.41131 = std::__addressof<unsigned char> (__r);
      return D.41131;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


constexpr _Tp* std::__addressof(_Tp&) [with _Tp = unsigned char] (unsigned char & __r)
{
  unsigned char * D.41133;

  try
    {
      D.41133 = __r;
      return D.41133;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, _Alloc&&) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct _Alloc_hider * const this, unsigned char * __dat, struct allocator & __a)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    _1 = std::move<std::allocator<unsigned char>&> (__a);
    std::allocator<unsigned char>::allocator (this, _1);
    try
      {
        this->_M_p = __dat;
      }
    catch
      {
        std::allocator<unsigned char>::~allocator (this);
      }
  }
}


constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<unsigned char>&] (struct allocator & __t)
{
  struct type & D.41135;

  try
    {
      D.41135 = __t;
      return D.41135;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = unsigned char] (struct allocator * const this, const struct allocator & __a)
{
  try
    {
      {
        __gnu_cxx::new_allocator<unsigned char>::new_allocator (this, __a);
        try
          {

          }
        catch
          {
            __gnu_cxx::new_allocator<unsigned char>::~new_allocator (this);
          }
      }
    }
  catch
    {
      <<<eh_filter (NULL)>>>
        {
          
            _1 = __builtin_eh_pointer (0);
            __cxa_call_unexpected (_1);
          
        }
    }
}


__gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = unsigned char] (struct new_allocator * const this, const struct new_allocator & D.29701)
{
  try
    {
      {

      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = unsigned char] (struct allocator * const this)
{
  try
    {
      {
        try
          {

          }
        finally
          {
            __gnu_cxx::new_allocator<unsigned char>::~new_allocator (this);
          }
      }
      <D.38933>:
    }
  catch
    {
      <<<eh_filter (NULL)>>>
        {
          
            _1 = __builtin_eh_pointer (0);
            __cxa_call_unexpected (_1);
          
        }
    }
}


__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = unsigned char] (struct new_allocator * const this)
{
  try
    {
      {

      }
      <D.39510>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this, size_type __n)
{
  const char_type D.38947;

  std::__cxx11::basic_string<unsigned char>::_M_length (this, __n);
  D.38947 = 0;
  try
    {
      _1 = std::__cxx11::basic_string<unsigned char>::_M_data (this);
      _2 = _1 + __n;
      __gnu_cxx::char_traits<unsigned char>::assign (_2, &D.38947);
    }
  finally
    {
      D.38947 = {CLOBBER};
    }
}


void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this, size_type __length)
{
  this->_M_string_length = __length;
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (const struct basic_string * const this)
{
  unsigned char * D.41137;

  D.41137 = this->_M_dataplus._M_p;
  return D.41137;
}


static constexpr void __gnu_cxx::char_traits<_CharT>::assign(__gnu_cxx::char_traits<_CharT>::char_type&, const char_type&) [with _CharT = unsigned char] (char_type & __c1, const char_type & __c2)
{
  _1 = *__c2;
  *__c1 = _1;
}


outBuff::outBuff(char*, unsigned int, int, int, unsigned int, bool, outBuff*) (struct outBuff * const this, char * aBuf, unsigned int aBufSize, int aBlockNumber, int aSequenceNumber, unsigned int aInSize, bool isLast, struct outBuff * aNext)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    this->buf = aBuf;
    this->bufSize = aBufSize;
    this->blockNumber = aBlockNumber;
    this->sequenceNumber = aSequenceNumber;
    this->inSize = aInSize;
    this->isLastInSequence = isLast;
    this->next = aNext;
  }
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this)
{
  try
    {
      {
        try
          {
            try
              {
                std::__cxx11::basic_string<unsigned char>::_M_dispose (this);
              }
            finally
              {
                _1 = &this->_M_dataplus;
                std::__cxx11::basic_string<unsigned char>::_Alloc_hider::~_Alloc_hider (_1);
              }
          }
        finally
          {
            MEM[(struct  &)this] = {CLOBBER};
          }
      }
      <D.38469>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this)
{
  bool retval.0;

  _1 = std::__cxx11::basic_string<unsigned char>::_M_is_local (this);
  retval.0 = ~_1;
  if (retval.0 != 0) goto <D.41140>; else goto <D.41141>;
  <D.41140>:
  _2 = this->D.29808._M_allocated_capacity;
  std::__cxx11::basic_string<unsigned char>::_M_destroy (this, _2);
  goto <D.41142>;
  <D.41141>:
  <D.41142>:
}


bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (const struct basic_string * const this)
{
  bool D.41144;

  _1 = std::__cxx11::basic_string<unsigned char>::_M_data (this);
  _2 = std::__cxx11::basic_string<unsigned char>::_M_local_data (this);
  D.41144 = _1 == _2;
  return D.41144;
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (const struct basic_string * const this)
{
  const unsigned char * D.41146;

  _1 = &this->D.29808._M_local_buf;
  D.41146 = std::pointer_traits<const unsigned char*>::pointer_to (_1);
  return D.41146;
}


static _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const unsigned char] (const __make_not_void & __r)
{
  const unsigned char * D.41148;

  try
    {
      D.41148 = std::addressof<const unsigned char> (__r);
      return D.41148;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


_Tp* std::addressof(_Tp&) [with _Tp = const unsigned char] (const unsigned char & __r)
{
  const unsigned char * D.41150;

  try
    {
      D.41150 = std::__addressof<const unsigned char> (__r);
      return D.41150;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const unsigned char] (const unsigned char & __r)
{
  const unsigned char * D.41152;

  try
    {
      D.41152 = __r;
      return D.41152;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this, size_type __size)
{
  try
    {
      _1 = __size + 1;
      _2 = std::__cxx11::basic_string<unsigned char>::_M_data (this);
      _3 = std::__cxx11::basic_string<unsigned char>::_M_get_allocator (this);
      std::allocator_traits<std::allocator<unsigned char> >::deallocate (_3, _2, _1);
    }
  catch
    {
      <<<eh_filter (NULL)>>>
        {
          
            _4 = __builtin_eh_pointer (0);
            __cxa_call_unexpected (_4);
          
        }
    }
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this)
{
  struct allocator_type & D.41156;

  D.41156 = &this->_M_dataplus;
  return D.41156;
}


static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = unsigned char] (struct allocator_type & __a, unsigned char * __p, size_type __n)
{
  __gnu_cxx::new_allocator<unsigned char>::deallocate (__a, __p, __n);
}


void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = unsigned char] (struct new_allocator * const this, unsigned char * __p, size_type D.29661)
{
  operator delete (__p);
}


std::__cxx11::basic_string<unsigned char>::_Alloc_hider::~_Alloc_hider() (struct _Alloc_hider * const this)
{
  {
    try
      {
        try
          {

          }
        finally
          {
            std::allocator<unsigned char>::~allocator (this);
          }
      }
    finally
      {
        MEM[(struct  &)this] = {CLOBBER};
      }
  }
  <D.38459>:
}


int pbzip2::BZ2StreamScanner::init(int, size_t) (struct BZ2StreamScanner * const this, int hInFile, size_t inBuffCapacity)
{
  bool retval.1;
  long unsigned int inBuffCapacity.2;
  int D.41165;
  CharType bz2header[11];
  CharType bz2ZeroHeader[11];

  try
    {
      _1 = this->_vptr.BZ2StreamScanner;
      _2 = _1 + 16;
      _3 = *_2;
      OBJ_TYPE_REF(_3;(struct BZ2StreamScanner)this->2) (this);
      bz2header = "BZh91AY&SY";
      bz2ZeroHeader[0] = 66;
      bz2ZeroHeader[1] = 90;
      bz2ZeroHeader[2] = 104;
      bz2ZeroHeader[3] = 57;
      bz2ZeroHeader[4] = 23;
      bz2ZeroHeader[5] = 114;
      bz2ZeroHeader[6] = 69;
      bz2ZeroHeader[7] = 56;
      bz2ZeroHeader[8] = 80;
      bz2ZeroHeader[9] = 144;
      bz2ZeroHeader[10] = 0;
      this->_hInFile = hInFile;
      this->_eof = 0;
      _4 = &this->_bz2Header;
      std::__cxx11::basic_string<unsigned char>::operator= (_4, &bz2header);
      _5 = &this->_bz2HeaderZero;
      std::__cxx11::basic_string<unsigned char>::operator= (_5, &bz2ZeroHeader);
      this->_bz2HeaderFound = 0;
      this->_inBuffCapacity = 0;
      this->_errState = 0;
      this->_searchStatus = 0;
      this->_outBuffCapacityHint = 0;
      this->_outBuffCapacityLimit = 1048576;
      this->_outSequenceNumber = 0;
      this->_streamNumber = 0;
      _6 = &this->_bz2Header;
      _7 = std::__cxx11::basic_string<unsigned char>::size (_6);
      _8 = _7 * 2;
      retval.1 = inBuffCapacity < _8;
      if (retval.1 != 0) goto <D.41159>; else goto <D.41160>;
      <D.41159>:
      _9 = &this->_bz2Header;
      _10 = std::__cxx11::basic_string<unsigned char>::size (_9);
      inBuffCapacity = _10 * 2;
      goto <D.41161>;
      <D.41160>:
      <D.41161>:
      inBuffCapacity.2 = inBuffCapacity;
      _11 = operator new [] (inBuffCapacity.2, &nothrow);
      this->_inBuff = _11;
      _12 = this->_inBuff;
      if (_12 == 0B) goto <D.41163>; else goto <D.41164>;
      <D.41163>:
      _13 = this->_errState;
      _14 = _13 | 1;
      this->_errState = _14;
      this->_inBuffEnd = 0B;
      handle_error (1, -1, "pbzip2: *ERROR: Could not allocate memory (FileData)!  Aborting...\n");
      D.41165 = -1;
      return D.41165;
      <D.41164>:
      this->_inBuffCapacity = inBuffCapacity;
      _15 = this->_inBuff;
      this->_inBuffEnd = _15;
      _16 = this->_inBuffEnd;
      this->_inBuffSearchPtr = _16;
      _17 = this->_inBuffSearchPtr;
      this->_inBuffCurrent = _17;
      D.41165 = 0;
      return D.41165;
    }
  finally
    {
      bz2header = {CLOBBER};
      bz2ZeroHeader = {CLOBBER};
    }
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const _CharT*) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this, const unsigned char * __s)
{
  struct basic_string & D.41169;

  D.41169 = std::__cxx11::basic_string<unsigned char>::assign (this, __s);
  return D.41169;
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::assign(const _CharT*) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this, const unsigned char * __s)
{
  struct basic_string & D.41172;

  _1 = __gnu_cxx::char_traits<unsigned char>::length (__s);
  _2 = std::__cxx11::basic_string<unsigned char>::size (this);
  D.41172 = std::__cxx11::basic_string<unsigned char>::_M_replace (this, 0, _2, __s, _1);
  return D.41172;
}


static constexpr std::size_t __gnu_cxx::char_traits<_CharT>::length(const char_type*) [with _CharT = unsigned char] (const char_type * __p)
{
  bool retval.3;
  const char_type D.38952;
  size_t D.41179;
  size_t __i;

  __i = 0;
  <D.41176>:
  D.38952 = 0;
  try
    {
      _1 = __p + __i;
      _2 = __gnu_cxx::char_traits<unsigned char>::eq (_1, &D.38952);
      retval.3 = ~_2;
    }
  finally
    {
      D.38952 = {CLOBBER};
    }
  if (retval.3 != 0) goto <D.41178>; else goto <D.38954>;
  <D.41178>:
  __i = __i + 1;
  goto <D.41176>;
  <D.38954>:
  D.41179 = __i;
  return D.41179;
}


static constexpr bool __gnu_cxx::char_traits<_CharT>::eq(const char_type&, const char_type&) [with _CharT = unsigned char] (const char_type & __c1, const char_type & __c2)
{
  bool D.41181;

  _1 = *__c1;
  _2 = *__c2;
  D.41181 = _1 == _2;
  return D.41181;
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this, size_type __pos, size_type __len1, const unsigned char * __s, const size_type __len2)
{
  bool retval.4;
  bool retval.5;
  struct basic_string & D.41212;
  const size_type __old_size;
  const size_type __new_size;

  std::__cxx11::basic_string<unsigned char>::_M_check_length (this, __len1, __len2, "basic_string::_M_replace");
  __old_size = std::__cxx11::basic_string<unsigned char>::size (this);
  _1 = __old_size + __len2;
  __new_size = _1 - __len1;
  {
    _2 = std::__cxx11::basic_string<unsigned char>::capacity (this);
    retval.4 = __new_size <= _2;
    if (retval.4 != 0) goto <D.41184>; else goto <D.41185>;
    <D.41184>:
    {
      unsigned char * __p;
      const size_type __how_much;

      _3 = std::__cxx11::basic_string<unsigned char>::_M_data (this);
      __p = _3 + __pos;
      _4 = __old_size - __pos;
      __how_much = _4 - __len1;
      {
        retval.5 = std::__cxx11::basic_string<unsigned char>::_M_disjunct (this, __s);
        if (retval.5 != 0) goto <D.41187>; else goto <D.41188>;
        <D.41187>:
        _5 = __how_much != 0;
        _6 = __len1 != __len2;
        _7 = _5 & _6;
        if (_7 != 0) goto <D.41189>; else goto <D.41190>;
        <D.41189>:
        _8 = __p + __len1;
        _9 = __p + __len2;
        std::__cxx11::basic_string<unsigned char>::_S_move (_9, _8, __how_much);
        goto <D.41191>;
        <D.41190>:
        <D.41191>:
        if (__len2 != 0) goto <D.41192>; else goto <D.41193>;
        <D.41192>:
        std::__cxx11::basic_string<unsigned char>::_S_copy (__p, __s, __len2);
        goto <D.41194>;
        <D.41193>:
        <D.41194>:
        goto <D.41195>;
        <D.41188>:
        {
          _10 = __len2 != 0;
          _11 = __len2 <= __len1;
          _12 = _10 & _11;
          if (_12 != 0) goto <D.41196>; else goto <D.41197>;
          <D.41196>:
          std::__cxx11::basic_string<unsigned char>::_S_move (__p, __s, __len2);
          goto <D.41198>;
          <D.41197>:
          <D.41198>:
          _13 = __how_much != 0;
          _14 = __len1 != __len2;
          _15 = _13 & _14;
          if (_15 != 0) goto <D.41199>; else goto <D.41200>;
          <D.41199>:
          _16 = __p + __len1;
          _17 = __p + __len2;
          std::__cxx11::basic_string<unsigned char>::_S_move (_17, _16, __how_much);
          goto <D.41201>;
          <D.41200>:
          <D.41201>:
          {
            if (__len2 > __len1) goto <D.41202>; else goto <D.41203>;
            <D.41202>:
            {
              {
                _18 = __s + __len2;
                _19 = __p + __len1;
                if (_18 <= _19) goto <D.41204>; else goto <D.41205>;
                <D.41204>:
                std::__cxx11::basic_string<unsigned char>::_S_move (__p, __s, __len2);
                goto <D.41206>;
                <D.41205>:
                {
                  {
                    _20 = __p + __len1;
                    if (__s >= _20) goto <D.41207>; else goto <D.41208>;
                    <D.41207>:
                    _21 = __len2 - __len1;
                    _22 = __s + _21;
                    std::__cxx11::basic_string<unsigned char>::_S_copy (__p, _22, __len2);
                    goto <D.41209>;
                    <D.41208>:
                    {
                      const size_type __nleft;

                      _23 = __p + __len1;
                      _24 = (long int) _23;
                      __s.6_25 = (long int) __s;
                      _26 = _24 - __s.6_25;
                      __nleft = (const size_type) _26;
                      std::__cxx11::basic_string<unsigned char>::_S_move (__p, __s, __nleft);
                      _27 = __len2 - __nleft;
                      _28 = __p + __len2;
                      _29 = __p + __nleft;
                      std::__cxx11::basic_string<unsigned char>::_S_copy (_29, _28, _27);
                    }
                    <D.41209>:
                  }
                }
                <D.41206>:
              }
            }
            goto <D.41210>;
            <D.41203>:
            <D.41210>:
          }
        }
        <D.41195>:
      }
    }
    goto <D.41211>;
    <D.41185>:
    std::__cxx11::basic_string<unsigned char>::_M_mutate (this, __pos, __len1, __s, __len2);
    <D.41211>:
  }
  std::__cxx11::basic_string<unsigned char>::_M_set_length (this, __new_size);
  D.41212 = this;
  return D.41212;
}


void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_check_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const char*) const [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (const struct basic_string * const this, size_type __n1, size_type __n2, const char * __s)
{
  bool retval.7;

  _1 = std::__cxx11::basic_string<unsigned char>::max_size (this);
  _2 = std::__cxx11::basic_string<unsigned char>::size (this);
  _3 = __n1 - _2;
  _4 = _1 + _3;
  retval.7 = __n2 > _4;
  if (retval.7 != 0) goto <D.41215>; else goto <D.41216>;
  <D.41215>:
  __s.8_5 = __s;
  std::__throw_length_error (__s.8_5);
  <D.41216>:
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (const struct basic_string * const this)
{
  size_type D.41217;

  try
    {
      _1 = std::__cxx11::basic_string<unsigned char>::_M_get_allocator (this);
      _2 = std::allocator_traits<std::allocator<unsigned char> >::max_size (_1);
      _3 = _2 + 18446744073709551615;
      D.41217 = _3 / 2;
      return D.41217;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (const struct basic_string * const this)
{
  const struct allocator_type & D.41219;

  D.41219 = &this->_M_dataplus;
  return D.41219;
}


static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = unsigned char] (const struct allocator_type & __a)
{
  size_type D.41221;

  try
    {
      D.41221 = __gnu_cxx::new_allocator<unsigned char>::max_size (__a);
      return D.41221;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = unsigned char] (const struct new_allocator * const this)
{
  size_type D.41223;

  try
    {
      D.41223 = 18446744073709551615;
      return D.41223;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::capacity() const [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (const struct basic_string * const this)
{
  size_type D.41225;
  size_type iftmp.9;

  try
    {
      _1 = std::__cxx11::basic_string<unsigned char>::_M_is_local (this);
      if (_1 != 0) goto <D.41227>; else goto <D.41228>;
      <D.41227>:
      iftmp.9 = 15;
      goto <D.41229>;
      <D.41228>:
      iftmp.9 = this->D.29808._M_allocated_capacity;
      <D.41229>:
      D.41225 = iftmp.9;
      return D.41225;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_disjunct(const _CharT*) const [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (const struct basic_string * const this, const unsigned char * __s)
{
  bool D.41232;
  bool iftmp.10;
  struct less D.40668;
  const unsigned char * const D.40678;
  struct less D.40679;
  const unsigned char * const D.40680;

  try
    {
      try
        {
          try
            {
              try
                {
                  try
                    {
                      _1 = std::__cxx11::basic_string<unsigned char>::_M_data (this);
                      D.40678 = _1;
                      _2 = std::less<const unsigned char*>::operator() (&D.40668, &__s, &D.40678);
                      if (_2 != 0) goto <D.41234>; else goto <D.41237>;
                      <D.41237>:
                      _3 = std::__cxx11::basic_string<unsigned char>::_M_data (this);
                      _4 = std::__cxx11::basic_string<unsigned char>::size (this);
                      _5 = _3 + _4;
                      D.40680 = _5;
                      _6 = std::less<const unsigned char*>::operator() (&D.40679, &D.40680, &__s);
                      if (_6 != 0) goto <D.41234>; else goto <D.41235>;
                      <D.41234>:
                      iftmp.10 = 1;
                      goto <D.41236>;
                      <D.41235>:
                      iftmp.10 = 0;
                      <D.41236>:
                      D.41232 = iftmp.10;
                      return D.41232;
                    }
                  finally
                    {
                      D.40680 = {CLOBBER};
                    }
                }
              finally
                {
                  D.40679 = {CLOBBER};
                }
            }
          finally
            {
              D.40678 = {CLOBBER};
            }
        }
      finally
        {
          D.40668 = {CLOBBER};
        }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


constexpr bool std::less<_Tp>::operator()(const _Tp&, const _Tp&) const [with _Tp = const unsigned char*] (const struct less * const this, const unsigned char * const & __x, const unsigned char * const & __y)
{
  bool D.41243;

  _1 = *__x;
  _2 = *__y;
  D.41243 = _1 < _2;
  return D.41243;
}


static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_move(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (unsigned char * __d, const unsigned char * __s, size_type __n)
{
  if (__n == 1) goto <D.41245>; else goto <D.41246>;
  <D.41245>:
  __gnu_cxx::char_traits<unsigned char>::assign (__d, __s);
  goto <D.41247>;
  <D.41246>:
  __gnu_cxx::char_traits<unsigned char>::move (__d, __s, __n);
  <D.41247>:
}


static __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::move(__gnu_cxx::char_traits<_CharT>::char_type*, const char_type*, std::size_t) [with _CharT = unsigned char] (char_type * __s1, const char_type * __s2, size_t __n)
{
  char_type * D.41248;

  D.41248 = __builtin_memmove (__s1, __s2, __n);
  return D.41248;
}


static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (unsigned char * __d, const unsigned char * __s, size_type __n)
{
  if (__n == 1) goto <D.41250>; else goto <D.41251>;
  <D.41250>:
  __gnu_cxx::char_traits<unsigned char>::assign (__d, __s);
  goto <D.41252>;
  <D.41251>:
  __gnu_cxx::char_traits<unsigned char>::copy (__d, __s, __n);
  <D.41252>:
}


static __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::copy(__gnu_cxx::char_traits<_CharT>::char_type*, const char_type*, std::size_t) [with _CharT = unsigned char] (char_type * __s1, const char_type * __s2, size_t __n)
{
  char_type * D.41253;

  _1 = __s2 + __n;
  std::copy<const unsigned char*, unsigned char*> (__s2, _1, __s1);
  D.41253 = __s1;
  return D.41253;
}


_OI std::copy(_II, _II, _OI) [with _II = const unsigned char*; _OI = unsigned char*] (const unsigned char * __first, const unsigned char * __last, unsigned char * __result)
{
  unsigned char * D.41255;

  _1 = std::__miter_base<const unsigned char*> (__last);
  _2 = std::__miter_base<const unsigned char*> (__first);
  D.41255 = std::__copy_move_a2<false, const unsigned char*, unsigned char*> (_2, _1, __result);
  return D.41255;
}


_Iterator std::__miter_base(_Iterator) [with _Iterator = const unsigned char*] (const unsigned char * __it)
{
  const unsigned char * D.41258;

  D.41258 = __it;
  return D.41258;
}


_OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = const unsigned char*; _OI = unsigned char*] (const unsigned char * __first, const unsigned char * __last, unsigned char * __result)
{
  unsigned char * D.41260;

  _1 = std::__niter_base<unsigned char*> (__result);
  _2 = std::__niter_base<const unsigned char*> (__last);
  _3 = std::__niter_base<const unsigned char*> (__first);
  D.41260 = std::__copy_move_a<false, const unsigned char*, unsigned char*> (_3, _2, _1);
  return D.41260;
}


_Iterator std::__niter_base(_Iterator) [with _Iterator = unsigned char*] (unsigned char * __it)
{
  unsigned char * D.41262;

  D.41262 = __it;
  return D.41262;
}


_Iterator std::__niter_base(_Iterator) [with _Iterator = const unsigned char*] (const unsigned char * __it)
{
  const unsigned char * D.41264;

  D.41264 = __it;
  return D.41264;
}


_OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = const unsigned char*; _OI = unsigned char*] (const unsigned char * __first, const unsigned char * __last, unsigned char * __result)
{
  unsigned char * D.41266;
  typedef _ValueTypeI _ValueTypeI;
  typedef _ValueTypeO _ValueTypeO;
  typedef struct _Category _Category;
  const bool __simple;

  __simple = 1;
  D.41266 = std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned char> (__first, __last, __result);
  return D.41266;
}


static _Tp* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(const _Tp*, const _Tp*, _Tp*) [with _Tp = unsigned char; bool _IsMove = false] (const unsigned char * __first, const unsigned char * __last, unsigned char * __result)
{
  unsigned char * D.41271;
  typedef struct __assignable __assignable;
  const ptrdiff_t _Num;

  __last.11_1 = (long int) __last;
  __first.12_2 = (long int) __first;
  _Num = __last.11_1 - __first.12_2;
  if (_Num != 0) goto <D.41268>; else goto <D.41269>;
  <D.41268>:
  _Num.13_3 = (long unsigned int) _Num;
  __builtin_memmove (__result, __first, _Num.13_3);
  goto <D.41270>;
  <D.41269>:
  <D.41270>:
  _Num.14_4 = (sizetype) _Num;
  D.41271 = __result + _Num.14_4;
  return D.41271;
}


void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_mutate(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this, size_type __pos, size_type __len1, const unsigned char * __s, size_type __len2)
{
  const size_type __how_much;
  size_type __new_capacity;
  unsigned char * __r;

  try
    {
      _1 = std::__cxx11::basic_string<unsigned char>::length (this);
      _2 = _1 - __pos;
      __how_much = _2 - __len1;
      _3 = std::__cxx11::basic_string<unsigned char>::length (this);
      _4 = __len2 + _3;
      _5 = _4 - __len1;
      __new_capacity = _5;
      _6 = std::__cxx11::basic_string<unsigned char>::capacity (this);
      __r = std::__cxx11::basic_string<unsigned char>::_M_create (this, &__new_capacity, _6);
      if (__pos != 0) goto <D.41273>; else goto <D.41274>;
      <D.41273>:
      _7 = std::__cxx11::basic_string<unsigned char>::_M_data (this);
      std::__cxx11::basic_string<unsigned char>::_S_copy (__r, _7, __pos);
      goto <D.41275>;
      <D.41274>:
      <D.41275>:
      _8 = __s != 0B;
      _9 = __len2 != 0;
      _10 = _8 & _9;
      if (_10 != 0) goto <D.41276>; else goto <D.41277>;
      <D.41276>:
      _11 = __r + __pos;
      std::__cxx11::basic_string<unsigned char>::_S_copy (_11, __s, __len2);
      goto <D.41278>;
      <D.41277>:
      <D.41278>:
      if (__how_much != 0) goto <D.41279>; else goto <D.41280>;
      <D.41279>:
      _12 = std::__cxx11::basic_string<unsigned char>::_M_data (this);
      _13 = __pos + __len1;
      _14 = _12 + _13;
      _15 = __pos + __len2;
      _16 = __r + _15;
      std::__cxx11::basic_string<unsigned char>::_S_copy (_16, _14, __how_much);
      goto <D.41281>;
      <D.41280>:
      <D.41281>:
      std::__cxx11::basic_string<unsigned char>::_M_dispose (this);
      std::__cxx11::basic_string<unsigned char>::_M_data (this, __r);
      __new_capacity.15_17 = __new_capacity;
      std::__cxx11::basic_string<unsigned char>::_M_capacity (this, __new_capacity.15_17);
    }
  finally
    {
      __new_capacity = {CLOBBER};
    }
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (const struct basic_string * const this)
{
  size_type D.41284;

  try
    {
      D.41284 = this->_M_string_length;
      return D.41284;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this, size_type & __capacity, size_type __old_capacity)
{
  bool retval.16;
  bool retval.17;
  unsigned char * D.41298;

  _1 = *__capacity;
  _2 = std::__cxx11::basic_string<unsigned char>::max_size (this);
  retval.16 = _1 > _2;
  if (retval.16 != 0) goto <D.41287>; else goto <D.41288>;
  <D.41287>:
  std::__throw_length_error ("basic_string::_M_create");
  <D.41288>:
  _3 = *__capacity;
  if (__old_capacity < _3) goto <D.41289>; else goto <D.41290>;
  <D.41289>:
  _4 = *__capacity;
  _5 = __old_capacity * 2;
  if (_4 < _5) goto <D.41291>; else goto <D.41292>;
  <D.41291>:
  _6 = __old_capacity * 2;
  *__capacity = _6;
  _7 = *__capacity;
  _8 = std::__cxx11::basic_string<unsigned char>::max_size (this);
  retval.17 = _7 > _8;
  if (retval.17 != 0) goto <D.41294>; else goto <D.41295>;
  <D.41294>:
  _9 = std::__cxx11::basic_string<unsigned char>::max_size (this);
  *__capacity = _9;
  goto <D.41296>;
  <D.41295>:
  <D.41296>:
  goto <D.41297>;
  <D.41292>:
  <D.41297>:
  <D.41290>:
  _10 = *__capacity;
  _11 = _10 + 1;
  _12 = std::__cxx11::basic_string<unsigned char>::_M_get_allocator (this);
  D.41298 = std::allocator_traits<std::allocator<unsigned char> >::allocate (_12, _11);
  return D.41298;
}


static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = unsigned char] (struct allocator_type & __a, size_type __n)
{
  unsigned char * D.41301;

  D.41301 = __gnu_cxx::new_allocator<unsigned char>::allocate (__a, __n, 0B);
  return D.41301;
}


_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = unsigned char] (struct new_allocator * const this, size_type __n, const void * D.29657)
{
  bool retval.18;
  unsigned char * D.41307;

  _1 = __gnu_cxx::new_allocator<unsigned char>::max_size (this);
  retval.18 = __n > _1;
  if (retval.18 != 0) goto <D.41305>; else goto <D.41306>;
  <D.41305>:
  std::__throw_bad_alloc ();
  <D.41306>:
  D.41307 = operator new (__n);
  return D.41307;
}


void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this, unsigned char * __p)
{
  this->_M_dataplus._M_p = __p;
}


void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this, size_type __capacity)
{
  this->D.29808._M_allocated_capacity = __capacity;
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size() const [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (const struct basic_string * const this)
{
  size_type D.41310;

  try
    {
      D.41310 = this->_M_string_length;
      return D.41310;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


virtual void pbzip2::BZ2StreamScanner::dispose() (struct BZ2StreamScanner * const this)
{
  _1 = &this->_outBuff.buf;
  disposeMemory<char> (_1);
  this->_outBuff.bufSize = 0;
  _2 = &this->_inBuff;
  disposeMemory<unsigned char> (_2);
  this->_inBuffCapacity = 0;
}


void disposeMemory(C*&) [with C = char] (char * & pBuff)
{
  _1 = *pBuff;
  if (_1 != 0B) goto <D.41312>; else goto <D.41313>;
  <D.41312>:
  _2 = *pBuff;
  if (_2 != 0B) goto <D.41314>; else goto <D.41315>;
  <D.41314>:
  _3 = *pBuff;
  operator delete [] (_3);
  goto <D.41316>;
  <D.41315>:
  <D.41316>:
  *pBuff = 0B;
  goto <D.41317>;
  <D.41313>:
  <D.41317>:
}


void disposeMemory(C*&) [with C = unsigned char] (unsigned char * & pBuff)
{
  _1 = *pBuff;
  if (_1 != 0B) goto <D.41318>; else goto <D.41319>;
  <D.41318>:
  _2 = *pBuff;
  if (_2 != 0B) goto <D.41320>; else goto <D.41321>;
  <D.41320>:
  _3 = *pBuff;
  operator delete [] (_3);
  goto <D.41322>;
  <D.41321>:
  <D.41322>:
  *pBuff = 0B;
  goto <D.41323>;
  <D.41319>:
  <D.41323>:
}


pbzip2::BZ2StreamScanner::~BZ2StreamScanner() (struct BZ2StreamScanner * const this)
{
  try
    {
      {
        _1 = &_ZTVN6pbzip216BZ2StreamScannerE + 16;
        this->_vptr.BZ2StreamScanner = _1;
        try
          {
            try
              {
                try
                  {
                    pbzip2::BZ2StreamScanner::dispose (this);
                  }
                finally
                  {
                    _2 = &this->_bz2HeaderZero;
                    std::__cxx11::basic_string<unsigned char>::~basic_string (_2);
                  }
              }
            finally
              {
                _3 = &this->_bz2Header;
                std::__cxx11::basic_string<unsigned char>::~basic_string (_3);
              }
          }
        finally
          {
            MEM[(struct  &)this] = {CLOBBER};
          }
      }
      <D.36393>:
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


virtual pbzip2::BZ2StreamScanner::~BZ2StreamScanner() (struct BZ2StreamScanner * const this)
{
  try
    {
      pbzip2::BZ2StreamScanner::~BZ2StreamScanner (this);
    }
  finally
    {
      operator delete (this, 208);
    }
}


int pbzip2::BZ2StreamScanner::ensureOutBuffCapacity(size_t) (struct BZ2StreamScanner * const this, size_t newSize)
{
  int D.41326;
  bool retval.19;
  bool iftmp.20;
  long unsigned int D.41339;
  char * newBuff;

  _1 = this->_outBuffCapacity;
  if (newSize <= _1) goto <D.41324>; else goto <D.41325>;
  <D.41324>:
  D.41326 = 0;
  return D.41326;
  <D.41325>:
  _2 = this->_outBuffCapacityHint;
  if (newSize > _2) goto <D.41327>; else goto <D.41328>;
  <D.41327>:
  _3 = newSize * 11;
  _4 = _3 / 10;
  this->_outBuffCapacityHint = _4;
  _5 = pbzip2::BZ2StreamScanner::getOutBuffCapacityLimit (this);
  if (newSize <= _5) goto <D.41333>; else goto <D.41331>;
  <D.41333>:
  _6 = this->_outBuffCapacityHint;
  _7 = pbzip2::BZ2StreamScanner::getOutBuffCapacityLimit (this);
  if (_6 > _7) goto <D.41334>; else goto <D.41331>;
  <D.41334>:
  iftmp.20 = 1;
  goto <D.41332>;
  <D.41331>:
  iftmp.20 = 0;
  <D.41332>:
  retval.19 = iftmp.20;
  if (retval.19 != 0) goto <D.41335>; else goto <D.41336>;
  <D.41335>:
  _8 = pbzip2::BZ2StreamScanner::getOutBuffCapacityLimit (this);
  this->_outBuffCapacityHint = _8;
  goto <D.41337>;
  <D.41336>:
  <D.41337>:
  goto <D.41338>;
  <D.41328>:
  <D.41338>:
  D.41339 = this->_outBuffCapacityHint;
  newBuff = operator new [] (D.41339, &nothrow);
  if (newBuff == 0B) goto <D.41340>; else goto <D.41341>;
  <D.41340>:
  _9 = this->_outBuffCapacityHint;
  handle_error (1, -1, "pbzip2: *ERROR: Could not allocate memory (ensureOutBuffCapacity/%u)!Aborting...\n", _9);
  _10 = this->_errState;
  _11 = _10 | 2;
  this->_errState = _11;
  D.41326 = -1;
  return D.41326;
  <D.41341>:
  _12 = this->_outBuff.buf;
  if (_12 != 0B) goto <D.41342>; else goto <D.41343>;
  <D.41342>:
  _13 = this->_outBuff.bufSize;
  _14 = (long unsigned int) _13;
  _15 = this->_outBuff.buf;
  memcpy (newBuff, _15, _14);
  _16 = this->_outBuff.buf;
  if (_16 != 0B) goto <D.41344>; else goto <D.41345>;
  <D.41344>:
  _17 = this->_outBuff.buf;
  operator delete [] (_17);
  goto <D.41346>;
  <D.41345>:
  <D.41346>:
  goto <D.41347>;
  <D.41343>:
  <D.41347>:
  _18 = this->_outBuffCapacityHint;
  _19 = this->_outBuff.bufSize;
  _20 = (long unsigned int) _19;
  pbzip2::BZ2StreamScanner::initOutBuff (this, newBuff, _20, _18);
  D.41326 = 0;
  return D.41326;
}


size_t pbzip2::BZ2StreamScanner::getOutBuffCapacityLimit() const (const struct BZ2StreamScanner * const this)
{
  size_t D.41349;

  D.41349 = this->_outBuffCapacityLimit;
  return D.41349;
}


__attribute__((nothrow, __artificial__, __gnu_inline__, __always_inline__, __leaf__))
void* memcpy(void*, const void*, size_t) (void * restrict __dest, const void * restrict __src, size_t __len)
{
  void * D.41351;

  try
    {
      _1 = __builtin_object_size (__dest, 0);
      D.41351 = __builtin___memcpy_chk (__dest, __src, __len, _1);
      return D.41351;
    }
  catch
    {
      <<<eh_filter (NULL)>>>
        {
          
            _2 = __builtin_eh_pointer (0);
            __cxa_call_unexpected (_2);
          
        }
    }
}


int pbzip2::BZ2StreamScanner::appendOutBuffData(pbzip2::BZ2StreamScanner::CharType*) (struct BZ2StreamScanner * const this, CharType * end)
{
  int D.41355;
  bool retval.22;
  bool retval.24;
  int additionSize;

  end.21_1 = (long int) end;
  _2 = pbzip2::BZ2StreamScanner::getInBuffCurrent (this);
  _3 = (long int) _2;
  _4 = end.21_1 - _3;
  additionSize = (int) _4;
  if (additionSize <= 0) goto <D.41353>; else goto <D.41354>;
  <D.41353>:
  D.41355 = 0;
  return D.41355;
  <D.41354>:
  {
    retval.22 = pbzip2::BZ2StreamScanner::isBz2HeaderFound (this);
    if (retval.22 != 0) goto <D.41357>; else goto <D.41358>;
    <D.41357>:
    {
      size_t newSize;

      _5 = this->_outBuff.bufSize;
      additionSize.23_6 = (unsigned int) additionSize;
      _7 = _5 + additionSize.23_6;
      newSize = (size_t) _7;
      _8 = pbzip2::BZ2StreamScanner::ensureOutBuffCapacity (this, newSize);
      retval.24 = _8 != 0;
      if (retval.24 != 0) goto <D.41360>; else goto <D.41361>;
      <D.41360>:
      D.41355 = -1;
      return D.41355;
      <D.41361>:
      _9 = (long unsigned int) additionSize;
      _10 = pbzip2::BZ2StreamScanner::getInBuffCurrent (this);
      _11 = pbzip2::BZ2StreamScanner::getOutBuffEnd (this);
      memcpy (_11, _10, _9);
      _12 = this->_outBuff.bufSize;
      additionSize.25_13 = (unsigned int) additionSize;
      _14 = _12 + additionSize.25_13;
      this->_outBuff.bufSize = _14;
    }
    goto <D.41362>;
    <D.41358>:
    <D.41362>:
  }
  this->_inBuffCurrent = end;
  D.41355 = additionSize;
  return D.41355;
}


bool pbzip2::BZ2StreamScanner::isBz2HeaderFound() const (const struct BZ2StreamScanner * const this)
{
  bool D.41365;

  D.41365 = this->_bz2HeaderFound;
  return D.41365;
}


pbzip2::BZ2StreamScanner::CharType* pbzip2::BZ2StreamScanner::getInBuffCurrent() (struct BZ2StreamScanner * const this)
{
  CharType * D.41367;

  D.41367 = this->_inBuffCurrent;
  return D.41367;
}


char* pbzip2::BZ2StreamScanner::getOutBuffEnd() (struct BZ2StreamScanner * const this)
{
  char * D.41369;

  _1 = this->_outBuff.buf;
  _2 = this->_outBuff.bufSize;
  _3 = (sizetype) _2;
  D.41369 = _1 + _3;
  return D.41369;
}


int pbzip2::BZ2StreamScanner::appendOutBuffDataUpToLimit() (struct BZ2StreamScanner * const this)
{
  const long unsigned int D.36416;
  int D.41373;
  bool retval.26;
  unsigned char * const D.36423;
  unsigned char * const D.36422;
  size_t maxCapacity;
  int maxAddition;
  CharType * end1;
  CharType * end2;
  CharType * end;

  try
    {
      _1 = &this->_outBuffCapacity;
      _2 = pbzip2::BZ2StreamScanner::getOutBuffCapacityLimit (this);
      D.36416 = _2;
      try
        {
          _3 = std::max<long unsigned int> (&D.36416, _1);
          maxCapacity = *_3;
        }
      finally
        {
          D.36416 = {CLOBBER};
        }
      _4 = (unsigned int) maxCapacity;
      _5 = this->_outBuff.bufSize;
      _6 = _4 - _5;
      maxAddition = (int) _6;
      if (maxAddition <= 0) goto <D.41371>; else goto <D.41372>;
      <D.41371>:
      D.41373 = 0;
      return D.41373;
      <D.41372>:
      retval.26 = pbzip2::BZ2StreamScanner::eof (this);
      if (retval.26 != 0) goto <D.41375>; else goto <D.41376>;
      <D.41375>:
      _7 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
      end1 = _7;
      goto <D.41377>;
      <D.41376>:
      _8 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
      _9 = pbzip2::BZ2StreamScanner::getHeaderSize (this);
      _10 = 1 - _9;
      _11 = _8 + _10;
      D.36423 = _11;
      try
        {
          _12 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
          D.36422 = _12;
          try
            {
              _13 = std::min<unsigned char*> (&D.36422, &D.36423);
              _14 = *_13;
              end1 = _14;
            }
          finally
            {
              D.36422 = {CLOBBER};
            }
        }
      finally
        {
          D.36423 = {CLOBBER};
        }
      <D.41377>:
      _15 = pbzip2::BZ2StreamScanner::getInBuffCurrent (this);
      _16 = (sizetype) maxAddition;
      _17 = _15 + _16;
      end2 = _17;
      _18 = std::min<unsigned char*> (&end1, &end2);
      end = *_18;
      D.41373 = pbzip2::BZ2StreamScanner::appendOutBuffData (this, end);
      return D.41373;
    }
  finally
    {
      end1 = {CLOBBER};
      end2 = {CLOBBER};
    }
}


constexpr const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = long unsigned int] (const long unsigned int & __a, const long unsigned int & __b)
{
  const long unsigned int & D.41384;

  _1 = *__a;
  _2 = *__b;
  if (_1 < _2) goto <D.41382>; else goto <D.41383>;
  <D.41382>:
  D.41384 = __b;
  return D.41384;
  <D.41383>:
  D.41384 = __a;
  return D.41384;
}


bool pbzip2::BZ2StreamScanner::eof() const (const struct BZ2StreamScanner * const this)
{
  bool D.41386;

  D.41386 = this->_eof;
  return D.41386;
}


pbzip2::BZ2StreamScanner::CharType* pbzip2::BZ2StreamScanner::getInBuffEnd() (struct BZ2StreamScanner * const this)
{
  CharType * D.41388;

  D.41388 = this->_inBuffEnd;
  return D.41388;
}


size_t pbzip2::BZ2StreamScanner::getHeaderSize() const (const struct BZ2StreamScanner * const this)
{
  size_t D.41390;

  _1 = &this->_bz2Header;
  D.41390 = std::__cxx11::basic_string<unsigned char>::size (_1);
  return D.41390;
}


pbzip2::BZ2StreamScanner::CharType* pbzip2::BZ2StreamScanner::getInBuffSearchPtr() (struct BZ2StreamScanner * const this)
{
  CharType * D.41392;

  D.41392 = this->_inBuffSearchPtr;
  return D.41392;
}


constexpr const _Tp& std::min(const _Tp&, const _Tp&) [with _Tp = unsigned char*] (unsigned char * const & __a, unsigned char * const & __b)
{
  unsigned char * const & D.41396;

  _1 = *__b;
  _2 = *__a;
  if (_1 < _2) goto <D.41394>; else goto <D.41395>;
  <D.41394>:
  D.41396 = __b;
  return D.41396;
  <D.41395>:
  D.41396 = __a;
  return D.41396;
}


int pbzip2::BZ2StreamScanner::rewindInBuff() (struct BZ2StreamScanner * const this)
{
  bool retval.27;
  bool iftmp.28;
  int D.41406;
  int ret;
  int tailSize;

  _1 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
  _2 = &this->_bz2Header;
  _3 = std::__cxx11::basic_string<unsigned char>::size (_2);
  _4 = 1 - _3;
  _5 = _1 + _4;
  this->_inBuffSearchPtr = _5;
  ret = pbzip2::BZ2StreamScanner::appendOutBuffData (this);
  _6 = pbzip2::BZ2StreamScanner::failed (this);
  if (_6 != 0) goto <D.41400>; else goto <D.41403>;
  <D.41403>:
  if (ret < 0) goto <D.41400>; else goto <D.41401>;
  <D.41400>:
  iftmp.28 = 1;
  goto <D.41402>;
  <D.41401>:
  iftmp.28 = 0;
  <D.41402>:
  retval.27 = iftmp.28;
  if (retval.27 != 0) goto <D.41404>; else goto <D.41405>;
  <D.41404>:
  D.41406 = -1;
  return D.41406;
  <D.41405>:
  if (ret == 0) goto <D.41407>; else goto <D.41408>;
  <D.41407>:
  _7 = pbzip2::BZ2StreamScanner::getInBuffCurrent (this);
  this->_inBuffSearchPtr = _7;
  goto <D.41409>;
  <D.41408>:
  <D.41409>:
  _8 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
  _9 = (long int) _8;
  _10 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
  _11 = (long int) _10;
  _12 = _9 - _11;
  tailSize = (int) _12;
  _13 = pbzip2::BZ2StreamScanner::getInBuffBegin (this);
  _14 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
  _15 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
  std::copy<unsigned char*, unsigned char*> (_15, _14, _13);
  _16 = pbzip2::BZ2StreamScanner::getInBuffBegin (this);
  _17 = (sizetype) tailSize;
  _18 = _16 + _17;
  this->_inBuffEnd = _18;
  _19 = pbzip2::BZ2StreamScanner::getInBuffBegin (this);
  this->_inBuffCurrent = _19;
  _20 = pbzip2::BZ2StreamScanner::getInBuffBegin (this);
  this->_inBuffSearchPtr = _20;
  D.41406 = 0;
  return D.41406;
}


int pbzip2::BZ2StreamScanner::appendOutBuffData() (struct BZ2StreamScanner * const this)
{
  int D.41412;

  _1 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
  D.41412 = pbzip2::BZ2StreamScanner::appendOutBuffData (this, _1);
  return D.41412;
}


bool pbzip2::BZ2StreamScanner::failed() (struct BZ2StreamScanner * const this)
{
  bool D.41415;

  _1 = this->_errState;
  D.41415 = _1 != 0;
  return D.41415;
}


_OI std::copy(_II, _II, _OI) [with _II = unsigned char*; _OI = unsigned char*] (unsigned char * __first, unsigned char * __last, unsigned char * __result)
{
  unsigned char * D.41417;

  _1 = std::__miter_base<unsigned char*> (__last);
  _2 = std::__miter_base<unsigned char*> (__first);
  D.41417 = std::__copy_move_a2<false, unsigned char*, unsigned char*> (_2, _1, __result);
  return D.41417;
}


_Iterator std::__miter_base(_Iterator) [with _Iterator = unsigned char*] (unsigned char * __it)
{
  unsigned char * D.41420;

  D.41420 = __it;
  return D.41420;
}


_OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = unsigned char*; _OI = unsigned char*] (unsigned char * __first, unsigned char * __last, unsigned char * __result)
{
  unsigned char * D.41422;

  _1 = std::__niter_base<unsigned char*> (__result);
  _2 = std::__niter_base<unsigned char*> (__last);
  _3 = std::__niter_base<unsigned char*> (__first);
  D.41422 = std::__copy_move_a<false, unsigned char*, unsigned char*> (_3, _2, _1);
  return D.41422;
}


_OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = unsigned char*; _OI = unsigned char*] (unsigned char * __first, unsigned char * __last, unsigned char * __result)
{
  unsigned char * D.41425;
  typedef _ValueTypeI _ValueTypeI;
  typedef _ValueTypeO _ValueTypeO;
  typedef struct _Category _Category;
  const bool __simple;

  __simple = 1;
  D.41425 = std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned char> (__first, __last, __result);
  return D.41425;
}


pbzip2::BZ2StreamScanner::CharType* pbzip2::BZ2StreamScanner::getInBuffBegin() (struct BZ2StreamScanner * const this)
{
  CharType * D.41427;

  D.41427 = this->_inBuff;
  return D.41427;
}


int pbzip2::BZ2StreamScanner::readData() (struct BZ2StreamScanner * const this)
{
  bool retval.29;
  int D.41432;
  bool retval.30;
  int bytesRead;

  pbzip2::BZ2StreamScanner::rewindInBuff (this);
  retval.29 = pbzip2::BZ2StreamScanner::failed (this);
  if (retval.29 != 0) goto <D.41430>; else goto <D.41431>;
  <D.41430>:
  D.41432 = -1;
  return D.41432;
  <D.41431>:
  _1 = pbzip2::BZ2StreamScanner::getInBuffSize (this);
  _2 = pbzip2::BZ2StreamScanner::getInBuffCapacity (this);
  retval.30 = _1 >= _2;
  if (retval.30 != 0) goto <D.41434>; else goto <D.41435>;
  <D.41434>:
  _3 = pbzip2::BZ2StreamScanner::getInBuffCapacity (this);
  _4 = pbzip2::BZ2StreamScanner::getInBuffSize (this);
  handle_error (1, -1, "pbzip2: *ERROR: BZ2StreamScanner::readData not enough buffer free space! inBuffSize=%u, _inBuffCapacity=%u! Aborting...\n", _4, _3);
  _5 = this->_errState;
  _6 = _5 | 8;
  this->_errState = _6;
  D.41432 = -1;
  return D.41432;
  <D.41435>:
  _7 = pbzip2::BZ2StreamScanner::getInBuffCapacity (this);
  _8 = pbzip2::BZ2StreamScanner::getInBuffSize (this);
  _9 = _7 - _8;
  _10 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
  _11 = this->_hInFile;
  _12 = do_read (_11, _10, _9);
  bytesRead = (int) _12;
  if (bytesRead > 0) goto <D.41436>; else goto <D.41437>;
  <D.41436>:
  _13 = this->_inBuffEnd;
  _14 = (sizetype) bytesRead;
  _15 = _13 + _14;
  this->_inBuffEnd = _15;
  goto <D.41438>;
  <D.41437>:
  if (bytesRead < 0) goto <D.41439>; else goto <D.41440>;
  <D.41439>:
  handle_error (1, -1, "pbzip2: *ERROR: Could not read from input file [err=%d]! Aborting...\n", bytesRead);
  _16 = this->_errState;
  _17 = _16 | 4;
  this->_errState = _17;
  D.41432 = bytesRead;
  return D.41432;
  <D.41440>:
  this->_eof = 1;
  <D.41438>:
  D.41432 = bytesRead;
  return D.41432;
}


size_t pbzip2::BZ2StreamScanner::getInBuffCapacity() const (const struct BZ2StreamScanner * const this)
{
  size_t D.41443;

  D.41443 = this->_inBuffCapacity;
  return D.41443;
}


size_t pbzip2::BZ2StreamScanner::getInBuffSize() const (const struct BZ2StreamScanner * const this)
{
  size_t D.41445;

  _1 = this->_inBuffEnd;
  _2 = (long int) _1;
  _3 = this->_inBuff;
  _4 = (long int) _3;
  _5 = _2 - _4;
  D.41445 = (size_t) _5;
  return D.41445;
}


pbzip2::BZ2StreamScanner::CharType* pbzip2::BZ2StreamScanner::locateHeaderPrefixInBuff() (struct BZ2StreamScanner * const this)
{
  bool retval.31;
  bool retval.32;
  bool iftmp.33;
  bool retval.34;
  struct iterator D.36547;
  struct __normal_iterator D.41464;
  struct __normal_iterator D.41465;
  CharType * D.41466;
  size_t prefixLen;

  prefixLen = 3;
  _1 = pbzip2::BZ2StreamScanner::isBz2HeaderFound (this);
  retval.31 = ~_1;
  if (retval.31 != 0) goto <D.41448>; else goto <D.41449>;
  <D.41448>:
  _2 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
  _3 = pbzip2::BZ2StreamScanner::getInBuffBegin (this);
  if (_2 != _3) goto <D.41452>; else goto <D.41455>;
  <D.41455>:
  _4 = pbzip2::BZ2StreamScanner::getInBuffSize (this);
  _5 = &this->_bz2Header;
  _6 = std::__cxx11::basic_string<unsigned char>::size (_5);
  if (_4 < _6) goto <D.41452>; else goto <D.41453>;
  <D.41452>:
  iftmp.33 = 1;
  goto <D.41454>;
  <D.41453>:
  iftmp.33 = 0;
  <D.41454>:
  retval.32 = iftmp.33;
  if (retval.32 != 0) goto <D.41456>; else goto <D.41457>;
  <D.41456>:
  _7 = this->_errState;
  _8 = _7 | 32;
  this->_errState = _8;
  _9 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
  this->_inBuffSearchPtr = _9;
  goto <D.41458>;
  <D.41457>:
  _10 = &this->_bz2Header;
  _11 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
  _12 = std::__cxx11::basic_string<unsigned char>::compare (_10, 0, prefixLen, _11, prefixLen);
  retval.34 = _12 == 0;
  if (retval.34 != 0) goto <D.41460>; else goto <D.41461>;
  <D.41460>:
  goto <D.41462>;
  <D.41461>:
  _13 = this->_errState;
  _14 = _13 | 32;
  this->_errState = _14;
  _15 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
  this->_inBuffSearchPtr = _15;
  <D.41462>:
  <D.41458>:
  goto <D.41463>;
  <D.41449>:
  prefixLen.35_16 = (long int) prefixLen;
  _17 = &this->_bz2Header;
  D.36547 = std::__cxx11::basic_string<unsigned char>::begin (_17);
  try
    {
      D.41464 = __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >::operator+ (&D.36547, prefixLen.35_16);
      _18 = &this->_bz2Header;
      D.41465 = std::__cxx11::basic_string<unsigned char>::begin (_18);
      _19 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
      _20 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
      _21 = std::search<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > > (_20, _19, D.41465, D.41464);
      this->_inBuffSearchPtr = _21;
    }
  finally
    {
      D.36547 = {CLOBBER};
    }
  <D.41463>:
  D.41466 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
  return D.41466;
}


int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) const [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (const struct basic_string * const this, size_type __pos, size_type __n1, const unsigned char * __s, size_type __n2)
{
  int D.41474;
  const size_type __len;
  int __r;

  std::__cxx11::basic_string<unsigned char>::_M_check (this, __pos, "basic_string::compare");
  __n1.36_1 = __n1;
  _2 = std::__cxx11::basic_string<unsigned char>::_M_limit (this, __pos, __n1.36_1);
  __n1 = _2;
  _3 = std::min<long unsigned int> (&__n1, &__n2);
  __len = *_3;
  _4 = std::__cxx11::basic_string<unsigned char>::_M_data (this);
  _5 = _4 + __pos;
  __r = __gnu_cxx::char_traits<unsigned char>::compare (_5, __s, __len);
  if (__r == 0) goto <D.41471>; else goto <D.41472>;
  <D.41471>:
  __n2.37_6 = __n2;
  __n1.38_7 = __n1;
  __r = std::__cxx11::basic_string<unsigned char>::_S_compare (__n1.38_7, __n2.37_6);
  goto <D.41473>;
  <D.41472>:
  <D.41473>:
  D.41474 = __r;
  return D.41474;
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_check(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const char*) const [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (const struct basic_string * const this, size_type __pos, const char * __s)
{
  bool retval.39;
  size_type D.41480;

  _1 = std::__cxx11::basic_string<unsigned char>::size (this);
  retval.39 = __pos > _1;
  if (retval.39 != 0) goto <D.41478>; else goto <D.41479>;
  <D.41478>:
  _2 = std::__cxx11::basic_string<unsigned char>::size (this);
  std::__throw_out_of_range_fmt ("%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, _2);
  <D.41479>:
  D.41480 = __pos;
  return D.41480;
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_limit(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) const [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (const struct basic_string * const this, size_type __pos, size_type __off)
{
  size_type D.41482;
  size_type iftmp.40;

  try
    {
      {
        const bool __testoff;

        _1 = std::__cxx11::basic_string<unsigned char>::size (this);
        _2 = _1 - __pos;
        __testoff = __off < _2;
        if (__testoff != 0) goto <D.41484>; else goto <D.41485>;
        <D.41484>:
        iftmp.40 = __off;
        goto <D.41486>;
        <D.41485>:
        _3 = std::__cxx11::basic_string<unsigned char>::size (this);
        iftmp.40 = _3 - __pos;
        <D.41486>:
        D.41482 = iftmp.40;
        return D.41482;
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


constexpr const _Tp& std::min(const _Tp&, const _Tp&) [with _Tp = long unsigned int] (const long unsigned int & __a, const long unsigned int & __b)
{
  const long unsigned int & D.41490;

  _1 = *__b;
  _2 = *__a;
  if (_1 < _2) goto <D.41488>; else goto <D.41489>;
  <D.41488>:
  D.41490 = __b;
  return D.41490;
  <D.41489>:
  D.41490 = __a;
  return D.41490;
}


static constexpr int __gnu_cxx::char_traits<_CharT>::compare(const char_type*, const char_type*, std::size_t) [with _CharT = unsigned char] (const char_type * __s1, const char_type * __s2, size_t __n)
{
  bool retval.41;
  int D.41497;
  bool retval.42;

  {
    size_t __i;

    __i = 0;
    <D.41492>:
    if (__i >= __n) goto <D.38970>; else goto <D.41493>;
    <D.41493>:
    _1 = __s2 + __i;
    _2 = __s1 + __i;
    retval.41 = __gnu_cxx::char_traits<unsigned char>::lt (_2, _1);
    if (retval.41 != 0) goto <D.41495>; else goto <D.41496>;
    <D.41495>:
    D.41497 = -1;
    return D.41497;
    <D.41496>:
    _3 = __s1 + __i;
    _4 = __s2 + __i;
    retval.42 = __gnu_cxx::char_traits<unsigned char>::lt (_4, _3);
    if (retval.42 != 0) goto <D.41499>; else goto <D.41500>;
    <D.41499>:
    D.41497 = 1;
    return D.41497;
    <D.41500>:
    __i = __i + 1;
    goto <D.41492>;
    <D.38970>:
  }
  D.41497 = 0;
  return D.41497;
}


static constexpr bool __gnu_cxx::char_traits<_CharT>::lt(const char_type&, const char_type&) [with _CharT = unsigned char] (const char_type & __c1, const char_type & __c2)
{
  bool D.41502;

  _1 = *__c1;
  _2 = *__c2;
  D.41502 = _1 < _2;
  return D.41502;
}


static int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_compare(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (size_type __n1, size_type __n2)
{
  int D.41506;

  try
    {
      {
        const difference_type __d;

        _1 = __n1 - __n2;
        __d = (const difference_type) _1;
        if (__d > 2147483647) goto <D.41504>; else goto <D.41505>;
        <D.41504>:
        D.41506 = 2147483647;
        return D.41506;
        <D.41505>:
        if (__d < -2147483648) goto <D.41507>; else goto <D.41508>;
        <D.41507>:
        D.41506 = -2147483648;
        return D.41506;
        <D.41508>:
        D.41506 = (int) __d;
        return D.41506;
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator, _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type) const [with _Iterator = unsigned char*; _Container = std::__cxx11::basic_string<unsigned char>] (const struct __normal_iterator * const this, difference_type __n)
{
  struct __normal_iterator D.41510;
  struct __normal_iterator D.38498;
  unsigned char * const D.38497;

  try
    {
      _1 = this->_M_current;
      __n.43_2 = (sizetype) __n;
      _3 = _1 + __n.43_2;
      D.38497 = _3;
      try
        {
          __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >::__normal_iterator (&D.38498, &D.38497);
          try
            {
              D.41510 = D.38498;
              return D.41510;
            }
          finally
            {
              D.38498 = {CLOBBER};
            }
        }
      finally
        {
          D.38497 = {CLOBBER};
        }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


__gnu_cxx::__normal_iterator<_Iterator, _Container>::__normal_iterator(const _Iterator&) [with _Iterator = unsigned char*; _Container = std::__cxx11::basic_string<unsigned char>] (struct __normal_iterator * const this, unsigned char * const & __i)
{
  try
    {
      MEM[(struct  &)this] = {CLOBBER};
      {
        _1 = *__i;
        this->_M_current = _1;
      }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::begin() [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this)
{
  struct iterator D.41514;
  struct iterator D.38495;
  unsigned char * const D.38494;

  try
    {
      _1 = std::__cxx11::basic_string<unsigned char>::_M_data (this);
      D.38494 = _1;
      try
        {
          __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >::__normal_iterator (&D.38495, &D.38494);
          try
            {
              D.41514 = D.38495;
              return D.41514;
            }
          finally
            {
              D.38495 = {CLOBBER};
            }
        }
      finally
        {
          D.38494 = {CLOBBER};
        }
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


_FIter1 std::search(_FIter1, _FIter1, _FIter2, _FIter2) [with _FIter1 = unsigned char*; _FIter2 = __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >] (unsigned char * __first1, unsigned char * __last1, struct __normal_iterator __first2, struct __normal_iterator __last2)
{
  unsigned char * D.41518;
  struct _Iter_equal_to_iter D.38500;
  struct _Iter_equal_to_iter D.41519;

  __gnu_cxx::__ops::__iter_equal_to_iter ();
  try
    {
      D.41518 = std::__search<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >, __gnu_cxx::__ops::_Iter_equal_to_iter> (__first1, __last1, __first2, __last2, D.41519);
      return D.41518;
    }
  finally
    {
      D.38500 = {CLOBBER};
    }
}


__gnu_cxx::__ops::_Iter_equal_to_iter __gnu_cxx::__ops::__iter_equal_to_iter() ()
{
  struct _Iter_equal_to_iter D.41524;

  return D.41524;
}


_ForwardIterator1 std::__search(_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate) [with _ForwardIterator1 = unsigned char*; _ForwardIterator2 = __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >; _BinaryPredicate = __gnu_cxx::__ops::_Iter_equal_to_iter] (unsigned char * __first1, unsigned char * __last1, struct __normal_iterator __first2, struct __normal_iterator __last2, struct _Iter_equal_to_iter __predicate)
{
  bool retval.44;
  bool iftmp.45;
  unsigned char * D.41534;
  bool retval.46;
  struct _Iter_equal_to_iter D.38990;
  struct _Iter_equal_to_iter D.41538;
  struct _Iter_equals_iter D.41539;
  struct _Iter_equal_to_iter D.39052;
  struct _Iter_equals_iter D.41541;
  bool retval.47;
  bool retval.48;
  bool retval.49;
  bool retval.50;
  struct __normal_iterator __p1;
  struct __normal_iterator __p;
  unsigned char * __current;

  try
    {
      if (__first1 == __last1) goto <D.41528>; else goto <D.41531>;
      <D.41531>:
      _1 = __gnu_cxx::operator==<unsigned char*, std::__cxx11::basic_string<unsigned char> > (&__first2, &__last2);
      if (_1 != 0) goto <D.41528>; else goto <D.41529>;
      <D.41528>:
      iftmp.45 = 1;
      goto <D.41530>;
      <D.41529>:
      iftmp.45 = 0;
      <D.41530>:
      retval.44 = iftmp.45;
      if (retval.44 != 0) goto <D.41532>; else goto <D.41533>;
      <D.41532>:
      D.41534 = __first1;
      return D.41534;
      <D.41533>:
      __p1 = __first2;
      _2 = __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >::operator++ (&__p1);
      retval.46 = __gnu_cxx::operator==<unsigned char*, std::__cxx11::basic_string<unsigned char> > (_2, &__last2);
      if (retval.46 != 0) goto <D.41536>; else goto <D.41537>;
      <D.41536>:
      D.41539 = __gnu_cxx::__ops::__iter_comp_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > > (D.41538, __first2);
      D.41534 = std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > > > (__first1, __last1, D.41539);
      return D.41534;
      <D.41537>:
      __p._M_current = 0B;
      __current = __first1;
      <D.41540>:
      D.41541 = __gnu_cxx::__ops::__iter_comp_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > > (D.41538, __first2);
      __first1 = std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > > > (__first1, __last1, D.41541);
      if (__first1 == __last1) goto <D.41542>; else goto <D.41543>;
      <D.41542>:
      D.41534 = __last1;
      return D.41534;
      <D.41543>:
      __p = __p1;
      __current = __first1;
      __current = __current + 1;
      retval.47 = __current == __last1;
      if (retval.47 != 0) goto <D.41545>; else goto <D.41546>;
      <D.41545>:
      D.41534 = __last1;
      return D.41534;
      <D.41546>:
      <D.41547>:
      retval.48 = __gnu_cxx::__ops::_Iter_equal_to_iter::operator()<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > > (&__predicate, __current, __p);
      if (retval.48 != 0) goto <D.41549>; else goto <D.39069>;
      <D.41549>:
      _3 = __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >::operator++ (&__p);
      retval.49 = __gnu_cxx::operator==<unsigned char*, std::__cxx11::basic_string<unsigned char> > (_3, &__last2);
      if (retval.49 != 0) goto <D.41551>; else goto <D.41552>;
      <D.41551>:
      D.41534 = __first1;
      return D.41534;
      <D.41552>:
      __current = __current + 1;
      retval.50 = __current == __last1;
      if (retval.50 != 0) goto <D.41554>; else goto <D.41555>;
      <D.41554>:
      D.41534 = __last1;
      return D.41534;
      <D.41555>:
      goto <D.41547>;
      <D.39069>:
      __first1 = __first1 + 1;
      goto <D.41540>;
      D.41534 = __first1;
      return D.41534;
    }
  finally
    {
      __p1 = {CLOBBER};
      __p = {CLOBBER};
    }
}


__gnu_cxx::__ops::_Iter_equals_iter<_Iterator> __gnu_cxx::__ops::__iter_comp_iter(__gnu_cxx::__ops::_Iter_equal_to_iter, _Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >] (struct _Iter_equal_to_iter D.38988, struct __normal_iterator __it)
{
  struct _Iter_equals_iter D.41561;
  struct _Iter_equals_iter D.39579;

  __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > >::_Iter_equals_iter (&D.39579, __it);
  try
    {
      D.41561 = D.39579;
      return D.41561;
    }
  finally
    {
      D.39579 = {CLOBBER};
    }
}


__gnu_cxx::__ops::_Iter_equals_iter<_Iterator1>::_Iter_equals_iter(_Iterator1) [with _Iterator1 = __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >] (struct _Iter_equals_iter * const this, struct __normal_iterator __it1)
{
  MEM[(struct  &)this] = {CLOBBER};
  {
    this->_M_it1 = __it1;
  }
}


_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = unsigned char*; _Predicate = __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > >] (unsigned char * __first, unsigned char * __last, struct _Iter_equals_iter __pred)
{
  unsigned char * D.41564;
  struct iterator_category D.39583;
  struct random_access_iterator_tag D.41565;

  try
    {
      __first.51_1 = __first;
      D.41564 = std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > > > (__first.51_1, __last, __pred, D.41565);
      return D.41564;
    }
  finally
    {
      D.39583 = {CLOBBER};
    }
}


_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = unsigned char*; _Predicate = __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > >] (unsigned char * __first, unsigned char * __last, struct _Iter_equals_iter __pred, struct random_access_iterator_tag D.39588)
{
  bool retval.54;
  unsigned char * D.41575;
  bool retval.55;
  bool retval.56;
  bool retval.57;
  bool retval.60;
  bool retval.61;
  bool retval.62;
  difference_type __trip_count;

  __last.52_1 = (long int) __last;
  __first.53_2 = (long int) __first;
  _3 = __last.52_1 - __first.53_2;
  __trip_count = _3 >> 2;
  <D.41570>:
  if (__trip_count <= 0) goto <D.40873>; else goto <D.41571>;
  <D.41571>:
  retval.54 = __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > >::operator()<unsigned char*> (&__pred, __first);
  if (retval.54 != 0) goto <D.41573>; else goto <D.41574>;
  <D.41573>:
  D.41575 = __first;
  return D.41575;
  <D.41574>:
  __first = __first + 1;
  retval.55 = __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > >::operator()<unsigned char*> (&__pred, __first);
  if (retval.55 != 0) goto <D.41577>; else goto <D.41578>;
  <D.41577>:
  D.41575 = __first;
  return D.41575;
  <D.41578>:
  __first = __first + 1;
  retval.56 = __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > >::operator()<unsigned char*> (&__pred, __first);
  if (retval.56 != 0) goto <D.41580>; else goto <D.41581>;
  <D.41580>:
  D.41575 = __first;
  return D.41575;
  <D.41581>:
  __first = __first + 1;
  retval.57 = __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > >::operator()<unsigned char*> (&__pred, __first);
  if (retval.57 != 0) goto <D.41583>; else goto <D.41584>;
  <D.41583>:
  D.41575 = __first;
  return D.41575;
  <D.41584>:
  __first = __first + 1;
  __trip_count = __trip_count + -1;
  goto <D.41570>;
  <D.40873>:
  __last.58_4 = (long int) __last;
  __first.59_5 = (long int) __first;
  _6 = __last.58_4 - __first.59_5;
  switch (_6) <default: <D.40872>, case 0: <D.40871>, case 1: <D.40870>, case 2: <D.40869>, case 3: <D.40868>>
  <D.40868>:
  retval.60 = __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > >::operator()<unsigned char*> (&__pred, __first);
  if (retval.60 != 0) goto <D.41586>; else goto <D.41587>;
  <D.41586>:
  D.41575 = __first;
  return D.41575;
  <D.41587>:
  __first = __first + 1;
  <D.40869>:
  retval.61 = __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > >::operator()<unsigned char*> (&__pred, __first);
  if (retval.61 != 0) goto <D.41589>; else goto <D.41590>;
  <D.41589>:
  D.41575 = __first;
  return D.41575;
  <D.41590>:
  __first = __first + 1;
  <D.40870>:
  retval.62 = __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> > >::operator()<unsigned char*> (&__pred, __first);
  if (retval.62 != 0) goto <D.41592>; else goto <D.41593>;
  <D.41592>:
  D.41575 = __first;
  return D.41575;
  <D.41593>:
  __first = __first + 1;
  <D.40871>:
  <D.40872>:
  D.41575 = __last;
  return D.41575;
}


bool __gnu_cxx::__ops::_Iter_equals_iter<_Iterator1>::operator()(_Iterator2) [with _Iterator2 = unsigned char*; _Iterator1 = __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >] (struct _Iter_equals_iter * const this, unsigned char * __it2)
{
  bool D.41595;

  _1 = *__it2;
  _2 = &this->_M_it1;
  _3 = __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >::operator* (_2);
  _4 = *_3;
  D.41595 = _1 == _4;
  return D.41595;
}


__gnu_cxx::__normal_iterator<_Iterator, _Container>::reference __gnu_cxx::__normal_iterator<_Iterator, _Container>::operator*() const [with _Iterator = unsigned char*; _Container = std::__cxx11::basic_string<unsigned char>] (const struct __normal_iterator * const this)
{
  unsigned char & D.41597;

  try
    {
      D.41597 = this->_M_current;
      return D.41597;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


bool __gnu_cxx::__ops::_Iter_equal_to_iter::operator()(_Iterator1, _Iterator2) const [with _Iterator1 = unsigned char*; _Iterator2 = __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >] (const struct _Iter_equal_to_iter * const this, unsigned char * __it1, struct __normal_iterator __it2)
{
  bool D.41599;

  _1 = *__it1;
  _2 = __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >::operator* (&__it2);
  _3 = *_2;
  D.41599 = _1 == _3;
  return D.41599;
}


__gnu_cxx::__normal_iterator<_Iterator, _Container>& __gnu_cxx::__normal_iterator<_Iterator, _Container>::operator++() [with _Iterator = unsigned char*; _Container = std::__cxx11::basic_string<unsigned char>] (struct __normal_iterator * const this)
{
  struct __normal_iterator & D.41601;

  try
    {
      _1 = this->_M_current;
      _2 = _1 + 1;
      this->_M_current = _2;
      D.41601 = this;
      return D.41601;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator, _Container>&) [with _Iterator = unsigned char*; _Container = std::__cxx11::basic_string<unsigned char>] (const struct __normal_iterator & __lhs, const struct __normal_iterator & __rhs)
{
  bool D.41603;

  try
    {
      _1 = __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >::base (__lhs);
      _2 = *_1;
      _3 = __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char> >::base (__rhs);
      _4 = *_3;
      D.41603 = _2 == _4;
      return D.41603;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


const _Iterator& __gnu_cxx::__normal_iterator<_Iterator, _Container>::base() const [with _Iterator = unsigned char*; _Container = std::__cxx11::basic_string<unsigned char>] (const struct __normal_iterator * const this)
{
  unsigned char * const & D.41605;

  try
    {
      D.41605 = &this->_M_current;
      return D.41605;
    }
  catch
    {
      <<<eh_must_not_throw (terminate)>>>
    }
}


pbzip2::BZ2StreamScanner::CharType* pbzip2::BZ2StreamScanner::searchNextHeaderInBuff() (struct BZ2StreamScanner * const this)
{
  bool retval.63;
  bool iftmp.64;
  bool retval.65;
  bool retval.66;
  CharType * D.41629;
  bool retval.67;
  size_t prefixLen;
  size_t hsp;

  this->_searchStatus = 0;
  prefixLen = 3;
  hsp = prefixLen + 1;
  pbzip2::BZ2StreamScanner::locateHeaderPrefixInBuff (this);
  <D.41607>:
  _1 = pbzip2::BZ2StreamScanner::failed (this);
  _2 = ~_1;
  if (_2 != 0) goto <D.41612>; else goto <D.41610>;
  <D.41612>:
  _3 = pbzip2::BZ2StreamScanner::getUnsearchedCount (this);
  _4 = pbzip2::BZ2StreamScanner::getHeaderSize (this);
  if (_3 >= _4) goto <D.41613>; else goto <D.41610>;
  <D.41613>:
  iftmp.64 = 1;
  goto <D.41611>;
  <D.41610>:
  iftmp.64 = 0;
  <D.41611>:
  retval.63 = iftmp.64;
  if (retval.63 != 0) goto <D.41614>; else goto <D.36599>;
  <D.41614>:
  {
    struct basic_string * pHdr;

    pHdr = 0B;
    _5 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
    _6 = _5 + hsp;
    _7 = *_6;
    _8 = &this->_bz2Header;
    _9 = std::__cxx11::basic_string<unsigned char>::operator[] (_8, hsp);
    _10 = *_9;
    retval.65 = _7 == _10;
    if (retval.65 != 0) goto <D.41616>; else goto <D.41617>;
    <D.41616>:
    pHdr = &this->_bz2Header;
    goto <D.41618>;
    <D.41617>:
    _11 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
    _12 = _11 + hsp;
    _13 = *_12;
    _14 = &this->_bz2HeaderZero;
    _15 = std::__cxx11::basic_string<unsigned char>::operator[] (_14, hsp);
    _16 = *_15;
    retval.66 = _13 == _16;
    if (retval.66 != 0) goto <D.41620>; else goto <D.41621>;
    <D.41620>:
    pHdr = &this->_bz2HeaderZero;
    goto <D.41622>;
    <D.41621>:
    <D.41622>:
    <D.41618>:
    {
      if (pHdr != 0B) goto <D.41623>; else goto <D.41624>;
      <D.41623>:
      {
        CharType bwtSizeChar;

        _17 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
        _18 = _17 + prefixLen;
        bwtSizeChar = *_18;
        {
          _19 = bwtSizeChar + 207;
          if (_19 <= 8) goto <D.41625>; else goto <D.41626>;
          <D.41625>:
          {
            int cmpres;

            _20 = std::__cxx11::basic_string<unsigned char>::operator[] (pHdr, prefixLen);
            *_20 = bwtSizeChar;
            _21 = std::__cxx11::basic_string<unsigned char>::size (pHdr);
            _22 = _21 - hsp;
            _23 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
            _24 = _23 + hsp;
            _25 = std::__cxx11::basic_string<unsigned char>::size (pHdr);
            _26 = _25 - hsp;
            cmpres = std::__cxx11::basic_string<unsigned char>::compare (pHdr, hsp, _26, _24, _22);
            if (cmpres == 0) goto <D.41627>; else goto <D.41628>;
            <D.41627>:
            this->_searchStatus = 1;
            D.41629 = this->_inBuffSearchPtr;
            return D.41629;
            <D.41628>:
          }
          goto <D.41630>;
          <D.41626>:
          <D.41630>:
        }
      }
      goto <D.41631>;
      <D.41624>:
      <D.41631>:
    }
    _27 = pbzip2::BZ2StreamScanner::isBz2HeaderFound (this);
    retval.67 = ~_27;
    if (retval.67 != 0) goto <D.41633>; else goto <D.41634>;
    <D.41633>:
    _28 = this->_errState;
    _29 = _28 | 32;
    this->_errState = _29;
    goto <D.36599>;
    <D.41634>:
    _30 = this->_inBuffSearchPtr;
    _31 = _30 + prefixLen;
    this->_inBuffSearchPtr = _31;
    pbzip2::BZ2StreamScanner::locateHeaderPrefixInBuff (this);
  }
  goto <D.41607>;
  <D.36599>:
  _32 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
  this->_inBuffSearchPtr = _32;
  D.41629 = this->_inBuffSearchPtr;
  return D.41629;
}


size_t pbzip2::BZ2StreamScanner::getUnsearchedCount() const (const struct BZ2StreamScanner * const this)
{
  size_t D.41640;

  _1 = this->_inBuffEnd;
  _2 = (long int) _1;
  _3 = this->_inBuffSearchPtr;
  _4 = (long int) _3;
  _5 = _2 - _4;
  D.41640 = (size_t) _5;
  return D.41640;
}


std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = unsigned char; _Traits = std::char_traits<unsigned char>; _Alloc = std::allocator<unsigned char>] (struct basic_string * const this, size_type __pos)
{
  value_type & D.41642;

  _1 = std::__cxx11::basic_string<unsigned char>::_M_data (this);
  D.41642 = _1 + __pos;
  return D.41642;
}


pbzip2::BZ2StreamScanner::CharType* pbzip2::BZ2StreamScanner::searchNextHeader() (struct BZ2StreamScanner * const this)
{
  bool retval.68;
  bool retval.69;
  bool iftmp.70;
  bool retval.71;
  CharType * D.41661;
  bool retval.72;
  bool retval.73;

  _1 = pbzip2::BZ2StreamScanner::getUnsearchedCount (this);
  retval.68 = _1 != 0;
  if (retval.68 != 0) goto <D.41645>; else goto <D.41646>;
  <D.41645>:
  pbzip2::BZ2StreamScanner::searchNextHeaderInBuff (this);
  goto <D.41647>;
  <D.41646>:
  <D.41647>:
  <D.41648>:
  _2 = pbzip2::BZ2StreamScanner::getSearchStatus (this);
  _3 = ~_2;
  if (_3 != 0) goto <D.41653>; else goto <D.41651>;
  <D.41653>:
  _4 = pbzip2::BZ2StreamScanner::eof (this);
  _5 = ~_4;
  if (_5 != 0) goto <D.41654>; else goto <D.41651>;
  <D.41654>:
  _6 = pbzip2::BZ2StreamScanner::failed (this);
  _7 = ~_6;
  if (_7 != 0) goto <D.41655>; else goto <D.41651>;
  <D.41655>:
  _8 = pbzip2::BZ2StreamScanner::isOutBuffFullEnough (this);
  _9 = ~_8;
  if (_9 != 0) goto <D.41656>; else goto <D.41651>;
  <D.41656>:
  iftmp.70 = 1;
  goto <D.41652>;
  <D.41651>:
  iftmp.70 = 0;
  <D.41652>:
  retval.69 = iftmp.70;
  if (retval.69 != 0) goto <D.41657>; else goto <D.36604>;
  <D.41657>:
  pbzip2::BZ2StreamScanner::readData (this);
  retval.71 = pbzip2::BZ2StreamScanner::failed (this);
  if (retval.71 != 0) goto <D.41659>; else goto <D.41660>;
  <D.41659>:
  D.41661 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
  return D.41661;
  <D.41660>:
  pbzip2::BZ2StreamScanner::searchNextHeaderInBuff (this);
  goto <D.41648>;
  <D.36604>:
  retval.72 = pbzip2::BZ2StreamScanner::getSearchStatus (this);
  if (retval.72 != 0) goto <D.41663>; else goto <D.41664>;
  <D.41663>:
  this->_bz2HeaderFound = 1;
  goto <D.41665>;
  <D.41664>:
  <D.41665>:
  retval.73 = pbzip2::BZ2StreamScanner::failed (this);
  if (retval.73 != 0) goto <D.41667>; else goto <D.41668>;
  <D.41667>:
  _10 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
  this->_inBuffSearchPtr = _10;
  D.41661 = this->_inBuffSearchPtr;
  return D.41661;
  <D.41668>:
  D.41661 = this->_inBuffSearchPtr;
  return D.41661;
}


bool pbzip2::BZ2StreamScanner::isOutBuffFullEnough() const (const struct BZ2StreamScanner * const this)
{
  bool D.41671;

  _1 = this->_outBuff.bufSize;
  _2 = (long unsigned int) _1;
  _3 = pbzip2::BZ2StreamScanner::getOutBuffCapacityLimit (this);
  D.41671 = _2 >= _3;
  return D.41671;
}


bool pbzip2::BZ2StreamScanner::getSearchStatus() const (const struct BZ2StreamScanner * const this)
{
  bool D.41673;

  D.41673 = this->_searchStatus;
  return D.41673;
}


outBuff* pbzip2::BZ2StreamScanner::getNextStream() (struct BZ2StreamScanner * const this)
{
  void * D.36610;
  struct outBuff * iftmp.74;
  struct outBuff * D.41681;
  bool retval.75;
  bool iftmp.76;
  bool retval.77;
  bool retval.78;
  bool iftmp.79;
  bool retval.80;
  bool iftmp.81;
  unsigned char * const D.36612;
  unsigned char * const D.36611;
  bool retval.82;
  bool retval.83;
  bool retval.84;
  bool retval.85;
  struct outBuff * res;

  pbzip2::BZ2StreamScanner::initOutBuff (this, 0B, 0, 0);
  D.36610 = operator new (40, &nothrow);
  if (D.36610 != 0B) goto <D.41676>; else goto <D.41677>;
  <D.41676>:
  try
    {
      outBuff::outBuff (D.36610, 0B, 0, 0, 0, 0, 1, 0B);
    }
  catch
    {
      operator delete (D.36610, &nothrow);
    }
  iftmp.74 = D.36610;
  goto <D.41678>;
  <D.41677>:
  iftmp.74 = D.36610;
  <D.41678>:
  res = iftmp.74;
  if (res == 0B) goto <D.41679>; else goto <D.41680>;
  <D.41679>:
  handle_error (1, -1, "pbzip2: *ERROR: Could not allocate memory (getNextStream/%u)!Aborting...\n", 40);
  _1 = this->_errState;
  _2 = _1 | 2;
  this->_errState = _2;
  D.41681 = res;
  return D.41681;
  <D.41680>:
  res->buf = 0B;
  res->bufSize = 4294967295;
  _3 = pbzip2::BZ2StreamScanner::failed (this);
  _4 = ~_3;
  if (_4 != 0) goto <D.41686>; else goto <D.41684>;
  <D.41686>:
  _5 = pbzip2::BZ2StreamScanner::isBz2HeaderFound (this);
  _6 = ~_5;
  if (_6 != 0) goto <D.41687>; else goto <D.41684>;
  <D.41687>:
  iftmp.76 = 1;
  goto <D.41685>;
  <D.41684>:
  iftmp.76 = 0;
  <D.41685>:
  retval.75 = iftmp.76;
  if (retval.75 != 0) goto <D.41688>; else goto <D.41689>;
  <D.41688>:
  this->_searchStatus = 0;
  pbzip2::BZ2StreamScanner::searchNextHeader (this);
  goto <D.41690>;
  <D.41689>:
  <D.41690>:
  retval.77 = pbzip2::BZ2StreamScanner::failed (this);
  if (retval.77 != 0) goto <D.41692>; else goto <D.41693>;
  <D.41692>:
  D.41681 = res;
  return D.41681;
  <D.41693>:
  _7 = pbzip2::BZ2StreamScanner::getInBuffCurrent (this);
  _8 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
  if (_7 == _8) goto <D.41698>; else goto <D.41696>;
  <D.41698>:
  _9 = pbzip2::BZ2StreamScanner::eof (this);
  if (_9 != 0) goto <D.41699>; else goto <D.41696>;
  <D.41699>:
  iftmp.79 = 1;
  goto <D.41697>;
  <D.41696>:
  iftmp.79 = 0;
  <D.41697>:
  retval.78 = iftmp.79;
  if (retval.78 != 0) goto <D.41700>; else goto <D.41701>;
  <D.41700>:
  res->bufSize = 0;
  D.41681 = res;
  return D.41681;
  <D.41701>:
  _10 = pbzip2::BZ2StreamScanner::getInBuffCurrent (this);
  _11 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
  if (_10 == _11) goto <D.41704>; else goto <D.41707>;
  <D.41707>:
  _12 = pbzip2::BZ2StreamScanner::getSearchStatus (this);
  _13 = ~_12;
  if (_13 != 0) goto <D.41708>; else goto <D.41705>;
  <D.41708>:
  _14 = pbzip2::BZ2StreamScanner::eof (this);
  _15 = ~_14;
  if (_15 != 0) goto <D.41704>; else goto <D.41705>;
  <D.41704>:
  iftmp.81 = 1;
  goto <D.41706>;
  <D.41705>:
  iftmp.81 = 0;
  <D.41706>:
  retval.80 = iftmp.81;
  if (retval.80 != 0) goto <D.41709>; else goto <D.41710>;
  <D.41709>:
  _16 = pbzip2::BZ2StreamScanner::getInBuffEnd (this);
  D.36612 = _16;
  try
    {
      _17 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
      _18 = &this->_bz2Header;
      _19 = std::__cxx11::basic_string<unsigned char>::size (_18);
      _20 = _17 + _19;
      D.36611 = _20;
      try
        {
          _21 = std::min<unsigned char*> (&D.36611, &D.36612);
          _22 = *_21;
          this->_inBuffSearchPtr = _22;
        }
      finally
        {
          D.36611 = {CLOBBER};
        }
    }
  finally
    {
      D.36612 = {CLOBBER};
    }
  this->_searchStatus = 0;
  pbzip2::BZ2StreamScanner::searchNextHeader (this);
  goto <D.41711>;
  <D.41710>:
  <D.41711>:
  retval.82 = pbzip2::BZ2StreamScanner::failed (this);
  if (retval.82 != 0) goto <D.41713>; else goto <D.41714>;
  <D.41713>:
  D.41681 = res;
  return D.41681;
  <D.41714>:
  pbzip2::BZ2StreamScanner::appendOutBuffDataUpToLimit (this);
  retval.83 = pbzip2::BZ2StreamScanner::failed (this);
  if (retval.83 != 0) goto <D.41716>; else goto <D.41717>;
  <D.41716>:
  D.41681 = res;
  return D.41681;
  <D.41717>:
  _23 = this->_outSequenceNumber;
  if (_23 > 0) goto <D.41718>; else goto <D.41719>;
  <D.41718>:
  _24 = this->_outSequenceNumber;
  _25 = _24 + 1;
  this->_outSequenceNumber = _25;
  goto <D.41720>;
  <D.41719>:
  _26 = pbzip2::BZ2StreamScanner::getInBuffCurrent (this);
  _27 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
  retval.84 = _26 != _27;
  if (retval.84 != 0) goto <D.41722>; else goto <D.41723>;
  <D.41722>:
  this->_outSequenceNumber = 1;
  goto <D.41724>;
  <D.41723>:
  <D.41724>:
  <D.41720>:
  _28 = this->_outSequenceNumber;
  this->_outBuff.sequenceNumber = _28;
  _29 = this->_outBuff.bufSize;
  this->_outBuff.inSize = _29;
  _30 = this->_streamNumber;
  this->_outBuff.blockNumber = _30;
  _31 = pbzip2::BZ2StreamScanner::getInBuffCurrent (this);
  _32 = pbzip2::BZ2StreamScanner::getInBuffSearchPtr (this);
  retval.85 = _31 == _32;
  if (retval.85 != 0) goto <D.41726>; else goto <D.41727>;
  <D.41726>:
  this->_outBuff.isLastInSequence = 1;
  this->_outSequenceNumber = 0;
  _33 = this->_streamNumber;
  _34 = _33 + 1;
  this->_streamNumber = _34;
  goto <D.41728>;
  <D.41727>:
  this->_outBuff.isLastInSequence = 0;
  <D.41728>:
  *res = this->_outBuff;
  pbzip2::BZ2StreamScanner::initOutBuff (this, 0B, 0, 0);
  D.41681 = res;
  return D.41681;
}


void pbzip2::BZ2StreamScanner::initOutBuff(char*, size_t, size_t) (struct BZ2StreamScanner * const this, char * buf, size_t bufSize, size_t bufCapacity)
{
  this->_outBuff.buf = buf;
  _1 = (unsigned int) bufSize;
  this->_outBuff.bufSize = _1;
  this->_outBuffCapacity = bufCapacity;
  this->_outBuff.inSize = 0;
}


