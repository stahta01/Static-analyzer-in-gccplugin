
;; Function memcpy (memcpy, funcdef_no=1911, decl_uid=1023, cgraph_uid=652, symbol_order=654)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__dest = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
__src = &PARM_NOALIAS(11)
PARM_NOALIAS(11) = &NONLOCAL
__len = &NONLOCAL
CALLUSED(14) = CALLUSED(14) + UNKNOWN
CALLUSED(14) = *CALLUSED(14) + UNKNOWN
CALLUSED(14) = __dest
CALLUSED(14) = &NULL
_1 = CALLUSED(14)
_1 = NONLOCAL
_8 = __dest
doubledereftmp(18) = *__src
*__dest = doubledereftmp(18)
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__dest = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__src = { PARM_NOALIAS(11) }
PARM_NOALIAS(11) = { NONLOCAL }
__len = { NONLOCAL }
__builtin_object_size = { }
CALLUSED(14) = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
CALLCLOBBERED(15) = { }
_1 = { NULL ESCAPED NONLOCAL PARM_NOALIAS(9) }
_8 = { PARM_NOALIAS(9) } same as __dest
doubledereftmp(18) = { NONLOCAL }


Alias information for memcpy

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.41856 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__dest_4(D), points-to NULL, points-to vars: { D.41856 } (nonlocal, escaped, restrict)
__src_5(D), points-to NULL, points-to vars: { D.41857 } (nonlocal, restrict)
_8, points-to NULL, points-to vars: { D.41856 } (nonlocal, escaped, restrict)

__attribute__((nothrow, __artificial__, __gnu_inline__, __always_inline__, __leaf__))
memcpy (void * restrict __dest, const void * restrict __src, size_t __len)
{
  long unsigned int _1;
  void * _2;
  void * _8;

  <bb 2> [0.00%]:
  _1 = __builtin_object_size (__dest_4(D), 0);
  _8 = __memcpy_chk (__dest_4(D), __src_5(D), __len_6(D), _1);
  return _8;

}



;; Function __gnu_cxx::__ops::__iter_equal_to_iter() (_ZN9__gnu_cxx5__ops20__iter_equal_to_iterEv, funcdef_no=205, decl_uid=8057, cgraph_uid=12, symbol_order=13)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = D.41524

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
D.41524 = { }


Alias information for __gnu_cxx::__ops::__iter_equal_to_iter()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::__ops::__iter_equal_to_iter() ()
{
  struct _Iter_equal_to_iter D.41524;

  <bb 2> [0.00%]:
  return D.41524;

}



;; Function outBuff::outBuff(char*, unsigned int, int, int, unsigned int, bool, outBuff*) (_ZN7outBuffC2EPcjiijbPS_, funcdef_no=1070, decl_uid=26014, cgraph_uid=358, symbol_order=360)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
aBuf = &NONLOCAL
aBufSize = &NONLOCAL
aBlockNumber = &NONLOCAL
aSequenceNumber = &NONLOCAL
aInSize = &NONLOCAL
isLast = &NONLOCAL
aNext = &NONLOCAL
*this = aBuf
*this + 64 = aBufSize
*this + 96 = aBlockNumber
*this + 128 = aSequenceNumber
*this + 160 = aInSize
*this + 192 = isLast
*this + 256 = aNext

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
aBuf = { NONLOCAL } same as this
aBufSize = { NONLOCAL } same as this
aBlockNumber = { NONLOCAL } same as this
aSequenceNumber = { NONLOCAL } same as this
aInSize = { NONLOCAL } same as this
isLast = { NONLOCAL } same as this
aNext = { NONLOCAL } same as this


Alias information for outBuff::outBuff(char*, unsigned int, int, int, unsigned int, bool, outBuff*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
aBuf_4(D), points-to non-local, points-to NULL, points-to vars: { }
aNext_16(D), points-to non-local, points-to NULL, points-to vars: { }

outBuff::outBuff(char*, unsigned int, int, int, unsigned int, bool, outBuff*) (struct outBuff * const this, char * aBuf, unsigned int aBufSize, int aBlockNumber, int aSequenceNumber, unsigned int aInSize, bool isLast, struct outBuff * aNext)
{
  <bb 2> [0.00%]:
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  this_2(D)->buf = aBuf_4(D);
  this_2(D)->bufSize = aBufSize_6(D);
  this_2(D)->blockNumber = aBlockNumber_8(D);
  this_2(D)->sequenceNumber = aSequenceNumber_10(D);
  this_2(D)->inSize = aInSize_12(D);
  this_2(D)->isLastInSequence = isLast_14(D);
  this_2(D)->next = aNext_16(D);
  return;

}



;; Function pbzip2::BZ2StreamScanner::getInBuffSize() const (_ZNK6pbzip216BZ2StreamScanner13getInBuffSizeEv, funcdef_no=1426, decl_uid=29310, cgraph_uid=435, symbol_order=437)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this + 768
_2 = _1
_3 = *this + 704
_4 = _3
_5 = _2
_5 = _4
_8 = _5
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL } same as _5


Alias information for pbzip2::BZ2StreamScanner::getInBuffSize() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_7(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::getInBuffSize() const (const struct BZ2StreamScanner * const this)
{
  CharType * _1;
  long int _2;
  CharType * _3;
  long int _4;
  long int _5;
  size_t _8;

  <bb 2> [0.00%]:
  _1 = this_7(D)->_inBuffEnd;
  _2 = (long int) _1;
  _3 = this_7(D)->_inBuff;
  _4 = (long int) _3;
  _5 = _2 - _4;
  _8 = (size_t) _5;
  return _8;

}



;; Function pbzip2::BZ2StreamScanner::getInBuffCapacity() const (_ZNK6pbzip216BZ2StreamScanner17getInBuffCapacityEv, funcdef_no=1427, decl_uid=29312, cgraph_uid=436, symbol_order=438)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 960
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::getInBuffCapacity() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::getInBuffCapacity() const (const struct BZ2StreamScanner * const this)
{
  size_t _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_inBuffCapacity;
  return _3;

}



;; Function pbzip2::BZ2StreamScanner::failed() (_ZN6pbzip216BZ2StreamScanner6failedEv, funcdef_no=1431, decl_uid=29323, cgraph_uid=440, symbol_order=442)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this + 1536
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_4 = { }


Alias information for pbzip2::BZ2StreamScanner::failed()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::failed() (struct BZ2StreamScanner * const this)
{
  unsigned int _1;
  bool _4;

  <bb 2> [0.00%]:
  _1 = this_3(D)->_errState;
  _4 = _1 != 0;
  return _4;

}



;; Function pbzip2::BZ2StreamScanner::isBz2HeaderFound() const (_ZNK6pbzip216BZ2StreamScanner16isBz2HeaderFoundEv, funcdef_no=1432, decl_uid=29325, cgraph_uid=441, symbol_order=443)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 640
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::isBz2HeaderFound() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::isBz2HeaderFound() const (const struct BZ2StreamScanner * const this)
{
  bool _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_bz2HeaderFound;
  return _3;

}



;; Function pbzip2::BZ2StreamScanner::getSearchStatus() const (_ZNK6pbzip216BZ2StreamScanner15getSearchStatusEv, funcdef_no=1433, decl_uid=29327, cgraph_uid=442, symbol_order=444)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 648
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::getSearchStatus() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::getSearchStatus() const (const struct BZ2StreamScanner * const this)
{
  bool _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_searchStatus;
  return _3;

}



;; Function pbzip2::BZ2StreamScanner::eof() const (_ZNK6pbzip216BZ2StreamScanner3eofEv, funcdef_no=1434, decl_uid=29329, cgraph_uid=443, symbol_order=445)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 96
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::eof() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::eof() const (const struct BZ2StreamScanner * const this)
{
  bool _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_eof;
  return _3;

}



;; Function pbzip2::BZ2StreamScanner::getInBuffEnd() (_ZN6pbzip216BZ2StreamScanner12getInBuffEndEv, funcdef_no=1440, decl_uid=29355, cgraph_uid=449, symbol_order=451)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 768
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::getInBuffEnd()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::getInBuffEnd() (struct BZ2StreamScanner * const this)
{
  CharType * _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_inBuffEnd;
  return _3;

}



;; Function pbzip2::BZ2StreamScanner::getInBuffBegin() (_ZN6pbzip216BZ2StreamScanner14getInBuffBeginEv, funcdef_no=1441, decl_uid=29357, cgraph_uid=450, symbol_order=452)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 704
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::getInBuffBegin()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::getInBuffBegin() (struct BZ2StreamScanner * const this)
{
  CharType * _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_inBuff;
  return _3;

}



;; Function pbzip2::BZ2StreamScanner::getInBuffCurrent() (_ZN6pbzip216BZ2StreamScanner16getInBuffCurrentEv, funcdef_no=1442, decl_uid=29359, cgraph_uid=451, symbol_order=453)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 832
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::getInBuffCurrent()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::getInBuffCurrent() (struct BZ2StreamScanner * const this)
{
  CharType * _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_inBuffCurrent;
  return _3;

}



;; Function pbzip2::BZ2StreamScanner::getInBuffSearchPtr() (_ZN6pbzip216BZ2StreamScanner18getInBuffSearchPtrEv, funcdef_no=1443, decl_uid=29361, cgraph_uid=452, symbol_order=454)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 896
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::getInBuffSearchPtr()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::getInBuffSearchPtr() (struct BZ2StreamScanner * const this)
{
  CharType * _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_inBuffSearchPtr;
  return _3;

}



;; Function pbzip2::BZ2StreamScanner::getOutBuffEnd() (_ZN6pbzip216BZ2StreamScanner13getOutBuffEndEv, funcdef_no=1444, decl_uid=29363, cgraph_uid=453, symbol_order=455)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this + 1024
_2 = *this + 1088
_3 = _2
_6 = _1
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _2
_6 = { ESCAPED NONLOCAL } same as _1


Alias information for pbzip2::BZ2StreamScanner::getOutBuffEnd()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::getOutBuffEnd() (struct BZ2StreamScanner * const this)
{
  char * _1;
  unsigned int _2;
  sizetype _3;
  char * _6;

  <bb 2> [0.00%]:
  _1 = this_5(D)->_outBuff.buf;
  _2 = this_5(D)->_outBuff.bufSize;
  _3 = (sizetype) _2;
  _6 = _1 + _3;
  return _6;

}



;; Function pbzip2::BZ2StreamScanner::getUnsearchedCount() const (_ZNK6pbzip216BZ2StreamScanner18getUnsearchedCountEv, funcdef_no=1445, decl_uid=29365, cgraph_uid=454, symbol_order=456)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this + 768
_2 = _1
_3 = *this + 896
_4 = _3
_5 = _2
_5 = _4
_8 = _5
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL } same as _5


Alias information for pbzip2::BZ2StreamScanner::getUnsearchedCount() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_7(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::getUnsearchedCount() const (const struct BZ2StreamScanner * const this)
{
  CharType * _1;
  long int _2;
  CharType * _3;
  long int _4;
  long int _5;
  size_t _8;

  <bb 2> [0.00%]:
  _1 = this_7(D)->_inBuffEnd;
  _2 = (long int) _1;
  _3 = this_7(D)->_inBuffSearchPtr;
  _4 = (long int) _3;
  _5 = _2 - _4;
  _8 = (size_t) _5;
  return _8;

}



;; Function pbzip2::BZ2StreamScanner::getOutBuffCapacityLimit() const (_ZNK6pbzip216BZ2StreamScanner23getOutBuffCapacityLimitEv, funcdef_no=1446, decl_uid=29375, cgraph_uid=455, symbol_order=457)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 1472
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::getOutBuffCapacityLimit() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::getOutBuffCapacityLimit() const (const struct BZ2StreamScanner * const this)
{
  size_t _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_outBuffCapacityLimit;
  return _3;

}



;; Function pbzip2::BZ2StreamScanner::isOutBuffFullEnough() const (_ZNK6pbzip216BZ2StreamScanner19isOutBuffFullEnoughEv, funcdef_no=1435, decl_uid=29331, cgraph_uid=444, symbol_order=446)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this + 1088
_2 = _1
_6 = *this + 1472
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_6 = { ESCAPED NONLOCAL }
_7 = { }


Alias information for pbzip2::BZ2StreamScanner::isOutBuffFullEnough() const

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_5(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::isOutBuffFullEnough() const (const struct BZ2StreamScanner * const this)
{
  size_t D.41875;
  unsigned int _1;
  long unsigned int _2;
  long unsigned int _6;
  bool _7;

  <bb 2> [100.00%]:
  _1 = this_5(D)->_outBuff.bufSize;
  _2 = (long unsigned int) _1;
  _6 = this_5(D)->_outBuffCapacityLimit;
  _7 = _2 >= _6;
  return _7;

}



;; Function std::min<unsigned char*>(unsigned char* const&, unsigned char* const&)unsigned char* const& (_ZSt3minIPhERKT_S3_S3_, funcdef_no=1934, decl_uid=36419, cgraph_uid=674, symbol_order=677)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__b = &NONLOCAL
_1 = *__b
_2 = *__a
_3 = __b
_3 = __a
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__b = { NONLOCAL } same as __a
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_3 = { NONLOCAL } same as __a


Alias information for std::min<unsigned char*>(unsigned char* const&, unsigned char* const&)unsigned char* const&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }
__b_5(D), points-to non-local, points-to NULL, points-to vars: { }
__a_6(D), points-to non-local, points-to NULL, points-to vars: { }

std::min<unsigned char*>(unsigned char* const&, unsigned char* const&)unsigned char* const& (unsigned char * const & __a, unsigned char * const & __b)
{
  unsigned char * _1;
  unsigned char * _2;
  unsigned char * const & _3;

  <bb 2> [0.00%]:
  _1 = *__b_5(D);
  _2 = *__a_6(D);
  if (_1 < _2)
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:

  <bb 4> [0.00%]:
  # _3 = PHI <__b_5(D)(2), __a_6(D)(3)>
  return _3;

}



;; Function pbzip2::BZ2StreamScanner::initOutBuff(char*, unsigned long, unsigned long) (_ZN6pbzip216BZ2StreamScanner11initOutBuffEPcmm, funcdef_no=1941, decl_uid=29341, cgraph_uid=682, symbol_order=685)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
buf = &NONLOCAL
bufSize = &NONLOCAL
bufCapacity = &NONLOCAL
*this + 1024 = buf
_1 = bufSize
*this + 1088 = _1
*this + 1344 = bufCapacity
derefaddrtmp(13) = &NULL
*this + 1184 = derefaddrtmp(13)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
buf = { NONLOCAL } same as this
bufSize = { NONLOCAL } same as this
bufCapacity = { NONLOCAL } same as this
_1 = { NONLOCAL } same as this
derefaddrtmp(13) = { NULL }


Alias information for pbzip2::BZ2StreamScanner::initOutBuff(char*, unsigned long, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }
buf_4(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::initOutBuff(char*, unsigned long, unsigned long) (struct BZ2StreamScanner * const this, char * buf, size_t bufSize, size_t bufCapacity)
{
  unsigned int _1;

  <bb 2> [0.00%]:
  this_3(D)->_outBuff.buf = buf_4(D);
  _1 = (unsigned int) bufSize_6(D);
  this_3(D)->_outBuff.bufSize = _1;
  this_3(D)->_outBuffCapacity = bufCapacity_8(D);
  this_3(D)->_outBuff.inSize = 0;
  return;

}



;; Function pbzip2::BZ2StreamScanner::ensureOutBuffCapacity(unsigned long) (_ZN6pbzip216BZ2StreamScanner21ensureOutBuffCapacityEm, funcdef_no=1931, decl_uid=29351, cgraph_uid=672, symbol_order=675)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
newSize = &NONLOCAL
_1 = *this + 1344
_2 = *this + 1408
_3 = newSize
_3 = &NONLOCAL
_4 = _3
_4 = &NONLOCAL
*this + 1408 = _4
_32 = *this + 1472
_6 = *this + 1408
_50 = *this + 1472
iftmp.20_52 = &NONLOCAL
_51 = *this + 1472
*this + 1408 = _51
iftmp.20_53 = &NULL
_39 = *this + 1408
ESCAPED = _39
_ZSt7nothrow = NONLOCAL
ESCAPED = &_ZSt7nothrow
newBuff_41 = NONLOCAL
_9 = *this + 1408
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _9
_10 = *this + 1536
_11 = _10
_11 = &NONLOCAL
*this + 1536 = _11
_12 = *this + 1024
_13 = *this + 1088
_14 = _13
_15 = *this + 1024
CALLUSED(33) = CALLUSED(33) + UNKNOWN
CALLUSED(33) = *CALLUSED(33) + UNKNOWN
CALLUSED(33) = newBuff_41
CALLUSED(33) = &NULL
_37 = CALLUSED(33)
_37 = NONLOCAL
_33 = newBuff_41
doubledereftmp(37) = *_15
*newBuff_41 = doubledereftmp(37)
_16 = *this + 1024
_17 = *this + 1024
ESCAPED = _17
_18 = *this + 1408
_19 = *this + 1088
_20 = _19
ESCAPED = this
ESCAPED = newBuff_41
ESCAPED = _20
ESCAPED = _18
_21 = &NULL
_21 = &NONLOCAL
_21 = &NULL
ESCAPED = _21

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL _ZSt7nothrow }
NONLOCAL = { ESCAPED NONLOCAL } same as newBuff_41
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
newSize = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_3 = { NONLOCAL } same as this
_4 = { NONLOCAL } same as this
_32 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_50 = { ESCAPED NONLOCAL }
iftmp.20_52 = { NONLOCAL } same as this
_51 = { ESCAPED NONLOCAL }
iftmp.20_53 = { NULL }
_39 = { ESCAPED NONLOCAL }
_ZnamRKSt9nothrow_t = { }
_ZSt7nothrow = { ESCAPED NONLOCAL }
newBuff_41 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL }
_Z12handle_error8ExitFlagiPKcz = { }
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL } same as _13
_15 = { ESCAPED NONLOCAL }
__builtin_object_size = { }
CALLUSED(33) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(34) = { }
_37 = { NULL ESCAPED NONLOCAL } same as CALLUSED(33)
_33 = { ESCAPED NONLOCAL } same as newBuff_41
doubledereftmp(37) = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL }
_ZdaPv = { }
_18 = { ESCAPED NONLOCAL }
_19 = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL } same as _19
_ZN6pbzip216BZ2StreamScanner11initOutBuffEPcmm = { }
_21 = { NULL NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::ensureOutBuffCapacity(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.11311 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_29(D), points-to non-local, points-to NULL, points-to vars: { }
_33, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
newBuff_41, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::ensureOutBuffCapacity(unsigned long) (struct BZ2StreamScanner * const this, size_t newSize)
{
  size_t D.41888;
  size_t D.41886;
  size_t D.41884;
  void * D.41882;
  char * newBuff;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _6;
  long unsigned int _9;
  unsigned int _10;
  unsigned int _11;
  char * _12;
  unsigned int _13;
  long unsigned int _14;
  char * _15;
  char * _16;
  char * _17;
  long unsigned int _18;
  unsigned int _19;
  long unsigned int _20;
  int _21;
  long unsigned int _32;
  void * _33;
  long unsigned int _37;
  long unsigned int _39;
  long unsigned int _50;
  long unsigned int _51;
  bool iftmp.20_52;
  bool iftmp.20_53;

  <bb 2> [0.00%]:
  _1 = this_29(D)->_outBuffCapacity;
  if (_1 >= newSize_30(D))
    goto <bb 15>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  _2 = this_29(D)->_outBuffCapacityHint;
  if (_2 < newSize_30(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 4> [100.00%]:
  _3 = newSize_30(D) * 11;
  _4 = _3 / 10;
  this_29(D)->_outBuffCapacityHint = _4;
  _32 = MEM[(const struct BZ2StreamScanner *)this_29(D)]._outBuffCapacityLimit;
  if (newSize_30(D) <= _32)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 5> [100.00%]:
  _6 = this_29(D)->_outBuffCapacityHint;
  _50 = MEM[(const struct BZ2StreamScanner *)this_29(D)]._outBuffCapacityLimit;
  if (_6 > _50)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [100.00%]:
  # iftmp.20_52 = PHI <1(5)>
  _51 = MEM[(const struct BZ2StreamScanner *)this_29(D)]._outBuffCapacityLimit;
  this_29(D)->_outBuffCapacityHint = _51;
  goto <bb 9>; [0.00%]

  <bb 7> [0.00%]:

  <bb 8> [0.00%]:
  # iftmp.20_53 = PHI <0(7)>

  <bb 9> [0.00%]:
  _39 = this_29(D)->_outBuffCapacityHint;
  newBuff_41 = operator new[] (_39, &nothrow);
  if (newBuff_41 == 0B)
    goto <bb 10>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 10> [0.00%]:
  _9 = this_29(D)->_outBuffCapacityHint;
  handle_error (1, -1, "pbzip2: *ERROR: Could not allocate memory (ensureOutBuffCapacity/%u)!Aborting...\n", _9);
  _10 = this_29(D)->_errState;
  _11 = _10 | 2;
  this_29(D)->_errState = _11;
  goto <bb 15>; [0.00%]

  <bb 11> [0.00%]:
  _12 = this_29(D)->_outBuff.buf;
  if (_12 != 0B)
    goto <bb 12>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 12> [100.00%]:
  _13 = this_29(D)->_outBuff.bufSize;
  _14 = (long unsigned int) _13;
  _15 = this_29(D)->_outBuff.buf;
  _37 = __builtin_object_size (newBuff_41, 0);
  _33 = __memcpy_chk (newBuff_41, _15, _14, _37);
  _16 = this_29(D)->_outBuff.buf;
  if (_16 != 0B)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [0.00%]:
  _17 = this_29(D)->_outBuff.buf;
  operator delete[] (_17);

  <bb 14> [0.00%]:
  _18 = this_29(D)->_outBuffCapacityHint;
  _19 = this_29(D)->_outBuff.bufSize;
  _20 = (long unsigned int) _19;
  pbzip2::BZ2StreamScanner::initOutBuff (this_29(D), newBuff_41, _20, _18);

  <bb 15> [0.00%]:
  # _21 = PHI <0(2), -1(10), 0(14)>
  return _21;

}



;; Function pbzip2::BZ2StreamScanner::appendOutBuffData(unsigned char*) (_ZN6pbzip216BZ2StreamScanner17appendOutBuffDataEPh, funcdef_no=1932, decl_uid=29344, cgraph_uid=673, symbol_order=676)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
end = &NONLOCAL
end.21_1 = end
_23 = *this + 832
_3 = _23
_4 = end.21_1
_4 = _3
additionSize_22 = _4
_21 = *this + 640
_5 = *this + 1088
additionSize.23_6 = _4
_7 = _5
_7 = additionSize.23_6
newSize_25 = _7
ESCAPED = this
ESCAPED = newSize_25
_27 = NONLOCAL
_9 = additionSize_22
_41 = *this + 832
_37 = *this + 1024
_38 = *this + 1088
_39 = _38
_40 = _37
CALLUSED(29) = CALLUSED(29) + UNKNOWN
CALLUSED(29) = *CALLUSED(29) + UNKNOWN
CALLUSED(29) = _40
CALLUSED(29) = &NULL
_30 = CALLUSED(29)
_30 = NONLOCAL
_29 = _40
doubledereftmp(33) = *_41
*_40 = doubledereftmp(33)
_12 = *this + 1088
additionSize.25_13 = _4
_14 = _12
_14 = additionSize.25_13
*this + 1088 = _14
*this + 832 = end
_15 = &NULL
_15 = &NONLOCAL
_15 = additionSize_22
ESCAPED = _15

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _27
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
end = { NONLOCAL } same as this
end.21_1 = { NONLOCAL } same as this
_23 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _23
_4 = { ESCAPED NONLOCAL }
additionSize_22 = { ESCAPED NONLOCAL } same as _4
_21 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }
additionSize.23_6 = { ESCAPED NONLOCAL } same as _4
_7 = { ESCAPED NONLOCAL }
newSize_25 = { ESCAPED NONLOCAL } same as _7
_ZN6pbzip216BZ2StreamScanner21ensureOutBuffCapacityEm = { }
_27 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as _4
_41 = { ESCAPED NONLOCAL }
_37 = { ESCAPED NONLOCAL }
_38 = { ESCAPED NONLOCAL }
_39 = { ESCAPED NONLOCAL } same as _38
_40 = { ESCAPED NONLOCAL } same as _37
__builtin_object_size = { }
CALLUSED(29) = { NULL ESCAPED NONLOCAL }
CALLCLOBBERED(30) = { }
_30 = { NULL ESCAPED NONLOCAL }
_29 = { ESCAPED NONLOCAL } same as _37
doubledereftmp(33) = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL }
additionSize.25_13 = { ESCAPED NONLOCAL } same as _4
_14 = { ESCAPED NONLOCAL }
_15 = { NULL ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::appendOutBuffData(unsigned char*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

end_18(D), points-to non-local, points-to NULL, points-to vars: { }
this_20(D), points-to non-local, points-to NULL, points-to vars: { }
_23, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_37, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_40, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_41, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::appendOutBuffData(unsigned char*) (struct BZ2StreamScanner * const this, CharType * end)
{
  CharType * D.41901;
  char * D.41899;
  bool D.41897;
  CharType * D.41895;
  void * D.41893;
  size_t newSize;
  int additionSize;
  long int end.21_1;
  long int _3;
  long int _4;
  unsigned int _5;
  unsigned int additionSize.23_6;
  unsigned int _7;
  long unsigned int _9;
  unsigned int _12;
  unsigned int additionSize.25_13;
  unsigned int _14;
  int _15;
  bool _21;
  CharType * _23;
  int _27;
  void * _29;
  long unsigned int _30;
  char * _37;
  unsigned int _38;
  sizetype _39;
  char * _40;
  CharType * _41;

  <bb 2> [100.00%]:
  end.21_1 = (long int) end_18(D);
  _23 = this_20(D)->_inBuffCurrent;
  _3 = (long int) _23;
  _4 = end.21_1 - _3;
  additionSize_22 = (int) _4;
  if (additionSize_22 <= 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [100.00%]:
  _21 = MEM[(const struct BZ2StreamScanner *)this_20(D)]._bz2HeaderFound;
  if (_21 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:
  _5 = this_20(D)->_outBuff.bufSize;
  additionSize.23_6 = (unsigned int) _4;
  _7 = _5 + additionSize.23_6;
  newSize_25 = (size_t) _7;
  _27 = pbzip2::BZ2StreamScanner::ensureOutBuffCapacity (this_20(D), newSize_25);
  if (_27 != 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [100.00%]:
  _9 = (long unsigned int) additionSize_22;
  _41 = this_20(D)->_inBuffCurrent;
  _37 = this_20(D)->_outBuff.buf;
  _38 = this_20(D)->_outBuff.bufSize;
  _39 = (sizetype) _38;
  _40 = _37 + _39;
  _30 = __builtin_object_size (_40, 0);
  _29 = __memcpy_chk (_40, _41, _9, _30);
  _12 = this_20(D)->_outBuff.bufSize;
  additionSize.25_13 = (unsigned int) _4;
  _14 = _12 + additionSize.25_13;
  this_20(D)->_outBuff.bufSize = _14;

  <bb 6> [0.00%]:
  this_20(D)->_inBuffCurrent = end_18(D);

  <bb 7> [0.00%]:
  # _15 = PHI <0(2), -1(4), additionSize_22(6)>
  return _15;

}



;; Function pbzip2::BZ2StreamScanner::appendOutBuffData() (_ZN6pbzip216BZ2StreamScanner17appendOutBuffDataEv, funcdef_no=1439, decl_uid=29346, cgraph_uid=448, symbol_order=450)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_4 = *this + 896
ESCAPED = this
ESCAPED = _4
_6 = NONLOCAL
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_ZN6pbzip216BZ2StreamScanner17appendOutBuffDataEPh = { }
_6 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::appendOutBuffData()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::appendOutBuffData() (struct BZ2StreamScanner * const this)
{
  CharType * D.41904;
  CharType * _4;
  int _6;

  <bb 2> [100.00%]:
  _4 = this_3(D)->_inBuffSearchPtr;
  _6 = pbzip2::BZ2StreamScanner::appendOutBuffData (this_3(D), _4);
  return _6;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::size() const (_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE4sizeEv, funcdef_no=2173, decl_uid=30112, cgraph_uid=914, symbol_order=917)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 64
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::size() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::size() const (const struct basic_string * const this)
{
  size_type _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_M_string_length;
  return _3;

}



;; Function pbzip2::BZ2StreamScanner::getHeaderSize() const (_ZNK6pbzip216BZ2StreamScanner13getHeaderSizeEv, funcdef_no=1429, decl_uid=29319, cgraph_uid=438, symbol_order=440)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_4 = *this + 64
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_4 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::getHeaderSize() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::getHeaderSize() const (const struct BZ2StreamScanner * const this)
{
  size_type D.41908;
  long unsigned int _4;

  <bb 2> [100.00%]:
  _4 = MEM[(const struct basic_string *)this_2(D) + 16B]._M_string_length;
  return _4;

}



;; Function disposeMemory<char>(char*&)void (_Z13disposeMemoryIcEvRPT_, funcdef_no=2184, decl_uid=36382, cgraph_uid=925, symbol_order=928)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
pBuff = &NONLOCAL
_1 = *pBuff
_2 = *pBuff
_3 = *pBuff
ESCAPED = _3
derefaddrtmp(13) = &NULL
*pBuff = derefaddrtmp(13)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
pBuff = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL } same as _1
_ZdaPv = { }
derefaddrtmp(13) = { NULL }


Alias information for disposeMemory<char>(char*&)void

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
pBuff_7(D), points-to non-local, points-to NULL, points-to vars: { }

disposeMemory<char>(char*&)void (char * & pBuff)
{
  char * _1;
  char * _2;
  char * _3;

  <bb 2> [0.00%]:
  _1 = *pBuff_7(D);
  if (_1 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _2 = *pBuff_7(D);
  if (_2 != 0B)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _3 = *pBuff_7(D);
  operator delete[] (_3);

  <bb 5> [0.00%]:
  *pBuff_7(D) = 0B;

  <bb 6> [0.00%]:
  return;

}



;; Function disposeMemory<unsigned char>(unsigned char*&)void (_Z13disposeMemoryIhEvRPT_, funcdef_no=2185, decl_uid=36384, cgraph_uid=926, symbol_order=929)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
pBuff = &NONLOCAL
_1 = *pBuff
_2 = *pBuff
_3 = *pBuff
ESCAPED = _3
derefaddrtmp(13) = &NULL
*pBuff = derefaddrtmp(13)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
pBuff = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1
_3 = { ESCAPED NONLOCAL } same as _1
_ZdaPv = { }
derefaddrtmp(13) = { NULL }


Alias information for disposeMemory<unsigned char>(unsigned char*&)void

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
pBuff_7(D), points-to non-local, points-to NULL, points-to vars: { }

disposeMemory<unsigned char>(unsigned char*&)void (unsigned char * & pBuff)
{
  unsigned char * _1;
  unsigned char * _2;
  unsigned char * _3;

  <bb 2> [0.00%]:
  _1 = *pBuff_7(D);
  if (_1 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 3> [0.00%]:
  _2 = *pBuff_7(D);
  if (_2 != 0B)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  _3 = *pBuff_7(D);
  operator delete[] (_3);

  <bb 5> [0.00%]:
  *pBuff_7(D) = 0B;

  <bb 6> [0.00%]:
  return;

}



;; Function pbzip2::BZ2StreamScanner::dispose() (_ZN6pbzip216BZ2StreamScanner7disposeEv, funcdef_no=1926, decl_uid=29333, cgraph_uid=667, symbol_order=670)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + 1024
_10 = *this
ESCAPED = _10
derefaddrtmp(12) = &NULL
*this = derefaddrtmp(12)
derefaddrtmp(13) = &NULL
*this + 1088 = derefaddrtmp(13)
_2 = this + 704
_9 = *this
ESCAPED = _9
derefaddrtmp(16) = &NULL
*this = derefaddrtmp(16)
derefaddrtmp(17) = &NULL
*this + 960 = derefaddrtmp(17)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_ZdaPv = { }
derefaddrtmp(12) = { NULL }
derefaddrtmp(13) = { NULL } same as derefaddrtmp(12)
_2 = { NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as _10
derefaddrtmp(16) = { NULL } same as derefaddrtmp(12)
derefaddrtmp(17) = { NULL } same as derefaddrtmp(12)


Alias information for pbzip2::BZ2StreamScanner::dispose()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }
this_3(D), points-to non-local, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::dispose() (struct BZ2StreamScanner * const this)
{
  char * * _1;
  CharType * * _2;
  unsigned char * _9;
  char * _10;

  <bb 2> [100.00%]:
  _1 = &this_3(D)->_outBuff.buf;
  _10 = MEM[(char * &)this_3(D) + 128];
  if (_10 != 0B)
    goto <bb 3>; [57.44%]
  else
    goto <bb 4>; [42.56%]

  <bb 3> [57.44%]:
  operator delete[] (_10);
  MEM[(char * &)this_3(D) + 128] = 0B;

  <bb 4> [100.00%]:
  this_3(D)->_outBuff.bufSize = 0;
  _2 = &this_3(D)->_inBuff;
  _9 = MEM[(unsigned char * &)this_3(D) + 88];
  if (_9 != 0B)
    goto <bb 5>; [57.44%]
  else
    goto <bb 6>; [42.56%]

  <bb 5> [57.44%]:
  operator delete[] (_9);
  MEM[(unsigned char * &)this_3(D) + 88] = 0B;

  <bb 6> [0.00%]:
  this_3(D)->_inBuffCapacity = 0;
  return;

}



;; Function std::max<unsigned long>(unsigned long const&, unsigned long const&)unsigned long const& (_ZSt3maxImERKT_S2_S2_, funcdef_no=2186, decl_uid=36413, cgraph_uid=927, symbol_order=930)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__b = &NONLOCAL
_1 = *__a
_2 = *__b
_3 = __b
_3 = __a
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__b = { NONLOCAL } same as __a
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_3 = { NONLOCAL } same as __a


Alias information for std::max<unsigned long>(unsigned long const&, unsigned long const&)unsigned long const&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
__a_5(D), points-to non-local, points-to NULL, points-to vars: { }
__b_6(D), points-to non-local, points-to NULL, points-to vars: { }

std::max<unsigned long>(unsigned long const&, unsigned long const&)unsigned long const& (const long unsigned int & __a, const long unsigned int & __b)
{
  long unsigned int _1;
  long unsigned int _2;
  const long unsigned int & _3;

  <bb 2> [0.00%]:
  _1 = *__a_5(D);
  _2 = *__b_6(D);
  if (_1 < _2)
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:

  <bb 4> [0.00%]:
  # _3 = PHI <__b_6(D)(2), __a_5(D)(3)>
  return _3;

}



;; Function pbzip2::BZ2StreamScanner::appendOutBuffDataUpToLimit() (_ZN6pbzip216BZ2StreamScanner26appendOutBuffDataUpToLimitEv, funcdef_no=1933, decl_uid=29348, cgraph_uid=675, symbol_order=678)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + 1344
_35 = *this + 1472
D.36416 = _35
_45 = D.36416
_43 = *this
_37 = _1
_37 = &D.36416
maxCapacity_27 = *_37
_4 = maxCapacity_27
_5 = *this + 1088
_6 = _4
_6 = _5
maxAddition_29 = _6
_33 = *this + 96
_32 = *this + 768
end1 = _32
_56 = *this + 768
_55 = *this + 64
_10 = &NONLOCAL
_10 = _55
_11 = _56
D.36423 = _11
_24 = *this + 896
D.36422 = _24
_41 = D.36423
_30 = D.36422
_26 = &D.36423
_26 = &D.36422
_67 = _26
_13 = _26
_14 = *_13
end1 = _14
_60 = *this + 832
_16 = maxAddition_29
_17 = _60
end2 = _17
_57 = end2
_58 = end1
_59 = &end2
_59 = &end1
_70 = _59
_18 = _59
end_46 = *_18
ESCAPED = this
ESCAPED = end_46
_48 = NONLOCAL
_19 = &NULL
_19 = _48
ESCAPED = _19

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _48
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
_35 = { ESCAPED NONLOCAL }
D.36416 = { ESCAPED NONLOCAL } same as _45
_45 = { ESCAPED NONLOCAL }
_43 = { ESCAPED NONLOCAL }
_37 = { NONLOCAL D.36416 }
maxCapacity_27 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as maxCapacity_27
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
maxAddition_29 = { ESCAPED NONLOCAL } same as _6
_33 = { ESCAPED NONLOCAL }
_32 = { ESCAPED NONLOCAL }
end1 = { ESCAPED NONLOCAL } same as _58
_56 = { ESCAPED NONLOCAL }
_55 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _56
D.36423 = { ESCAPED NONLOCAL } same as _41
_24 = { ESCAPED NONLOCAL }
D.36422 = { ESCAPED NONLOCAL } same as _30
_41 = { ESCAPED NONLOCAL }
_30 = { ESCAPED NONLOCAL }
_26 = { D.36423 D.36422 }
_67 = { D.36423 D.36422 } same as _26
_13 = { D.36423 D.36422 } same as _26
_14 = { ESCAPED NONLOCAL }
_60 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL } same as _6
_17 = { ESCAPED NONLOCAL } same as _60
end2 = { ESCAPED NONLOCAL } same as _57
_57 = { ESCAPED NONLOCAL }
_58 = { ESCAPED NONLOCAL }
_59 = { end1 end2 }
_70 = { end1 end2 } same as _59
_18 = { end1 end2 } same as _59
end_46 = { ESCAPED NONLOCAL }
_ZN6pbzip216BZ2StreamScanner17appendOutBuffDataEPh = { }
_48 = { ESCAPED NONLOCAL }
_19 = { NULL ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::appendOutBuffDataUpToLimit()

Aliased symbols

end2, UID D.36424, CharType *, is addressable
end1, UID D.36418, CharType *, is addressable
D.36422, UID D.36422, unsigned char * const, is addressable
D.36423, UID D.36423, unsigned char * const, is addressable
D.36416, UID D.36416, const long unsigned int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_13, points-to NULL, points-to vars: { D.36422 D.36423 }
_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_18, points-to NULL, points-to vars: { D.36418 D.36424 }
this_22(D), points-to non-local, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_26, points-to NULL, points-to vars: { D.36422 D.36423 }
_30, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_37, points-to non-local, points-to NULL, points-to vars: { D.36416 }
_41, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
end_46, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_56, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_57, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_59, points-to NULL, points-to vars: { D.36418 D.36424 }
_60, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_67, points-to NULL, points-to vars: { D.36422 D.36423 }
_70, points-to NULL, points-to vars: { D.36418 D.36424 }

pbzip2::BZ2StreamScanner::appendOutBuffDataUpToLimit() (struct BZ2StreamScanner * const this)
{
  CharType * D.41938;
  unsigned char * const & D.41936;
  CharType * D.41933;
  size_t D.41931;
  CharType * D.41929;
  unsigned char * const & D.41927;
  CharType * D.41924;
  bool D.41922;
  size_t D.41920;
  const long unsigned int & D.41918;
  CharType * end;
  CharType * end2;
  CharType * end1;
  int maxAddition;
  size_t maxCapacity;
  unsigned char * const D.36422;
  unsigned char * const D.36423;
  const long unsigned int D.36416;
  size_t * _1;
  unsigned int _4;
  unsigned int _5;
  unsigned int _6;
  sizetype _10;
  CharType * _11;
  unsigned char * const & _13;
  unsigned char * _14;
  sizetype _16;
  CharType * _17;
  unsigned char * const & _18;
  int _19;
  CharType * _24;
  unsigned char * const & _26;
  unsigned char * _30;
  CharType * _32;
  bool _33;
  long unsigned int _35;
  const long unsigned int & _37;
  unsigned char * _41;
  long unsigned int _43;
  long unsigned int _45;
  int _48;
  long unsigned int _55;
  CharType * _56;
  unsigned char * _57;
  unsigned char * _58;
  unsigned char * const & _59;
  CharType * _60;

  <bb 2> [100.00%]:
  _1 = &this_22(D)->_outBuffCapacity;
  _35 = MEM[(const struct BZ2StreamScanner *)this_22(D)]._outBuffCapacityLimit;
  D.36416 = _35;
  _45 = D.36416;
  _43 = MEM[(const long unsigned int &)this_22(D) + 168];
  if (_43 > _45)
    goto <bb 4>; [46.00%]
  else
    goto <bb 3>; [54.00%]

  <bb 3> [54.00%]:

  <bb 4> [100.00%]:
  # _37 = PHI <_1(2), &D.36416(3)>
  maxCapacity_27 = *_37;
  D.36416 ={v} {CLOBBER};
  _4 = (unsigned int) maxCapacity_27;
  _5 = this_22(D)->_outBuff.bufSize;
  _6 = _4 - _5;
  maxAddition_29 = (int) _6;
  if (maxAddition_29 <= 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [100.00%]:
  _33 = MEM[(const struct BZ2StreamScanner *)this_22(D)]._eof;
  if (_33 != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [100.00%]:
  _32 = this_22(D)->_inBuffEnd;
  end1 = _32;
  goto <bb 10>; [0.00%]

  <bb 7> [100.00%]:
  _56 = this_22(D)->_inBuffEnd;
  _55 = MEM[(const struct basic_string *)this_22(D) + 16B]._M_string_length;
  _10 = 1 - _55;
  _11 = _56 + _10;
  D.36423 = _11;
  _24 = this_22(D)->_inBuffSearchPtr;
  D.36422 = _24;
  _41 = D.36423;
  _30 = D.36422;
  if (_30 > _41)
    goto <bb 9>; [46.00%]
  else
    goto <bb 8>; [54.00%]

  <bb 8> [54.00%]:

  <bb 9> [100.00%]:
  # _26 = PHI <&D.36423(7), &D.36422(8)>
  _67 = _26;
  _13 = _26;
  _14 = *_13;
  end1 = _14;
  D.36422 ={v} {CLOBBER};
  D.36423 ={v} {CLOBBER};

  <bb 10> [100.00%]:
  _60 = this_22(D)->_inBuffCurrent;
  _16 = (sizetype) maxAddition_29;
  _17 = _60 + _16;
  end2 = _17;
  _57 = MEM[(unsigned char * const &)&end2];
  _58 = MEM[(unsigned char * const &)&end1];
  if (_57 < _58)
    goto <bb 12>; [46.00%]
  else
    goto <bb 11>; [54.00%]

  <bb 11> [54.00%]:

  <bb 12> [100.00%]:
  # _59 = PHI <&end2(10), &end1(11)>
  _70 = _59;
  _18 = _59;
  end_46 = *_18;
  _48 = pbzip2::BZ2StreamScanner::appendOutBuffData (this_22(D), end_46);

  <bb 13> [0.00%]:
  # _19 = PHI <0(4), _48(12)>
  end1 ={v} {CLOBBER};
  end2 ={v} {CLOBBER};
  return _19;

<L7> [0.00%]:
  end1 ={v} {CLOBBER};
  end2 ={v} {CLOBBER};
  resx 1

}



;; Function std::min<unsigned long>(unsigned long const&, unsigned long const&)unsigned long const& (_ZSt3minImERKT_S2_S2_, funcdef_no=2189, decl_uid=8982, cgraph_uid=929, symbol_order=932)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__b = &NONLOCAL
_1 = *__b
_2 = *__a
_3 = __b
_3 = __a
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__b = { NONLOCAL } same as __a
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_3 = { NONLOCAL } same as __a


Alias information for std::min<unsigned long>(unsigned long const&, unsigned long const&)unsigned long const&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
__b_5(D), points-to non-local, points-to NULL, points-to vars: { }
__a_6(D), points-to non-local, points-to NULL, points-to vars: { }

std::min<unsigned long>(unsigned long const&, unsigned long const&)unsigned long const& (const long unsigned int & __a, const long unsigned int & __b)
{
  long unsigned int _1;
  long unsigned int _2;
  const long unsigned int & _3;

  <bb 2> [0.00%]:
  _1 = *__b_5(D);
  _2 = *__a_6(D);
  if (_1 < _2)
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:

  <bb 4> [0.00%]:
  # _3 = PHI <__b_5(D)(2), __a_6(D)(3)>
  return _3;

}



;; Function std::move<std::allocator<unsigned char>&>(std::allocator<unsigned char>&)std::remove_reference<std::allocator<unsigned char>&>::type&& (_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_, funcdef_no=2302, decl_uid=38941, cgraph_uid=1042, symbol_order=1045)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__t = &NONLOCAL
ESCAPED = __t

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__t = { NONLOCAL }


Alias information for std::move<std::allocator<unsigned char>&>(std::allocator<unsigned char>&)std::remove_reference<std::allocator<unsigned char>&>::type&&

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__t_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::move<std::allocator<unsigned char>&>(std::allocator<unsigned char>&)std::remove_reference<std::allocator<unsigned char>&>::type&& (struct allocator & __t)
{
  <bb 2> [0.00%]:
  return __t_1(D);

}



;; Function __gnu_cxx::char_traits<unsigned char>::eq(unsigned char const&, unsigned char const&) (_ZN9__gnu_cxx11char_traitsIhE2eqERKhS3_, funcdef_no=2309, decl_uid=29548, cgraph_uid=1048, symbol_order=1051)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__c1 = &NONLOCAL
__c2 = &NONLOCAL
_1 = *__c1
_2 = *__c2
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__c1 = { NONLOCAL }
__c2 = { NONLOCAL } same as __c1
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_6 = { }


Alias information for __gnu_cxx::char_traits<unsigned char>::eq(unsigned char const&, unsigned char const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__c1_4(D), points-to non-local, points-to NULL, points-to vars: { }
__c2_5(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::char_traits<unsigned char>::eq(unsigned char const&, unsigned char const&) (const char_type & __c1, const char_type & __c2)
{
  unsigned char _1;
  unsigned char _2;
  bool _6;

  <bb 2> [0.00%]:
  _1 = *__c1_4(D);
  _2 = *__c2_5(D);
  _6 = _1 == _2;
  return _6;

}



;; Function __gnu_cxx::char_traits<unsigned char>::length(unsigned char const*) (_ZN9__gnu_cxx11char_traitsIhE6lengthEPKh, funcdef_no=2308, decl_uid=29558, cgraph_uid=1049, symbol_order=1052)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__p = &NONLOCAL
__i_3 = &NULL
__i_3 = __i_13
_1 = __p
_9 = *_1
__i_13 = __i_3
__i_13 = &NONLOCAL
_12 = __i_3
ESCAPED = __i_3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__p = { NONLOCAL }
__i_3 = { NULL NONLOCAL }
__i_13 = { NULL NONLOCAL } same as __i_3
_1 = { NONLOCAL } same as __p
_9 = { ESCAPED NONLOCAL }
_15 = { }
_12 = { NULL NONLOCAL } same as __i_3


Alias information for __gnu_cxx::char_traits<unsigned char>::length(unsigned char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
__p_8(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::char_traits<unsigned char>::length(unsigned char const*) (const char_type * __p)
{
  bool D.41945;
  size_t __i;
  const char_type D.38952;
  const char_type * _1;
  unsigned char _9;
  size_t _12;
  bool _15;

  <bb 2> [0.00%]:

  <bb 3> [100.00%]:
  # __i_3 = PHI <0(2), __i_13(4)>
  _1 = __p_8(D) + __i_3;
  _9 = *_1;
  _15 = _9 == 0;
  if (_9 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  __i_13 = __i_3 + 1;
  goto <bb 3>; [0.00%]

  <bb 5> [0.00%]:
  _12 = __i_3;
  return __i_3;

}



;; Function std::__miter_base<unsigned char*>(unsigned char*)unsigned char* (_ZSt12__miter_baseIPhET_S1_, funcdef_no=2310, decl_uid=38483, cgraph_uid=1051, symbol_order=1054)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__it = &NONLOCAL
ESCAPED = __it

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__it = { NONLOCAL }


Alias information for std::__miter_base<unsigned char*>(unsigned char*)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__it_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::__miter_base<unsigned char*>(unsigned char*)unsigned char* (unsigned char * __it)
{
  <bb 2> [0.00%]:
  return __it_1(D);

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_check(unsigned long, char const*) const (_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE8_M_checkEmPKc, funcdef_no=2312, decl_uid=29917, cgraph_uid=1053, symbol_order=1056)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pos = &NONLOCAL
__s = &NONLOCAL
_9 = *this + 64
_5 = *this + 64
ESCAPED = &STRING
ESCAPED = __s
ESCAPED = __pos
ESCAPED = _5
ESCAPED = __pos

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pos = { NONLOCAL } same as this
__s = { NONLOCAL } same as this
_9 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL }
_ZSt24__throw_out_of_range_fmtPKcz = { }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_check(unsigned long, char const*) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_4(D), points-to non-local, points-to NULL, points-to vars: { }
__s_10(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_check(unsigned long, char const*) const (const struct basic_string * const this, size_type __pos, const char * __s)
{
  size_type D.41951;
  size_type D.41949;
  long unsigned int _5;
  long unsigned int _9;

  <bb 2> [100.00%]:
  _9 = this_4(D)->_M_string_length;
  if (__pos_6(D) > _9)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _5 = this_4(D)->_M_string_length;
  std::__throw_out_of_range_fmt ("%s: __pos (which is %zu) > this->size() (which is %zu)", __s_10(D), __pos_6(D), _5);

  <bb 4> [0.00%]:
  return __pos_6(D);

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_limit(unsigned long, unsigned long) const (_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE8_M_limitEmm, funcdef_no=2313, decl_uid=29926, cgraph_uid=1054, symbol_order=1057)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pos = &NONLOCAL
__off = &NONLOCAL
_12 = *this + 64
_2 = _12
_2 = __pos
_8 = *this + 64
iftmp.40_13 = _8
iftmp.40_13 = __pos
iftmp.40_4 = __off
iftmp.40_4 = iftmp.40_13
ESCAPED = iftmp.40_4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pos = { NONLOCAL } same as this
__off = { NONLOCAL } same as this
_12 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }
iftmp.40_13 = { ESCAPED NONLOCAL }
iftmp.40_4 = { ESCAPED NONLOCAL } same as iftmp.40_13


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_limit(unsigned long, unsigned long) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_7(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_limit(unsigned long, unsigned long) const (const struct basic_string * const this, size_type __pos, size_type __off)
{
  size_type D.41956;
  size_type D.41954;
  const bool __testoff;
  long unsigned int _2;
  size_type iftmp.40_4;
  long unsigned int _8;
  long unsigned int _12;
  size_type iftmp.40_13;

  <bb 2> [100.00%]:
  _12 = this_7(D)->_M_string_length;
  _2 = _12 - __pos_9(D);
  if (_2 > __off_10(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [100.00%]:
  _8 = this_7(D)->_M_string_length;
  iftmp.40_13 = _8 - __pos_9(D);

  <bb 4> [0.00%]:
  # iftmp.40_4 = PHI <__off_10(D)(2), iftmp.40_13(3)>
  return iftmp.40_4;

}



;; Function __gnu_cxx::char_traits<unsigned char>::lt(unsigned char const&, unsigned char const&) (_ZN9__gnu_cxx11char_traitsIhE2ltERKhS3_, funcdef_no=2315, decl_uid=29551, cgraph_uid=1055, symbol_order=1058)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__c1 = &NONLOCAL
__c2 = &NONLOCAL
_1 = *__c1
_2 = *__c2
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__c1 = { NONLOCAL }
__c2 = { NONLOCAL } same as __c1
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_6 = { }


Alias information for __gnu_cxx::char_traits<unsigned char>::lt(unsigned char const&, unsigned char const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__c1_4(D), points-to non-local, points-to NULL, points-to vars: { }
__c2_5(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::char_traits<unsigned char>::lt(unsigned char const&, unsigned char const&) (const char_type & __c1, const char_type & __c2)
{
  unsigned char _1;
  unsigned char _2;
  bool _6;

  <bb 2> [0.00%]:
  _1 = *__c1_4(D);
  _2 = *__c2_5(D);
  _6 = _1 < _2;
  return _6;

}



;; Function __gnu_cxx::char_traits<unsigned char>::compare(unsigned char const*, unsigned char const*, unsigned long) (_ZN9__gnu_cxx11char_traitsIhE7compareEPKhS3_m, funcdef_no=2314, decl_uid=29554, cgraph_uid=1056, symbol_order=1059)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__s1 = &NONLOCAL
__s2 = &NONLOCAL
__n = &NONLOCAL
__i_5 = &NULL
__i_5 = __i_18
_1 = __s2
_2 = __s1
_16 = *_2
_14 = *_1
_3 = __s1
_4 = __s2
_23 = *_4
_24 = *_3
__i_18 = __i_5
__i_18 = &NONLOCAL
_6 = &NONLOCAL
_6 = &NONLOCAL
_6 = &NULL
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__s1 = { NONLOCAL }
__s2 = { NONLOCAL } same as __s1
__n = { NONLOCAL } same as __s1
__i_5 = { NULL NONLOCAL }
__i_18 = { NULL NONLOCAL } same as __i_5
_1 = { NONLOCAL } same as __s1
_2 = { NONLOCAL } same as __s1
_16 = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL }
_3 = { NONLOCAL } same as __s1
_4 = { NONLOCAL } same as __s1
_23 = { ESCAPED NONLOCAL }
_24 = { ESCAPED NONLOCAL }
_6 = { NULL NONLOCAL } same as __i_5


Alias information for __gnu_cxx::char_traits<unsigned char>::compare(unsigned char const*, unsigned char const*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }
__s2_12(D), points-to non-local, points-to NULL, points-to vars: { }
__s1_13(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::char_traits<unsigned char>::compare(unsigned char const*, unsigned char const*, unsigned long) (const char_type * __s1, const char_type * __s2, size_t __n)
{
  bool D.41964;
  bool D.41961;
  size_t __i;
  const char_type * _1;
  const char_type * _2;
  const char_type * _3;
  const char_type * _4;
  int _6;
  unsigned char _14;
  unsigned char _16;
  unsigned char _23;
  unsigned char _24;

  <bb 2> [0.00%]:

  <bb 3> [0.00%]:
  # __i_5 = PHI <0(2), __i_18(6)>
  if (__i_5 >= __n_11(D))
    goto <bb 7>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [100.00%]:
  _1 = __s2_12(D) + __i_5;
  _2 = __s1_13(D) + __i_5;
  _16 = *_2;
  _14 = *_1;
  if (_14 > _16)
    goto <bb 7>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [100.00%]:
  _3 = __s1_13(D) + __i_5;
  _4 = __s2_12(D) + __i_5;
  _23 = *_4;
  _24 = *_3;
  if (_23 < _24)
    goto <bb 7>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [0.00%]:
  __i_18 = __i_5 + 1;
  goto <bb 3>; [0.00%]

  <bb 7> [0.00%]:
  # _6 = PHI <-1(4), 1(5), 0(3)>
  return _6;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_data() const (_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE7_M_dataEv, funcdef_no=2316, decl_uid=29818, cgraph_uid=1057, symbol_order=1060)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_data() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_data() const (const struct basic_string * const this)
{
  unsigned char * _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_M_dataplus._M_p;
  return _3;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::operator[](unsigned long) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEixEm, funcdef_no=2193, decl_uid=30139, cgraph_uid=934, symbol_order=937)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pos = &NONLOCAL
_4 = *this
_6 = _4
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pos = { NONLOCAL } same as this
_4 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _4


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::operator[](unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::operator[](unsigned long) (struct basic_string * const this, size_type __pos)
{
  unsigned char * D.41968;
  unsigned char * _4;
  value_type & _6;

  <bb 2> [100.00%]:
  _4 = MEM[(const struct basic_string *)this_3(D)]._M_dataplus._M_p;
  _6 = _4 + __pos_5(D);
  return _6;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_S_compare(unsigned long, unsigned long) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE10_S_compareEmm, funcdef_no=2317, decl_uid=29973, cgraph_uid=1058, symbol_order=1061)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__n1 = &NONLOCAL
__n2 = &NONLOCAL
_1 = __n1
_1 = __n2
__d_5 = _1
_6 = _1
_2 = &NONLOCAL
_2 = &NONLOCAL
_2 = _6
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__n1 = { NONLOCAL }
__n2 = { NONLOCAL } same as __n1
_1 = { NONLOCAL } same as __n1
__d_5 = { NONLOCAL } same as __n1
_6 = { NONLOCAL } same as __n1
_2 = { NONLOCAL } same as __n1


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_S_compare(unsigned long, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_S_compare(unsigned long, unsigned long) (size_type __n1, size_type __n2)
{
  const difference_type __d;
  long unsigned int _1;
  int _2;
  int _6;

  <bb 2> [0.00%]:
  _1 = __n1_3(D) - __n2_4(D);
  __d_5 = (const difference_type) _1;
  if (__d_5 > 2147483647)
    goto <bb 5>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  if (__d_5 < -2147483648)
    goto <bb 5>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [0.00%]:
  _6 = (int) _1;

  <bb 5> [0.00%]:
  # _2 = PHI <2147483647(2), -2147483648(3), _6(4)>
  return _2;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::compare(unsigned long, unsigned long, unsigned char const*, unsigned long) const (_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE7compareEmmPKhm, funcdef_no=2188, decl_uid=30604, cgraph_uid=930, symbol_order=933)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pos = &NONLOCAL
__n1 = &NONLOCAL
__s = &NONLOCAL
__n2 = &NONLOCAL
_35 = *this + 64
ESCAPED = &STRING
ESCAPED = &STRING
ESCAPED = __pos
ESCAPED = _35
__n1.36_1 = __n1
_32 = *this + 64
_33 = _32
_33 = __pos
iftmp.40_34 = __n1.36_1
iftmp.40_34 = _33
__n1 = iftmp.40_34
_29 = __n2
_30 = __n1
_31 = &__n2
_31 = &__n1
_42 = _31
_3 = _31
__len_17 = *_3
_28 = *this
_5 = _28
__i_23 = &NULL
__i_23 = __i_26
_20 = __s
_40 = __pos
_40 = __i_23
_18 = _28
_16 = *_18
_14 = *_20
__i_26 = __i_23
__i_26 = &NONLOCAL
_27 = &NULL
_27 = &NONLOCAL
_27 = &NONLOCAL
__n2.37_6 = __n2
__n1.38_7 = __n1
_36 = __n1.38_7
_36 = __n2.37_6
__d_37 = _36
_38 = _36
_39 = &NONLOCAL
_39 = &NONLOCAL
_39 = _38
__r_8 = _27
__r_8 = _39
ESCAPED = __r_8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pos = { NONLOCAL } same as this
__n1 = { ESCAPED NONLOCAL } same as __n1.36_1
__s = { NONLOCAL } same as this
__n2 = { NONLOCAL } same as _29
_35 = { ESCAPED NONLOCAL }
_ZSt24__throw_out_of_range_fmtPKcz = { }
__n1.36_1 = { ESCAPED NONLOCAL }
_32 = { ESCAPED NONLOCAL }
_33 = { ESCAPED NONLOCAL }
iftmp.40_34 = { ESCAPED NONLOCAL } same as __n1.36_1
_29 = { NONLOCAL }
_30 = { ESCAPED NONLOCAL } same as __n1.36_1
_31 = { __n1 __n2 }
_42 = { __n1 __n2 } same as _31
_3 = { __n1 __n2 } same as _31
__len_17 = { ESCAPED NONLOCAL }
_28 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _28
__i_23 = { NULL NONLOCAL }
__i_26 = { NULL NONLOCAL } same as __i_23
_20 = { NONLOCAL } same as this
_40 = { NULL NONLOCAL } same as __i_23
_18 = { ESCAPED NONLOCAL } same as _28
_16 = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL }
_27 = { NULL NONLOCAL } same as __i_23
__n2.37_6 = { NONLOCAL } same as _29
__n1.38_7 = { ESCAPED NONLOCAL } same as __n1.36_1
_36 = { ESCAPED NONLOCAL }
__d_37 = { ESCAPED NONLOCAL } same as _36
_38 = { ESCAPED NONLOCAL } same as _36
_39 = { ESCAPED NONLOCAL } same as _36
__r_8 = { NULL ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::compare(unsigned long, unsigned long, unsigned char const*, unsigned long) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_3, points-to NULL, points-to vars: { D.30607 D.30609 }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_11(D), points-to non-local, points-to NULL, points-to vars: { }
_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__s_19(D), points-to non-local, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to NULL, points-to vars: { }
_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_31, points-to NULL, points-to vars: { D.30607 D.30609 }
_42, points-to NULL, points-to vars: { D.30607 D.30609 }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::compare(unsigned long, unsigned long, unsigned char const*, unsigned long) const (const struct basic_string * const this, size_type __pos, size_type __n1, const unsigned char * __s, size_type __n2)
{
  const difference_type __d;
  int D.41992;
  size_type D.41988;
  size_type D.41984;
  const long unsigned int & D.41980;
  unsigned char * D.41977;
  size_t __i;
  int D.41975;
  int __r;
  const size_type __len;
  long unsigned int __n1.36_1;
  const long unsigned int & _3;
  unsigned char * _5;
  long unsigned int __n2.37_6;
  long unsigned int __n1.38_7;
  unsigned char _14;
  unsigned char _16;
  const char_type * _18;
  const char_type * _20;
  int _27;
  unsigned char * _28;
  long unsigned int _29;
  long unsigned int _30;
  const long unsigned int & _31;
  long unsigned int _32;
  long unsigned int _33;
  long unsigned int iftmp.40_34;
  long unsigned int _35;
  long unsigned int _36;
  int _38;
  int _39;
  long unsigned int _40;

  <bb 2> [100.00%]:
  _35 = this_11(D)->_M_string_length;
  if (__pos_12(D) > _35)
    goto <bb 3>; [0.04%]
  else
    goto <bb 4>; [99.96%]

  <bb 3> [0.04%]:
  std::__throw_out_of_range_fmt ("%s: __pos (which is %zu) > this->size() (which is %zu)", "basic_string::compare", __pos_12(D), _35);

  <bb 4> [100.00%]:
  __n1.36_1 = __n1;
  _32 = this_11(D)->_M_string_length;
  _33 = _32 - __pos_12(D);
  if (__n1.36_1 < _33)
    goto <bb 6>; [46.00%]
  else
    goto <bb 5>; [54.00%]

  <bb 5> [54.00%]:

  <bb 6> [100.00%]:
  # iftmp.40_34 = PHI <__n1.36_1(4), _33(5)>
  __n1 = iftmp.40_34;
  _29 = __n2;
  _30 = __n1;
  if (_29 < _30)
    goto <bb 8>; [46.00%]
  else
    goto <bb 7>; [54.00%]

  <bb 7> [54.00%]:

  <bb 8> [100.00%]:
  # _31 = PHI <&__n2(6), &__n1(7)>
  _42 = _31;
  _3 = _31;
  __len_17 = *_3;
  _28 = this_11(D)->_M_dataplus._M_p;
  _5 = _28 + __pos_12(D);

  <bb 9> [100.00%]:
  # __i_23 = PHI <0(8), __i_26(12)>
  if (__len_17 <= __i_23)
    goto <bb 13>; [5.00%]
  else
    goto <bb 10>; [95.00%]

  <bb 10> [95.00%]:
  _20 = __s_19(D) + __i_23;
  _40 = __pos_12(D) + __i_23;
  _18 = _28 + _40;
  _16 = *_18;
  _14 = *_20;
  if (_14 > _16)
    goto <bb 13>; [5.00%]
  else
    goto <bb 11>; [95.00%]

  <bb 11> [90.25%]:
  if (_14 < _16)
    goto <bb 13>; [5.00%]
  else
    goto <bb 12>; [95.00%]

  <bb 12> [85.74%]:
  __i_26 = __i_23 + 1;
  goto <bb 9>; [100.00%]

  <bb 13> [14.26%]:
  # _27 = PHI <0(9), -1(10), 1(11)>
  if (_27 == 0)
    goto <bb 14>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 14> [100.00%]:
  __n2.37_6 = __n2;
  __n1.38_7 = __n1;
  _36 = __n1.38_7 - __n2.37_6;
  __d_37 = (const difference_type) _36;
  if (__d_37 > 2147483647)
    goto <bb 17>; [31.00%]
  else
    goto <bb 15>; [69.00%]

  <bb 15> [69.00%]:
  if (__d_37 < -2147483648)
    goto <bb 17>; [2.00%]
  else
    goto <bb 16>; [98.00%]

  <bb 16> [67.62%]:
  _38 = (int) _36;

  <bb 17> [100.00%]:
  # _39 = PHI <2147483647(14), -2147483648(15), _38(16)>

  <bb 18> [0.00%]:
  # __r_8 = PHI <_27(13), _39(17)>
  return __r_8;

}



;; Function __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::__normal_iterator(unsigned char* const&) (_ZN9__gnu_cxx17__normal_iteratorIPhNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEC2ERKS1_, funcdef_no=2319, decl_uid=36529, cgraph_uid=1060, symbol_order=1063)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__i = &NONLOCAL
_1 = *__i
*this = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__i = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }


Alias information for __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::__normal_iterator(unsigned char* const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_3(D), points-to non-local, points-to NULL, points-to vars: { }
__i_5(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::__normal_iterator(unsigned char* const&) (struct __normal_iterator * const this, unsigned char * const & __i)
{
  unsigned char * _1;

  <bb 2> [0.00%]:
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  _1 = *__i_5(D);
  this_3(D)->_M_current = _1;
  return;

}



;; Function __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::operator+(long) const (_ZNK9__gnu_cxx17__normal_iteratorIPhNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEplEl, funcdef_no=2191, decl_uid=36507, cgraph_uid=932, symbol_order=935)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
_1 = *this
__n.43_2 = __n
_3 = _1
SR.129_12 = _3
D.41510 = SR.129_12
ESCAPED = D.41510

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
__n.43_2 = { NONLOCAL } same as this
_3 = { ESCAPED NONLOCAL } same as _1
SR.129_12 = { ESCAPED NONLOCAL } same as _1
D.41510 = { ESCAPED NONLOCAL } same as _1


Alias information for __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::operator+(long) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to NULL, points-to vars: { }
SR.129_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::operator+(long) const (const struct __normal_iterator * const this, difference_type __n)
{
  unsigned char * SR.129;
  unsigned char * const D.38497;
  struct __normal_iterator D.38498;
  struct __normal_iterator D.41510;
  unsigned char * _1;
  sizetype __n.43_2;
  unsigned char * _3;

  <bb 2> [100.00%]:
  _1 = this_5(D)->_M_current;
  __n.43_2 = (sizetype) __n_6(D);
  _3 = _1 + __n.43_2;
  SR.129_12 = _3;
  MEM[(struct __normal_iterator *)&D.41510] = SR.129_12;
  return D.41510;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::begin() (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE5beginEv, funcdef_no=2190, decl_uid=30088, cgraph_uid=931, symbol_order=934)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_10 = *this
SR.131_1 = _10
D.41514 = SR.131_1
ESCAPED = D.41514

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_10 = { ESCAPED NONLOCAL }
SR.131_1 = { ESCAPED NONLOCAL } same as _10
D.41514 = { ESCAPED NONLOCAL } same as _10


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::begin()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

SR.131_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_3(D), points-to non-local, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::begin() (struct basic_string * const this)
{
  unsigned char * SR.131;
  unsigned char * D.42002;
  unsigned char * const D.38494;
  struct iterator D.38495;
  struct iterator D.41514;
  unsigned char * _10;

  <bb 2> [100.00%]:
  _10 = MEM[(const struct basic_string *)this_3(D)]._M_dataplus._M_p;
  SR.131_1 = _10;
  MEM[(struct __normal_iterator *)&D.41514] = SR.131_1;
  return D.41514;

}



;; Function __gnu_cxx::new_allocator<unsigned char>::new_allocator() (_ZN9__gnu_cxx13new_allocatorIhEC2Ev, funcdef_no=2357, decl_uid=29704, cgraph_uid=1098, symbol_order=1101)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for __gnu_cxx::new_allocator<unsigned char>::new_allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::new_allocator<unsigned char>::new_allocator() (struct new_allocator * const this)
{
  <bb 2> [0.00%]:
  return;

}



;; Function std::allocator<unsigned char>::allocator() (_ZNSaIhEC2Ev, funcdef_no=2296, decl_uid=29769, cgraph_uid=1037, symbol_order=1040)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for std::allocator<unsigned char>::allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator<unsigned char>::allocator() (struct allocator * const this)
{
  void * _1;

  <bb 2> [100.00%]:
  return;

}



;; Function __gnu_cxx::new_allocator<unsigned char>::~new_allocator() (_ZN9__gnu_cxx13new_allocatorIhED2Ev, funcdef_no=2360, decl_uid=29709, cgraph_uid=1101, symbol_order=1104)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for __gnu_cxx::new_allocator<unsigned char>::~new_allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::new_allocator<unsigned char>::~new_allocator() (struct new_allocator * const this)
{
  <bb 2> [0.00%]:
  return;

}



;; Function std::allocator<unsigned char>::~allocator() (_ZNSaIhED2Ev, funcdef_no=2299, decl_uid=29774, cgraph_uid=1040, symbol_order=1043)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for std::allocator<unsigned char>::~allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator<unsigned char>::~allocator() (struct allocator * const this)
{
  void * _1;

  <bb 2> [100.00%]:
  return;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_Alloc_hider::~_Alloc_hider() (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE12_Alloc_hiderD2Ev, funcdef_no=2176, decl_uid=30871, cgraph_uid=916, symbol_order=919)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_Alloc_hider::~_Alloc_hider()

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_Alloc_hider::~_Alloc_hider() (struct _Alloc_hider * const this)
{
  <bb 2> [100.00%]:
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  return;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_length(unsigned long) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE9_M_lengthEm, funcdef_no=2365, decl_uid=29815, cgraph_uid=1106, symbol_order=1109)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__length = &NONLOCAL
*this + 64 = __length

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__length = { NONLOCAL } same as this


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_length(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_length(unsigned long) (struct basic_string * const this, size_type __length)
{
  <bb 2> [0.00%]:
  this_2(D)->_M_string_length = __length_3(D);
  return;

}



;; Function __gnu_cxx::char_traits<unsigned char>::assign(unsigned char&, unsigned char const&) (_ZN9__gnu_cxx11char_traitsIhE6assignERhRKh, funcdef_no=2366, decl_uid=29545, cgraph_uid=1107, symbol_order=1110)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__c1 = &NONLOCAL
__c2 = &NONLOCAL
_1 = *__c2
*__c1 = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__c1 = { NONLOCAL }
__c2 = { NONLOCAL } same as __c1
_1 = { ESCAPED NONLOCAL }


Alias information for __gnu_cxx::char_traits<unsigned char>::assign(unsigned char&, unsigned char const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__c2_3(D), points-to non-local, points-to NULL, points-to vars: { }
__c1_4(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::char_traits<unsigned char>::assign(unsigned char&, unsigned char const&) (char_type & __c1, const char_type & __c2)
{
  unsigned char _1;

  <bb 2> [0.00%]:
  _1 = *__c2_3(D);
  *__c1_4(D) = _1;
  return;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_set_length(unsigned long) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE13_M_set_lengthEm, funcdef_no=2305, decl_uid=29827, cgraph_uid=1046, symbol_order=1049)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
*this + 64 = __n
_11 = *this
_2 = _11
derefaddrtmp(12) = &NULL
*_2 = derefaddrtmp(12)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
_11 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _11
derefaddrtmp(12) = { NULL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_set_length(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_set_length(unsigned long) (struct basic_string * const this, size_type __n)
{
  unsigned char * D.42018;
  const char_type D.38947;
  unsigned char * _2;
  unsigned char * _11;

  <bb 2> [100.00%]:
  this_4(D)->_M_string_length = __n_5(D);
  _11 = MEM[(const struct basic_string *)this_4(D)]._M_dataplus._M_p;
  _2 = _11 + __n_5(D);
  MEM[(char_type &)_2] = 0;
  return;

}



;; Function std::__niter_base<unsigned char*>(unsigned char*)unsigned char* (_ZSt12__niter_baseIPhET_S1_, funcdef_no=2370, decl_uid=38958, cgraph_uid=1111, symbol_order=1114)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__it = &NONLOCAL
ESCAPED = __it

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__it = { NONLOCAL }


Alias information for std::__niter_base<unsigned char*>(unsigned char*)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__it_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::__niter_base<unsigned char*>(unsigned char*)unsigned char* (unsigned char * __it)
{
  <bb 2> [0.00%]:
  return __it_1(D);

}



;; Function __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::operator++() (_ZN9__gnu_cxx17__normal_iteratorIPhNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEppEv, funcdef_no=2373, decl_uid=36491, cgraph_uid=1114, symbol_order=1117)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = *this
_2 = _1
*this = _2
ESCAPED = this

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _1
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as _1


Alias information for __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::operator++()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_4(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::operator++() (struct __normal_iterator * const this)
{
  unsigned char * _1;
  unsigned char * _2;

  <bb 2> [0.00%]:
  _1 = this_4(D)->_M_current;
  _2 = _1 + 1;
  this_4(D)->_M_current = _2;
  return this_4(D);

}



;; Function std::__addressof<unsigned char>(unsigned char&)unsigned char* (_ZSt11__addressofIhEPT_RS0_, funcdef_no=2413, decl_uid=40554, cgraph_uid=1153, symbol_order=1156)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL
ESCAPED = __r

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }


Alias information for std::__addressof<unsigned char>(unsigned char&)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__r_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::__addressof<unsigned char>(unsigned char&)unsigned char* (unsigned char & __r)
{
  <bb 2> [0.00%]:
  return __r_1(D);

}



;; Function std::addressof<unsigned char>(unsigned char&)unsigned char* (_ZSt9addressofIhEPT_RS0_, funcdef_no=2412, decl_uid=39501, cgraph_uid=1154, symbol_order=1157)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL
ESCAPED = __r

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }


Alias information for std::addressof<unsigned char>(unsigned char&)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__r_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::addressof<unsigned char>(unsigned char&)unsigned char* (unsigned char & __r)
{
  unsigned char * D.42026;

  <bb 2> [100.00%]:
  return __r_2(D);

}



;; Function std::pointer_traits<unsigned char*>::pointer_to(unsigned char&) (_ZNSt14pointer_traitsIPhE10pointer_toERh, funcdef_no=2355, decl_uid=38923, cgraph_uid=1096, symbol_order=1099)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL
ESCAPED = __r

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }


Alias information for std::pointer_traits<unsigned char*>::pointer_to(unsigned char&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__r_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::pointer_traits<unsigned char*>::pointer_to(unsigned char&) (__make_not_void & __r)
{
  unsigned char * D.42029;

  <bb 2> [100.00%]:
  return __r_2(D);

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_local_data() (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE13_M_local_dataEv, funcdef_no=2294, decl_uid=29820, cgraph_uid=1035, symbol_order=1038)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN
ESCAPED = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_local_data()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_local_data() (struct basic_string * const this)
{
  unsigned char * D.42032;
  unsigned char[16] * _1;

  <bb 2> [100.00%]:
  _1 = &this_2(D)->D.29808._M_local_buf;
  return _1;

}



;; Function __gnu_cxx::new_allocator<unsigned char>::new_allocator(__gnu_cxx::new_allocator<unsigned char> const&) (_ZN9__gnu_cxx13new_allocatorIhEC2ERKS1_, funcdef_no=2415, decl_uid=29699, cgraph_uid=1156, symbol_order=1159)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
D.29701 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
D.29701 = { NONLOCAL } same as this


Alias information for __gnu_cxx::new_allocator<unsigned char>::new_allocator(__gnu_cxx::new_allocator<unsigned char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::new_allocator<unsigned char>::new_allocator(__gnu_cxx::new_allocator<unsigned char> const&) (struct new_allocator * const this, const struct new_allocator & D.29701)
{
  <bb 2> [0.00%]:
  return;

}



;; Function std::allocator<unsigned char>::allocator(std::allocator<unsigned char> const&) (_ZNSaIhEC2ERKS_, funcdef_no=2363, decl_uid=29764, cgraph_uid=1104, symbol_order=1107)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__a = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__a = { NONLOCAL } same as this


Alias information for std::allocator<unsigned char>::allocator(std::allocator<unsigned char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }
__a_4(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator<unsigned char>::allocator(std::allocator<unsigned char> const&) (struct allocator * const this, const struct allocator & __a)
{
  void * _1;

  <bb 2> [100.00%]:
  return;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_Alloc_hider::_Alloc_hider(unsigned char*, std::allocator<unsigned char>&&) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE12_Alloc_hiderC2EPhOS3_, funcdef_no=2303, decl_uid=29791, cgraph_uid=1044, symbol_order=1047)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__dat = &NONLOCAL
__a = &NONLOCAL
*this = __dat

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__dat = { NONLOCAL } same as this
__a = { NONLOCAL } same as this


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_Alloc_hider::_Alloc_hider(unsigned char*, std::allocator<unsigned char>&&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }
__a_5(D), points-to non-local, points-to NULL, points-to vars: { }
__dat_8(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_Alloc_hider::_Alloc_hider(unsigned char*, std::allocator<unsigned char>&&) (struct _Alloc_hider * const this, unsigned char * __dat, struct allocator & __a)
{
  struct type & D.42041;

  <bb 2> [100.00%]:
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  this_3(D)->_M_p = __dat_8(D);
  return;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::basic_string() (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEC2Ev, funcdef_no=2178, decl_uid=30729, cgraph_uid=919, symbol_order=922)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN
_7 = this + UNKNOWN
*this = _7
derefaddrtmp(11) = &NULL
*this + 64 = derefaddrtmp(11)
_10 = *this
derefaddrtmp(13) = &NULL
*_10 = derefaddrtmp(13)

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }
_7 = { NONLOCAL }
derefaddrtmp(11) = { NULL }
_10 = { ESCAPED NONLOCAL }
derefaddrtmp(13) = { NULL } same as derefaddrtmp(11)


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::basic_string()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::basic_string() (struct basic_string * const this)
{
  unsigned char * D.42050;
  struct _Alloc_hider * _1;
  struct _Alloc_hider * _3;
  unsigned char[16] * _7;
  unsigned char * _10;

  <bb 2> [100.00%]:
  MEM[(struct  &)this_5(D)] ={v} {CLOBBER};
  _1 = &this_5(D)->_M_dataplus;
  _7 = &this_5(D)->D.29808._M_local_buf;
  MEM[(struct  &)this_5(D)] ={v} {CLOBBER};
  MEM[(struct _Alloc_hider *)this_5(D)]._M_p = _7;
  this_5(D)->_M_string_length = 0;
  _10 = MEM[(const struct basic_string *)this_5(D)]._M_dataplus._M_p;
  MEM[(char_type &)_10] = 0;
  return;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_get_allocator() (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE16_M_get_allocatorEv, funcdef_no=2419, decl_uid=29913, cgraph_uid=1160, symbol_order=1163)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_2 = this + UNKNOWN
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_2 = { NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_get_allocator()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_1(D), points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_get_allocator() (struct basic_string * const this)
{
  struct allocator_type & _2;

  <bb 2> [0.00%]:
  _2 = &this_1(D)->_M_dataplus;
  return _2;

}



;; Function std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned char>(unsigned char const*, unsigned char const*, unsigned char*)unsigned char* (_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_, funcdef_no=2426, decl_uid=39571, cgraph_uid=1167, symbol_order=1170)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__result = &NONLOCAL
__last.11_1 = __last
__first.12_2 = __first
_Num_8 = __last.11_1
_Num_8 = __first.12_2
_Num.13_3 = _Num_8
doubledereftmp(15) = *__first
*__result = doubledereftmp(15)
_Num.14_4 = _Num_8
_12 = __result
ESCAPED = _12

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as doubledereftmp(15)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__result = { NONLOCAL } same as __first
__last.11_1 = { NONLOCAL } same as __first
__first.12_2 = { NONLOCAL } same as __first
_Num_8 = { NONLOCAL } same as __first
_Num.13_3 = { NONLOCAL } same as __first
doubledereftmp(15) = { ESCAPED NONLOCAL }
_Num.14_4 = { NONLOCAL } same as __first
_12 = { NONLOCAL } same as __first


Alias information for std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned char>(unsigned char const*, unsigned char const*, unsigned char*)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__last_6(D), points-to non-local, points-to NULL, points-to vars: { }
__first_7(D), points-to non-local, points-to NULL, points-to vars: { }
__result_10(D), points-to non-local, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to NULL, points-to vars: { }

std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned char>(unsigned char const*, unsigned char const*, unsigned char*)unsigned char* (const unsigned char * __first, const unsigned char * __last, unsigned char * __result)
{
  const ptrdiff_t _Num;
  long int __last.11_1;
  long int __first.12_2;
  long unsigned int _Num.13_3;
  sizetype _Num.14_4;
  unsigned char * _12;

  <bb 2> [0.00%]:
  __last.11_1 = (long int) __last_6(D);
  __first.12_2 = (long int) __first_7(D);
  _Num_8 = __last.11_1 - __first.12_2;
  if (_Num_8 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _Num.13_3 = (long unsigned int) _Num_8;
  memmove (__result_10(D), __first_7(D), _Num.13_3);

  <bb 4> [0.00%]:
  _Num.14_4 = (sizetype) _Num_8;
  _12 = __result_10(D) + _Num.14_4;
  return _12;

}



;; Function std::__copy_move_a<false, unsigned char*, unsigned char*>(unsigned char*, unsigned char*, unsigned char*)unsigned char* (_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_, funcdef_no=2371, decl_uid=38960, cgraph_uid=1112, symbol_order=1115)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__result = &NONLOCAL
__last.11_8 = __last
__first.12_9 = __first
_Num_10 = __last.11_8
_Num_10 = __first.12_9
_Num.13_11 = _Num_10
doubledereftmp(15) = *__first
*__result = doubledereftmp(15)
_Num.14_12 = _Num_10
_13 = __result
ESCAPED = _13

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as doubledereftmp(15)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__result = { NONLOCAL } same as __first
__last.11_8 = { NONLOCAL } same as __first
__first.12_9 = { NONLOCAL } same as __first
_Num_10 = { NONLOCAL } same as __first
_Num.13_11 = { NONLOCAL } same as __first
doubledereftmp(15) = { ESCAPED NONLOCAL }
_Num.14_12 = { NONLOCAL } same as __first
_13 = { NONLOCAL } same as __first


Alias information for std::__copy_move_a<false, unsigned char*, unsigned char*>(unsigned char*, unsigned char*, unsigned char*)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first_3(D), points-to non-local, points-to NULL, points-to vars: { }
__last_4(D), points-to non-local, points-to NULL, points-to vars: { }
__result_5(D), points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }

std::__copy_move_a<false, unsigned char*, unsigned char*>(unsigned char*, unsigned char*, unsigned char*)unsigned char* (unsigned char * __first, unsigned char * __last, unsigned char * __result)
{
  const ptrdiff_t _Num;
  unsigned char * D.42060;
  const bool __simple;
  long int __last.11_8;
  long int __first.12_9;
  long unsigned int _Num.13_11;
  sizetype _Num.14_12;
  unsigned char * _13;

  <bb 2> [100.00%]:
  __last.11_8 = (long int) __last_4(D);
  __first.12_9 = (long int) __first_3(D);
  _Num_10 = __last.11_8 - __first.12_9;
  if (_Num_10 != 0)
    goto <bb 3>; [36.64%]
  else
    goto <bb 4>; [63.36%]

  <bb 3> [36.64%]:
  _Num.13_11 = (long unsigned int) _Num_10;
  memmove (__result_5(D), __first_3(D), _Num.13_11);

  <bb 4> [100.00%]:
  _Num.14_12 = (sizetype) _Num_10;
  _13 = __result_5(D) + _Num.14_12;
  return _13;

}



;; Function std::__copy_move_a2<false, unsigned char*, unsigned char*>(unsigned char*, unsigned char*, unsigned char*)unsigned char* (_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_, funcdef_no=2311, decl_uid=38485, cgraph_uid=1052, symbol_order=1055)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__result = &NONLOCAL
__last.11_10 = __last
__first.12_8 = __first
_Num_6 = __last.11_10
_Num_6 = __first.12_8
_Num.13_14 = _Num_6
doubledereftmp(15) = *__first
*__result = doubledereftmp(15)
_Num.14_15 = _Num_6
_16 = __result
ESCAPED = _16

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as doubledereftmp(15)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__result = { NONLOCAL } same as __first
__last.11_10 = { NONLOCAL } same as __first
__first.12_8 = { NONLOCAL } same as __first
_Num_6 = { NONLOCAL } same as __first
_Num.13_14 = { NONLOCAL } same as __first
doubledereftmp(15) = { ESCAPED NONLOCAL }
_Num.14_15 = { NONLOCAL } same as __first
_16 = { NONLOCAL } same as __first


Alias information for std::__copy_move_a2<false, unsigned char*, unsigned char*>(unsigned char*, unsigned char*, unsigned char*)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__result_5(D), points-to non-local, points-to NULL, points-to vars: { }
__last_7(D), points-to non-local, points-to NULL, points-to vars: { }
__first_9(D), points-to non-local, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to NULL, points-to vars: { }

std::__copy_move_a2<false, unsigned char*, unsigned char*>(unsigned char*, unsigned char*, unsigned char*)unsigned char* (unsigned char * __first, unsigned char * __last, unsigned char * __result)
{
  unsigned char * D.42076;
  unsigned char * D.42074;
  unsigned char * D.42072;
  const ptrdiff_t _Num;
  unsigned char * D.42070;
  long int __first.12_8;
  long int __last.11_10;
  long unsigned int _Num.13_14;
  sizetype _Num.14_15;
  unsigned char * _16;

  <bb 2> [100.00%]:
  __last.11_10 = (long int) __last_7(D);
  __first.12_8 = (long int) __first_9(D);
  _Num_6 = __last.11_10 - __first.12_8;
  if (_Num_6 != 0)
    goto <bb 3>; [36.64%]
  else
    goto <bb 4>; [63.36%]

  <bb 3> [36.64%]:
  _Num.13_14 = (long unsigned int) _Num_6;
  memmove (__result_5(D), __first_9(D), _Num.13_14);

  <bb 4> [100.00%]:
  _Num.14_15 = (sizetype) _Num_6;
  _16 = __result_5(D) + _Num.14_15;
  return _16;

}



;; Function std::copy<unsigned char*, unsigned char*>(unsigned char*, unsigned char*, unsigned char*)unsigned char* (_ZSt4copyIPhS0_ET0_T_S2_S1_, funcdef_no=2187, decl_uid=36432, cgraph_uid=928, symbol_order=931)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__result = &NONLOCAL
__last.11_7 = __last
__first.12_5 = __first
_Num_12 = __last.11_7
_Num_12 = __first.12_5
_Num.13_13 = _Num_12
doubledereftmp(15) = *__first
*__result = doubledereftmp(15)
_Num.14_14 = _Num_12
_15 = __result
ESCAPED = _15

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as doubledereftmp(15)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__result = { NONLOCAL } same as __first
__last.11_7 = { NONLOCAL } same as __first
__first.12_5 = { NONLOCAL } same as __first
_Num_12 = { NONLOCAL } same as __first
_Num.13_13 = { NONLOCAL } same as __first
doubledereftmp(15) = { ESCAPED NONLOCAL }
_Num.14_14 = { NONLOCAL } same as __first
_15 = { NONLOCAL } same as __first


Alias information for std::copy<unsigned char*, unsigned char*>(unsigned char*, unsigned char*, unsigned char*)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__last_4(D), points-to non-local, points-to NULL, points-to vars: { }
__first_6(D), points-to non-local, points-to NULL, points-to vars: { }
__result_8(D), points-to non-local, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to NULL, points-to vars: { }

std::copy<unsigned char*, unsigned char*>(unsigned char*, unsigned char*, unsigned char*)unsigned char* (unsigned char * __first, unsigned char * __last, unsigned char * __result)
{
  unsigned char * D.42087;
  unsigned char * D.42085;
  const ptrdiff_t _Num;
  unsigned char * D.42083;
  long int __first.12_5;
  long int __last.11_7;
  long unsigned int _Num.13_13;
  sizetype _Num.14_14;
  unsigned char * _15;

  <bb 2> [100.00%]:
  __last.11_7 = (long int) __last_4(D);
  __first.12_5 = (long int) __first_6(D);
  _Num_12 = __last.11_7 - __first.12_5;
  if (_Num_12 != 0)
    goto <bb 3>; [36.64%]
  else
    goto <bb 4>; [63.36%]

  <bb 3> [36.64%]:
  _Num.13_13 = (long unsigned int) _Num_12;
  memmove (__result_8(D), __first_6(D), _Num.13_13);

  <bb 4> [100.00%]:
  _Num.14_14 = (sizetype) _Num_12;
  _15 = __result_8(D) + _Num.14_14;
  return _15;

}



;; Function pbzip2::BZ2StreamScanner::rewindInBuff() (_ZN6pbzip216BZ2StreamScanner12rewindInBuffEv, funcdef_no=1935, decl_uid=29371, cgraph_uid=676, symbol_order=679)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_42 = *this + 768
_43 = *this + 64
_4 = &NONLOCAL
_4 = _43
_5 = _42
*this + 896 = _5
_46 = *this + 896
ESCAPED = this
ESCAPED = _46
_44 = NONLOCAL
_50 = *this + 1536
iftmp.28_2 = &NONLOCAL
iftmp.28_48 = &NONLOCAL
iftmp.28_64 = &NULL
_40 = *this + 832
*this + 896 = _40
_62 = *this + 768
_9 = _62
_61 = *this + 896
_11 = _61
_12 = _9
_12 = _11
tailSize_41 = _12
_60 = *this + 704
_59 = *this + 768
_58 = *this + 896
__last.11_28 = _59
__first.12_27 = _58
_Num_54 = __last.11_28
_Num_54 = __first.12_27
_Num.13_55 = _Num_54
doubledereftmp(34) = *_58
*_60 = doubledereftmp(34)
_Num.14_56 = _Num_54
_57 = _60
_33 = *this + 704
_17 = tailSize_41
_18 = _33
*this + 768 = _18
_37 = *this + 704
*this + 832 = _37
_39 = *this + 704
*this + 896 = _39
_22 = &NONLOCAL
_22 = &NULL
_22 = &NONLOCAL
ESCAPED = _22

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _44
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_42 = { ESCAPED NONLOCAL }
_43 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _42
_46 = { ESCAPED NONLOCAL }
_ZN6pbzip216BZ2StreamScanner17appendOutBuffDataEPh = { }
_44 = { ESCAPED NONLOCAL }
_50 = { ESCAPED NONLOCAL }
iftmp.28_2 = { NONLOCAL } same as this
iftmp.28_48 = { NONLOCAL } same as this
iftmp.28_64 = { NULL }
_40 = { ESCAPED NONLOCAL }
_62 = { ESCAPED NONLOCAL }
_9 = { ESCAPED NONLOCAL } same as _62
_61 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _61
_12 = { ESCAPED NONLOCAL }
tailSize_41 = { ESCAPED NONLOCAL } same as _12
_60 = { ESCAPED NONLOCAL }
_59 = { ESCAPED NONLOCAL }
_58 = { ESCAPED NONLOCAL }
__last.11_28 = { ESCAPED NONLOCAL } same as _59
__first.12_27 = { ESCAPED NONLOCAL } same as _58
_Num_54 = { ESCAPED NONLOCAL }
_Num.13_55 = { ESCAPED NONLOCAL } same as _Num_54
doubledereftmp(34) = { ESCAPED NONLOCAL }
_Num.14_56 = { ESCAPED NONLOCAL } same as _Num_54
_57 = { ESCAPED NONLOCAL } same as _60
_33 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL } same as _12
_18 = { ESCAPED NONLOCAL } same as _33
_37 = { ESCAPED NONLOCAL }
_39 = { ESCAPED NONLOCAL }
_22 = { NULL NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::rewindInBuff()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_18, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_26(D), points-to non-local, points-to NULL, points-to vars: { }
_33, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_37, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_39, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_40, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_42, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_46, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_57, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_59, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_60, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_61, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_62, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::rewindInBuff() (struct BZ2StreamScanner * const this)
{
  CharType * D.42120;
  CharType * D.42118;
  CharType * D.42116;
  CharType * D.42114;
  CharType * D.42112;
  const ptrdiff_t _Num;
  unsigned char * D.42110;
  CharType * D.42104;
  CharType * D.42102;
  CharType * D.42100;
  CharType * D.42098;
  CharType * D.42096;
  size_type D.42094;
  int D.42092;
  bool D.42090;
  int tailSize;
  int ret;
  bool iftmp.28_2;
  sizetype _4;
  CharType * _5;
  long int _9;
  long int _11;
  long int _12;
  sizetype _17;
  CharType * _18;
  int _22;
  long int __first.12_27;
  long int __last.11_28;
  CharType * _33;
  CharType * _37;
  CharType * _39;
  CharType * _40;
  CharType * _42;
  long unsigned int _43;
  int _44;
  CharType * _46;
  bool iftmp.28_48;
  unsigned int _50;
  long unsigned int _Num.13_55;
  sizetype _Num.14_56;
  unsigned char * _57;
  CharType * _58;
  CharType * _59;
  CharType * _60;
  CharType * _61;
  CharType * _62;
  bool iftmp.28_64;

  <bb 2> [100.00%]:
  _42 = this_26(D)->_inBuffEnd;
  _43 = MEM[(const struct basic_string *)this_26(D) + 16B]._M_string_length;
  _4 = 1 - _43;
  _5 = _42 + _4;
  this_26(D)->_inBuffSearchPtr = _5;
  _46 = this_26(D)->_inBuffSearchPtr;
  _44 = pbzip2::BZ2StreamScanner::appendOutBuffData (this_26(D), _46);
  _50 = this_26(D)->_errState;
  if (_50 != 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  # iftmp.28_2 = PHI <1(2)>
  goto <bb 11>; [100.00%]

  <bb 4> [0.00%]:
  if (_44 < 0)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  # iftmp.28_48 = PHI <1(4)>
  goto <bb 11>; [100.00%]

  <bb 6> [0.00%]:
  # iftmp.28_64 = PHI <0(4)>
  if (_44 == 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [100.00%]:
  _40 = this_26(D)->_inBuffCurrent;
  this_26(D)->_inBuffSearchPtr = _40;

  <bb 8> [100.00%]:
  _62 = this_26(D)->_inBuffEnd;
  _9 = (long int) _62;
  _61 = this_26(D)->_inBuffSearchPtr;
  _11 = (long int) _61;
  _12 = _9 - _11;
  tailSize_41 = (int) _12;
  _60 = this_26(D)->_inBuff;
  _59 = this_26(D)->_inBuffEnd;
  _58 = this_26(D)->_inBuffSearchPtr;
  __last.11_28 = (long int) _59;
  __first.12_27 = (long int) _58;
  _Num_54 = __last.11_28 - __first.12_27;
  if (_Num_54 != 0)
    goto <bb 9>; [36.64%]
  else
    goto <bb 10>; [63.36%]

  <bb 9> [36.64%]:
  _Num.13_55 = (long unsigned int) _Num_54;
  memmove (_60, _58, _Num.13_55);

  <bb 10> [100.00%]:
  _Num.14_56 = (sizetype) _Num_54;
  _57 = _60 + _Num.14_56;
  _33 = this_26(D)->_inBuff;
  _17 = (sizetype) tailSize_41;
  _18 = _33 + _17;
  this_26(D)->_inBuffEnd = _18;
  _37 = this_26(D)->_inBuff;
  this_26(D)->_inBuffCurrent = _37;
  _39 = this_26(D)->_inBuff;
  this_26(D)->_inBuffSearchPtr = _39;

  <bb 11> [0.00%]:
  # _22 = PHI <-1(3), 0(10), -1(5)>
  return _22;

}



;; Function pbzip2::BZ2StreamScanner::readData() (_ZN6pbzip216BZ2StreamScanner8readDataEv, funcdef_no=1936, decl_uid=29353, cgraph_uid=677, symbol_order=680)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
ESCAPED = this
_31 = *this + 1536
_42 = *this + 768
_41 = _42
_27 = *this + 704
_26 = _27
_24 = _41
_24 = _26
_47 = _24
_29 = *this + 960
_54 = *this + 960
_48 = *this + 768
_49 = _48
_50 = *this + 704
_51 = _50
_52 = _49
_52 = _51
_53 = _52
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _53
ESCAPED = _54
_5 = *this + 1536
_6 = _5
_6 = &NONLOCAL
*this + 1536 = _6
_62 = *this + 960
_56 = *this + 768
_57 = _56
_58 = *this + 704
_59 = _58
_60 = _57
_60 = _59
_61 = _60
_9 = _62
_9 = _61
_55 = *this + 768
_11 = *this + 64
ESCAPED = _11
ESCAPED = _55
ESCAPED = _9
_33 = NONLOCAL
bytesRead_34 = _33
_13 = *this + 768
_14 = bytesRead_34
_15 = _13
*this + 768 = _15
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = bytesRead_34
_16 = *this + 1536
_17 = _16
_17 = &NONLOCAL
*this + 1536 = _17
derefaddrtmp(46) = &NONLOCAL
*this + 96 = derefaddrtmp(46)
_18 = &NONLOCAL
_18 = &NONLOCAL
_18 = bytesRead_34
_18 = bytesRead_34
ESCAPED = _18

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _33
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_ZN6pbzip216BZ2StreamScanner12rewindInBuffEv = { }
_31 = { ESCAPED NONLOCAL }
_42 = { ESCAPED NONLOCAL }
_41 = { ESCAPED NONLOCAL } same as _42
_27 = { ESCAPED NONLOCAL }
_26 = { ESCAPED NONLOCAL } same as _27
_24 = { ESCAPED NONLOCAL }
_47 = { ESCAPED NONLOCAL } same as _24
_29 = { ESCAPED NONLOCAL }
_54 = { ESCAPED NONLOCAL }
_48 = { ESCAPED NONLOCAL }
_49 = { ESCAPED NONLOCAL } same as _48
_50 = { ESCAPED NONLOCAL }
_51 = { ESCAPED NONLOCAL } same as _50
_52 = { ESCAPED NONLOCAL }
_53 = { ESCAPED NONLOCAL } same as _52
_Z12handle_error8ExitFlagiPKcz = { }
_5 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_62 = { ESCAPED NONLOCAL }
_56 = { ESCAPED NONLOCAL }
_57 = { ESCAPED NONLOCAL } same as _56
_58 = { ESCAPED NONLOCAL }
_59 = { ESCAPED NONLOCAL } same as _58
_60 = { ESCAPED NONLOCAL }
_61 = { ESCAPED NONLOCAL } same as _60
_9 = { ESCAPED NONLOCAL }
_55 = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL }
_Z7do_readiPvm = { }
_33 = { ESCAPED NONLOCAL }
bytesRead_34 = { ESCAPED NONLOCAL } same as _33
_13 = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL } same as _33
_15 = { ESCAPED NONLOCAL } same as _13
_16 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL }
derefaddrtmp(46) = { NONLOCAL } same as this
_18 = { ESCAPED NONLOCAL } same as _33


Alias information for pbzip2::BZ2StreamScanner::readData()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_22(D), points-to non-local, points-to NULL, points-to vars: { }
_27, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_42, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_48, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_50, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_55, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_56, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_58, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::readData() (struct BZ2StreamScanner * const this)
{
  size_t D.42137;
  size_t D.42135;
  CharType * D.42133;
  size_t D.42131;
  size_t D.42129;
  size_t D.42127;
  size_t D.42125;
  bool D.42123;
  int bytesRead;
  unsigned int _5;
  unsigned int _6;
  long unsigned int _9;
  int _11;
  CharType * _13;
  sizetype _14;
  CharType * _15;
  unsigned int _16;
  unsigned int _17;
  int _18;
  long int _24;
  long int _26;
  CharType * _27;
  long unsigned int _29;
  unsigned int _31;
  long int _33;
  long int _41;
  CharType * _42;
  long unsigned int _47;
  CharType * _48;
  long int _49;
  CharType * _50;
  long int _51;
  long int _52;
  long unsigned int _53;
  long unsigned int _54;
  CharType * _55;
  CharType * _56;
  long int _57;
  CharType * _58;
  long int _59;
  long int _60;
  long unsigned int _61;
  long unsigned int _62;

  <bb 2> [100.00%]:
  pbzip2::BZ2StreamScanner::rewindInBuff (this_22(D));
  _31 = this_22(D)->_errState;
  if (_31 != 0)
    goto <bb 11>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [100.00%]:
  _42 = MEM[(const struct BZ2StreamScanner *)this_22(D)]._inBuffEnd;
  _41 = (long int) _42;
  _27 = MEM[(const struct BZ2StreamScanner *)this_22(D)]._inBuff;
  _26 = (long int) _27;
  _24 = _41 - _26;
  _47 = (long unsigned int) _24;
  _29 = MEM[(const struct BZ2StreamScanner *)this_22(D)]._inBuffCapacity;
  if (_29 <= _47)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [100.00%]:
  _54 = MEM[(const struct BZ2StreamScanner *)this_22(D)]._inBuffCapacity;
  _48 = MEM[(const struct BZ2StreamScanner *)this_22(D)]._inBuffEnd;
  _49 = (long int) _48;
  _50 = MEM[(const struct BZ2StreamScanner *)this_22(D)]._inBuff;
  _51 = (long int) _50;
  _52 = _49 - _51;
  _53 = (long unsigned int) _52;
  handle_error (1, -1, "pbzip2: *ERROR: BZ2StreamScanner::readData not enough buffer free space! inBuffSize=%u, _inBuffCapacity=%u! Aborting...\n", _53, _54);
  _5 = this_22(D)->_errState;
  _6 = _5 | 8;
  this_22(D)->_errState = _6;
  goto <bb 11>; [0.00%]

  <bb 5> [100.00%]:
  _62 = MEM[(const struct BZ2StreamScanner *)this_22(D)]._inBuffCapacity;
  _56 = MEM[(const struct BZ2StreamScanner *)this_22(D)]._inBuffEnd;
  _57 = (long int) _56;
  _58 = MEM[(const struct BZ2StreamScanner *)this_22(D)]._inBuff;
  _59 = (long int) _58;
  _60 = _57 - _59;
  _61 = (long unsigned int) _60;
  _9 = _62 - _61;
  _55 = this_22(D)->_inBuffEnd;
  _11 = this_22(D)->_hInFile;
  _33 = do_read (_11, _55, _9);
  bytesRead_34 = (int) _33;
  if (bytesRead_34 > 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [0.00%]:
  _13 = this_22(D)->_inBuffEnd;
  _14 = (sizetype) bytesRead_34;
  _15 = _13 + _14;
  this_22(D)->_inBuffEnd = _15;
  goto <bb 10>; [0.00%]

  <bb 7> [0.00%]:
  if (bytesRead_34 < 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Could not read from input file [err=%d]! Aborting...\n", bytesRead_34);
  _16 = this_22(D)->_errState;
  _17 = _16 | 4;
  this_22(D)->_errState = _17;
  goto <bb 11>; [0.00%]

  <bb 9> [0.00%]:
  this_22(D)->_eof = 1;

  <bb 10> [0.00%]:

  <bb 11> [0.00%]:
  # _18 = PHI <-1(2), -1(4), bytesRead_34(8), bytesRead_34(10)>
  return _18;

}



;; Function __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::base() const (_ZNK9__gnu_cxx17__normal_iteratorIPhNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEE4baseEv, funcdef_no=2427, decl_uid=36516, cgraph_uid=1168, symbol_order=1171)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_2 = this
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_2 = { NONLOCAL } same as this


Alias information for __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::base() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_1(D), points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::base() const (const struct __normal_iterator * const this)
{
  unsigned char * const & _2;

  <bb 2> [0.00%]:
  _2 = &this_1(D)->_M_current;
  return _2;

}



;; Function __gnu_cxx::operator==<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >(__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > const&, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > const&)bool (_ZN9__gnu_cxxeqIPhNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_, funcdef_no=2372, decl_uid=38982, cgraph_uid=1113, symbol_order=1116)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__lhs = &NONLOCAL
__rhs = &NONLOCAL
_2 = *__lhs
_4 = *__rhs
ESCAPED = _10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__lhs = { NONLOCAL }
__rhs = { NONLOCAL } same as __lhs
_2 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_10 = { }


Alias information for __gnu_cxx::operator==<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >(__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > const&, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > const&)bool

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__lhs_6(D), points-to non-local, points-to NULL, points-to vars: { }
__rhs_8(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::operator==<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >(__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > const&, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > const&)bool (const struct __normal_iterator & __lhs, const struct __normal_iterator & __rhs)
{
  unsigned char * const & D.42143;
  unsigned char * const & D.42141;
  unsigned char * _2;
  unsigned char * _4;
  bool _10;

  <bb 2> [100.00%]:
  _2 = MEM[(unsigned char * const &)__lhs_6(D)];
  _4 = MEM[(unsigned char * const &)__rhs_8(D)];
  _10 = _2 == _4;
  return _10;

}



;; Function __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >::_Iter_equals_iter(__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >) (_ZN9__gnu_cxx5__ops17_Iter_equals_iterINS_17__normal_iteratorIPhNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEEEC2ESA_, funcdef_no=2429, decl_uid=39010, cgraph_uid=1170, symbol_order=1173)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__it1 = &NONLOCAL
*this + UNKNOWN = __it1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__it1 = { NONLOCAL } same as this


Alias information for __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >::_Iter_equals_iter(__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >::_Iter_equals_iter(__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >) (struct _Iter_equals_iter * const this, struct __normal_iterator __it1)
{
  <bb 2> [0.00%]:
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  this_2(D)->_M_it1 = __it1;
  return;

}



;; Function __gnu_cxx::__ops::__iter_comp_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >(__gnu_cxx::__ops::_Iter_equal_to_iter, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >)__gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > > (_ZN9__gnu_cxx5__ops16__iter_comp_iterINS_17__normal_iteratorIPhNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEEEENS0_17_Iter_equals_iterIT_EENS0_19_Iter_equal_to_iterESC_, funcdef_no=2374, decl_uid=38987, cgraph_uid=1115, symbol_order=1118)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
D.38988 = &NONLOCAL
__it = &NONLOCAL
__it1$_M_current_2 = __it
SR.161_9 = __it1$_M_current_2
D.41561 = SR.161_9
ESCAPED = D.41561

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
D.38988 = { NONLOCAL }
__it = { NONLOCAL } same as D.38988
__it1$_M_current_2 = { NONLOCAL } same as D.38988
SR.161_9 = { NONLOCAL } same as D.38988
D.41561 = { NONLOCAL } same as D.38988


Alias information for __gnu_cxx::__ops::__iter_comp_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >(__gnu_cxx::__ops::_Iter_equal_to_iter, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >)__gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__it1$_M_current_2, points-to non-local, points-to NULL, points-to vars: { }
SR.161_9, points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__ops::__iter_comp_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >(__gnu_cxx::__ops::_Iter_equal_to_iter, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >)__gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > > (struct _Iter_equal_to_iter D.38988, struct __normal_iterator __it)
{
  unsigned char * __it1$_M_current;
  unsigned char * SR.161;
  struct __normal_iterator __it1;
  struct _Iter_equals_iter D.39579;
  struct _Iter_equals_iter D.41561;

  <bb 2> [100.00%]:
  __it1$_M_current_2 = MEM[(struct __normal_iterator *)&__it];
  SR.161_9 = __it1$_M_current_2;
  MEM[(struct _Iter_equals_iter *)&D.41561] = SR.161_9;
  return D.41561;

}



;; Function __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::operator*() const (_ZNK9__gnu_cxx17__normal_iteratorIPhNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEdeEv, funcdef_no=2432, decl_uid=36487, cgraph_uid=1173, symbol_order=1176)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::operator*() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >::operator*() const (const struct __normal_iterator * const this)
{
  unsigned char & _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_M_current;
  return _3;

}



;; Function __gnu_cxx::__ops::_Iter_equal_to_iter::operator()<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >(unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >) constbool (_ZNK9__gnu_cxx5__ops19_Iter_equal_to_iterclIPhNS_17__normal_iteratorIS3_NSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEEEEbT_T0_, funcdef_no=2377, decl_uid=39062, cgraph_uid=1118, symbol_order=1121)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__it1 = &NONLOCAL
__it2 = &NONLOCAL
_1 = *__it1
_6 = __it2
_3 = *_6
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__it1 = { NONLOCAL } same as this
__it2 = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_6 = { NONLOCAL } same as this
_3 = { ESCAPED NONLOCAL }
_7 = { }


Alias information for __gnu_cxx::__ops::_Iter_equal_to_iter::operator()<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >(unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >) constbool

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__it1_5(D), points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::__ops::_Iter_equal_to_iter::operator()<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >(unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >) constbool (const struct _Iter_equal_to_iter * const this, unsigned char * __it1, struct __normal_iterator __it2)
{
  unsigned char & D.42153;
  unsigned char _1;
  unsigned char _3;
  unsigned char & _6;
  bool _7;

  <bb 2> [100.00%]:
  _1 = *__it1_5(D);
  _6 = __it2._M_current;
  _3 = *_6;
  _7 = _1 == _3;
  return _7;

}



;; Function __gnu_cxx::new_allocator<unsigned char>::deallocate(unsigned char*, unsigned long) (_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhm, funcdef_no=2470, decl_uid=29658, cgraph_uid=1211, symbol_order=1214)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__p = &NONLOCAL
D.29661 = &NONLOCAL
ESCAPED = __p

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__p = { NONLOCAL } same as this
D.29661 = { NONLOCAL } same as this
_ZdlPv = { }


Alias information for __gnu_cxx::new_allocator<unsigned char>::deallocate(unsigned char*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__p_2(D), points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::new_allocator<unsigned char>::deallocate(unsigned char*, unsigned long) (struct new_allocator * const this, unsigned char * __p, size_type D.29661)
{
  <bb 2> [0.00%]:
  operator delete (__p_2(D));
  return;

}



;; Function std::allocator_traits<std::allocator<unsigned char> >::deallocate(std::allocator<unsigned char>&, unsigned char*, unsigned long) (_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phm, funcdef_no=2418, decl_uid=29415, cgraph_uid=1159, symbol_order=1162)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__p = &NONLOCAL
__n = &NONLOCAL
ESCAPED = __p

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__p = { NONLOCAL } same as __a
__n = { NONLOCAL } same as __a
_ZdlPv = { }


Alias information for std::allocator_traits<std::allocator<unsigned char> >::deallocate(std::allocator<unsigned char>&, unsigned char*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__a_2(D), points-to non-local, points-to NULL, points-to vars: { }
__p_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator_traits<std::allocator<unsigned char> >::deallocate(std::allocator<unsigned char>&, unsigned char*, unsigned long) (struct allocator_type & __a, unsigned char * __p, size_type __n)
{
  <bb 2> [100.00%]:
  operator delete (__p_3(D));
  return;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_destroy(unsigned long) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE10_M_destroyEm, funcdef_no=2368, decl_uid=29838, cgraph_uid=1109, symbol_order=1112)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__size = &NONLOCAL
_1 = __size
_1 = &NONLOCAL
_7 = *this
_8 = this + UNKNOWN
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__size = { NONLOCAL } same as this
_1 = { NONLOCAL } same as this
_7 = { ESCAPED NONLOCAL }
_8 = { NONLOCAL }
_ZdlPv = { }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_destroy(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_6(D), points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_destroy(unsigned long) (struct basic_string * const this, size_type __size)
{
  unsigned char * D.42166;
  struct allocator_type & D.42164;
  long unsigned int _1;
  unsigned char * _7;
  struct allocator_type & _8;

  <bb 2> [100.00%]:
  _1 = __size_4(D) + 1;
  _7 = MEM[(const struct basic_string *)this_6(D)]._M_dataplus._M_p;
  _8 = &this_6(D)->_M_dataplus;
  operator delete (_7);
  return;

}



;; Function std::less<unsigned char const*>::operator()(unsigned char const* const&, unsigned char const* const&) const (_ZNKSt4lessIPKhEclERKS1_S4_, funcdef_no=2472, decl_uid=40607, cgraph_uid=1213, symbol_order=1216)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__x = &NONLOCAL
__y = &NONLOCAL
_1 = *__x
_2 = *__y
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__x = { NONLOCAL } same as this
__y = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_6 = { }


Alias information for std::less<unsigned char const*>::operator()(unsigned char const* const&, unsigned char const* const&) const

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__x_4(D), points-to non-local, points-to NULL, points-to vars: { }
__y_5(D), points-to non-local, points-to NULL, points-to vars: { }

std::less<unsigned char const*>::operator()(unsigned char const* const&, unsigned char const* const&) const (const struct less * const this, const unsigned char * const & __x, const unsigned char * const & __y)
{
  const unsigned char * _1;
  const unsigned char * _2;
  bool _6;

  <bb 2> [0.00%]:
  _1 = *__x_4(D);
  _2 = *__y_5(D);
  _6 = _1 < _2;
  return _6;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_disjunct(unsigned char const*) const (_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE11_M_disjunctEPKh, funcdef_no=2422, decl_uid=29930, cgraph_uid=1163, symbol_order=1166)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__s = &NONLOCAL
_14 = *this
_29 = *this
_28 = *this + 64
_5 = _29
iftmp.10_7 = &NONLOCAL
iftmp.10_7 = &NULL
ESCAPED = iftmp.10_7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__s = { NONLOCAL } same as this
_14 = { ESCAPED NONLOCAL }
_29 = { ESCAPED NONLOCAL } same as _14
_28 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _14
iftmp.10_7 = { NULL NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_disjunct(unsigned char const*) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_11(D), points-to non-local, points-to NULL, points-to vars: { }
_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__s_36(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_disjunct(unsigned char const*) const (const struct basic_string * const this, const unsigned char * __s)
{
  unsigned char * D.42182;
  size_type D.42180;
  bool D.42178;
  unsigned char * D.42174;
  bool D.42172;
  const unsigned char * const D.40680;
  const unsigned char * const D.40678;
  unsigned char * _5;
  bool iftmp.10_7;
  unsigned char * _14;
  long unsigned int _28;
  unsigned char * _29;

  <bb 2> [100.00%]:
  _14 = this_11(D)->_M_dataplus._M_p;
  if (_14 > __s_36(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [100.00%]:
  _29 = this_11(D)->_M_dataplus._M_p;
  _28 = this_11(D)->_M_string_length;
  _5 = _29 + _28;
  if (_5 < __s_36(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:

  <bb 5> [0.00%]:
  # iftmp.10_7 = PHI <1(4), 0(3)>
  return iftmp.10_7;

}



;; Function __gnu_cxx::char_traits<unsigned char>::move(unsigned char*, unsigned char const*, unsigned long) (_ZN9__gnu_cxx11char_traitsIhE4moveEPhPKhm, funcdef_no=2473, decl_uid=29564, cgraph_uid=1214, symbol_order=1217)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__s1 = &NONLOCAL
__s2 = &NONLOCAL
__n = &NONLOCAL
_6 = __s1
doubledereftmp(12) = *__s2
*__s1 = doubledereftmp(12)
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as doubledereftmp(12)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__s1 = { NONLOCAL }
__s2 = { NONLOCAL } same as __s1
__n = { NONLOCAL } same as __s1
_6 = { NONLOCAL } same as __s1
doubledereftmp(12) = { ESCAPED NONLOCAL }


Alias information for __gnu_cxx::char_traits<unsigned char>::move(unsigned char*, unsigned char const*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__s1_2(D), points-to non-local, points-to NULL, points-to vars: { }
__s2_3(D), points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::char_traits<unsigned char>::move(unsigned char*, unsigned char const*, unsigned long) (char_type * __s1, const char_type * __s2, size_t __n)
{
  char_type * _6;

  <bb 2> [0.00%]:
  _6 = memmove (__s1_2(D), __s2_3(D), __n_4(D));
  return _6;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_S_move(unsigned char*, unsigned char const*, unsigned long) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE7_S_moveEPhPKhm, funcdef_no=2423, decl_uid=29937, cgraph_uid=1164, symbol_order=1167)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__d = &NONLOCAL
__s = &NONLOCAL
__n = &NONLOCAL
_8 = *__s
*__d = _8
ESCAPED = __d
ESCAPED = __s
ESCAPED = __n

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _8
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__d = { NONLOCAL }
__s = { NONLOCAL } same as __d
__n = { NONLOCAL } same as __d
_8 = { ESCAPED NONLOCAL }
_ZN9__gnu_cxx11char_traitsIhE4moveEPhPKhm = { }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_S_move(unsigned char*, unsigned char const*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__d_4(D), points-to non-local, points-to NULL, points-to vars: { }
__s_5(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_S_move(unsigned char*, unsigned char const*, unsigned long) (unsigned char * __d, const unsigned char * __s, size_type __n)
{
  unsigned char _8;

  <bb 2> [0.00%]:
  if (__n_2(D) == 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _8 = MEM[(const char_type &)__s_5(D)];
  MEM[(char_type &)__d_4(D)] = _8;
  goto <bb 5>; [100.00%]

  <bb 4> [0.00%]:
  __gnu_cxx::char_traits<unsigned char>::move (__d_4(D), __s_5(D), __n_2(D));

  <bb 5> [0.00%]:
  return;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::length() const (_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE6lengthEv, funcdef_no=2475, decl_uid=30114, cgraph_uid=1216, symbol_order=1219)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_3 = *this + 64
ESCAPED = _3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_3 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::length() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::length() const (const struct basic_string * const this)
{
  size_type _3;

  <bb 2> [0.00%]:
  _3 = this_2(D)->_M_string_length;
  return _3;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_data(unsigned char*) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE7_M_dataEPh, funcdef_no=2477, decl_uid=29812, cgraph_uid=1218, symbol_order=1221)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__p = &NONLOCAL
*this = __p

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__p = { NONLOCAL } same as this


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_data(unsigned char*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
__p_3(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_data(unsigned char*) (struct basic_string * const this, unsigned char * __p)
{
  <bb 2> [0.00%]:
  this_2(D)->_M_dataplus._M_p = __p_3(D);
  return;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_capacity(unsigned long) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE11_M_capacityEm, funcdef_no=2478, decl_uid=29824, cgraph_uid=1219, symbol_order=1222)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__capacity = &NONLOCAL
*this + 128 = __capacity

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__capacity = { NONLOCAL } same as this


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_capacity(unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_capacity(unsigned long) (struct basic_string * const this, size_type __capacity)
{
  <bb 2> [0.00%]:
  this_2(D)->D.29808._M_allocated_capacity = __capacity_3(D);
  return;

}



;; Function __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >::operator()<unsigned char*>(unsigned char*)bool (_ZN9__gnu_cxx5__ops17_Iter_equals_iterINS_17__normal_iteratorIPhNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEEEclIS3_EEbT_, funcdef_no=2479, decl_uid=40865, cgraph_uid=1220, symbol_order=1223)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__it2 = &NONLOCAL
_1 = *__it2
_8 = *this
_4 = *_8
ESCAPED = _9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__it2 = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_9 = { }


Alias information for __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >::operator()<unsigned char*>(unsigned char*)bool

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

__it2_6(D), points-to non-local, points-to NULL, points-to vars: { }
this_7(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

__gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >::operator()<unsigned char*>(unsigned char*)bool (struct _Iter_equals_iter * const this, unsigned char * __it2)
{
  unsigned char & D.42192;
  unsigned char _1;
  unsigned char _4;
  unsigned char & _8;
  bool _9;

  <bb 2> [100.00%]:
  _1 = *__it2_6(D);
  _8 = MEM[(const struct __normal_iterator *)this_7(D)]._M_current;
  _4 = *_8;
  _9 = _1 == _4;
  return _9;

}



;; Function std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > > >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >, std::random_access_iterator_tag)unsigned char* (_ZSt9__find_ifIPhN9__gnu_cxx5__ops17_Iter_equals_iterINS1_17__normal_iteratorIS0_NSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEEEEET_SD_SD_T0_St26random_access_iterator_tag, funcdef_no=2431, decl_uid=39584, cgraph_uid=1172, symbol_order=1175)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__pred = &NONLOCAL
D.39588 = &NONLOCAL
__pred$_M_current_71 = __pred
__last.52_1 = __last
__first.53_2 = __first
_3 = __last.52_1
_3 = __first.53_2
__trip_count_19 = _3
__trip_count_19 = &NONLOCAL
__first_7 = __first
__first_7 = __first_32
__trip_count_10 = __trip_count_19
__trip_count_10 = __trip_count_33
_46 = *__first_7
_42 = __pred$_M_current_71
_38 = *_42
__first_23 = __first_7
_27 = *__first_7
_24 = __pred$_M_current_71
_21 = *_24
__first_26 = __first_7
_52 = *__first_7
_53 = __pred$_M_current_71
_54 = *_53
__first_29 = __first_7
_56 = *__first_7
_57 = __pred$_M_current_71
_58 = *_57
__first_32 = __first_7
__trip_count_33 = __trip_count_10
__trip_count_33 = &NONLOCAL
__last.58_4 = __last
__first.59_5 = __first_7
_6 = __last.58_4
_6 = __first.59_5
_60 = *__first_7
_61 = __pred$_M_current_71
_62 = *_61
__first_40 = __first_7
__first_8 = __first_7
__first_8 = __first_40
_64 = *__first_8
_65 = __pred$_M_current_71
_66 = *_65
__first_44 = __first_8
__first_9 = __first_7
__first_9 = __first_44
_68 = *__first_9
_69 = __pred$_M_current_71
_70 = *_69
__first_48 = __first_9
_11 = __first_7
_11 = __first_23
_11 = __first_26
_11 = __first_29
_11 = __first_7
_11 = __first_8
_11 = __first_9
_11 = __last
ESCAPED = _11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__pred = { NONLOCAL } same as __first
D.39588 = { NONLOCAL } same as __first
__pred$_M_current_71 = { NONLOCAL } same as __first
__last.52_1 = { NONLOCAL } same as __first
__first.53_2 = { NONLOCAL } same as __first
_3 = { NONLOCAL } same as __first
__trip_count_19 = { NONLOCAL } same as __first
__first_7 = { NONLOCAL } same as __first
__first_32 = { NONLOCAL } same as __first
__trip_count_10 = { NONLOCAL } same as __first
__trip_count_33 = { NONLOCAL } same as __first
_46 = { ESCAPED NONLOCAL }
_42 = { NONLOCAL } same as __first
_38 = { ESCAPED NONLOCAL }
__first_23 = { NONLOCAL } same as __first
_27 = { ESCAPED NONLOCAL } same as _46
_24 = { NONLOCAL } same as __first
_21 = { ESCAPED NONLOCAL }
__first_26 = { NONLOCAL } same as __first
_52 = { ESCAPED NONLOCAL } same as _46
_53 = { NONLOCAL } same as __first
_54 = { ESCAPED NONLOCAL }
__first_29 = { NONLOCAL } same as __first
_56 = { ESCAPED NONLOCAL } same as _46
_57 = { NONLOCAL } same as __first
_58 = { ESCAPED NONLOCAL }
__last.58_4 = { NONLOCAL } same as __first
__first.59_5 = { NONLOCAL } same as __first
_6 = { NONLOCAL } same as __first
_60 = { ESCAPED NONLOCAL } same as _46
_61 = { NONLOCAL } same as __first
_62 = { ESCAPED NONLOCAL }
__first_40 = { NONLOCAL } same as __first
__first_8 = { NONLOCAL } same as __first
_64 = { ESCAPED NONLOCAL }
_65 = { NONLOCAL } same as __first
_66 = { ESCAPED NONLOCAL }
__first_44 = { NONLOCAL } same as __first
__first_9 = { NONLOCAL } same as __first
_68 = { ESCAPED NONLOCAL }
_69 = { NONLOCAL } same as __first
_70 = { ESCAPED NONLOCAL }
__first_48 = { NONLOCAL } same as __first
_11 = { NONLOCAL } same as __first


Alias information for std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > > >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >, std::random_access_iterator_tag)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first_7, points-to non-local, points-to NULL, points-to vars: { }
__first_8, points-to non-local, points-to NULL, points-to vars: { }
__first_9, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to NULL, points-to vars: { }
__last_17(D), points-to non-local, points-to NULL, points-to vars: { }
__first_18(D), points-to non-local, points-to NULL, points-to vars: { }
__first_23, points-to non-local, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to NULL, points-to vars: { }
__first_26, points-to non-local, points-to NULL, points-to vars: { }
__first_29, points-to non-local, points-to NULL, points-to vars: { }
__first_32, points-to non-local, points-to NULL, points-to vars: { }
__first_40, points-to non-local, points-to NULL, points-to vars: { }
_42, points-to non-local, points-to NULL, points-to vars: { }
__first_44, points-to non-local, points-to NULL, points-to vars: { }
__first_48, points-to non-local, points-to NULL, points-to vars: { }
_53, points-to non-local, points-to NULL, points-to vars: { }
_57, points-to non-local, points-to NULL, points-to vars: { }
_61, points-to non-local, points-to NULL, points-to vars: { }
_65, points-to non-local, points-to NULL, points-to vars: { }
_69, points-to non-local, points-to NULL, points-to vars: { }
__pred$_M_current_71, points-to non-local, points-to NULL, points-to vars: { }

std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > > >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >, std::random_access_iterator_tag)unsigned char* (unsigned char * __first, unsigned char * __last, struct _Iter_equals_iter __pred, struct random_access_iterator_tag D.39588)
{
  unsigned char * const __pred$_M_current;
  bool D.42214;
  bool D.42211;
  bool D.42208;
  bool D.42205;
  bool D.42202;
  bool D.42199;
  bool D.42196;
  difference_type __trip_count;
  long int __last.52_1;
  long int __first.53_2;
  long int _3;
  long int __last.58_4;
  long int __first.59_5;
  long int _6;
  unsigned char * _11;
  unsigned char _21;
  unsigned char & _24;
  unsigned char _27;
  unsigned char _38;
  unsigned char & _42;
  unsigned char _46;
  unsigned char _52;
  unsigned char & _53;
  unsigned char _54;
  unsigned char _56;
  unsigned char & _57;
  unsigned char _58;
  unsigned char _60;
  unsigned char & _61;
  unsigned char _62;
  unsigned char _64;
  unsigned char & _65;
  unsigned char _66;
  unsigned char _68;
  unsigned char & _69;
  unsigned char _70;

  <bb 2> [0.00%]:
  __pred$_M_current_71 = MEM[(struct _Iter_equals_iter *)&__pred];
  __last.52_1 = (long int) __last_17(D);
  __first.53_2 = (long int) __first_18(D);
  _3 = __last.52_1 - __first.53_2;
  __trip_count_19 = _3 >> 2;

  <bb 3> [0.00%]:
  # __first_7 = PHI <__first_18(D)(2), __first_32(8)>
  # __trip_count_10 = PHI <__trip_count_19(2), __trip_count_33(8)>
  if (__trip_count_10 <= 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [100.00%]:
  _46 = *__first_7;
  _42 = __pred$_M_current_71;
  _38 = *_42;
  if (_38 == _46)
    goto <bb 17>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [100.00%]:
  __first_23 = __first_7 + 1;
  _27 = MEM[(unsigned char *)__first_7 + 1B];
  _24 = __pred$_M_current_71;
  _21 = *_24;
  if (_21 == _27)
    goto <bb 17>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [100.00%]:
  __first_26 = &MEM[(void *)__first_7 + 2B];
  _52 = MEM[(unsigned char *)__first_7 + 2B];
  _53 = __pred$_M_current_71;
  _54 = *_53;
  if (_52 == _54)
    goto <bb 17>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [100.00%]:
  __first_29 = &MEM[(void *)__first_7 + 3B];
  _56 = MEM[(unsigned char *)__first_7 + 3B];
  _57 = __pred$_M_current_71;
  _58 = *_57;
  if (_56 == _58)
    goto <bb 17>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  __first_32 = &MEM[(void *)__first_7 + 4B];
  __trip_count_33 = __trip_count_10 + -1;
  goto <bb 3>; [0.00%]

  <bb 9> [0.00%]:
  __last.58_4 = (long int) __last_17(D);
  __first.59_5 = (long int) __first_7;
  _6 = __last.58_4 - __first.59_5;
  switch (_6) <default: <L20> [0.00%], case 1: <L17> [0.00%], case 2: <L14> [0.00%], case 3: <L23> [0.00%]>

<L23> [100.00%]:
  _60 = *__first_7;
  _61 = __pred$_M_current_71;
  _62 = *_61;
  if (_60 == _62)
    goto <bb 17>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [0.00%]:
  __first_40 = __first_7 + 1;

  # __first_8 = PHI <__first_7(9), __first_40(11)>
<L14> [100.00%]:
  _64 = *__first_8;
  _65 = __pred$_M_current_71;
  _66 = *_65;
  if (_64 == _66)
    goto <bb 17>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  __first_44 = __first_8 + 1;

  # __first_9 = PHI <__first_7(9), __first_44(13)>
<L17> [100.00%]:
  _68 = *__first_9;
  _69 = __pred$_M_current_71;
  _70 = *_69;
  if (_68 == _70)
    goto <bb 17>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 15> [0.00%]:
  __first_48 = __first_9 + 1;

<L20> [0.00%]:

  <bb 17> [0.00%]:
  # _11 = PHI <__first_7(4), __first_23(5), __first_26(6), __first_29(7), __first_7(10), __first_8(12), __first_9(14), __last_17(D)(16)>
  return _11;

}



;; Function std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > > >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >)unsigned char* (_ZSt9__find_ifIPhN9__gnu_cxx5__ops17_Iter_equals_iterINS1_17__normal_iteratorIS0_NSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEEEEET_SD_SD_T0_, funcdef_no=2375, decl_uid=39024, cgraph_uid=1117, symbol_order=1120)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__pred = &NONLOCAL
__first.51_1 = __first
CALLUSED(13) = CALLUSED(13) + UNKNOWN
CALLUSED(13) = *CALLUSED(13) + UNKNOWN
CALLUSED(13) = __first.51_1
CALLUSED(13) = __last
CALLUSED(13) = __pred
CALLUSED(13) = D.41565
_5 = CALLUSED(13)
_5 = NONLOCAL
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__pred = { NONLOCAL } same as __first
__first.51_1 = { NONLOCAL } same as __first
_ZSt9__find_ifIPhN9__gnu_cxx5__ops17_Iter_equals_iterINS1_17__normal_iteratorIS0_NSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEEEEET_SD_SD_T0_St26random_access_iterator_tag = { }
CALLUSED(13) = { ESCAPED NONLOCAL }
CALLCLOBBERED(14) = { }
D.41565 = { }
_5 = { ESCAPED NONLOCAL }


Alias information for std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > > >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first.51_1, points-to non-local, points-to NULL, points-to vars: { }
__last_3(D), points-to non-local, points-to NULL, points-to vars: { }
__first_4(D), points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > > >(unsigned char*, unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >)unsigned char* (unsigned char * __first, unsigned char * __last, struct _Iter_equals_iter __pred)
{
  struct random_access_iterator_tag D.41565;
  unsigned char * __first.51_1;
  unsigned char * _5;

  <bb 2> [0.00%]:
  __first.51_1 = __first_4(D);
  _5 = std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > > > (__first.51_1, __last_3(D), __pred, D.41565);
  return _5;

}



;; Function std::__search<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__ops::_Iter_equal_to_iter>(unsigned char*, unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__ops::_Iter_equal_to_iter)unsigned char* (_ZSt8__searchIPhN9__gnu_cxx17__normal_iteratorIS0_NSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEENS1_5__ops19_Iter_equal_to_iterEET_SC_SC_T0_SD_T1_, funcdef_no=2321, decl_uid=38501, cgraph_uid=1065, symbol_order=1068)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first1 = &NONLOCAL
__last1 = &NONLOCAL
__first2 = &NONLOCAL
__last2 = &NONLOCAL
__predicate = &NONLOCAL
__last2_6 = __last2
_38 = __first2
_34 = __last2_6
iftmp.45_41 = &NONLOCAL
iftmp.45_62 = &NULL
__p1$_M_current_16 = __first2
_53 = __p1$_M_current_16
_54 = _53
__p1$_M_current_27 = _54
_47 = __p1$_M_current_27
_22 = __last2_6
D.42233 = D.41538
__it_71 = __first2
__it1$_M_current_56 = __it_71
SR.186_23 = __it1$_M_current_56
SR.183_25 = SR.186_23
__pred = SR.183_25
CALLUSED(32) = CALLUSED(32) + UNKNOWN
CALLUSED(32) = *CALLUSED(32) + UNKNOWN
CALLUSED(32) = __first1
CALLUSED(32) = __last1
CALLUSED(32) = __pred
CALLUSED(32) = D.42232
_55 = CALLUSED(32)
_55 = NONLOCAL
__p$_M_current_68 = &NULL
__first1_4 = __first1
__first1_4 = __first1_36
D.42243 = D.41538
__it_1 = __first2
__it1$_M_current_58 = __it_1
SR.188_17 = __it1$_M_current_58
SR.184_18 = SR.188_17
__pred = SR.184_18
CALLUSED(45) = CALLUSED(45) + UNKNOWN
CALLUSED(45) = *CALLUSED(45) + UNKNOWN
CALLUSED(45) = __first1_4
CALLUSED(45) = __last1
CALLUSED(45) = __pred
CALLUSED(45) = D.42242
_57 = CALLUSED(45)
_57 = NONLOCAL
__p$_M_current_19 = __p1$_M_current_27
__current_32 = _57
__current_5 = __current_32
__current_5 = __current_40
__p$_M_current_9 = __p$_M_current_19
__p$_M_current_9 = __p$_M_current_2
__it2$_M_current_70 = __p$_M_current_9
_59 = *__current_5
_60 = __it2$_M_current_70
_61 = *_60
_66 = __p$_M_current_9
_67 = _66
__p$_M_current_2 = _67
_63 = __p$_M_current_2
_64 = __last2_6
__current_40 = __current_5
__first1_36 = _57
_7 = __first1
_7 = _55
_7 = __last1
_7 = __last1
_7 = _57
_7 = __last1
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first1 = { NONLOCAL }
__last1 = { NONLOCAL } same as __first1
__first2 = { NONLOCAL } same as __first1
__last2 = { NONLOCAL } same as __first1
__predicate = { NONLOCAL } same as __first1
__last2_6 = { NONLOCAL } same as __first1
_38 = { NONLOCAL } same as __first1
_34 = { NONLOCAL } same as __first1
iftmp.45_41 = { NONLOCAL } same as __first1
iftmp.45_62 = { NULL }
__p1$_M_current_16 = { NONLOCAL } same as __first1
_53 = { NONLOCAL } same as __first1
_54 = { NONLOCAL } same as __first1
__p1$_M_current_27 = { NONLOCAL } same as __first1
_47 = { NONLOCAL } same as __first1
_22 = { NONLOCAL } same as __first1
D.42233 = { }
D.41538 = { }
__it_71 = { NONLOCAL } same as __first1
__it1$_M_current_56 = { NONLOCAL } same as __first1
SR.186_23 = { NONLOCAL } same as __first1
SR.183_25 = { NONLOCAL } same as __first1
__pred = { NONLOCAL } same as __first1
_ZSt9__find_ifIPhN9__gnu_cxx5__ops17_Iter_equals_iterINS1_17__normal_iteratorIS0_NSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEEEEET_SD_SD_T0_St26random_access_iterator_tag = { }
CALLUSED(32) = { ESCAPED NONLOCAL }
CALLCLOBBERED(33) = { }
D.42232 = { }
_55 = { ESCAPED NONLOCAL }
__p$_M_current_68 = { NULL } same as iftmp.45_62
__first1_4 = { ESCAPED NONLOCAL }
__first1_36 = { ESCAPED NONLOCAL } same as __first1_4
D.42243 = { }
__it_1 = { NONLOCAL } same as __first1
__it1$_M_current_58 = { NONLOCAL } same as __first1
SR.188_17 = { NONLOCAL } same as __first1
SR.184_18 = { NONLOCAL } same as __first1
__pred = { NONLOCAL } same as __first1
CALLUSED(45) = { ESCAPED NONLOCAL } same as __first1_4
CALLCLOBBERED(46) = { }
D.42242 = { }
_57 = { ESCAPED NONLOCAL } same as __first1_4
__p$_M_current_19 = { NONLOCAL } same as __first1
__current_32 = { ESCAPED NONLOCAL } same as __first1_4
__current_5 = { ESCAPED NONLOCAL } same as __first1_4
__current_40 = { ESCAPED NONLOCAL } same as __first1_4
__p$_M_current_9 = { NONLOCAL } same as __first1
__p$_M_current_2 = { NONLOCAL } same as __first1
__it2$_M_current_70 = { NONLOCAL } same as __first1
_59 = { ESCAPED NONLOCAL }
_60 = { NONLOCAL } same as __first1
_61 = { ESCAPED NONLOCAL }
_66 = { NONLOCAL } same as __first1
_67 = { NONLOCAL } same as __first1
_63 = { NONLOCAL } same as __first1
_64 = { NONLOCAL } same as __first1
_7 = { ESCAPED NONLOCAL }


Alias information for std::__search<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__ops::_Iter_equal_to_iter>(unsigned char*, unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__ops::_Iter_equal_to_iter)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__it_1, points-to non-local, points-to NULL, points-to vars: { }
__p$_M_current_2, points-to non-local, points-to NULL, points-to vars: { }
__first1_4, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__current_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__last2_6, points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__p$_M_current_9, points-to non-local, points-to NULL, points-to vars: { }
__first1_13(D), points-to non-local, points-to NULL, points-to vars: { }
__last1_14(D), points-to non-local, points-to NULL, points-to vars: { }
__p1$_M_current_16, points-to non-local, points-to NULL, points-to vars: { }
SR.188_17, points-to non-local, points-to NULL, points-to vars: { }
SR.184_18, points-to non-local, points-to NULL, points-to vars: { }
__p$_M_current_19, points-to non-local, points-to NULL, points-to vars: { }
_22, points-to non-local, points-to NULL, points-to vars: { }
SR.186_23, points-to non-local, points-to NULL, points-to vars: { }
SR.183_25, points-to non-local, points-to NULL, points-to vars: { }
__p1$_M_current_27, points-to non-local, points-to NULL, points-to vars: { }
__current_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_34, points-to non-local, points-to NULL, points-to vars: { }
__first1_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_38, points-to non-local, points-to NULL, points-to vars: { }
__current_40, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_47, points-to non-local, points-to NULL, points-to vars: { }
_53, points-to non-local, points-to NULL, points-to vars: { }
_54, points-to non-local, points-to NULL, points-to vars: { }
_55, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__it1$_M_current_56, points-to non-local, points-to NULL, points-to vars: { }
_57, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
__it1$_M_current_58, points-to non-local, points-to NULL, points-to vars: { }
_60, points-to non-local, points-to NULL, points-to vars: { }
_63, points-to non-local, points-to NULL, points-to vars: { }
_64, points-to non-local, points-to NULL, points-to vars: { }
_66, points-to non-local, points-to NULL, points-to vars: { }
_67, points-to non-local, points-to NULL, points-to vars: { }
__p$_M_current_68, points-to NULL, points-to vars: { }
__it2$_M_current_70, points-to non-local, points-to NULL, points-to vars: { }
__it_71, points-to non-local, points-to NULL, points-to vars: { }

std::__search<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__ops::_Iter_equal_to_iter>(unsigned char*, unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__ops::_Iter_equal_to_iter)unsigned char* (unsigned char * __first1, unsigned char * __last1, struct __normal_iterator __first2, struct __normal_iterator __last2, struct _Iter_equal_to_iter __predicate)
{
  unsigned char * const __it2$_M_current;
  unsigned char * SR.188;
  unsigned char * __it;
  unsigned char * SR.186;
  unsigned char * __it;
  unsigned char * SR.184;
  unsigned char * SR.183;
  unsigned char * __p$_M_current;
  unsigned char * __p1$_M_current;
  unsigned char * const __last2;
  struct __normal_iterator & D.42256;
  bool D.42254;
  bool D.42251;
  struct __normal_iterator __it2;
  struct _Iter_equals_iter D.42247;
  unsigned char * __it1$_M_current;
  struct _Iter_equal_to_iter D.42243;
  struct __normal_iterator __it;
  struct random_access_iterator_tag D.42242;
  unsigned char * D.42241;
  struct _Iter_equals_iter __pred;
  struct _Iter_equals_iter D.42237;
  unsigned char * __it1$_M_current;
  struct _Iter_equal_to_iter D.42233;
  struct __normal_iterator __it;
  struct random_access_iterator_tag D.42232;
  unsigned char * D.42231;
  struct _Iter_equals_iter __pred;
  struct __normal_iterator & D.42227;
  bool D.42225;
  bool D.42222;
  unsigned char * __current;
  struct __normal_iterator __p;
  struct __normal_iterator __p1;
  struct _Iter_equals_iter D.41541;
  struct _Iter_equals_iter D.41539;
  struct _Iter_equal_to_iter D.41538;
  unsigned char * _7;
  unsigned char * _22;
  unsigned char * _34;
  unsigned char * _38;
  bool iftmp.45_41;
  unsigned char * _47;
  unsigned char * _53;
  unsigned char * _54;
  unsigned char * _55;
  unsigned char * _57;
  unsigned char _59;
  unsigned char & _60;
  unsigned char _61;
  bool iftmp.45_62;
  unsigned char * _63;
  unsigned char * _64;
  unsigned char * _66;
  unsigned char * _67;

  <bb 2> [0.00%]:
  __last2_6 = MEM[(struct __normal_iterator *)&__last2];
  if (__first1_13(D) == __last1_14(D))
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [100.00%]:
  _38 = MEM[(unsigned char * const &)&__first2];
  _34 = __last2_6;
  if (_34 == _38)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [0.00%]:

  <bb 5> [0.00%]:
  # iftmp.45_41 = PHI <1(4)>
  goto <bb 15>; [100.00%]

  <bb 6> [100.00%]:
  # iftmp.45_62 = PHI <0(3)>
  __p1$_M_current_16 = MEM[(struct __normal_iterator *)&__first2];
  _53 = __p1$_M_current_16;
  _54 = _53 + 1;
  __p1$_M_current_27 = _54;
  _47 = __p1$_M_current_27;
  _22 = __last2_6;
  if (_22 == _47)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [100.00%]:
  D.42233 = D.41538;
  __it_71 = MEM[(struct __normal_iterator *)&__first2];
  __it1$_M_current_56 = __it_71;
  SR.186_23 = __it1$_M_current_56;
  SR.183_25 = SR.186_23;
  MEM[(struct _Iter_equals_iter *)&__pred] = SR.183_25;
  _55 = std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > > > (__first1_13(D), __last1_14(D), __pred, D.42232);
  goto <bb 15>; [0.00%]

  <bb 8> [0.00%]:
  __p$_M_current_68 = 0B;

  <bb 9> [100.00%]:
  # __first1_4 = PHI <__first1_13(D)(8), __first1_36(14)>
  D.42243 = D.41538;
  __it_1 = MEM[(struct __normal_iterator *)&__first2];
  __it1$_M_current_58 = __it_1;
  SR.188_17 = __it1$_M_current_58;
  SR.184_18 = SR.188_17;
  MEM[(struct _Iter_equals_iter *)&__pred] = SR.184_18;
  _57 = std::__find_if<unsigned char*, __gnu_cxx::__ops::_Iter_equals_iter<__gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > > > (__first1_4, __last1_14(D), __pred, D.42242);
  if (__last1_14(D) == _57)
    goto <bb 15>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  __p$_M_current_19 = __p1$_M_current_27;
  __current_32 = _57 + 1;
  if (__last1_14(D) == __current_32)
    goto <bb 15>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 11> [100.00%]:
  # __current_5 = PHI <__current_32(10), __current_40(13)>
  # __p$_M_current_9 = PHI <__p$_M_current_19(10), __p$_M_current_2(13)>
  __it2$_M_current_70 = __p$_M_current_9;
  _59 = *__current_5;
  _60 = __it2$_M_current_70;
  _61 = *_60;
  if (_59 == _61)
    goto <bb 12>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 12> [100.00%]:
  _66 = __p$_M_current_9;
  _67 = _66 + 1;
  __p$_M_current_2 = _67;
  _63 = __p$_M_current_2;
  _64 = __last2_6;
  if (_63 == _64)
    goto <bb 15>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 13> [0.00%]:
  __current_40 = __current_5 + 1;
  if (__last1_14(D) == __current_40)
    goto <bb 15>; [0.00%]
  else
    goto <bb 11>; [0.00%]

  <bb 14> [0.00%]:
  __first1_36 = _57 + 1;
  goto <bb 9>; [0.00%]

  <bb 15> [0.00%]:
  # _7 = PHI <__first1_13(D)(5), _55(7), __last1_14(D)(9), __last1_14(D)(10), _57(12), __last1_14(D)(13)>
  return _7;

}



;; Function std::search<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >(unsigned char*, unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >)unsigned char* (_ZSt6searchIPhN9__gnu_cxx17__normal_iteratorIS0_NSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEEET_SA_SA_T0_SB_, funcdef_no=2192, decl_uid=36549, cgraph_uid=933, symbol_order=936)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first1 = &NONLOCAL
__last1 = &NONLOCAL
__first2 = &NONLOCAL
__last2 = &NONLOCAL
D.42268 = D.42269
ESCAPED = __first1
ESCAPED = __last1
ESCAPED = __first2
ESCAPED = __last2
ESCAPED = D.41519
_6 = NONLOCAL
ESCAPED = _6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _6
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first1 = { NONLOCAL }
__last1 = { NONLOCAL } same as __first1
__first2 = { NONLOCAL } same as __first1
__last2 = { NONLOCAL } same as __first1
D.42268 = { }
D.42269 = { }
_ZSt8__searchIPhN9__gnu_cxx17__normal_iteratorIS0_NSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEENS1_5__ops19_Iter_equal_to_iterEET_SC_SC_T0_SD_T1_ = { }
D.41519 = { }
_6 = { ESCAPED NONLOCAL }


Alias information for std::search<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >(unsigned char*, unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first1_3(D), points-to non-local, points-to NULL, points-to vars: { }
__last1_4(D), points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::search<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > > >(unsigned char*, unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >)unsigned char* (unsigned char * __first1, unsigned char * __last1, struct __normal_iterator __first2, struct __normal_iterator __last2)
{
  struct _Iter_equal_to_iter D.42269;
  struct _Iter_equal_to_iter D.42268;
  struct _Iter_equal_to_iter D.41519;
  unsigned char * _6;

  <bb 2> [100.00%]:
  D.42268 = D.42269;
  _6 = std::__search<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__ops::_Iter_equal_to_iter> (__first1_3(D), __last1_4(D), __first2, __last2, D.41519);
  return _6;

}



;; Function pbzip2::BZ2StreamScanner::locateHeaderPrefixInBuff() (_ZN6pbzip216BZ2StreamScanner24locateHeaderPrefixInBuffEv, funcdef_no=1937, decl_uid=29373, cgraph_uid=678, symbol_order=681)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_57 = *this + 640
retval.31_30 = _57
_34 = *this + 896
_35 = *this + 704
_47 = *this + 768
_55 = _47
_43 = *this + 704
_42 = _43
_41 = _55
_41 = _42
_40 = _41
_52 = *this + 64
iftmp.33_50 = &NONLOCAL
_7 = *this + 1536
_8 = _7
_8 = &NONLOCAL
*this + 1536 = _8
_29 = *this + 768
*this + 896 = _29
iftmp.33_18 = &NULL
_10 = this + UNKNOWN
_59 = *this + 896
ESCAPED = _10
ESCAPED = &NULL
ESCAPED = &NONLOCAL
ESCAPED = _59
ESCAPED = &NONLOCAL
_49 = NONLOCAL
_13 = *this + 1536
_14 = _13
_14 = &NONLOCAL
*this + 1536 = _14
_60 = *this + 768
*this + 896 = _60
_68 = *this
SR.198_24 = _68
SR.197_22 = SR.198_24
SR.192_26 = SR.197_22
_65 = SR.192_26
_67 = _65
SR.196_70 = _67
SR.193_1 = SR.196_70
_64 = *this
SR.195_16 = _64
SR.194_66 = SR.195_16
_63 = *this + 768
_62 = *this + 896
__first2 = SR.194_66
__last2 = SR.193_1
ESCAPED = _62
ESCAPED = _63
ESCAPED = __first2
ESCAPED = __last2
ESCAPED = D.42292
_61 = NONLOCAL
*this + 896 = _61
_69 = *this + 896
ESCAPED = _69

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _49
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_57 = { ESCAPED NONLOCAL }
retval.31_30 = { ESCAPED NONLOCAL } same as _57
_34 = { ESCAPED NONLOCAL }
_35 = { ESCAPED NONLOCAL }
_47 = { ESCAPED NONLOCAL }
_55 = { ESCAPED NONLOCAL } same as _47
_43 = { ESCAPED NONLOCAL }
_42 = { ESCAPED NONLOCAL } same as _43
_41 = { ESCAPED NONLOCAL }
_40 = { ESCAPED NONLOCAL } same as _41
_52 = { ESCAPED NONLOCAL }
iftmp.33_50 = { NONLOCAL } same as this
_7 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }
_29 = { ESCAPED NONLOCAL }
iftmp.33_18 = { NULL }
_10 = { NONLOCAL }
_59 = { ESCAPED NONLOCAL }
_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE7compareEmmPKhm = { }
_49 = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL }
_60 = { ESCAPED NONLOCAL }
_68 = { ESCAPED NONLOCAL }
SR.198_24 = { ESCAPED NONLOCAL } same as _68
SR.197_22 = { ESCAPED NONLOCAL } same as _68
SR.192_26 = { ESCAPED NONLOCAL } same as _68
_65 = { ESCAPED NONLOCAL } same as _68
_67 = { ESCAPED NONLOCAL } same as _68
SR.196_70 = { ESCAPED NONLOCAL } same as _68
SR.193_1 = { ESCAPED NONLOCAL } same as _68
_64 = { ESCAPED NONLOCAL } same as _68
SR.195_16 = { ESCAPED NONLOCAL } same as _68
SR.194_66 = { ESCAPED NONLOCAL } same as _68
_63 = { ESCAPED NONLOCAL }
_62 = { ESCAPED NONLOCAL }
__first2 = { ESCAPED NONLOCAL } same as _68
__last2 = { ESCAPED NONLOCAL } same as _68
_ZSt8__searchIPhN9__gnu_cxx17__normal_iteratorIS0_NSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEEEENS1_5__ops19_Iter_equal_to_iterEET_SC_SC_T0_SD_T1_ = { }
D.42292 = { }
_61 = { ESCAPED NONLOCAL } same as _49
_69 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::locateHeaderPrefixInBuff()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

SR.193_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to NULL, points-to vars: { }
SR.195_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.197_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.198_24, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.192_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_28(D), points-to non-local, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_34, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_43, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_47, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_59, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_60, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_61, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_62, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_63, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_64, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_65, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.194_66, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_67, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_68, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_69, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
SR.196_70, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::locateHeaderPrefixInBuff() (struct BZ2StreamScanner * const this)
{
  unsigned char * SR.198;
  unsigned char * SR.197;
  unsigned char * SR.196;
  unsigned char * SR.195;
  unsigned char * SR.194;
  unsigned char * SR.193;
  unsigned char * const SR.192;
  CharType * D.42306;
  struct iterator D.42304;
  struct iterator D.42303;
  struct __normal_iterator D.42301;
  struct iterator D.42298;
  CharType * D.42296;
  CharType * D.42294;
  struct _Iter_equal_to_iter D.42292;
  unsigned char * D.42291;
  struct __normal_iterator __first2;
  struct __normal_iterator __last2;
  CharType * D.42286;
  CharType * D.42284;
  CharType * D.42282;
  size_t D.42280;
  size_type D.42278;
  CharType * D.42276;
  CharType * D.42274;
  bool D.42272;
  size_t prefixLen;
  struct __normal_iterator D.41465;
  struct __normal_iterator D.41464;
  struct iterator D.36547;
  unsigned int _7;
  unsigned int _8;
  struct basic_string * _10;
  unsigned int _13;
  unsigned int _14;
  bool iftmp.33_18;
  CharType * _29;
  bool retval.31_30;
  CharType * _34;
  CharType * _35;
  long unsigned int _40;
  long int _41;
  long int _42;
  CharType * _43;
  CharType * _47;
  int _49;
  bool iftmp.33_50;
  long unsigned int _52;
  long int _55;
  bool _57;
  CharType * _59;
  CharType * _60;
  unsigned char * _61;
  CharType * _62;
  CharType * _63;
  unsigned char * _64;
  unsigned char * _65;
  unsigned char * _67;
  unsigned char * _68;
  CharType * _69;

  <bb 2> [100.00%]:
  _57 = MEM[(const struct BZ2StreamScanner *)this_28(D)]._bz2HeaderFound;
  retval.31_30 = ~_57;
  if (_57 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [100.00%]:
  _34 = this_28(D)->_inBuffSearchPtr;
  _35 = this_28(D)->_inBuff;
  if (_34 != _35)
    goto <bb 5>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 4> [100.00%]:
  _47 = MEM[(const struct BZ2StreamScanner *)this_28(D)]._inBuffEnd;
  _55 = (long int) _47;
  _43 = MEM[(const struct BZ2StreamScanner *)this_28(D)]._inBuff;
  _42 = (long int) _43;
  _41 = _55 - _42;
  _40 = (long unsigned int) _41;
  _52 = MEM[(const struct basic_string *)this_28(D) + 16B]._M_string_length;
  if (_40 < _52)
    goto <bb 5>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 5> [0.00%]:

  <bb 6> [100.00%]:
  # iftmp.33_50 = PHI <1(5)>
  _7 = this_28(D)->_errState;
  _8 = _7 | 32;
  this_28(D)->_errState = _8;
  _29 = this_28(D)->_inBuffEnd;
  this_28(D)->_inBuffSearchPtr = _29;
  goto <bb 10>; [0.00%]

  <bb 7> [100.00%]:
  # iftmp.33_18 = PHI <0(4)>
  _10 = &this_28(D)->_bz2Header;
  _59 = this_28(D)->_inBuffSearchPtr;
  _49 = std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::compare (_10, 0, 3, _59, 3);
  if (_49 == 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [100.00%]:
  _13 = this_28(D)->_errState;
  _14 = _13 | 32;
  this_28(D)->_errState = _14;
  _60 = this_28(D)->_inBuffEnd;
  this_28(D)->_inBuffSearchPtr = _60;
  goto <bb 10>; [0.00%]

  <bb 9> [100.00%]:
  _68 = MEM[(const struct basic_string *)this_28(D) + 16B]._M_dataplus._M_p;
  SR.198_24 = _68;
  SR.197_22 = SR.198_24;
  SR.192_26 = SR.197_22;
  _65 = SR.192_26;
  _67 = _65 + 3;
  SR.196_70 = _67;
  SR.193_1 = SR.196_70;
  _64 = MEM[(const struct basic_string *)this_28(D) + 16B]._M_dataplus._M_p;
  SR.195_16 = _64;
  SR.194_66 = SR.195_16;
  _63 = this_28(D)->_inBuffEnd;
  _62 = this_28(D)->_inBuffSearchPtr;
  MEM[(struct __normal_iterator *)&__first2] = SR.194_66;
  MEM[(struct __normal_iterator *)&__last2] = SR.193_1;
  _61 = std::__search<unsigned char*, __gnu_cxx::__normal_iterator<unsigned char*, std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >, __gnu_cxx::__ops::_Iter_equal_to_iter> (_62, _63, __first2, __last2, D.42292);
  this_28(D)->_inBuffSearchPtr = _61;

  <bb 10> [100.00%]:
  _69 = this_28(D)->_inBuffSearchPtr;
  return _69;

}



;; Function pbzip2::BZ2StreamScanner::searchNextHeaderInBuff() (_ZN6pbzip216BZ2StreamScanner22searchNextHeaderInBuffEv, funcdef_no=1938, decl_uid=29369, cgraph_uid=679, symbol_order=682)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
derefaddrtmp(9) = &NULL
*this + 648 = derefaddrtmp(9)
ESCAPED = this
_84 = *this + 1536
_72 = *this + 768
_71 = _72
_68 = *this + 896
_66 = _68
_61 = _71
_61 = _66
_60 = _61
_73 = *this + 64
iftmp.64_93 = &NONLOCAL
_51 = *this + 896
_7 = *_51
_57 = *this
_10 = *_57
iftmp.64_14 = &NULL
pHdr_65 = this + UNKNOWN
_87 = *this + 896
_13 = *_87
_50 = *this
_16 = *_50
pHdr_63 = &NULL
pHdr_64 = this + UNKNOWN
pHdr_33 = pHdr_65
pHdr_33 = pHdr_64
_88 = *this + 896
bwtSizeChar_67 = *_88
_19 = bwtSizeChar_67
_19 = &NONLOCAL
_92 = *pHdr_33
*_92 = bwtSizeChar_67
_91 = *pHdr_33 + 64
_22 = _91
_22 = &NONLOCAL
_90 = *this + 896
_24 = _90
_89 = *pHdr_33 + 64
_26 = _89
_26 = &NONLOCAL
ESCAPED = pHdr_33
ESCAPED = &NONLOCAL
ESCAPED = _26
ESCAPED = _24
ESCAPED = _22
_75 = NONLOCAL
derefaddrtmp(46) = &NONLOCAL
*this + 648 = derefaddrtmp(46)
_78 = *this + 896
_94 = *this + 640
retval.67_80 = _94
_28 = *this + 1536
_29 = _28
_29 = &NONLOCAL
*this + 1536 = _29
_30 = *this + 896
_31 = _30
*this + 896 = _31
ESCAPED = this
_95 = *this + 768
*this + 896 = _95
_86 = *this + 896
_35 = _78
_35 = _86
ESCAPED = _35

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _75
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
derefaddrtmp(9) = { NULL }
_ZN6pbzip216BZ2StreamScanner24locateHeaderPrefixInBuffEv = { }
_84 = { ESCAPED NONLOCAL }
_79 = { }
_72 = { ESCAPED NONLOCAL }
_71 = { ESCAPED NONLOCAL } same as _72
_68 = { ESCAPED NONLOCAL }
_66 = { ESCAPED NONLOCAL } same as _68
_61 = { ESCAPED NONLOCAL }
_60 = { ESCAPED NONLOCAL } same as _61
_73 = { ESCAPED NONLOCAL }
iftmp.64_93 = { NONLOCAL } same as this
_51 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_57 = { ESCAPED NONLOCAL }
_10 = { ESCAPED NONLOCAL }
iftmp.64_14 = { NULL } same as derefaddrtmp(9)
pHdr_65 = { NONLOCAL }
_87 = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_50 = { ESCAPED NONLOCAL } same as _57
_16 = { ESCAPED NONLOCAL }
pHdr_63 = { NULL } same as derefaddrtmp(9)
pHdr_64 = { NONLOCAL }
pHdr_33 = { NONLOCAL }
_88 = { ESCAPED NONLOCAL }
bwtSizeChar_67 = { ESCAPED NONLOCAL }
_19 = { ESCAPED NONLOCAL }
_92 = { ESCAPED NONLOCAL }
_91 = { ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL }
_90 = { ESCAPED NONLOCAL }
_24 = { ESCAPED NONLOCAL } same as _90
_89 = { ESCAPED NONLOCAL }
_26 = { ESCAPED NONLOCAL }
_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE7compareEmmPKhm = { }
_75 = { ESCAPED NONLOCAL }
derefaddrtmp(46) = { NONLOCAL } same as this
_78 = { ESCAPED NONLOCAL }
_94 = { ESCAPED NONLOCAL }
retval.67_80 = { ESCAPED NONLOCAL } same as _94
_28 = { ESCAPED NONLOCAL }
_29 = { ESCAPED NONLOCAL }
_30 = { ESCAPED NONLOCAL }
_31 = { ESCAPED NONLOCAL } same as _30
_95 = { ESCAPED NONLOCAL }
_86 = { ESCAPED NONLOCAL }
_35 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::searchNextHeaderInBuff()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_24, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_30, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_31, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
pHdr_33, points-to non-local, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_44(D), points-to non-local, points-to NULL, points-to vars: { }
_50, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_51, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_57, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
pHdr_63, points-to NULL, points-to vars: { }
pHdr_64, points-to non-local, points-to NULL, points-to vars: { }
pHdr_65, points-to non-local, points-to NULL, points-to vars: { }
_68, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_72, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_78, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_86, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_87, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_88, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_90, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_92, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_95, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::searchNextHeaderInBuff() (struct BZ2StreamScanner * const this)
{
  CharType * D.42345;
  bool D.42343;
  value_type & D.42341;
  size_type D.42338;
  CharType * D.42336;
  size_type D.42334;
  CharType * D.42332;
  CharType * D.42330;
  value_type & D.42328;
  CharType * D.42325;
  value_type & D.42323;
  size_t D.42320;
  size_t D.42318;
  bool D.42316;
  int cmpres;
  CharType bwtSizeChar;
  struct basic_string * pHdr;
  size_t hsp;
  size_t prefixLen;
  unsigned char _7;
  unsigned char _10;
  unsigned char _13;
  bool iftmp.64_14;
  unsigned char _16;
  unsigned char _19;
  long unsigned int _22;
  CharType * _24;
  long unsigned int _26;
  unsigned int _28;
  unsigned int _29;
  CharType * _30;
  CharType * _31;
  CharType * _35;
  unsigned char * _50;
  CharType * _51;
  unsigned char * _57;
  long unsigned int _60;
  long int _61;
  long int _66;
  CharType * _68;
  long int _71;
  CharType * _72;
  long unsigned int _73;
  int _75;
  CharType * _78;
  bool _79;
  bool retval.67_80;
  unsigned int _84;
  CharType * _86;
  CharType * _87;
  CharType * _88;
  long unsigned int _89;
  CharType * _90;
  long unsigned int _91;
  unsigned char * _92;
  bool iftmp.64_93;
  bool _94;
  CharType * _95;

  <bb 2> [0.00%]:
  this_44(D)->_searchStatus = 0;
  pbzip2::BZ2StreamScanner::locateHeaderPrefixInBuff (this_44(D));

  <bb 3> [100.00%]:
  _84 = this_44(D)->_errState;
  _79 = _84 != 0;
  if (_84 == 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 4> [100.00%]:
  _72 = MEM[(const struct BZ2StreamScanner *)this_44(D)]._inBuffEnd;
  _71 = (long int) _72;
  _68 = MEM[(const struct BZ2StreamScanner *)this_44(D)]._inBuffSearchPtr;
  _66 = (long int) _68;
  _61 = _71 - _66;
  _60 = (long unsigned int) _61;
  _73 = MEM[(const struct basic_string *)this_44(D) + 16B]._M_string_length;
  if (_60 >= _73)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [100.00%]:
  # iftmp.64_93 = PHI <1(4)>
  _51 = this_44(D)->_inBuffSearchPtr;
  _7 = MEM[(CharType *)_51 + 4B];
  _57 = MEM[(const struct basic_string *)this_44(D) + 16B]._M_dataplus._M_p;
  _10 = MEM[(value_type &)_57 + 4];
  if (_7 == _10)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 6> [0.00%]:

  <bb 7> [0.00%]:
  # iftmp.64_14 = PHI <0(6)>
  goto <bb 19>; [100.00%]

  <bb 8> [0.00%]:
  pHdr_65 = &this_44(D)->_bz2Header;
  goto <bb 12>; [0.00%]

  <bb 9> [100.00%]:
  _87 = this_44(D)->_inBuffSearchPtr;
  _13 = MEM[(CharType *)_87 + 4B];
  _50 = MEM[(const struct basic_string *)this_44(D) + 48B]._M_dataplus._M_p;
  _16 = MEM[(value_type &)_50 + 4];
  if (_13 == _16)
    goto <bb 11>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 10> [0.00%]:
  # pHdr_63 = PHI <0B(9)>
  goto <bb 16>; [100.00%]

  <bb 11> [0.00%]:
  pHdr_64 = &this_44(D)->_bz2HeaderZero;

  <bb 12> [0.00%]:
  # pHdr_33 = PHI <pHdr_65(8), pHdr_64(11)>
  if (pHdr_33 != 0B)
    goto <bb 13>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 13> [100.00%]:
  _88 = this_44(D)->_inBuffSearchPtr;
  bwtSizeChar_67 = MEM[(CharType *)_88 + 3B];
  _19 = bwtSizeChar_67 + 207;
  if (_19 <= 8)
    goto <bb 14>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 14> [100.00%]:
  _92 = MEM[(const struct basic_string *)pHdr_33]._M_dataplus._M_p;
  MEM[(value_type &)_92 + 3] = bwtSizeChar_67;
  _91 = MEM[(const struct basic_string *)pHdr_33]._M_string_length;
  _22 = _91 + 18446744073709551612;
  _90 = this_44(D)->_inBuffSearchPtr;
  _24 = _90 + 4;
  _89 = MEM[(const struct basic_string *)pHdr_33]._M_string_length;
  _26 = _89 + 18446744073709551612;
  _75 = std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::compare (pHdr_33, 4, _26, _24, _22);
  if (_75 == 0)
    goto <bb 15>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 15> [0.00%]:
  this_44(D)->_searchStatus = 1;
  _78 = this_44(D)->_inBuffSearchPtr;
  goto <bb 20>; [0.00%]

  <bb 16> [100.00%]:
  _94 = MEM[(const struct BZ2StreamScanner *)this_44(D)]._bz2HeaderFound;
  retval.67_80 = ~_94;
  if (_94 != 0)
    goto <bb 18>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 17> [0.00%]:
  _28 = this_44(D)->_errState;
  _29 = _28 | 32;
  this_44(D)->_errState = _29;
  goto <bb 19>; [0.00%]

  <bb 18> [0.00%]:
  _30 = this_44(D)->_inBuffSearchPtr;
  _31 = _30 + 3;
  this_44(D)->_inBuffSearchPtr = _31;
  pbzip2::BZ2StreamScanner::locateHeaderPrefixInBuff (this_44(D));
  goto <bb 3>; [0.00%]

  <bb 19> [100.00%]:
  _95 = this_44(D)->_inBuffEnd;
  this_44(D)->_inBuffSearchPtr = _95;
  _86 = this_44(D)->_inBuffSearchPtr;

  <bb 20> [0.00%]:
  # _35 = PHI <_78(15), _86(19)>
  return _35;

}



;; Function pbzip2::BZ2StreamScanner::searchNextHeader() (_ZN6pbzip216BZ2StreamScanner16searchNextHeaderEv, funcdef_no=1939, decl_uid=29367, cgraph_uid=680, symbol_order=683)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_37 = *this + 768
_34 = _37
_31 = *this + 896
_44 = _31
_41 = _34
_41 = _44
_26 = _41
ESCAPED = this
_25 = *this + 648
_3 = _25
_24 = *this + 96
_5 = _24
_23 = *this + 1536
_47 = *this + 1088
_48 = _47
_49 = *this + 1472
iftmp.70_52 = &NONLOCAL
ESCAPED = this
_51 = *this + 1536
iftmp.70_9 = &NULL
_54 = *this + 648
_53 = *this + 768
ESCAPED = this
derefaddrtmp(32) = &NONLOCAL
*this + 640 = derefaddrtmp(32)
_55 = *this + 1536
_57 = *this + 768
*this + 896 = _57
_39 = *this + 896
_36 = *this + 896
_12 = _53
_12 = _39
_12 = _36
ESCAPED = _12

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_37 = { ESCAPED NONLOCAL }
_34 = { ESCAPED NONLOCAL } same as _37
_31 = { ESCAPED NONLOCAL }
_44 = { ESCAPED NONLOCAL } same as _31
_41 = { ESCAPED NONLOCAL }
_26 = { ESCAPED NONLOCAL } same as _41
_ZN6pbzip216BZ2StreamScanner22searchNextHeaderInBuffEv = { }
_25 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL } same as _25
_24 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _24
_23 = { ESCAPED NONLOCAL }
_20 = { }
_47 = { ESCAPED NONLOCAL }
_48 = { ESCAPED NONLOCAL } same as _47
_49 = { ESCAPED NONLOCAL }
_50 = { }
iftmp.70_52 = { NONLOCAL } same as this
_ZN6pbzip216BZ2StreamScanner8readDataEv = { }
_51 = { ESCAPED NONLOCAL }
iftmp.70_9 = { NULL }
_54 = { ESCAPED NONLOCAL }
_53 = { ESCAPED NONLOCAL }
derefaddrtmp(32) = { NONLOCAL } same as this
_55 = { ESCAPED NONLOCAL }
_57 = { ESCAPED NONLOCAL }
_39 = { ESCAPED NONLOCAL }
_36 = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::searchNextHeader()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_19(D), points-to non-local, points-to NULL, points-to vars: { }
_31, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_37, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_39, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_53, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_57, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::searchNextHeader() (struct BZ2StreamScanner * const this)
{
  CharType * D.42366;
  bool D.42364;
  bool D.42362;
  CharType * D.42360;
  bool D.42358;
  bool D.42356;
  bool D.42354;
  bool D.42352;
  bool D.42350;
  size_t D.42348;
  bool _3;
  bool _5;
  bool iftmp.70_9;
  CharType * _12;
  bool _20;
  unsigned int _23;
  bool _24;
  bool _25;
  long unsigned int _26;
  CharType * _31;
  long int _34;
  CharType * _36;
  CharType * _37;
  CharType * _39;
  long int _41;
  long int _44;
  unsigned int _47;
  long unsigned int _48;
  long unsigned int _49;
  bool _50;
  unsigned int _51;
  bool iftmp.70_52;
  CharType * _53;
  bool _54;
  unsigned int _55;
  CharType * _57;

  <bb 2> [100.00%]:
  _37 = MEM[(const struct BZ2StreamScanner *)this_19(D)]._inBuffEnd;
  _34 = (long int) _37;
  _31 = MEM[(const struct BZ2StreamScanner *)this_19(D)]._inBuffSearchPtr;
  _44 = (long int) _31;
  _41 = _34 - _44;
  _26 = (long unsigned int) _41;
  if (_34 != _44)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  pbzip2::BZ2StreamScanner::searchNextHeaderInBuff (this_19(D));

  <bb 4> [0.00%]:

  <bb 5> [100.00%]:
  _25 = MEM[(const struct BZ2StreamScanner *)this_19(D)]._searchStatus;
  _3 = ~_25;
  if (_25 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 6> [100.00%]:
  _24 = MEM[(const struct BZ2StreamScanner *)this_19(D)]._eof;
  _5 = ~_24;
  if (_24 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 7> [100.00%]:
  _23 = this_19(D)->_errState;
  _20 = _23 != 0;
  if (_23 == 0)
    goto <bb 8>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 8> [100.00%]:
  _47 = MEM[(const struct BZ2StreamScanner *)this_19(D)]._outBuff.bufSize;
  _48 = (long unsigned int) _47;
  _49 = MEM[(const struct BZ2StreamScanner *)this_19(D)]._outBuffCapacityLimit;
  _50 = _48 >= _49;
  if (_48 < _49)
    goto <bb 9>; [0.00%]
  else
    goto <bb 10>; [0.00%]

  <bb 9> [100.00%]:
  # iftmp.70_52 = PHI <1(8)>
  pbzip2::BZ2StreamScanner::readData (this_19(D));
  _51 = this_19(D)->_errState;
  if (_51 != 0)
    goto <bb 12>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 10> [0.00%]:

  <bb 11> [0.00%]:
  # iftmp.70_9 = PHI <0(10)>
  _54 = MEM[(const struct BZ2StreamScanner *)this_19(D)]._searchStatus;
  if (_54 != 0)
    goto <bb 14>; [0.00%]
  else
    goto <bb 15>; [0.00%]

  <bb 12> [100.00%]:
  _53 = this_19(D)->_inBuffEnd;
  goto <bb 18>; [0.00%]

  <bb 13> [0.00%]:
  pbzip2::BZ2StreamScanner::searchNextHeaderInBuff (this_19(D));
  goto <bb 5>; [0.00%]

  <bb 14> [0.00%]:
  this_19(D)->_bz2HeaderFound = 1;

  <bb 15> [100.00%]:
  _55 = this_19(D)->_errState;
  if (_55 != 0)
    goto <bb 16>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 16> [100.00%]:
  _57 = this_19(D)->_inBuffEnd;
  this_19(D)->_inBuffSearchPtr = _57;
  _39 = this_19(D)->_inBuffSearchPtr;
  goto <bb 18>; [0.00%]

  <bb 17> [0.00%]:
  _36 = this_19(D)->_inBuffSearchPtr;

  <bb 18> [0.00%]:
  # _12 = PHI <_53(12), _39(16), _36(17)>
  return _12;

}



;; Function pbzip2::BZ2StreamScanner::getNextStream() (_ZN6pbzip216BZ2StreamScanner13getNextStreamEv, funcdef_no=1940, decl_uid=29308, cgraph_uid=681, symbol_order=684)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
ESCAPED = this
ESCAPED = &NULL
ESCAPED = &NULL
ESCAPED = &NULL
ESCAPED = &NONLOCAL
_ZSt7nothrow = NONLOCAL
ESCAPED = &_ZSt7nothrow
_57 = NONLOCAL
derefaddrtmp(13) = &NULL
*_57 = derefaddrtmp(13)
derefaddrtmp(14) = &NULL
*_57 + 64 = derefaddrtmp(14)
derefaddrtmp(15) = &NULL
*_57 + 96 = derefaddrtmp(15)
derefaddrtmp(16) = &NULL
*_57 + 128 = derefaddrtmp(16)
derefaddrtmp(17) = &NULL
*_57 + 160 = derefaddrtmp(17)
derefaddrtmp(18) = &NONLOCAL
*_57 + 192 = derefaddrtmp(18)
derefaddrtmp(19) = &NULL
*_57 + 256 = derefaddrtmp(19)
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &NONLOCAL
_1 = *this + 1536
_2 = _1
_2 = &NONLOCAL
*this + 1536 = _2
derefaddrtmp(23) = &NULL
*_57 = derefaddrtmp(23)
derefaddrtmp(24) = &NONLOCAL
*_57 + 64 = derefaddrtmp(24)
_111 = *this + 1536
_103 = *this + 640
_6 = _103
iftmp.76_112 = &NONLOCAL
derefaddrtmp(30) = &NULL
*this + 648 = derefaddrtmp(30)
ESCAPED = this
iftmp.76_61 = &NULL
_102 = *this + 1536
_91 = *this + 832
_97 = *this + 768
_89 = *this + 96
iftmp.79_4 = &NULL
_86 = *this + 832
_88 = *this + 896
iftmp.79_60 = &NONLOCAL
derefaddrtmp(41) = &NULL
*_57 + 64 = derefaddrtmp(41)
_82 = *this + 648
_13 = _82
_81 = *this + 96
_15 = _81
iftmp.81_129 = &NULL
iftmp.81_18 = &NONLOCAL
_71 = *this + 768
D.36612 = _71
_73 = *this + 896
_74 = *this + 64
_20 = _73
D.36611 = _20
_80 = D.36612
_79 = D.36611
_75 = &D.36612
_75 = &D.36611
_155 = _75
_21 = _75
_22 = *_21
*this + 896 = _22
derefaddrtmp(60) = &NULL
*this + 648 = derefaddrtmp(60)
ESCAPED = this
_65 = *this + 1536
ESCAPED = this
_128 = *this + 1536
_23 = *this + 1568
_24 = *this + 1568
_25 = _24
_25 = &NONLOCAL
*this + 1568 = _25
_131 = *this + 832
_130 = *this + 896
derefaddrtmp(69) = &NONLOCAL
*this + 1568 = derefaddrtmp(69)
_28 = *this + 1568
*this + 1152 = _28
_29 = *this + 1088
*this + 1184 = _29
_30 = *this + 1600
*this + 1120 = _30
_133 = *this + 832
_132 = *this + 896
derefaddrtmp(75) = &NONLOCAL
*this + 1216 = derefaddrtmp(75)
derefaddrtmp(76) = &NULL
*this + 1568 = derefaddrtmp(76)
_33 = *this + 1600
_34 = _33
_34 = &NONLOCAL
*this + 1600 = _34
derefaddrtmp(79) = &NULL
*this + 1216 = derefaddrtmp(79)
doubledereftmp(80) = *this + UNKNOWN
*_57 + UNKNOWN = doubledereftmp(80)
ESCAPED = this
ESCAPED = &NULL
ESCAPED = &NULL
ESCAPED = &NULL
ESCAPED = _57

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL _ZSt7nothrow }
NONLOCAL = { ESCAPED NONLOCAL } same as _57
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_ZN6pbzip216BZ2StreamScanner11initOutBuffEPcmm = { }
_ZnwmRKSt9nothrow_t = { }
_ZSt7nothrow = { ESCAPED NONLOCAL }
_57 = { ESCAPED NONLOCAL }
derefaddrtmp(13) = { NULL }
derefaddrtmp(14) = { NULL } same as derefaddrtmp(13)
derefaddrtmp(15) = { NULL } same as derefaddrtmp(13)
derefaddrtmp(16) = { NULL } same as derefaddrtmp(13)
derefaddrtmp(17) = { NULL } same as derefaddrtmp(13)
derefaddrtmp(18) = { NONLOCAL } same as this
derefaddrtmp(19) = { NULL } same as derefaddrtmp(13)
_Z12handle_error8ExitFlagiPKcz = { }
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
derefaddrtmp(23) = { NULL } same as derefaddrtmp(13)
derefaddrtmp(24) = { NONLOCAL } same as this
_111 = { ESCAPED NONLOCAL }
_110 = { }
_103 = { ESCAPED NONLOCAL }
_6 = { ESCAPED NONLOCAL } same as _103
iftmp.76_112 = { NONLOCAL } same as this
derefaddrtmp(30) = { NULL } same as derefaddrtmp(13)
_ZN6pbzip216BZ2StreamScanner16searchNextHeaderEv = { }
iftmp.76_61 = { NULL } same as derefaddrtmp(13)
_102 = { ESCAPED NONLOCAL }
_91 = { ESCAPED NONLOCAL }
_97 = { ESCAPED NONLOCAL }
_89 = { ESCAPED NONLOCAL }
iftmp.79_4 = { NULL } same as derefaddrtmp(13)
_86 = { ESCAPED NONLOCAL }
_88 = { ESCAPED NONLOCAL }
iftmp.79_60 = { NONLOCAL } same as this
derefaddrtmp(41) = { NULL } same as derefaddrtmp(13)
_82 = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL } same as _82
_81 = { ESCAPED NONLOCAL }
_15 = { ESCAPED NONLOCAL } same as _81
iftmp.81_129 = { NULL } same as derefaddrtmp(13)
iftmp.81_18 = { NONLOCAL } same as this
_71 = { ESCAPED NONLOCAL }
D.36612 = { ESCAPED NONLOCAL } same as _80
_73 = { ESCAPED NONLOCAL }
_74 = { ESCAPED NONLOCAL }
_20 = { ESCAPED NONLOCAL } same as _73
D.36611 = { ESCAPED NONLOCAL } same as _79
_80 = { ESCAPED NONLOCAL }
_79 = { ESCAPED NONLOCAL }
_75 = { D.36612 D.36611 }
_155 = { D.36612 D.36611 } same as _75
_21 = { D.36612 D.36611 } same as _75
_22 = { ESCAPED NONLOCAL }
derefaddrtmp(60) = { NULL } same as derefaddrtmp(13)
_65 = { ESCAPED NONLOCAL }
_ZN6pbzip216BZ2StreamScanner26appendOutBuffDataUpToLimitEv = { }
_128 = { ESCAPED NONLOCAL }
_23 = { ESCAPED NONLOCAL }
_24 = { ESCAPED NONLOCAL }
_25 = { ESCAPED NONLOCAL }
_131 = { ESCAPED NONLOCAL }
_130 = { ESCAPED NONLOCAL }
derefaddrtmp(69) = { NONLOCAL } same as this
_28 = { ESCAPED NONLOCAL }
_29 = { ESCAPED NONLOCAL }
_30 = { ESCAPED NONLOCAL }
_133 = { ESCAPED NONLOCAL }
_132 = { ESCAPED NONLOCAL }
derefaddrtmp(75) = { NONLOCAL } same as this
derefaddrtmp(76) = { NULL } same as derefaddrtmp(13)
_33 = { ESCAPED NONLOCAL }
_34 = { ESCAPED NONLOCAL }
derefaddrtmp(79) = { NULL } same as derefaddrtmp(13)
doubledereftmp(80) = { ESCAPED NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::getNextStream()

Aliased symbols

D.36611, UID D.36611, unsigned char * const, is addressable
D.36612, UID D.36612, unsigned char * const, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.11311 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_21, points-to NULL, points-to vars: { D.36611 D.36612 }
_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_54(D), points-to non-local, points-to NULL, points-to vars: { }
_57, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_71, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_73, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_75, points-to NULL, points-to vars: { D.36611 D.36612 }
_79, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_80, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_86, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_88, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_91, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_97, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_130, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_131, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_132, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_133, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_155, points-to NULL, points-to vars: { D.36611 D.36612 }

pbzip2::BZ2StreamScanner::getNextStream() (struct BZ2StreamScanner * const this)
{
  CharType * D.42416;
  CharType * D.42414;
  CharType * D.42412;
  CharType * D.42410;
  bool D.42408;
  bool D.42406;
  CharType * D.42404;
  CharType * D.42402;
  size_type D.42400;
  unsigned char * const & D.42398;
  bool D.42395;
  bool D.42393;
  CharType * D.42391;
  CharType * D.42389;
  bool D.42387;
  CharType * D.42385;
  CharType * D.42383;
  bool D.42381;
  bool D.42379;
  bool D.42377;
  struct outBuff * res;
  unsigned char * const D.36611;
  unsigned char * const D.36612;
  unsigned int _1;
  unsigned int _2;
  bool iftmp.79_4;
  bool _6;
  bool _13;
  bool _15;
  bool iftmp.81_18;
  CharType * _20;
  unsigned char * const & _21;
  unsigned char * _22;
  int _23;
  int _24;
  int _25;
  int _28;
  unsigned int _29;
  int _30;
  int _33;
  int _34;
  void * _57;
  bool iftmp.79_60;
  bool iftmp.76_61;
  unsigned int _65;
  CharType * _71;
  CharType * _73;
  long unsigned int _74;
  unsigned char * const & _75;
  unsigned char * _79;
  unsigned char * _80;
  bool _81;
  bool _82;
  CharType * _86;
  CharType * _88;
  bool _89;
  CharType * _91;
  CharType * _97;
  unsigned int _102;
  bool _103;
  bool _110;
  unsigned int _111;
  bool iftmp.76_112;
  unsigned int _128;
  bool iftmp.81_129;
  CharType * _130;
  CharType * _131;
  CharType * _132;
  CharType * _133;

  <bb 2> [0.00%]:
  pbzip2::BZ2StreamScanner::initOutBuff (this_54(D), 0B, 0, 0);
  _57 = operator new (40, &nothrow);
  if (_57 != 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  MEM[(struct  &)_57] ={v} {CLOBBER};
  MEM[(struct outBuff *)_57].buf = 0B;
  MEM[(struct outBuff *)_57].bufSize = 0;
  MEM[(struct outBuff *)_57].blockNumber = 0;
  MEM[(struct outBuff *)_57].sequenceNumber = 0;
  MEM[(struct outBuff *)_57].inSize = 0;
  MEM[(struct outBuff *)_57].isLastInSequence = 1;
  MEM[(struct outBuff *)_57].next = 0B;

  <bb 4> [0.00%]:
  if (_57 == 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  handle_error (1, -1, "pbzip2: *ERROR: Could not allocate memory (getNextStream/%u)!Aborting...\n", 40);
  _1 = this_54(D)->_errState;
  _2 = _1 | 2;
  this_54(D)->_errState = _2;
  goto <bb 35>; [0.00%]

  <bb 6> [100.00%]:
  MEM[(struct outBuff *)_57].buf = 0B;
  MEM[(struct outBuff *)_57].bufSize = 4294967295;
  _111 = this_54(D)->_errState;
  _110 = _111 != 0;
  if (_111 == 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 7> [100.00%]:
  _103 = MEM[(const struct BZ2StreamScanner *)this_54(D)]._bz2HeaderFound;
  _6 = ~_103;
  if (_103 != 0)
    goto <bb 9>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  # iftmp.76_112 = PHI <1(7)>
  this_54(D)->_searchStatus = 0;
  pbzip2::BZ2StreamScanner::searchNextHeader (this_54(D));
  goto <bb 11>; [0.00%]

  <bb 9> [0.00%]:

  <bb 10> [0.00%]:
  # iftmp.76_61 = PHI <0(9)>

  <bb 11> [100.00%]:
  _102 = this_54(D)->_errState;
  if (_102 != 0)
    goto <bb 35>; [0.00%]
  else
    goto <bb 12>; [0.00%]

  <bb 12> [100.00%]:
  _91 = this_54(D)->_inBuffCurrent;
  _97 = this_54(D)->_inBuffEnd;
  if (_91 == _97)
    goto <bb 13>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 13> [100.00%]:
  _89 = MEM[(const struct BZ2StreamScanner *)this_54(D)]._eof;
  if (_89 != 0)
    goto <bb 16>; [0.00%]
  else
    goto <bb 14>; [0.00%]

  <bb 14> [0.00%]:

  <bb 15> [100.00%]:
  # iftmp.79_4 = PHI <0(14)>
  _86 = this_54(D)->_inBuffCurrent;
  _88 = this_54(D)->_inBuffSearchPtr;
  if (_86 == _88)
    goto <bb 19>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 16> [0.00%]:
  # iftmp.79_60 = PHI <1(13)>
  MEM[(struct outBuff *)_57].bufSize = 0;
  goto <bb 35>; [0.00%]

  <bb 17> [100.00%]:
  _82 = MEM[(const struct BZ2StreamScanner *)this_54(D)]._searchStatus;
  _13 = ~_82;
  if (_82 != 0)
    goto <bb 20>; [0.00%]
  else
    goto <bb 18>; [0.00%]

  <bb 18> [100.00%]:
  _81 = MEM[(const struct BZ2StreamScanner *)this_54(D)]._eof;
  _15 = ~_81;
  if (_81 != 0)
    goto <bb 20>; [0.00%]
  else
    goto <bb 19>; [0.00%]

  <bb 19> [0.00%]:
  goto <bb 22>; [0.00%]

  <bb 20> [0.00%]:

  <bb 21> [0.00%]:
  # iftmp.81_129 = PHI <0(20)>
  goto <bb 25>; [100.00%]

  <bb 22> [100.00%]:
  # iftmp.81_18 = PHI <1(19)>
  _71 = this_54(D)->_inBuffEnd;
  D.36612 = _71;
  _73 = this_54(D)->_inBuffSearchPtr;
  _74 = MEM[(const struct basic_string *)this_54(D) + 16B]._M_string_length;
  _20 = _73 + _74;
  D.36611 = _20;
  _80 = D.36612;
  _79 = D.36611;
  if (_79 > _80)
    goto <bb 24>; [46.00%]
  else
    goto <bb 23>; [54.00%]

  <bb 23> [54.00%]:

  <bb 24> [100.00%]:
  # _75 = PHI <&D.36612(22), &D.36611(23)>
  _155 = _75;
  _21 = _75;
  _22 = *_21;
  this_54(D)->_inBuffSearchPtr = _22;
  D.36611 ={v} {CLOBBER};
  D.36612 ={v} {CLOBBER};
  this_54(D)->_searchStatus = 0;
  pbzip2::BZ2StreamScanner::searchNextHeader (this_54(D));

  <bb 25> [100.00%]:
  _65 = this_54(D)->_errState;
  if (_65 != 0)
    goto <bb 35>; [0.00%]
  else
    goto <bb 26>; [0.00%]

  <bb 26> [100.00%]:
  pbzip2::BZ2StreamScanner::appendOutBuffDataUpToLimit (this_54(D));
  _128 = this_54(D)->_errState;
  if (_128 != 0)
    goto <bb 35>; [0.00%]
  else
    goto <bb 27>; [0.00%]

  <bb 27> [0.00%]:
  _23 = this_54(D)->_outSequenceNumber;
  if (_23 > 0)
    goto <bb 28>; [0.00%]
  else
    goto <bb 29>; [0.00%]

  <bb 28> [0.00%]:
  _24 = this_54(D)->_outSequenceNumber;
  _25 = _24 + 1;
  this_54(D)->_outSequenceNumber = _25;
  goto <bb 31>; [0.00%]

  <bb 29> [100.00%]:
  _131 = this_54(D)->_inBuffCurrent;
  _130 = this_54(D)->_inBuffSearchPtr;
  if (_130 != _131)
    goto <bb 30>; [0.00%]
  else
    goto <bb 31>; [0.00%]

  <bb 30> [0.00%]:
  this_54(D)->_outSequenceNumber = 1;

  <bb 31> [100.00%]:
  _28 = this_54(D)->_outSequenceNumber;
  this_54(D)->_outBuff.sequenceNumber = _28;
  _29 = this_54(D)->_outBuff.bufSize;
  this_54(D)->_outBuff.inSize = _29;
  _30 = this_54(D)->_streamNumber;
  this_54(D)->_outBuff.blockNumber = _30;
  _133 = this_54(D)->_inBuffCurrent;
  _132 = this_54(D)->_inBuffSearchPtr;
  if (_132 == _133)
    goto <bb 32>; [0.00%]
  else
    goto <bb 33>; [0.00%]

  <bb 32> [0.00%]:
  this_54(D)->_outBuff.isLastInSequence = 1;
  this_54(D)->_outSequenceNumber = 0;
  _33 = this_54(D)->_streamNumber;
  _34 = _33 + 1;
  this_54(D)->_streamNumber = _34;
  goto <bb 34>; [0.00%]

  <bb 33> [0.00%]:
  this_54(D)->_outBuff.isLastInSequence = 0;

  <bb 34> [0.00%]:
  MEM[(struct outBuff *)_57] = this_54(D)->_outBuff;
  pbzip2::BZ2StreamScanner::initOutBuff (this_54(D), 0B, 0, 0);

  <bb 35> [0.00%]:
  return _57;

}



;; Function std::__addressof<unsigned char const>(unsigned char const&)unsigned char const* (_ZSt11__addressofIKhEPT_RS1_, funcdef_no=2499, decl_uid=41065, cgraph_uid=1239, symbol_order=1242)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL
ESCAPED = __r

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }


Alias information for std::__addressof<unsigned char const>(unsigned char const&)unsigned char const*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__r_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::__addressof<unsigned char const>(unsigned char const&)unsigned char const* (const unsigned char & __r)
{
  <bb 2> [0.00%]:
  return __r_1(D);

}



;; Function std::addressof<unsigned char const>(unsigned char const&)unsigned char const* (_ZSt9addressofIKhEPT_RS1_, funcdef_no=2498, decl_uid=41002, cgraph_uid=1240, symbol_order=1243)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL
ESCAPED = __r

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }


Alias information for std::addressof<unsigned char const>(unsigned char const&)unsigned char const*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__r_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::addressof<unsigned char const>(unsigned char const&)unsigned char const* (const unsigned char & __r)
{
  const unsigned char * D.42420;

  <bb 2> [100.00%]:
  return __r_2(D);

}



;; Function std::pointer_traits<unsigned char const*>::pointer_to(unsigned char const&) (_ZNSt14pointer_traitsIPKhE10pointer_toERS0_, funcdef_no=2469, decl_uid=40591, cgraph_uid=1210, symbol_order=1213)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__r = &NONLOCAL
ESCAPED = __r

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__r = { NONLOCAL }


Alias information for std::pointer_traits<unsigned char const*>::pointer_to(unsigned char const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__r_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::pointer_traits<unsigned char const*>::pointer_to(unsigned char const&) (const __make_not_void & __r)
{
  const unsigned char * D.42423;

  <bb 2> [100.00%]:
  return __r_2(D);

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_local_data() const (_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE13_M_local_dataEv, funcdef_no=2417, decl_uid=29822, cgraph_uid=1158, symbol_order=1161)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_1 = this + UNKNOWN
ESCAPED = _1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_1 = { NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_local_data() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
this_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_local_data() const (const struct basic_string * const this)
{
  const unsigned char * D.42426;
  const unsigned char[16] * _1;

  <bb 2> [100.00%]:
  _1 = &this_2(D)->D.29808._M_local_buf;
  return _1;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_is_local() const (_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE11_M_is_localEv, funcdef_no=2367, decl_uid=29830, cgraph_uid=1108, symbol_order=1111)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_5 = *this
_6 = this + UNKNOWN
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_5 = { ESCAPED NONLOCAL }
_6 = { NONLOCAL }
_7 = { }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_is_local() const

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information

this_4(D), points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_is_local() const (const struct basic_string * const this)
{
  unsigned char * D.42431;
  const unsigned char * D.42429;
  unsigned char * _5;
  const unsigned char[16] * _6;
  bool _7;

  <bb 2> [100.00%]:
  _5 = this_4(D)->_M_dataplus._M_p;
  _6 = &this_4(D)->D.29808._M_local_buf;
  _7 = _5 == _6;
  return _7;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_dispose() (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE10_M_disposeEv, funcdef_no=2306, decl_uid=29836, cgraph_uid=1047, symbol_order=1050)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_6 = *this
_10 = this + UNKNOWN
_2 = *this + 128
_12 = *this
ESCAPED = _12

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_10 = { NONLOCAL }
_11 = { }
_2 = { ESCAPED NONLOCAL }
_12 = { ESCAPED NONLOCAL } same as _6
_ZdlPv = { }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_dispose()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_5(D), points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_dispose() (struct basic_string * const this)
{
  bool D.42434;
  long unsigned int _2;
  unsigned char * _6;
  const unsigned char[16] * _10;
  bool _11;
  unsigned char * _12;

  <bb 2> [100.00%]:
  _6 = MEM[(const struct basic_string *)this_5(D)]._M_dataplus._M_p;
  _10 = &MEM[(const struct basic_string *)this_5(D)].D.29808._M_local_buf;
  _11 = _6 == _10;
  if (_6 != _10)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _2 = this_5(D)->D.29808._M_allocated_capacity;
  _12 = MEM[(const struct basic_string *)this_5(D)]._M_dataplus._M_p;
  operator delete (_12);

  <bb 4> [0.00%]:
  return;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::~basic_string() (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEED2Ev, funcdef_no=2181, decl_uid=30734, cgraph_uid=922, symbol_order=925)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_7 = *this
_8 = this + UNKNOWN
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_7 = { ESCAPED NONLOCAL }
_8 = { NONLOCAL }
_ZdlPv = { }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::~basic_string()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::~basic_string() (struct basic_string * const this)
{
  unsigned char * _7;
  const unsigned char[16] * _8;

  <bb 2> [100.00%]:
  _7 = MEM[(const struct basic_string *)this_3(D)]._M_dataplus._M_p;
  _8 = &MEM[(const struct basic_string *)this_3(D)].D.29808._M_local_buf;
  if (_7 != _8)
    goto <bb 3>; [57.44%]
  else
    goto <bb 4>; [42.56%]

  <bb 3> [57.44%]:
  operator delete (_7);

  <bb 4> [100.00%]:
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  return;

}



;; Function pbzip2::BZ2StreamScanner::~BZ2StreamScanner() (_ZN6pbzip216BZ2StreamScannerD2Ev, funcdef_no=1928, decl_uid=30776, cgraph_uid=669, symbol_order=672)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_ZTVN6pbzip216BZ2StreamScannerE = NONLOCAL
derefaddrtmp(10) = &_ZTVN6pbzip216BZ2StreamScannerE
*this = derefaddrtmp(10)
ESCAPED = this
_2 = this + UNKNOWN
_13 = *this
_14 = this + UNKNOWN
ESCAPED = _13
_3 = this + UNKNOWN
_11 = *this
_12 = this + UNKNOWN
ESCAPED = _11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZTVN6pbzip216BZ2StreamScannerE }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_ZTVN6pbzip216BZ2StreamScannerE = { ESCAPED NONLOCAL }
derefaddrtmp(10) = { _ZTVN6pbzip216BZ2StreamScannerE }
_ZN6pbzip216BZ2StreamScanner7disposeEv = { }
_2 = { NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_14 = { NONLOCAL }
_ZdlPv = { }
_3 = { NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _13
_12 = { NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::~BZ2StreamScanner()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.30799 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_2, points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }
this_5(D), points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_14, points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::~BZ2StreamScanner() (struct BZ2StreamScanner * const this)
{
  struct basic_string * _2;
  struct basic_string * _3;
  unsigned char * _11;
  const unsigned char[16] * _12;
  unsigned char * _13;
  const unsigned char[16] * _14;

  <bb 2> [100.00%]:
  this_5(D)->_vptr.BZ2StreamScanner = &MEM[(void *)&_ZTVN6pbzip216BZ2StreamScannerE + 16B];
  pbzip2::BZ2StreamScanner::dispose (this_5(D));
  _2 = &this_5(D)->_bz2HeaderZero;
  _13 = MEM[(const struct basic_string *)this_5(D) + 48B]._M_dataplus._M_p;
  _14 = &MEM[(const struct basic_string *)this_5(D) + 48B].D.29808._M_local_buf;
  if (_13 != _14)
    goto <bb 3>; [57.44%]
  else
    goto <bb 4>; [42.56%]

  <bb 3> [57.44%]:
  operator delete (_13);

  <bb 4> [100.00%]:
  MEM[(struct  &)this_5(D) + 48] ={v} {CLOBBER};
  _3 = &this_5(D)->_bz2Header;
  _11 = MEM[(const struct basic_string *)this_5(D) + 16B]._M_dataplus._M_p;
  _12 = &MEM[(const struct basic_string *)this_5(D) + 16B].D.29808._M_local_buf;
  if (_11 != _12)
    goto <bb 5>; [57.44%]
  else
    goto <bb 6>; [42.56%]

  <bb 5> [57.44%]:
  operator delete (_11);

  <bb 6> [100.00%]:
  MEM[(struct  &)this_5(D) + 16] ={v} {CLOBBER};
  MEM[(struct  &)this_5(D)] ={v} {CLOBBER};
  return;

}



;; Function pbzip2::BZ2StreamScanner::~BZ2StreamScanner() (_ZN6pbzip216BZ2StreamScannerD0Ev, funcdef_no=1930, decl_uid=30770, cgraph_uid=671, symbol_order=674)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
ESCAPED = this
ESCAPED = this
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_ZN6pbzip216BZ2StreamScannerD1Ev = { }
_ZdlPvm = { }


Alias information for pbzip2::BZ2StreamScanner::~BZ2StreamScanner()

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::~BZ2StreamScanner() (struct BZ2StreamScanner * const this)
{
  <bb 2> [0.00%]:
  pbzip2::BZ2StreamScanner::~BZ2StreamScanner (this_2(D));
  operator delete (this_2(D), 208);
  return;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::capacity() const (_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE8capacityEv, funcdef_no=2421, decl_uid=30127, cgraph_uid=1162, symbol_order=1165)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_5 = *this
_10 = this + UNKNOWN
iftmp.9_7 = *this + 128
iftmp.9_2 = &NONLOCAL
iftmp.9_2 = iftmp.9_7
ESCAPED = iftmp.9_2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_5 = { ESCAPED NONLOCAL }
_10 = { NONLOCAL }
iftmp.9_7 = { ESCAPED NONLOCAL }
iftmp.9_2 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::capacity() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_4(D), points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::capacity() const (const struct basic_string * const this)
{
  bool D.42446;
  size_type iftmp.9_2;
  unsigned char * _5;
  size_type iftmp.9_7;
  const unsigned char[16] * _10;

  <bb 2> [100.00%]:
  _5 = this_4(D)->_M_dataplus._M_p;
  _10 = &this_4(D)->D.29808._M_local_buf;
  if (_5 == _10)
    goto <bb 4>; [0.00%]
  else
    goto <bb 3>; [0.00%]

  <bb 3> [0.00%]:
  iftmp.9_7 = this_4(D)->D.29808._M_allocated_capacity;

  <bb 4> [0.00%]:
  # iftmp.9_2 = PHI <15(2), iftmp.9_7(3)>
  return iftmp.9_2;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_get_allocator() const (_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE16_M_get_allocatorEv, funcdef_no=2501, decl_uid=29915, cgraph_uid=1242, symbol_order=1245)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_2 = this + UNKNOWN
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_2 = { NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_get_allocator() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_1(D), points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_get_allocator() const (const struct basic_string * const this)
{
  const struct allocator_type & _2;

  <bb 2> [0.00%]:
  _2 = &this_1(D)->_M_dataplus;
  return _2;

}



;; Function __gnu_cxx::new_allocator<unsigned char>::max_size() const (_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv, funcdef_no=2510, decl_uid=29662, cgraph_uid=1251, symbol_order=1254)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }


Alias information for __gnu_cxx::new_allocator<unsigned char>::max_size() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


__gnu_cxx::new_allocator<unsigned char>::max_size() const (const struct new_allocator * const this)
{
  <bb 2> [0.00%]:
  return 18446744073709551615;

}



;; Function std::allocator_traits<std::allocator<unsigned char> >::max_size(std::allocator<unsigned char> const&) (_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_, funcdef_no=2500, decl_uid=29443, cgraph_uid=1241, symbol_order=1244)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }


Alias information for std::allocator_traits<std::allocator<unsigned char> >::max_size(std::allocator<unsigned char> const&)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__a_2(D), points-to non-local, points-to NULL, points-to vars: { }

std::allocator_traits<std::allocator<unsigned char> >::max_size(std::allocator<unsigned char> const&) (const struct allocator_type & __a)
{
  size_type D.42451;

  <bb 2> [100.00%]:
  return 18446744073709551615;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::max_size() const (_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE8max_sizeEv, funcdef_no=2471, decl_uid=30116, cgraph_uid=1212, symbol_order=1215)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
_7 = this + UNKNOWN
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
_7 = { NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::max_size() const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_5(D), points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::max_size() const (const struct basic_string * const this)
{
  const struct allocator_type & D.42456;
  size_type D.42454;
  const struct allocator_type & _7;

  <bb 2> [100.00%]:
  _7 = &this_5(D)->_M_dataplus;
  return 9223372036854775807;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_check_length(unsigned long, unsigned long, char const*) const (_ZNKSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE15_M_check_lengthEmmPKc, funcdef_no=2420, decl_uid=29921, cgraph_uid=1161, symbol_order=1164)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n1 = &NONLOCAL
__n2 = &NONLOCAL
__s = &NONLOCAL
_9 = *this + 64
_3 = __n1
_3 = _9
_4 = _3
_4 = &NONLOCAL
ESCAPED = __s

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n1 = { NONLOCAL } same as this
__n2 = { NONLOCAL } same as this
__s = { NONLOCAL } same as this
_9 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_ZSt20__throw_length_errorPKc = { }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_check_length(unsigned long, unsigned long, char const*) const

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_7(D), points-to non-local, points-to NULL, points-to vars: { }
__s_15(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_check_length(unsigned long, unsigned long, char const*) const (const struct basic_string * const this, size_type __n1, size_type __n2, const char * __s)
{
  size_type D.42461;
  size_type D.42459;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _9;

  <bb 2> [100.00%]:
  _9 = this_7(D)->_M_string_length;
  _3 = __n1_10(D) - _9;
  _4 = _3 + 9223372036854775807;
  if (_4 < __n2_11(D))
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  std::__throw_length_error (__s_15(D));

  <bb 4> [0.00%]:
  return;

}



;; Function std::__miter_base<unsigned char const*>(unsigned char const*)unsigned char const* (_ZSt12__miter_baseIPKhET_S2_, funcdef_no=2511, decl_uid=41077, cgraph_uid=1252, symbol_order=1255)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__it = &NONLOCAL
ESCAPED = __it

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__it = { NONLOCAL }


Alias information for std::__miter_base<unsigned char const*>(unsigned char const*)unsigned char const*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__it_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::__miter_base<unsigned char const*>(unsigned char const*)unsigned char const* (const unsigned char * __it)
{
  <bb 2> [0.00%]:
  return __it_1(D);

}



;; Function __gnu_cxx::new_allocator<unsigned char>::allocate(unsigned long, void const*) (_ZN9__gnu_cxx13new_allocatorIhE8allocateEmPKv, funcdef_no=2513, decl_uid=29654, cgraph_uid=1254, symbol_order=1257)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__n = &NONLOCAL
D.29657 = &NONLOCAL
ESCAPED = __n
HEAP(13) = &NONLOCAL
_8 = &HEAP(13)
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(13) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__n = { NONLOCAL } same as this
D.29657 = { NONLOCAL } same as this
_Znwm = { }
_8 = { HEAP(13) }
HEAP(13) = { ESCAPED NONLOCAL }


Alias information for __gnu_cxx::new_allocator<unsigned char>::allocate(unsigned long, void const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.42466 } (escaped, escaped heap)

Flow-insensitive points-to information

this_3(D), points-to non-local, points-to NULL, points-to vars: { }
_8, points-to NULL, points-to vars: { D.42466 } (escaped, escaped heap)

__gnu_cxx::new_allocator<unsigned char>::allocate(unsigned long, void const*) (struct new_allocator * const this, size_type __n, const void * D.29657)
{
  size_type D.42465;
  unsigned char * _8;

  <bb 2> [100.00%]:
  _8 = operator new (__n_5(D));
  return _8;

}



;; Function std::allocator_traits<std::allocator<unsigned char> >::allocate(std::allocator<unsigned char>&, unsigned long) (_ZNSt16allocator_traitsISaIhEE8allocateERS0_m, funcdef_no=2503, decl_uid=29408, cgraph_uid=1244, symbol_order=1247)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__a = &NONLOCAL
__n = &NONLOCAL
ESCAPED = __n
HEAP(12) = &NONLOCAL
_7 = &HEAP(12)
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL HEAP(12) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__a = { NONLOCAL }
__n = { NONLOCAL } same as __a
_Znwm = { }
_7 = { HEAP(12) }
HEAP(12) = { ESCAPED NONLOCAL }


Alias information for std::allocator_traits<std::allocator<unsigned char> >::allocate(std::allocator<unsigned char>&, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.42472 } (escaped, escaped heap)

Flow-insensitive points-to information

__a_2(D), points-to non-local, points-to NULL, points-to vars: { }
_7, points-to NULL, points-to vars: { D.42472 } (escaped, escaped heap)

std::allocator_traits<std::allocator<unsigned char> >::allocate(std::allocator<unsigned char>&, unsigned long) (struct allocator_type & __a, size_type __n)
{
  unsigned char * D.42471;
  unsigned char * _7;

  <bb 2> [100.00%]:
  _7 = operator new (__n_3(D));
  return _7;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_create(unsigned long&, unsigned long) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE9_M_createERmm, funcdef_no=2476, decl_uid=29832, cgraph_uid=1217, symbol_order=1220)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__capacity = &NONLOCAL
__old_capacity = &NONLOCAL
_1 = *__capacity
_26 = _1
ESCAPED = &STRING
_3 = *__capacity
_4 = *__capacity
_5 = __old_capacity
_5 = &NONLOCAL
_6 = __old_capacity
_6 = &NONLOCAL
*__capacity = _6
_7 = *__capacity
_34 = _7
derefaddrtmp(20) = &NONLOCAL
*__capacity = derefaddrtmp(20)
_10 = *__capacity
_11 = _10
_11 = &NONLOCAL
_23 = this + UNKNOWN
ESCAPED = _11
HEAP(26) = &NONLOCAL
_25 = &HEAP(26)
ESCAPED = _25

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL HEAP(26) }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__capacity = { NONLOCAL } same as this
__old_capacity = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_26 = { ESCAPED NONLOCAL } same as _1
_ZSt20__throw_length_errorPKc = { }
_3 = { ESCAPED NONLOCAL } same as _1
_4 = { ESCAPED NONLOCAL } same as _1
_5 = { NONLOCAL } same as this
_6 = { NONLOCAL } same as this
_7 = { ESCAPED NONLOCAL } same as _1
_34 = { ESCAPED NONLOCAL } same as _1
derefaddrtmp(20) = { NONLOCAL } same as this
_10 = { ESCAPED NONLOCAL } same as _1
_11 = { ESCAPED NONLOCAL } same as _1
_23 = { NONLOCAL }
_Znwm = { }
_25 = { HEAP(26) }
HEAP(26) = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_create(unsigned long&, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.42485 } (escaped, escaped heap)

Flow-insensitive points-to information

__capacity_15(D), points-to non-local, points-to NULL, points-to vars: { }
this_16(D), points-to non-local, points-to NULL, points-to vars: { }
_23, points-to non-local, points-to NULL, points-to vars: { }
_25, points-to NULL, points-to vars: { D.42485 } (escaped, escaped heap)

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_create(unsigned long&, unsigned long) (struct basic_string * const this, size_type & __capacity, size_type __old_capacity)
{
  struct allocator_type & D.42484;
  unsigned char * D.42482;
  size_type D.42479;
  size_type D.42477;
  size_type D.42475;
  long unsigned int _1;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _10;
  long unsigned int _11;
  struct allocator_type & _23;
  unsigned char * _25;
  signed long _26;
  signed long _34;

  <bb 2> [100.00%]:
  _1 = *__capacity_15(D);
  _26 = (signed long) _1;
  if (_26 < 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  std::__throw_length_error ("basic_string::_M_create");

  <bb 4> [0.00%]:
  _3 = *__capacity_15(D);
  if (_3 > __old_capacity_19(D))
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 5> [0.00%]:
  _4 = *__capacity_15(D);
  _5 = __old_capacity_19(D) * 2;
  if (_4 < _5)
    goto <bb 6>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 6> [100.00%]:
  _6 = __old_capacity_19(D) * 2;
  *__capacity_15(D) = _6;
  _7 = *__capacity_15(D);
  _34 = (signed long) _7;
  if (_34 < 0)
    goto <bb 7>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 7> [100.00%]:
  *__capacity_15(D) = 9223372036854775807;

  <bb 8> [100.00%]:
  _10 = *__capacity_15(D);
  _11 = _10 + 1;
  _23 = &this_16(D)->_M_dataplus;
  _25 = operator new (_11);
  return _25;

}



;; Function std::__niter_base<unsigned char const*>(unsigned char const*)unsigned char const* (_ZSt12__niter_baseIPKhET_S2_, funcdef_no=2516, decl_uid=41093, cgraph_uid=1257, symbol_order=1260)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__it = &NONLOCAL
ESCAPED = __it

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__it = { NONLOCAL }


Alias information for std::__niter_base<unsigned char const*>(unsigned char const*)unsigned char const*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__it_1(D), points-to non-local, points-to NULL, points-to vars: { }

std::__niter_base<unsigned char const*>(unsigned char const*)unsigned char const* (const unsigned char * __it)
{
  <bb 2> [0.00%]:
  return __it_1(D);

}



;; Function std::__copy_move_a<false, unsigned char const*, unsigned char*>(unsigned char const*, unsigned char const*, unsigned char*)unsigned char* (_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_, funcdef_no=2517, decl_uid=41095, cgraph_uid=1258, symbol_order=1261)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__result = &NONLOCAL
__last.11_8 = __last
__first.12_9 = __first
_Num_10 = __last.11_8
_Num_10 = __first.12_9
_Num.13_11 = _Num_10
doubledereftmp(15) = *__first
*__result = doubledereftmp(15)
_Num.14_12 = _Num_10
_13 = __result
ESCAPED = _13

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as doubledereftmp(15)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__result = { NONLOCAL } same as __first
__last.11_8 = { NONLOCAL } same as __first
__first.12_9 = { NONLOCAL } same as __first
_Num_10 = { NONLOCAL } same as __first
_Num.13_11 = { NONLOCAL } same as __first
doubledereftmp(15) = { ESCAPED NONLOCAL }
_Num.14_12 = { NONLOCAL } same as __first
_13 = { NONLOCAL } same as __first


Alias information for std::__copy_move_a<false, unsigned char const*, unsigned char*>(unsigned char const*, unsigned char const*, unsigned char*)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__first_3(D), points-to non-local, points-to NULL, points-to vars: { }
__last_4(D), points-to non-local, points-to NULL, points-to vars: { }
__result_5(D), points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }

std::__copy_move_a<false, unsigned char const*, unsigned char*>(unsigned char const*, unsigned char const*, unsigned char*)unsigned char* (const unsigned char * __first, const unsigned char * __last, unsigned char * __result)
{
  const ptrdiff_t _Num;
  unsigned char * D.42493;
  const bool __simple;
  long int __last.11_8;
  long int __first.12_9;
  long unsigned int _Num.13_11;
  sizetype _Num.14_12;
  unsigned char * _13;

  <bb 2> [100.00%]:
  __last.11_8 = (long int) __last_4(D);
  __first.12_9 = (long int) __first_3(D);
  _Num_10 = __last.11_8 - __first.12_9;
  if (_Num_10 != 0)
    goto <bb 3>; [36.64%]
  else
    goto <bb 4>; [63.36%]

  <bb 3> [36.64%]:
  _Num.13_11 = (long unsigned int) _Num_10;
  memmove (__result_5(D), __first_3(D), _Num.13_11);

  <bb 4> [100.00%]:
  _Num.14_12 = (sizetype) _Num_10;
  _13 = __result_5(D) + _Num.14_12;
  return _13;

}



;; Function std::__copy_move_a2<false, unsigned char const*, unsigned char*>(unsigned char const*, unsigned char const*, unsigned char*)unsigned char* (_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_, funcdef_no=2512, decl_uid=41079, cgraph_uid=1253, symbol_order=1256)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__result = &NONLOCAL
__last.11_10 = __last
__first.12_8 = __first
_Num_6 = __last.11_10
_Num_6 = __first.12_8
_Num.13_13 = _Num_6
doubledereftmp(15) = *__first
*__result = doubledereftmp(15)
_Num.14_14 = _Num_6
_15 = __result
ESCAPED = _15

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as doubledereftmp(15)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__result = { NONLOCAL } same as __first
__last.11_10 = { NONLOCAL } same as __first
__first.12_8 = { NONLOCAL } same as __first
_Num_6 = { NONLOCAL } same as __first
_Num.13_13 = { NONLOCAL } same as __first
doubledereftmp(15) = { ESCAPED NONLOCAL }
_Num.14_14 = { NONLOCAL } same as __first
_15 = { NONLOCAL } same as __first


Alias information for std::__copy_move_a2<false, unsigned char const*, unsigned char*>(unsigned char const*, unsigned char const*, unsigned char*)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__result_5(D), points-to non-local, points-to NULL, points-to vars: { }
__last_7(D), points-to non-local, points-to NULL, points-to vars: { }
__first_9(D), points-to non-local, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to NULL, points-to vars: { }

std::__copy_move_a2<false, unsigned char const*, unsigned char*>(unsigned char const*, unsigned char const*, unsigned char*)unsigned char* (const unsigned char * __first, const unsigned char * __last, unsigned char * __result)
{
  unsigned char * D.42509;
  const unsigned char * D.42507;
  const unsigned char * D.42505;
  const ptrdiff_t _Num;
  unsigned char * D.42503;
  long int __first.12_8;
  long int __last.11_10;
  long unsigned int _Num.13_13;
  sizetype _Num.14_14;
  unsigned char * _15;

  <bb 2> [100.00%]:
  __last.11_10 = (long int) __last_7(D);
  __first.12_8 = (long int) __first_9(D);
  _Num_6 = __last.11_10 - __first.12_8;
  if (_Num_6 != 0)
    goto <bb 3>; [36.64%]
  else
    goto <bb 4>; [63.36%]

  <bb 3> [36.64%]:
  _Num.13_13 = (long unsigned int) _Num_6;
  memmove (__result_5(D), __first_9(D), _Num.13_13);

  <bb 4> [100.00%]:
  _Num.14_14 = (sizetype) _Num_6;
  _15 = __result_5(D) + _Num.14_14;
  return _15;

}



;; Function std::copy<unsigned char const*, unsigned char*>(unsigned char const*, unsigned char const*, unsigned char*)unsigned char* (_ZSt4copyIPKhPhET0_T_S4_S3_, funcdef_no=2502, decl_uid=41009, cgraph_uid=1243, symbol_order=1246)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__first = &NONLOCAL
__last = &NONLOCAL
__result = &NONLOCAL
__last.11_7 = __last
__first.12_5 = __first
_Num_12 = __last.11_7
_Num_12 = __first.12_5
_Num.13_13 = _Num_12
doubledereftmp(15) = *__first
*__result = doubledereftmp(15)
_Num.14_14 = _Num_12
_15 = __result
ESCAPED = _15

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as doubledereftmp(15)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__first = { NONLOCAL }
__last = { NONLOCAL } same as __first
__result = { NONLOCAL } same as __first
__last.11_7 = { NONLOCAL } same as __first
__first.12_5 = { NONLOCAL } same as __first
_Num_12 = { NONLOCAL } same as __first
_Num.13_13 = { NONLOCAL } same as __first
doubledereftmp(15) = { ESCAPED NONLOCAL }
_Num.14_14 = { NONLOCAL } same as __first
_15 = { NONLOCAL } same as __first


Alias information for std::copy<unsigned char const*, unsigned char*>(unsigned char const*, unsigned char const*, unsigned char*)unsigned char*

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__last_4(D), points-to non-local, points-to NULL, points-to vars: { }
__first_6(D), points-to non-local, points-to NULL, points-to vars: { }
__result_8(D), points-to non-local, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to NULL, points-to vars: { }

std::copy<unsigned char const*, unsigned char*>(unsigned char const*, unsigned char const*, unsigned char*)unsigned char* (const unsigned char * __first, const unsigned char * __last, unsigned char * __result)
{
  const unsigned char * D.42520;
  const unsigned char * D.42518;
  const ptrdiff_t _Num;
  unsigned char * D.42516;
  long int __first.12_5;
  long int __last.11_7;
  long unsigned int _Num.13_13;
  sizetype _Num.14_14;
  unsigned char * _15;

  <bb 2> [100.00%]:
  __last.11_7 = (long int) __last_4(D);
  __first.12_5 = (long int) __first_6(D);
  _Num_12 = __last.11_7 - __first.12_5;
  if (_Num_12 != 0)
    goto <bb 3>; [36.64%]
  else
    goto <bb 4>; [63.36%]

  <bb 3> [36.64%]:
  _Num.13_13 = (long unsigned int) _Num_12;
  memmove (__result_8(D), __first_6(D), _Num.13_13);

  <bb 4> [100.00%]:
  _Num.14_14 = (sizetype) _Num_12;
  _15 = __result_8(D) + _Num.14_14;
  return _15;

}



;; Function __gnu_cxx::char_traits<unsigned char>::copy(unsigned char*, unsigned char const*, unsigned long) (_ZN9__gnu_cxx11char_traitsIhE4copyEPhPKhm, funcdef_no=2474, decl_uid=29568, cgraph_uid=1215, symbol_order=1218)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__s1 = &NONLOCAL
__s2 = &NONLOCAL
__n = &NONLOCAL
_1 = __s2
__last.11_8 = _1
__first.12_9 = __s2
_Num_10 = __n
_Num.13_11 = __n
doubledereftmp(16) = *__s2
*__s1 = doubledereftmp(16)
_Num.14_12 = __n
_13 = __s1
ESCAPED = __s1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as doubledereftmp(16)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__s1 = { NONLOCAL }
__s2 = { NONLOCAL } same as __s1
__n = { NONLOCAL } same as __s1
_1 = { NONLOCAL } same as __s1
__last.11_8 = { NONLOCAL } same as __s1
__first.12_9 = { NONLOCAL } same as __s1
_Num_10 = { NONLOCAL } same as __s1
_Num.13_11 = { NONLOCAL } same as __s1
doubledereftmp(16) = { ESCAPED NONLOCAL }
_Num.14_12 = { NONLOCAL } same as __s1
_13 = { NONLOCAL } same as __s1


Alias information for __gnu_cxx::char_traits<unsigned char>::copy(unsigned char*, unsigned char const*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_1, points-to non-local, points-to NULL, points-to vars: { }
__s2_2(D), points-to non-local, points-to NULL, points-to vars: { }
__s1_5(D), points-to non-local, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to NULL, points-to vars: { }

__gnu_cxx::char_traits<unsigned char>::copy(unsigned char*, unsigned char const*, unsigned long) (char_type * __s1, const char_type * __s2, size_t __n)
{
  const ptrdiff_t _Num;
  unsigned char * D.42527;
  const char_type * _1;
  long int __last.11_8;
  long int __first.12_9;
  long unsigned int _Num.13_11;
  sizetype _Num.14_12;
  unsigned char * _13;

  <bb 2> [100.00%]:
  _1 = __s2_2(D) + __n_3(D);
  __last.11_8 = (long int) _1;
  __first.12_9 = (long int) __s2_2(D);
  _Num_10 = (const ptrdiff_t) __n_3(D);
  if (_Num_10 != 0)
    goto <bb 3>; [36.64%]
  else
    goto <bb 4>; [63.36%]

  <bb 3> [36.64%]:
  _Num.13_11 = __n_3(D);
  memmove (__s1_5(D), __s2_2(D), _Num.13_11);

  <bb 4> [100.00%]:
  _Num.14_12 = __n_3(D);
  _13 = __s1_5(D) + __n_3(D);
  return __s1_5(D);

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_S_copy(unsigned char*, unsigned char const*, unsigned long) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE7_S_copyEPhPKhm, funcdef_no=2424, decl_uid=29933, cgraph_uid=1165, symbol_order=1168)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__d = &NONLOCAL
__s = &NONLOCAL
__n = &NONLOCAL
_8 = *__s
*__d = _8
ESCAPED = __d
ESCAPED = __s
ESCAPED = __n

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _8
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__d = { NONLOCAL }
__s = { NONLOCAL } same as __d
__n = { NONLOCAL } same as __d
_8 = { ESCAPED NONLOCAL }
_ZN9__gnu_cxx11char_traitsIhE4copyEPhPKhm = { }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_S_copy(unsigned char*, unsigned char const*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__d_4(D), points-to non-local, points-to NULL, points-to vars: { }
__s_5(D), points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_S_copy(unsigned char*, unsigned char const*, unsigned long) (unsigned char * __d, const unsigned char * __s, size_type __n)
{
  unsigned char _8;

  <bb 2> [0.00%]:
  if (__n_2(D) == 1)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]

  <bb 3> [100.00%]:
  _8 = MEM[(const char_type &)__s_5(D)];
  MEM[(char_type &)__d_4(D)] = _8;
  goto <bb 5>; [100.00%]

  <bb 4> [0.00%]:
  __gnu_cxx::char_traits<unsigned char>::copy (__d_4(D), __s_5(D), __n_2(D));

  <bb 5> [0.00%]:
  return;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_mutate(unsigned long, unsigned long, unsigned char const*, unsigned long) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE9_M_mutateEmmPKhm, funcdef_no=2425, decl_uid=29979, cgraph_uid=1166, symbol_order=1169)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pos = &NONLOCAL
__len1 = &NONLOCAL
__s = &NONLOCAL
__len2 = &NONLOCAL
_45 = *this + 64
_2 = _45
_2 = __pos
__how_much_26 = _2
__how_much_26 = __len1
_23 = *this + 64
_4 = _23
_4 = __len2
_5 = _4
_5 = __len1
__new_capacity = _5
_38 = *this
_34 = this + UNKNOWN
iftmp.9_30 = *this + 128
iftmp.9_27 = &NONLOCAL
iftmp.9_27 = iftmp.9_30
ESCAPED = this
ESCAPED = &__new_capacity
ESCAPED = iftmp.9_27
_32 = NONLOCAL
_47 = *this
_46 = *_47
*_32 = _46
ESCAPED = _32
ESCAPED = _47
ESCAPED = __pos
_10 = _8
_10 = _9
_11 = _32
_48 = *__s
*_11 = _48
ESCAPED = _11
ESCAPED = __s
ESCAPED = __len2
_50 = *this
_13 = __pos
_13 = __len1
_14 = _50
_15 = __pos
_15 = __len2
_16 = _32
_49 = *_14
*_16 = _49
ESCAPED = _16
ESCAPED = _14
ESCAPED = __how_much_26
_51 = *this
_52 = this + UNKNOWN
ESCAPED = _51
*this = _32
__new_capacity.15_17 = __new_capacity
*this + 128 = __new_capacity.15_17

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL __new_capacity }
NONLOCAL = { ESCAPED NONLOCAL } same as _32
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pos = { NONLOCAL } same as this
__len1 = { NONLOCAL } same as this
__s = { NONLOCAL } same as this
__len2 = { NONLOCAL } same as this
_45 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
__how_much_26 = { ESCAPED NONLOCAL } same as _2
_23 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _4
__new_capacity = { ESCAPED NONLOCAL } same as __new_capacity.15_17
_38 = { ESCAPED NONLOCAL }
_34 = { NONLOCAL }
iftmp.9_30 = { ESCAPED NONLOCAL }
iftmp.9_27 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE9_M_createERmm = { }
_32 = { ESCAPED NONLOCAL }
_47 = { ESCAPED NONLOCAL } same as _38
_46 = { ESCAPED NONLOCAL }
_ZN9__gnu_cxx11char_traitsIhE4copyEPhPKhm = { }
_8 = { }
_9 = { }
_10 = { }
_11 = { ESCAPED NONLOCAL } same as _32
_48 = { ESCAPED NONLOCAL }
_50 = { ESCAPED NONLOCAL } same as _38
_13 = { NONLOCAL } same as this
_14 = { ESCAPED NONLOCAL } same as _38
_15 = { NONLOCAL } same as this
_16 = { ESCAPED NONLOCAL } same as _32
_49 = { ESCAPED NONLOCAL }
_51 = { ESCAPED NONLOCAL } same as _38
_52 = { NONLOCAL }
_ZdlPv = { }
__new_capacity.15_17 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_mutate(unsigned long, unsigned long, unsigned char const*, unsigned long)

Aliased symbols

__new_capacity, UID D.40685, size_type, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.40685 } (escaped)

Flow-insensitive points-to information

_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_14, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_22(D), points-to non-local, points-to NULL, points-to vars: { }
_32, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_34, points-to non-local, points-to NULL, points-to vars: { }
__s_36(D), points-to non-local, points-to NULL, points-to vars: { }
_38, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_47, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_50, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_51, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_52, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_mutate(unsigned long, unsigned long, unsigned char const*, unsigned long) (struct basic_string * const this, size_type __pos, size_type __len1, const unsigned char * __s, size_type __len2)
{
  unsigned char * D.42550;
  unsigned char * D.42542;
  size_type D.42537;
  size_type D.42535;
  size_type D.42533;
  unsigned char * __r;
  size_type __new_capacity;
  const size_type __how_much;
  long unsigned int _2;
  long unsigned int _4;
  long unsigned int _5;
  bool _8;
  bool _9;
  bool _10;
  unsigned char * _11;
  sizetype _13;
  unsigned char * _14;
  sizetype _15;
  unsigned char * _16;
  long unsigned int __new_capacity.15_17;
  long unsigned int _23;
  long unsigned int iftmp.9_27;
  long unsigned int iftmp.9_30;
  unsigned char * _32;
  const unsigned char[16] * _34;
  unsigned char * _38;
  long unsigned int _45;
  unsigned char _46;
  unsigned char * _47;
  unsigned char _48;
  unsigned char _49;
  unsigned char * _50;
  unsigned char * _51;
  const unsigned char[16] * _52;

  <bb 2> [100.00%]:
  _45 = MEM[(const struct basic_string *)this_22(D)]._M_string_length;
  _2 = _45 - __pos_24(D);
  __how_much_26 = _2 - __len1_25(D);
  _23 = MEM[(const struct basic_string *)this_22(D)]._M_string_length;
  _4 = _23 + __len2_28(D);
  _5 = _4 - __len1_25(D);
  __new_capacity = _5;
  _38 = MEM[(const struct basic_string *)this_22(D)]._M_dataplus._M_p;
  _34 = &MEM[(const struct basic_string *)this_22(D)].D.29808._M_local_buf;
  if (_34 == _38)
    goto <bb 4>; [16.15%]
  else
    goto <bb 3>; [83.85%]

  <bb 3> [83.85%]:
  iftmp.9_30 = MEM[(const struct basic_string *)this_22(D)].D.29808._M_allocated_capacity;

  <bb 4> [100.00%]:
  # iftmp.9_27 = PHI <15(2), iftmp.9_30(3)>
  _32 = std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_create (this_22(D), &__new_capacity, iftmp.9_27);

  <bb 5> [0.00%]:
  if (__pos_24(D) != 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 6> [100.00%]:
  _47 = MEM[(const struct basic_string *)this_22(D)]._M_dataplus._M_p;
  if (__pos_24(D) == 1)
    goto <bb 7>; [47.12%]
  else
    goto <bb 8>; [52.88%]

  <bb 7> [47.12%]:
  _46 = MEM[(const char_type &)_47];
  MEM[(char_type &)_32] = _46;
  goto <bb 9>; [100.00%]

  <bb 8> [52.88%]:
  __gnu_cxx::char_traits<unsigned char>::copy (_32, _47, __pos_24(D));

  <bb 9> [0.00%]:
  _8 = __s_36(D) != 0B;
  _9 = __len2_28(D) != 0;
  _10 = _8 & _9;
  if (_10 != 0)
    goto <bb 10>; [0.00%]
  else
    goto <bb 13>; [0.00%]

  <bb 10> [100.00%]:
  _11 = _32 + __pos_24(D);
  if (__len2_28(D) == 1)
    goto <bb 11>; [47.12%]
  else
    goto <bb 12>; [52.88%]

  <bb 11> [47.12%]:
  _48 = MEM[(const char_type &)__s_36(D)];
  MEM[(char_type &)_11] = _48;
  goto <bb 13>; [100.00%]

  <bb 12> [52.88%]:
  __gnu_cxx::char_traits<unsigned char>::copy (_11, __s_36(D), __len2_28(D));

  <bb 13> [0.00%]:
  if (__how_much_26 != 0)
    goto <bb 14>; [0.00%]
  else
    goto <bb 17>; [0.00%]

  <bb 14> [100.00%]:
  _50 = MEM[(const struct basic_string *)this_22(D)]._M_dataplus._M_p;
  _13 = __pos_24(D) + __len1_25(D);
  _14 = _50 + _13;
  _15 = __pos_24(D) + __len2_28(D);
  _16 = _32 + _15;
  if (__how_much_26 == 1)
    goto <bb 15>; [47.12%]
  else
    goto <bb 16>; [52.88%]

  <bb 15> [47.12%]:
  _49 = MEM[(const char_type &)_14];
  MEM[(char_type &)_16] = _49;
  goto <bb 17>; [100.00%]

  <bb 16> [52.88%]:
  __gnu_cxx::char_traits<unsigned char>::copy (_16, _14, __how_much_26);

  <bb 17> [100.00%]:
  _51 = MEM[(const struct basic_string *)this_22(D)]._M_dataplus._M_p;
  _52 = &MEM[(const struct basic_string *)this_22(D)].D.29808._M_local_buf;
  if (_51 != _52)
    goto <bb 18>; [57.44%]
  else
    goto <bb 19>; [42.56%]

  <bb 18> [57.44%]:
  operator delete (_51);

  <bb 19> [100.00%]:
  this_22(D)->_M_dataplus._M_p = _32;
  __new_capacity.15_17 = __new_capacity;
  this_22(D)->D.29808._M_allocated_capacity = __new_capacity.15_17;
  __new_capacity ={v} {CLOBBER};
  return;

<L9> [0.00%]:
  __new_capacity ={v} {CLOBBER};
  resx 1

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_replace(unsigned long, unsigned long, unsigned char const*, unsigned long) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE10_M_replaceEmmPKhm, funcdef_no=2369, decl_uid=30451, cgraph_uid=1110, symbol_order=1113)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__pos = &NONLOCAL
__len1 = &NONLOCAL
__s = &NONLOCAL
__len2 = &NONLOCAL
_64 = *this + 64
_65 = __len1
_65 = _64
_66 = _65
_66 = &NONLOCAL
ESCAPED = &STRING
_63 = *this + 64
_1 = __len2
_1 = _63
__new_size_41 = _1
__new_size_41 = __len1
_50 = *this
_47 = this + UNKNOWN
iftmp.9_42 = *this + 128
iftmp.9_39 = &NONLOCAL
iftmp.9_39 = iftmp.9_42
_71 = *this
__p_48 = _71
_4 = _63
_4 = __pos
__how_much_49 = _4
__how_much_49 = __len1
_67 = *this
iftmp.10_43 = &NONLOCAL
_68 = *this + 64
_69 = _67
iftmp.10_83 = &NONLOCAL
iftmp.10_40 = &NULL
_12 = _10
_12 = _11
_7 = _5
_7 = _6
_8 = __p_48
_9 = __p_48
_72 = *_8
*_9 = _72
ESCAPED = _9
ESCAPED = _8
ESCAPED = __how_much_49
_73 = *__s
*__p_48 = _73
ESCAPED = __p_48
ESCAPED = __s
ESCAPED = __len2
_74 = *__s
*__p_48 = _74
ESCAPED = __p_48
ESCAPED = __s
ESCAPED = __len2
_15 = _13
_15 = _14
_16 = __p_48
_17 = __p_48
_75 = *_16
*_17 = _75
ESCAPED = _17
ESCAPED = _16
ESCAPED = __how_much_49
_18 = __s
_19 = __p_48
_76 = *__s
*__p_48 = _76
ESCAPED = __p_48
ESCAPED = __s
ESCAPED = __len2
_20 = __p_48
_21 = __len2
_21 = __len1
_22 = __s
_77 = *_22
*__p_48 = _77
ESCAPED = __p_48
ESCAPED = _22
ESCAPED = __len2
_23 = __p_48
_24 = _23
__s.6_25 = __s
_26 = _24
_26 = __s.6_25
__nleft_54 = _26
_79 = *__s
*__p_48 = _79
ESCAPED = __p_48
ESCAPED = __s
ESCAPED = __nleft_54
_27 = __len2
_27 = __nleft_54
_28 = __p_48
_29 = __p_48
_78 = *_28
*_29 = _78
ESCAPED = _29
ESCAPED = _28
ESCAPED = _27
ESCAPED = this
ESCAPED = __pos
ESCAPED = __len1
ESCAPED = __s
ESCAPED = __len2
*this + 64 = __new_size_41
_80 = *this
_81 = _80
derefaddrtmp(73) = &NULL
*_81 = derefaddrtmp(73)
ESCAPED = this

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL } same as _72
NONLOCAL = { NULL STRING ESCAPED NONLOCAL } same as _72
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__pos = { NONLOCAL } same as this
__len1 = { NONLOCAL } same as this
__s = { NONLOCAL } same as this
__len2 = { NONLOCAL } same as this
_64 = { ESCAPED NONLOCAL }
_65 = { ESCAPED NONLOCAL }
_66 = { ESCAPED NONLOCAL } same as _65
_ZSt20__throw_length_errorPKc = { }
_63 = { ESCAPED NONLOCAL }
_1 = { ESCAPED NONLOCAL }
__new_size_41 = { ESCAPED NONLOCAL } same as _1
_50 = { ESCAPED NONLOCAL }
_47 = { NONLOCAL }
iftmp.9_42 = { ESCAPED NONLOCAL }
iftmp.9_39 = { ESCAPED NONLOCAL }
_71 = { ESCAPED NONLOCAL } same as _50
__p_48 = { ESCAPED NONLOCAL } same as _50
_4 = { ESCAPED NONLOCAL } same as _1
__how_much_49 = { ESCAPED NONLOCAL } same as _1
_67 = { ESCAPED NONLOCAL } same as _50
iftmp.10_43 = { NONLOCAL } same as this
_68 = { ESCAPED NONLOCAL }
_69 = { ESCAPED NONLOCAL } same as _50
iftmp.10_83 = { NONLOCAL } same as this
iftmp.10_40 = { NULL }
_10 = { }
_11 = { }
_12 = { }
_5 = { }
_6 = { }
_7 = { }
_8 = { ESCAPED NONLOCAL } same as _50
_9 = { ESCAPED NONLOCAL } same as _50
_72 = { NULL STRING ESCAPED NONLOCAL }
_ZN9__gnu_cxx11char_traitsIhE4moveEPhPKhm = { }
_73 = { ESCAPED NONLOCAL }
_ZN9__gnu_cxx11char_traitsIhE4copyEPhPKhm = { }
_74 = { ESCAPED NONLOCAL } same as _73
_13 = { }
_14 = { }
_15 = { }
_16 = { ESCAPED NONLOCAL } same as _50
_17 = { ESCAPED NONLOCAL } same as _50
_75 = { NULL STRING ESCAPED NONLOCAL } same as _72
_18 = { NONLOCAL } same as this
_19 = { ESCAPED NONLOCAL } same as _50
_76 = { ESCAPED NONLOCAL } same as _73
_20 = { ESCAPED NONLOCAL } same as _50
_21 = { NONLOCAL } same as this
_22 = { NONLOCAL } same as this
_77 = { ESCAPED NONLOCAL }
_23 = { ESCAPED NONLOCAL } same as _50
_24 = { ESCAPED NONLOCAL } same as _50
__s.6_25 = { NONLOCAL } same as this
_26 = { ESCAPED NONLOCAL }
__nleft_54 = { ESCAPED NONLOCAL } same as _26
_79 = { ESCAPED NONLOCAL } same as _73
_27 = { ESCAPED NONLOCAL } same as _26
_28 = { ESCAPED NONLOCAL } same as _50
_29 = { ESCAPED NONLOCAL } same as _50
_78 = { NULL STRING ESCAPED NONLOCAL } same as _72
_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE9_M_mutateEmmPKhm = { }
_80 = { ESCAPED NONLOCAL } same as _50
_81 = { ESCAPED NONLOCAL } same as _50
derefaddrtmp(73) = { NULL } same as iftmp.10_40


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_replace(unsigned long, unsigned long, unsigned char const*, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_18, points-to non-local, points-to NULL, points-to vars: { }
_19, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_22, points-to non-local, points-to NULL, points-to vars: { }
_23, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_28, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_29, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_35(D), points-to non-local, points-to NULL, points-to vars: { }
__s_45(D), points-to non-local, points-to NULL, points-to vars: { }
_47, points-to non-local, points-to NULL, points-to vars: { }
__p_48, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_50, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_67, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_69, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_71, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_80, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_81, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_replace(unsigned long, unsigned long, unsigned char const*, unsigned long) (struct basic_string * const this, size_type __pos, size_type __len1, const unsigned char * __s, const size_type __len2)
{
  unsigned char * D.42569;
  bool D.42567;
  size_type D.42560;
  size_type D.42558;
  const size_type __nleft;
  const size_type __how_much;
  unsigned char * __p;
  const size_type __new_size;
  const size_type __old_size;
  long unsigned int _1;
  long unsigned int _4;
  bool _5;
  bool _6;
  bool _7;
  unsigned char * _8;
  unsigned char * _9;
  bool _10;
  bool _11;
  bool _12;
  bool _13;
  bool _14;
  bool _15;
  unsigned char * _16;
  unsigned char * _17;
  const unsigned char * _18;
  unsigned char * _19;
  unsigned char * _20;
  sizetype _21;
  const unsigned char * _22;
  unsigned char * _23;
  long int _24;
  long int __s.6_25;
  long int _26;
  long unsigned int _27;
  unsigned char * _28;
  unsigned char * _29;
  long unsigned int iftmp.9_39;
  bool iftmp.10_40;
  long unsigned int iftmp.9_42;
  bool iftmp.10_43;
  const unsigned char[16] * _47;
  unsigned char * _50;
  long unsigned int _63;
  long unsigned int _64;
  long unsigned int _65;
  long unsigned int _66;
  unsigned char * _67;
  long unsigned int _68;
  unsigned char * _69;
  unsigned char * _71;
  unsigned char _72;
  unsigned char _73;
  unsigned char _74;
  unsigned char _75;
  unsigned char _76;
  unsigned char _77;
  unsigned char _78;
  unsigned char _79;
  unsigned char * _80;
  unsigned char * _81;
  bool iftmp.10_83;

  <bb 2> [100.00%]:
  _64 = MEM[(const struct basic_string *)this_35(D)]._M_string_length;
  _65 = __len1_36(D) - _64;
  _66 = _65 + 9223372036854775807;
  if (__len2_37(D) > _66)
    goto <bb 3>; [0.04%]
  else
    goto <bb 4>; [99.96%]

  <bb 3> [0.04%]:
  std::__throw_length_error ("basic_string::_M_replace");

  <bb 4> [100.00%]:
  _63 = MEM[(const struct basic_string *)this_35(D)]._M_string_length;
  _1 = __len2_37(D) + _63;
  __new_size_41 = _1 - __len1_36(D);
  _50 = MEM[(const struct basic_string *)this_35(D)]._M_dataplus._M_p;
  _47 = &MEM[(const struct basic_string *)this_35(D)].D.29808._M_local_buf;
  if (_47 == _50)
    goto <bb 6>; [16.15%]
  else
    goto <bb 5>; [83.85%]

  <bb 5> [83.85%]:
  iftmp.9_42 = MEM[(const struct basic_string *)this_35(D)].D.29808._M_allocated_capacity;

  <bb 6> [100.00%]:
  # iftmp.9_39 = PHI <15(4), iftmp.9_42(5)>
  if (iftmp.9_39 >= __new_size_41)
    goto <bb 7>; [0.00%]
  else
    goto <bb 42>; [0.00%]

  <bb 7> [100.00%]:
  _71 = MEM[(const struct basic_string *)this_35(D)]._M_dataplus._M_p;
  __p_48 = _71 + __pos_44(D);
  _4 = _63 - __pos_44(D);
  __how_much_49 = _4 - __len1_36(D);
  _67 = MEM[(const struct basic_string *)this_35(D)]._M_dataplus._M_p;
  if (__s_45(D) < _67)
    goto <bb 8>; [46.00%]
  else
    goto <bb 9>; [54.00%]

  <bb 8> [46.00%]:
  # iftmp.10_43 = PHI <1(7)>
  goto <bb 12>; [100.00%]

  <bb 9> [54.00%]:
  _68 = MEM[(const struct basic_string *)this_35(D)]._M_string_length;
  _69 = _67 + _68;
  if (__s_45(D) > _69)
    goto <bb 10>; [54.00%]
  else
    goto <bb 11>; [46.00%]

  <bb 10> [29.16%]:
  # iftmp.10_83 = PHI <1(9)>
  goto <bb 12>; [100.00%]

  <bb 11> [24.84%]:
  # iftmp.10_40 = PHI <0(9)>
  _10 = __len2_37(D) != 0;
  _11 = __len1_36(D) >= __len2_37(D);
  _12 = _10 & _11;
  if (_12 != 0)
    goto <bb 20>; [0.00%]
  else
    goto <bb 23>; [0.00%]

  <bb 12> [0.00%]:
  _5 = __how_much_49 != 0;
  _6 = __len1_36(D) != __len2_37(D);
  _7 = _5 & _6;
  if (_7 != 0)
    goto <bb 13>; [0.00%]
  else
    goto <bb 16>; [0.00%]

  <bb 13> [100.00%]:
  _8 = __p_48 + __len1_36(D);
  _9 = __p_48 + __len2_37(D);
  if (__how_much_49 == 1)
    goto <bb 14>; [47.12%]
  else
    goto <bb 15>; [52.88%]

  <bb 14> [47.12%]:
  _72 = MEM[(const char_type &)_8];
  MEM[(char_type &)_9] = _72;
  goto <bb 16>; [100.00%]

  <bb 15> [52.88%]:
  __gnu_cxx::char_traits<unsigned char>::move (_9, _8, __how_much_49);

  <bb 16> [0.00%]:
  if (__len2_37(D) != 0)
    goto <bb 17>; [0.00%]
  else
    goto <bb 43>; [0.00%]

  <bb 17> [100.00%]:
  if (__len2_37(D) == 1)
    goto <bb 18>; [47.12%]
  else
    goto <bb 19>; [52.88%]

  <bb 18> [47.12%]:
  _73 = MEM[(const char_type &)__s_45(D)];
  MEM[(char_type &)__p_48] = _73;
  goto <bb 43>; [100.00%]

  <bb 19> [52.88%]:
  __gnu_cxx::char_traits<unsigned char>::copy (__p_48, __s_45(D), __len2_37(D));
  goto <bb 43>; [100.00%]

  <bb 20> [100.00%]:
  if (__len2_37(D) == 1)
    goto <bb 21>; [47.12%]
  else
    goto <bb 22>; [52.88%]

  <bb 21> [47.12%]:
  _74 = MEM[(const char_type &)__s_45(D)];
  MEM[(char_type &)__p_48] = _74;
  goto <bb 23>; [100.00%]

  <bb 22> [52.88%]:
  __gnu_cxx::char_traits<unsigned char>::move (__p_48, __s_45(D), __len2_37(D));

  <bb 23> [0.00%]:
  _13 = __how_much_49 != 0;
  _14 = __len1_36(D) != __len2_37(D);
  _15 = _13 & _14;
  if (_15 != 0)
    goto <bb 24>; [0.00%]
  else
    goto <bb 27>; [0.00%]

  <bb 24> [100.00%]:
  _16 = __p_48 + __len1_36(D);
  _17 = __p_48 + __len2_37(D);
  if (__how_much_49 == 1)
    goto <bb 25>; [47.12%]
  else
    goto <bb 26>; [52.88%]

  <bb 25> [47.12%]:
  _75 = MEM[(const char_type &)_16];
  MEM[(char_type &)_17] = _75;
  goto <bb 27>; [100.00%]

  <bb 26> [52.88%]:
  __gnu_cxx::char_traits<unsigned char>::move (_17, _16, __how_much_49);

  <bb 27> [0.00%]:
  if (__len1_36(D) < __len2_37(D))
    goto <bb 28>; [0.00%]
  else
    goto <bb 43>; [0.00%]

  <bb 28> [0.00%]:
  _18 = __s_45(D) + __len2_37(D);
  _19 = __p_48 + __len1_36(D);
  if (_18 <= _19)
    goto <bb 29>; [0.00%]
  else
    goto <bb 32>; [0.00%]

  <bb 29> [100.00%]:
  if (__len2_37(D) == 1)
    goto <bb 30>; [47.12%]
  else
    goto <bb 31>; [52.88%]

  <bb 30> [47.12%]:
  _76 = MEM[(const char_type &)__s_45(D)];
  MEM[(char_type &)__p_48] = _76;
  goto <bb 43>; [100.00%]

  <bb 31> [52.88%]:
  __gnu_cxx::char_traits<unsigned char>::move (__p_48, __s_45(D), __len2_37(D));
  goto <bb 43>; [100.00%]

  <bb 32> [0.00%]:
  _20 = __p_48 + __len1_36(D);
  if (_20 <= __s_45(D))
    goto <bb 33>; [0.00%]
  else
    goto <bb 36>; [0.00%]

  <bb 33> [100.00%]:
  _21 = __len2_37(D) - __len1_36(D);
  _22 = __s_45(D) + _21;
  if (__len2_37(D) == 1)
    goto <bb 34>; [47.12%]
  else
    goto <bb 35>; [52.88%]

  <bb 34> [47.12%]:
  _77 = MEM[(const char_type &)_22];
  MEM[(char_type &)__p_48] = _77;
  goto <bb 43>; [100.00%]

  <bb 35> [52.88%]:
  __gnu_cxx::char_traits<unsigned char>::copy (__p_48, _22, __len2_37(D));
  goto <bb 43>; [100.00%]

  <bb 36> [100.00%]:
  _23 = __p_48 + __len1_36(D);
  _24 = (long int) _23;
  __s.6_25 = (long int) __s_45(D);
  _26 = _24 - __s.6_25;
  __nleft_54 = (const size_type) _26;
  if (__nleft_54 == 1)
    goto <bb 37>; [47.12%]
  else
    goto <bb 38>; [52.88%]

  <bb 37> [47.12%]:
  _79 = MEM[(const char_type &)__s_45(D)];
  MEM[(char_type &)__p_48] = _79;
  goto <bb 39>; [100.00%]

  <bb 38> [52.88%]:
  __gnu_cxx::char_traits<unsigned char>::move (__p_48, __s_45(D), __nleft_54);

  <bb 39> [100.00%]:
  _27 = __len2_37(D) - __nleft_54;
  _28 = __p_48 + __len2_37(D);
  _29 = __p_48 + __nleft_54;
  if (_27 == 1)
    goto <bb 40>; [47.12%]
  else
    goto <bb 41>; [52.88%]

  <bb 40> [47.12%]:
  _78 = MEM[(const char_type &)_28];
  MEM[(char_type &)_29] = _78;
  goto <bb 43>; [100.00%]

  <bb 41> [52.88%]:
  __gnu_cxx::char_traits<unsigned char>::copy (_29, _28, _27);
  goto <bb 43>; [100.00%]

  <bb 42> [0.00%]:
  std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_mutate (this_35(D), __pos_44(D), __len1_36(D), __s_45(D), __len2_37(D));

  <bb 43> [100.00%]:
  this_35(D)->_M_string_length = __new_size_41;
  _80 = MEM[(const struct basic_string *)this_35(D)]._M_dataplus._M_p;
  _81 = _80 + __new_size_41;
  MEM[(char_type &)_81] = 0;
  return this_35(D);

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::assign(unsigned char const*) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE6assignEPKh, funcdef_no=2307, decl_uid=30224, cgraph_uid=1050, symbol_order=1053)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__s = &NONLOCAL
__i_5 = &NULL
__i_5 = __i_14
_12 = __s
_13 = *_12
__i_14 = __i_5
__i_14 = &NONLOCAL
_15 = __i_5
_6 = __i_5
_1 = __i_5
_8 = *this + 64
ESCAPED = this
ESCAPED = &NULL
ESCAPED = _8
ESCAPED = __s
ESCAPED = _1
_10 = NONLOCAL
ESCAPED = _10

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _10
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__s = { NONLOCAL } same as this
__i_5 = { NULL NONLOCAL }
__i_14 = { NULL NONLOCAL } same as __i_5
_12 = { NONLOCAL } same as this
_13 = { ESCAPED NONLOCAL }
_15 = { NULL NONLOCAL } same as __i_5
_6 = { NULL NONLOCAL } same as __i_5
_1 = { NULL NONLOCAL } same as __i_5
_8 = { ESCAPED NONLOCAL }
_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE10_M_replaceEmmPKhm = { }
_10 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::assign(unsigned char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

__s_4(D), points-to non-local, points-to NULL, points-to vars: { }
this_7(D), points-to non-local, points-to NULL, points-to vars: { }
_10, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::assign(unsigned char const*) (struct basic_string * const this, const unsigned char * __s)
{
  size_t __i;
  size_t D.42601;
  size_type D.42598;
  long unsigned int _1;
  long unsigned int _6;
  long unsigned int _8;
  struct basic_string & _10;
  const char_type * _12;
  unsigned char _13;

  <bb 2> [15.00%]:

  <bb 3> [100.00%]:
  # __i_5 = PHI <0(2), __i_14(4)>
  _12 = __s_4(D) + __i_5;
  _13 = *_12;
  if (_13 != 0)
    goto <bb 4>; [85.00%]
  else
    goto <bb 5>; [15.00%]

  <bb 4> [85.00%]:
  __i_14 = __i_5 + 1;
  goto <bb 3>; [100.00%]

  <bb 5> [100.00%]:
  _15 = __i_5;
  _6 = __i_5;
  _1 = __i_5;
  _8 = MEM[(const struct basic_string *)this_7(D)]._M_string_length;
  _10 = std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::_M_replace (this_7(D), 0, _8, __s_4(D), _1);
  return _10;

}



;; Function std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::operator=(unsigned char const*) (_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEEaSEPKh, funcdef_no=2183, decl_uid=30076, cgraph_uid=924, symbol_order=927)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__s = &NONLOCAL
ESCAPED = this
ESCAPED = __s
_5 = NONLOCAL
ESCAPED = _5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__s = { NONLOCAL } same as this
_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE6assignEPKh = { }
_5 = { ESCAPED NONLOCAL }


Alias information for std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::operator=(unsigned char const*)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

this_2(D), points-to non-local, points-to NULL, points-to vars: { }
__s_3(D), points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::operator=(unsigned char const*) (struct basic_string * const this, const unsigned char * __s)
{
  struct basic_string & _5;

  <bb 2> [0.00%]:
  _5 = std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::assign (this_2(D), __s_3(D));
  return _5;

}



;; Function pbzip2::BZ2StreamScanner::init(int, unsigned long) (_ZN6pbzip216BZ2StreamScanner4initEim, funcdef_no=1925, decl_uid=29303, cgraph_uid=666, symbol_order=669)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
hInFile = &NONLOCAL
inBuffCapacity = &NONLOCAL
_1 = *this
_3 = *_1
ESCAPED = this
bz2ZeroHeader = &NONLOCAL
bz2ZeroHeader = &NONLOCAL
bz2ZeroHeader = &NONLOCAL
bz2ZeroHeader = &NONLOCAL
bz2ZeroHeader = &NONLOCAL
bz2ZeroHeader = &NONLOCAL
bz2ZeroHeader = &NONLOCAL
bz2ZeroHeader = &NONLOCAL
bz2ZeroHeader = &NONLOCAL
bz2ZeroHeader = &NONLOCAL
bz2ZeroHeader = &NULL
*this + 64 = hInFile
derefaddrtmp(15) = &NULL
*this + 96 = derefaddrtmp(15)
_4 = this + UNKNOWN
ESCAPED = _4
ESCAPED = &bz2header
_54 = NONLOCAL
_5 = this + UNKNOWN
ESCAPED = _5
ESCAPED = &bz2ZeroHeader
_51 = NONLOCAL
derefaddrtmp(21) = &NULL
*this + 640 = derefaddrtmp(21)
derefaddrtmp(22) = &NULL
*this + 960 = derefaddrtmp(22)
derefaddrtmp(23) = &NULL
*this + 1536 = derefaddrtmp(23)
derefaddrtmp(24) = &NULL
*this + 648 = derefaddrtmp(24)
derefaddrtmp(25) = &NULL
*this + 1408 = derefaddrtmp(25)
derefaddrtmp(26) = &NONLOCAL
*this + 1472 = derefaddrtmp(26)
derefaddrtmp(27) = &NULL
*this + 1568 = derefaddrtmp(27)
derefaddrtmp(28) = &NULL
*this + 1600 = derefaddrtmp(28)
_72 = *this + 64
_8 = _72
_8 = &NONLOCAL
_73 = *this + 64
inBuffCapacity_55 = _73
inBuffCapacity_55 = &NONLOCAL
inBuffCapacity_18 = inBuffCapacity
inBuffCapacity_18 = inBuffCapacity_55
ESCAPED = inBuffCapacity_18
_ZSt7nothrow = NONLOCAL
ESCAPED = &_ZSt7nothrow
_11 = NONLOCAL
*this + 704 = _11
_12 = *this + 704
_13 = *this + 1536
_14 = _13
_14 = &NONLOCAL
*this + 1536 = _14
derefaddrtmp(40) = &NULL
*this + 768 = derefaddrtmp(40)
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &STRING
*this + 960 = inBuffCapacity_18
_15 = *this + 704
*this + 768 = _15
_16 = *this + 768
*this + 896 = _16
_17 = *this + 896
*this + 832 = _17
_19 = &NONLOCAL
_19 = &NULL
ESCAPED = _19

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL bz2header bz2ZeroHeader _ZSt7nothrow }
NONLOCAL = { ESCAPED NONLOCAL } same as _54
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
hInFile = { NONLOCAL } same as this
inBuffCapacity = { NONLOCAL } same as this
_1 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
bz2header = { ESCAPED NONLOCAL }
bz2ZeroHeader = { NULL ESCAPED NONLOCAL }
derefaddrtmp(15) = { NULL }
_4 = { NONLOCAL }
_ZNSt7__cxx1112basic_stringIhSt11char_traitsIhESaIhEE6assignEPKh = { }
_54 = { ESCAPED NONLOCAL }
_5 = { NONLOCAL }
_51 = { ESCAPED NONLOCAL } same as _54
derefaddrtmp(21) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(22) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(23) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(24) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(25) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(26) = { NONLOCAL } same as this
derefaddrtmp(27) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(28) = { NULL } same as derefaddrtmp(15)
_72 = { ESCAPED NONLOCAL }
_8 = { ESCAPED NONLOCAL }
_73 = { ESCAPED NONLOCAL }
inBuffCapacity_55 = { ESCAPED NONLOCAL }
inBuffCapacity_18 = { ESCAPED NONLOCAL } same as inBuffCapacity_55
_ZnamRKSt9nothrow_t = { }
_ZSt7nothrow = { ESCAPED NONLOCAL }
_11 = { ESCAPED NONLOCAL } same as _54
_12 = { ESCAPED NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_14 = { ESCAPED NONLOCAL }
derefaddrtmp(40) = { NULL } same as derefaddrtmp(15)
_Z12handle_error8ExitFlagiPKcz = { }
_15 = { ESCAPED NONLOCAL }
_16 = { ESCAPED NONLOCAL }
_17 = { ESCAPED NONLOCAL }
_19 = { NULL NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::init(int, unsigned long)

Aliased symbols

bz2ZeroHeader, UID D.36325, CharType[11], is addressable
bz2header, UID D.36324, CharType[11], is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.11311 D.36324 D.36325 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_1, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_16, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
this_24(D), points-to non-local, points-to NULL, points-to vars: { }
_51, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_54, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::init(int, unsigned long) (struct BZ2StreamScanner * const this, int hInFile, size_t inBuffCapacity)
{
  size_type D.42613;
  size_type D.42611;
  struct basic_string & D.42609;
  struct basic_string & D.42606;
  CharType bz2ZeroHeader[11];
  CharType bz2header[11];
  int (*__vtbl_ptr_type) () * _1;
  int (*__vtbl_ptr_type) () _3;
  struct basic_string * _4;
  struct basic_string * _5;
  long unsigned int _8;
  void * _11;
  CharType * _12;
  unsigned int _13;
  unsigned int _14;
  CharType * _15;
  CharType * _16;
  CharType * _17;
  int _19;
  struct basic_string & _51;
  struct basic_string & _54;
  long unsigned int _72;
  long unsigned int _73;

  <bb 2> [0.00%]:
  _1 = this_24(D)->_vptr.BZ2StreamScanner;
  _3 = MEM[(int (*__vtbl_ptr_type) () *)_1 + 16B];
  OBJ_TYPE_REF(_3;(struct BZ2StreamScanner)this_24(D)->2) (this_24(D));

  <bb 3> [100.00%]:
  bz2header = "BZh91AY&SY";
  bz2ZeroHeader[0] = 66;
  bz2ZeroHeader[1] = 90;
  bz2ZeroHeader[2] = 104;
  bz2ZeroHeader[3] = 57;
  bz2ZeroHeader[4] = 23;
  bz2ZeroHeader[5] = 114;
  bz2ZeroHeader[6] = 69;
  bz2ZeroHeader[7] = 56;
  bz2ZeroHeader[8] = 80;
  bz2ZeroHeader[9] = 144;
  bz2ZeroHeader[10] = 0;
  this_24(D)->_hInFile = hInFile_38(D);
  this_24(D)->_eof = 0;
  _4 = &this_24(D)->_bz2Header;
  _54 = std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::assign (_4, &bz2header);

  <bb 4> [100.00%]:
  _5 = &this_24(D)->_bz2HeaderZero;
  _51 = std::__cxx11::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> >::assign (_5, &bz2ZeroHeader);

  <bb 5> [100.00%]:
  this_24(D)->_bz2HeaderFound = 0;
  this_24(D)->_inBuffCapacity = 0;
  this_24(D)->_errState = 0;
  this_24(D)->_searchStatus = 0;
  this_24(D)->_outBuffCapacityHint = 0;
  this_24(D)->_outBuffCapacityLimit = 1048576;
  this_24(D)->_outSequenceNumber = 0;
  this_24(D)->_streamNumber = 0;
  _72 = MEM[(const struct basic_string *)this_24(D) + 16B]._M_string_length;
  _8 = _72 * 2;
  if (_8 > inBuffCapacity_52(D))
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]

  <bb 6> [100.00%]:
  _73 = MEM[(const struct basic_string *)this_24(D) + 16B]._M_string_length;
  inBuffCapacity_55 = _73 * 2;

  <bb 7> [0.00%]:
  # inBuffCapacity_18 = PHI <inBuffCapacity_52(D)(5), inBuffCapacity_55(6)>
  _11 = operator new[] (inBuffCapacity_18, &nothrow);
  this_24(D)->_inBuff = _11;
  _12 = this_24(D)->_inBuff;
  if (_12 == 0B)
    goto <bb 8>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 8> [0.00%]:
  _13 = this_24(D)->_errState;
  _14 = _13 | 1;
  this_24(D)->_errState = _14;
  this_24(D)->_inBuffEnd = 0B;
  handle_error (1, -1, "pbzip2: *ERROR: Could not allocate memory (FileData)!  Aborting...\n");
  goto <bb 10>; [0.00%]

  <bb 9> [0.00%]:
  this_24(D)->_inBuffCapacity = inBuffCapacity_18;
  _15 = this_24(D)->_inBuff;
  this_24(D)->_inBuffEnd = _15;
  _16 = this_24(D)->_inBuffEnd;
  this_24(D)->_inBuffSearchPtr = _16;
  _17 = this_24(D)->_inBuffSearchPtr;
  this_24(D)->_inBuffCurrent = _17;

  <bb 10> [0.00%]:
  # _19 = PHI <-1(8), 0(9)>
  bz2header ={v} {CLOBBER};
  bz2ZeroHeader ={v} {CLOBBER};
  return _19;

<L7> [0.00%]:
  bz2header ={v} {CLOBBER};
  bz2ZeroHeader ={v} {CLOBBER};
  resx 1

}



;; Function pbzip2::BZ2StreamScanner::BZ2StreamScanner(int, unsigned long) (_ZN6pbzip216BZ2StreamScannerC2Eim, funcdef_no=1923, decl_uid=30766, cgraph_uid=664, symbol_order=667)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
hInFile = &NONLOCAL
inBuffCapacity = &NONLOCAL
_ZTVN6pbzip216BZ2StreamScannerE = NONLOCAL
derefaddrtmp(12) = &_ZTVN6pbzip216BZ2StreamScannerE
*this = derefaddrtmp(12)
_2 = this + UNKNOWN
_24 = this + UNKNOWN
*this = _24
derefaddrtmp(15) = &NULL
*this + 64 = derefaddrtmp(15)
derefaddrtmp(16) = &NULL
*this = derefaddrtmp(16)
_3 = this + UNKNOWN
_23 = this + UNKNOWN
*this = _23
derefaddrtmp(19) = &NULL
*this + 64 = derefaddrtmp(19)
derefaddrtmp(20) = &NULL
*this = derefaddrtmp(20)
derefaddrtmp(21) = &NULL
*this + 704 = derefaddrtmp(21)
derefaddrtmp(22) = &NULL
*this + 960 = derefaddrtmp(22)
_4 = this + UNKNOWN
derefaddrtmp(24) = &NULL
*this = derefaddrtmp(24)
derefaddrtmp(25) = &NULL
*this + 64 = derefaddrtmp(25)
derefaddrtmp(26) = &NULL
*this + 96 = derefaddrtmp(26)
derefaddrtmp(27) = &NULL
*this + 128 = derefaddrtmp(27)
derefaddrtmp(28) = &NULL
*this + 160 = derefaddrtmp(28)
derefaddrtmp(29) = &NONLOCAL
*this + 192 = derefaddrtmp(29)
derefaddrtmp(30) = &NULL
*this + 256 = derefaddrtmp(30)
derefaddrtmp(31) = &NULL
*this + 1024 = derefaddrtmp(31)
derefaddrtmp(32) = &NULL
*this + 1088 = derefaddrtmp(32)
ESCAPED = this
ESCAPED = hInFile
ESCAPED = inBuffCapacity
_5 = this + UNKNOWN
_25 = *this
_26 = this + UNKNOWN
ESCAPED = _25
_6 = this + UNKNOWN
_27 = *this
_28 = this + UNKNOWN
ESCAPED = _27

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL _ZTVN6pbzip216BZ2StreamScannerE }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
hInFile = { NONLOCAL } same as this
inBuffCapacity = { NONLOCAL } same as this
_ZTVN6pbzip216BZ2StreamScannerE = { ESCAPED NONLOCAL }
derefaddrtmp(12) = { _ZTVN6pbzip216BZ2StreamScannerE }
_2 = { NONLOCAL }
_24 = { NONLOCAL }
derefaddrtmp(15) = { NULL }
derefaddrtmp(16) = { NULL } same as derefaddrtmp(15)
_3 = { NONLOCAL }
_23 = { NONLOCAL }
derefaddrtmp(19) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(20) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(21) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(22) = { NULL } same as derefaddrtmp(15)
_4 = { NONLOCAL }
derefaddrtmp(24) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(25) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(26) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(27) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(28) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(29) = { NONLOCAL } same as this
derefaddrtmp(30) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(31) = { NULL } same as derefaddrtmp(15)
derefaddrtmp(32) = { NULL } same as derefaddrtmp(15)
_ZN6pbzip216BZ2StreamScanner4initEim = { }
_5 = { NONLOCAL }
_25 = { ESCAPED NONLOCAL }
_26 = { NONLOCAL }
_ZdlPv = { }
_6 = { NONLOCAL }
_27 = { ESCAPED NONLOCAL } same as _25
_28 = { NONLOCAL }


Alias information for pbzip2::BZ2StreamScanner::BZ2StreamScanner(int, unsigned long)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.30799 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_2, points-to non-local, points-to NULL, points-to vars: { }
_3, points-to non-local, points-to NULL, points-to vars: { }
_4, points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
_6, points-to non-local, points-to NULL, points-to vars: { }
this_8(D), points-to non-local, points-to NULL, points-to vars: { }
_23, points-to non-local, points-to NULL, points-to vars: { }
_24, points-to non-local, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_26, points-to non-local, points-to NULL, points-to vars: { }
_27, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_28, points-to non-local, points-to NULL, points-to vars: { }

pbzip2::BZ2StreamScanner::BZ2StreamScanner(int, unsigned long) (struct BZ2StreamScanner * const this, int hInFile, size_t inBuffCapacity)
{
  struct basic_string * _2;
  struct basic_string * _3;
  struct outBuff * _4;
  struct basic_string * _5;
  struct basic_string * _6;
  unsigned char[16] * _23;
  unsigned char[16] * _24;
  unsigned char * _25;
  const unsigned char[16] * _26;
  unsigned char * _27;
  const unsigned char[16] * _28;

  <bb 2> [100.00%]:
  MEM[(struct  &)this_8(D)] ={v} {CLOBBER};
  this_8(D)->_vptr.BZ2StreamScanner = &MEM[(void *)&_ZTVN6pbzip216BZ2StreamScannerE + 16B];
  _2 = &this_8(D)->_bz2Header;
  MEM[(struct  &)this_8(D) + 16] ={v} {CLOBBER};
  _24 = &MEM[(struct basic_string *)this_8(D) + 16B].D.29808._M_local_buf;
  MEM[(struct  &)this_8(D) + 16] ={v} {CLOBBER};
  MEM[(struct _Alloc_hider *)this_8(D) + 16B]._M_p = _24;
  MEM[(struct basic_string *)this_8(D) + 16B]._M_string_length = 0;
  MEM[(char_type &)this_8(D) + 32] = 0;
  _3 = &this_8(D)->_bz2HeaderZero;
  MEM[(struct  &)this_8(D) + 48] ={v} {CLOBBER};
  _23 = &MEM[(struct basic_string *)this_8(D) + 48B].D.29808._M_local_buf;
  MEM[(struct  &)this_8(D) + 48] ={v} {CLOBBER};
  MEM[(struct _Alloc_hider *)this_8(D) + 48B]._M_p = _23;
  MEM[(struct basic_string *)this_8(D) + 48B]._M_string_length = 0;
  MEM[(char_type &)this_8(D) + 64] = 0;
  this_8(D)->_inBuff = 0B;
  this_8(D)->_inBuffCapacity = 0;
  _4 = &this_8(D)->_outBuff;
  MEM[(struct  &)this_8(D) + 128] ={v} {CLOBBER};
  MEM[(struct outBuff *)this_8(D) + 128B].buf = 0B;
  MEM[(struct outBuff *)this_8(D) + 128B].bufSize = 0;
  MEM[(struct outBuff *)this_8(D) + 128B].blockNumber = 0;
  MEM[(struct outBuff *)this_8(D) + 128B].sequenceNumber = 0;
  MEM[(struct outBuff *)this_8(D) + 128B].inSize = 0;
  MEM[(struct outBuff *)this_8(D) + 128B].isLastInSequence = 1;
  MEM[(struct outBuff *)this_8(D) + 128B].next = 0B;
  this_8(D)->_outBuff.buf = 0B;
  this_8(D)->_outBuff.bufSize = 0;
  pbzip2::BZ2StreamScanner::init (this_8(D), hInFile_18(D), inBuffCapacity_19(D));

  <bb 3> [0.00%]:
  return;

<L0> [100.00%]:
  _5 = &this_8(D)->_bz2HeaderZero;
  _25 = MEM[(const struct basic_string *)this_8(D) + 48B]._M_dataplus._M_p;
  _26 = &MEM[(const struct basic_string *)this_8(D) + 48B].D.29808._M_local_buf;
  if (_25 != _26)
    goto <bb 5>; [57.44%]
  else
    goto <bb 6>; [42.56%]

  <bb 5> [57.44%]:
  operator delete (_25);

  <bb 6> [100.00%]:
  MEM[(struct  &)this_8(D) + 48] ={v} {CLOBBER};
  resx 2

<L1> [100.00%]:
  _6 = &this_8(D)->_bz2Header;
  _27 = MEM[(const struct basic_string *)this_8(D) + 16B]._M_dataplus._M_p;
  _28 = &MEM[(const struct basic_string *)this_8(D) + 16B].D.29808._M_local_buf;
  if (_27 != _28)
    goto <bb 8>; [57.44%]
  else
    goto <bb 9>; [42.56%]

  <bb 8> [57.44%]:
  operator delete (_27);

  <bb 9> [100.00%]:
  MEM[(struct  &)this_8(D) + 16] ={v} {CLOBBER};
  resx 1

}


